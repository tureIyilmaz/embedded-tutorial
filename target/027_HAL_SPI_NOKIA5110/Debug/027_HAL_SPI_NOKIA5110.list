
027_HAL_SPI_NOKIA5110.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bd4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08003d5c  08003d5c  00013d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e94  08003e94  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003e94  08003e94  00013e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e9c  08003e9c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e9c  08003e9c  00013e9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ea0  08003ea0  00013ea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003ea4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000002d0  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002dc  200002dc  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000755a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000017a2  00000000  00000000  00027596  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006d0  00000000  00000000  00028d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000648  00000000  00000000  00029408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ff76  00000000  00000000  00029a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000082a3  00000000  00000000  000499c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c1768  00000000  00000000  00051c69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001133d1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001a50  00000000  00000000  00113424  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003d44 	.word	0x08003d44

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003d44 	.word	0x08003d44

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e0:	f001 fe28 	bl	8002134 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e4:	f000 f81a 	bl	800051c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e8:	f000 f8d8 	bl	800069c <MX_GPIO_Init>
  MX_DMA_Init();
 80004ec:	f000 f8b6 	bl	800065c <MX_DMA_Init>
  MX_SPI2_Init();
 80004f0:	f000 f87e 	bl	80005f0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80004f4:	2201      	movs	r2, #1
 80004f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004fa:	4806      	ldr	r0, [pc, #24]	; (8000514 <main+0x38>)
 80004fc:	f002 fcce 	bl	8002e9c <HAL_GPIO_WritePin>
  nokia5110_Init();
 8000500:	f000 f923 	bl	800074a <nokia5110_Init>
  nokia5110_Clear();
 8000504:	f000 f9fa 	bl	80008fc <nokia5110_Clear>

    /* USER CODE BEGIN 3 */



		  nokia5110_WriteCharacter("you will never walk alone");
 8000508:	4803      	ldr	r0, [pc, #12]	; (8000518 <main+0x3c>)
 800050a:	f000 fa6d 	bl	80009e8 <nokia5110_WriteCharacter>
		  nokia5110_Update();
 800050e:	f000 f96b 	bl	80007e8 <nokia5110_Update>
		  nokia5110_WriteCharacter("you will never walk alone");
 8000512:	e7f9      	b.n	8000508 <main+0x2c>
 8000514:	40020c00 	.word	0x40020c00
 8000518:	08003d5c 	.word	0x08003d5c

0800051c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b094      	sub	sp, #80	; 0x50
 8000520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	f107 0320 	add.w	r3, r7, #32
 8000526:	2230      	movs	r2, #48	; 0x30
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f003 fc02 	bl	8003d34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000530:	f107 030c 	add.w	r3, r7, #12
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
 800053e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000540:	2300      	movs	r3, #0
 8000542:	60bb      	str	r3, [r7, #8]
 8000544:	4b28      	ldr	r3, [pc, #160]	; (80005e8 <SystemClock_Config+0xcc>)
 8000546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000548:	4a27      	ldr	r2, [pc, #156]	; (80005e8 <SystemClock_Config+0xcc>)
 800054a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800054e:	6413      	str	r3, [r2, #64]	; 0x40
 8000550:	4b25      	ldr	r3, [pc, #148]	; (80005e8 <SystemClock_Config+0xcc>)
 8000552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000558:	60bb      	str	r3, [r7, #8]
 800055a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800055c:	2300      	movs	r3, #0
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	4b22      	ldr	r3, [pc, #136]	; (80005ec <SystemClock_Config+0xd0>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a21      	ldr	r2, [pc, #132]	; (80005ec <SystemClock_Config+0xd0>)
 8000566:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800056a:	6013      	str	r3, [r2, #0]
 800056c:	4b1f      	ldr	r3, [pc, #124]	; (80005ec <SystemClock_Config+0xd0>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000574:	607b      	str	r3, [r7, #4]
 8000576:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000578:	2302      	movs	r3, #2
 800057a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800057c:	2301      	movs	r3, #1
 800057e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000580:	2310      	movs	r3, #16
 8000582:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000584:	2302      	movs	r3, #2
 8000586:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000588:	2300      	movs	r3, #0
 800058a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800058c:	2308      	movs	r3, #8
 800058e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000590:	23a8      	movs	r3, #168	; 0xa8
 8000592:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000594:	2302      	movs	r3, #2
 8000596:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000598:	2307      	movs	r3, #7
 800059a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059c:	f107 0320 	add.w	r3, r7, #32
 80005a0:	4618      	mov	r0, r3
 80005a2:	f002 fc95 	bl	8002ed0 <HAL_RCC_OscConfig>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005ac:	f000 f8c8 	bl	8000740 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b0:	230f      	movs	r3, #15
 80005b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b4:	2302      	movs	r3, #2
 80005b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005bc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005c8:	f107 030c 	add.w	r3, r7, #12
 80005cc:	2105      	movs	r1, #5
 80005ce:	4618      	mov	r0, r3
 80005d0:	f002 fef6 	bl	80033c0 <HAL_RCC_ClockConfig>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005da:	f000 f8b1 	bl	8000740 <Error_Handler>
  }
}
 80005de:	bf00      	nop
 80005e0:	3750      	adds	r7, #80	; 0x50
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40023800 	.word	0x40023800
 80005ec:	40007000 	.word	0x40007000

080005f0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80005f4:	4b17      	ldr	r3, [pc, #92]	; (8000654 <MX_SPI2_Init+0x64>)
 80005f6:	4a18      	ldr	r2, [pc, #96]	; (8000658 <MX_SPI2_Init+0x68>)
 80005f8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80005fa:	4b16      	ldr	r3, [pc, #88]	; (8000654 <MX_SPI2_Init+0x64>)
 80005fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000600:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000602:	4b14      	ldr	r3, [pc, #80]	; (8000654 <MX_SPI2_Init+0x64>)
 8000604:	2200      	movs	r2, #0
 8000606:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000608:	4b12      	ldr	r3, [pc, #72]	; (8000654 <MX_SPI2_Init+0x64>)
 800060a:	2200      	movs	r2, #0
 800060c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800060e:	4b11      	ldr	r3, [pc, #68]	; (8000654 <MX_SPI2_Init+0x64>)
 8000610:	2200      	movs	r2, #0
 8000612:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000614:	4b0f      	ldr	r3, [pc, #60]	; (8000654 <MX_SPI2_Init+0x64>)
 8000616:	2200      	movs	r2, #0
 8000618:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800061a:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <MX_SPI2_Init+0x64>)
 800061c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000620:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000622:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <MX_SPI2_Init+0x64>)
 8000624:	2208      	movs	r2, #8
 8000626:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000628:	4b0a      	ldr	r3, [pc, #40]	; (8000654 <MX_SPI2_Init+0x64>)
 800062a:	2200      	movs	r2, #0
 800062c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800062e:	4b09      	ldr	r3, [pc, #36]	; (8000654 <MX_SPI2_Init+0x64>)
 8000630:	2200      	movs	r2, #0
 8000632:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000634:	4b07      	ldr	r3, [pc, #28]	; (8000654 <MX_SPI2_Init+0x64>)
 8000636:	2200      	movs	r2, #0
 8000638:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800063a:	4b06      	ldr	r3, [pc, #24]	; (8000654 <MX_SPI2_Init+0x64>)
 800063c:	220a      	movs	r2, #10
 800063e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000640:	4804      	ldr	r0, [pc, #16]	; (8000654 <MX_SPI2_Init+0x64>)
 8000642:	f003 f8a9 	bl	8003798 <HAL_SPI_Init>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800064c:	f000 f878 	bl	8000740 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000650:	bf00      	nop
 8000652:	bd80      	pop	{r7, pc}
 8000654:	20000028 	.word	0x20000028
 8000658:	40003800 	.word	0x40003800

0800065c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000662:	2300      	movs	r3, #0
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	4b0c      	ldr	r3, [pc, #48]	; (8000698 <MX_DMA_Init+0x3c>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	4a0b      	ldr	r2, [pc, #44]	; (8000698 <MX_DMA_Init+0x3c>)
 800066c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000670:	6313      	str	r3, [r2, #48]	; 0x30
 8000672:	4b09      	ldr	r3, [pc, #36]	; (8000698 <MX_DMA_Init+0x3c>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800067e:	2200      	movs	r2, #0
 8000680:	2100      	movs	r1, #0
 8000682:	200f      	movs	r0, #15
 8000684:	f001 fec7 	bl	8002416 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000688:	200f      	movs	r0, #15
 800068a:	f001 fee0 	bl	800244e <HAL_NVIC_EnableIRQ>

}
 800068e:	bf00      	nop
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40023800 	.word	0x40023800

0800069c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b088      	sub	sp, #32
 80006a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a2:	f107 030c 	add.w	r3, r7, #12
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	605a      	str	r2, [r3, #4]
 80006ac:	609a      	str	r2, [r3, #8]
 80006ae:	60da      	str	r2, [r3, #12]
 80006b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006b2:	2300      	movs	r3, #0
 80006b4:	60bb      	str	r3, [r7, #8]
 80006b6:	4b20      	ldr	r3, [pc, #128]	; (8000738 <MX_GPIO_Init+0x9c>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	4a1f      	ldr	r2, [pc, #124]	; (8000738 <MX_GPIO_Init+0x9c>)
 80006bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006c0:	6313      	str	r3, [r2, #48]	; 0x30
 80006c2:	4b1d      	ldr	r3, [pc, #116]	; (8000738 <MX_GPIO_Init+0x9c>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ca:	60bb      	str	r3, [r7, #8]
 80006cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	607b      	str	r3, [r7, #4]
 80006d2:	4b19      	ldr	r3, [pc, #100]	; (8000738 <MX_GPIO_Init+0x9c>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	4a18      	ldr	r2, [pc, #96]	; (8000738 <MX_GPIO_Init+0x9c>)
 80006d8:	f043 0302 	orr.w	r3, r3, #2
 80006dc:	6313      	str	r3, [r2, #48]	; 0x30
 80006de:	4b16      	ldr	r3, [pc, #88]	; (8000738 <MX_GPIO_Init+0x9c>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	f003 0302 	and.w	r3, r3, #2
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	603b      	str	r3, [r7, #0]
 80006ee:	4b12      	ldr	r3, [pc, #72]	; (8000738 <MX_GPIO_Init+0x9c>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	4a11      	ldr	r2, [pc, #68]	; (8000738 <MX_GPIO_Init+0x9c>)
 80006f4:	f043 0308 	orr.w	r3, r3, #8
 80006f8:	6313      	str	r3, [r2, #48]	; 0x30
 80006fa:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <MX_GPIO_Init+0x9c>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	f003 0308 	and.w	r3, r3, #8
 8000702:	603b      	str	r3, [r7, #0]
 8000704:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RST_Pin|CE_Pin|DC_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 8000706:	2200      	movs	r2, #0
 8000708:	f44f 4107 	mov.w	r1, #34560	; 0x8700
 800070c:	480b      	ldr	r0, [pc, #44]	; (800073c <MX_GPIO_Init+0xa0>)
 800070e:	f002 fbc5 	bl	8002e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RST_Pin CE_Pin DC_Pin PD15 */
  GPIO_InitStruct.Pin = RST_Pin|CE_Pin|DC_Pin|GPIO_PIN_15;
 8000712:	f44f 4307 	mov.w	r3, #34560	; 0x8700
 8000716:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000718:	2301      	movs	r3, #1
 800071a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	2300      	movs	r3, #0
 800071e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000720:	2300      	movs	r3, #0
 8000722:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000724:	f107 030c 	add.w	r3, r7, #12
 8000728:	4619      	mov	r1, r3
 800072a:	4804      	ldr	r0, [pc, #16]	; (800073c <MX_GPIO_Init+0xa0>)
 800072c:	f002 fa1a 	bl	8002b64 <HAL_GPIO_Init>

}
 8000730:	bf00      	nop
 8000732:	3720      	adds	r7, #32
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	40023800 	.word	0x40023800
 800073c:	40020c00 	.word	0x40020c00

08000740 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000744:	b672      	cpsid	i
}
 8000746:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000748:	e7fe      	b.n	8000748 <Error_Handler+0x8>

0800074a <nokia5110_Init>:
#include "nokia5110.h"



bool nokia5110_Init(void)
{
 800074a:	b580      	push	{r7, lr}
 800074c:	af00      	add	r7, sp, #0
	nokia5110_Reset();
 800074e:	f000 f86f 	bl	8000830 <nokia5110_Reset>

	if(!(nokia5110_Write(0x21, 0)))
 8000752:	2100      	movs	r1, #0
 8000754:	2021      	movs	r0, #33	; 0x21
 8000756:	f000 f8ed 	bl	8000934 <nokia5110_Write>
 800075a:	4603      	mov	r3, r0
 800075c:	f083 0301 	eor.w	r3, r3, #1
 8000760:	b2db      	uxtb	r3, r3
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <nokia5110_Init+0x20>
	{
		return false;
 8000766:	2300      	movs	r3, #0
 8000768:	e03c      	b.n	80007e4 <nokia5110_Init+0x9a>
	}
	if(!(nokia5110_Write(0xC0, 0)))
 800076a:	2100      	movs	r1, #0
 800076c:	20c0      	movs	r0, #192	; 0xc0
 800076e:	f000 f8e1 	bl	8000934 <nokia5110_Write>
 8000772:	4603      	mov	r3, r0
 8000774:	f083 0301 	eor.w	r3, r3, #1
 8000778:	b2db      	uxtb	r3, r3
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <nokia5110_Init+0x38>
	{
		return false;
 800077e:	2300      	movs	r3, #0
 8000780:	e030      	b.n	80007e4 <nokia5110_Init+0x9a>
	}
	if(!(nokia5110_Write(0x07, 0)))
 8000782:	2100      	movs	r1, #0
 8000784:	2007      	movs	r0, #7
 8000786:	f000 f8d5 	bl	8000934 <nokia5110_Write>
 800078a:	4603      	mov	r3, r0
 800078c:	f083 0301 	eor.w	r3, r3, #1
 8000790:	b2db      	uxtb	r3, r3
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <nokia5110_Init+0x50>
	{
		return false;
 8000796:	2300      	movs	r3, #0
 8000798:	e024      	b.n	80007e4 <nokia5110_Init+0x9a>
	}
	if(!(nokia5110_Write(0x13, 0)))
 800079a:	2100      	movs	r1, #0
 800079c:	2013      	movs	r0, #19
 800079e:	f000 f8c9 	bl	8000934 <nokia5110_Write>
 80007a2:	4603      	mov	r3, r0
 80007a4:	f083 0301 	eor.w	r3, r3, #1
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <nokia5110_Init+0x68>
	{
		return false;
 80007ae:	2300      	movs	r3, #0
 80007b0:	e018      	b.n	80007e4 <nokia5110_Init+0x9a>
	}
	if(!(nokia5110_Write(0x20, 0)))
 80007b2:	2100      	movs	r1, #0
 80007b4:	2020      	movs	r0, #32
 80007b6:	f000 f8bd 	bl	8000934 <nokia5110_Write>
 80007ba:	4603      	mov	r3, r0
 80007bc:	f083 0301 	eor.w	r3, r3, #1
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <nokia5110_Init+0x80>
	{
		return false;
 80007c6:	2300      	movs	r3, #0
 80007c8:	e00c      	b.n	80007e4 <nokia5110_Init+0x9a>
	}
	if(!(nokia5110_Write(0x0C, 0)))
 80007ca:	2100      	movs	r1, #0
 80007cc:	200c      	movs	r0, #12
 80007ce:	f000 f8b1 	bl	8000934 <nokia5110_Write>
 80007d2:	4603      	mov	r3, r0
 80007d4:	f083 0301 	eor.w	r3, r3, #1
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <nokia5110_Init+0x98>
	{
		return false;
 80007de:	2300      	movs	r3, #0
 80007e0:	e000      	b.n	80007e4 <nokia5110_Init+0x9a>
	}

	return true;
 80007e2:	2301      	movs	r3, #1
}
 80007e4:	4618      	mov	r0, r3
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <nokia5110_Update>:

bool nokia5110_Update(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0

	if(!(nokia5110_Write(0x80, 0))) // move to x = 0
 80007ec:	2100      	movs	r1, #0
 80007ee:	2080      	movs	r0, #128	; 0x80
 80007f0:	f000 f8a0 	bl	8000934 <nokia5110_Write>
 80007f4:	4603      	mov	r3, r0
 80007f6:	f083 0301 	eor.w	r3, r3, #1
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <nokia5110_Update+0x1c>
	{
		return false;
 8000800:	2300      	movs	r3, #0
 8000802:	e011      	b.n	8000828 <nokia5110_Update+0x40>
	}

	if(!(nokia5110_Write(0x40, 0))) // move to y = 0
 8000804:	2100      	movs	r1, #0
 8000806:	2040      	movs	r0, #64	; 0x40
 8000808:	f000 f894 	bl	8000934 <nokia5110_Write>
 800080c:	4603      	mov	r3, r0
 800080e:	f083 0301 	eor.w	r3, r3, #1
 8000812:	b2db      	uxtb	r3, r3
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <nokia5110_Update+0x34>
	{
		return false;
 8000818:	2300      	movs	r3, #0
 800081a:	e005      	b.n	8000828 <nokia5110_Update+0x40>
	}

	nokia_bufferWrite(frameBuff, 504);
 800081c:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 8000820:	4802      	ldr	r0, [pc, #8]	; (800082c <nokia5110_Update+0x44>)
 8000822:	f000 f8c1 	bl	80009a8 <nokia_bufferWrite>

	return true;
 8000826:	2301      	movs	r3, #1
}
 8000828:	4618      	mov	r0, r3
 800082a:	bd80      	pop	{r7, pc}
 800082c:	200000e0 	.word	0x200000e0

08000830 <nokia5110_Reset>:


void nokia5110_Reset(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET); // reset is low
 8000834:	2200      	movs	r2, #0
 8000836:	f44f 7180 	mov.w	r1, #256	; 0x100
 800083a:	4807      	ldr	r0, [pc, #28]	; (8000858 <nokia5110_Reset+0x28>)
 800083c:	f002 fb2e 	bl	8002e9c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000840:	2064      	movs	r0, #100	; 0x64
 8000842:	f001 fce9 	bl	8002218 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_SET); // reset is high
 8000846:	2201      	movs	r2, #1
 8000848:	f44f 7180 	mov.w	r1, #256	; 0x100
 800084c:	4802      	ldr	r0, [pc, #8]	; (8000858 <nokia5110_Reset+0x28>)
 800084e:	f002 fb25 	bl	8002e9c <HAL_GPIO_WritePin>
}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	40020c00 	.word	0x40020c00

0800085c <nokia5110_SetPixel>:


void nokia5110_SetPixel(uint8_t x, uint8_t y, bool set)
{
 800085c:	b480      	push	{r7}
 800085e:	b085      	sub	sp, #20
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	71fb      	strb	r3, [r7, #7]
 8000866:	460b      	mov	r3, r1
 8000868:	71bb      	strb	r3, [r7, #6]
 800086a:	4613      	mov	r3, r2
 800086c:	717b      	strb	r3, [r7, #5]
	uint8_t Bi;
	uint16_t By;

	if(x  < 0 || x >= 84 || y < 0 || y >= 84 )
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	2b53      	cmp	r3, #83	; 0x53
 8000872:	d83b      	bhi.n	80008ec <nokia5110_SetPixel+0x90>
 8000874:	79bb      	ldrb	r3, [r7, #6]
 8000876:	2b53      	cmp	r3, #83	; 0x53
 8000878:	d838      	bhi.n	80008ec <nokia5110_SetPixel+0x90>
		return;


	By = (y / 8) * 84 + x;
 800087a:	79bb      	ldrb	r3, [r7, #6]
 800087c:	08db      	lsrs	r3, r3, #3
 800087e:	b2db      	uxtb	r3, r3
 8000880:	b29b      	uxth	r3, r3
 8000882:	461a      	mov	r2, r3
 8000884:	0052      	lsls	r2, r2, #1
 8000886:	4413      	add	r3, r2
 8000888:	461a      	mov	r2, r3
 800088a:	00d2      	lsls	r2, r2, #3
 800088c:	1ad3      	subs	r3, r2, r3
 800088e:	009b      	lsls	r3, r3, #2
 8000890:	b29a      	uxth	r2, r3
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	b29b      	uxth	r3, r3
 8000896:	4413      	add	r3, r2
 8000898:	81fb      	strh	r3, [r7, #14]
	Bi = y % 8;
 800089a:	79bb      	ldrb	r3, [r7, #6]
 800089c:	f003 0307 	and.w	r3, r3, #7
 80008a0:	737b      	strb	r3, [r7, #13]

	if(set)
 80008a2:	797b      	ldrb	r3, [r7, #5]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d00f      	beq.n	80008c8 <nokia5110_SetPixel+0x6c>
	{
		frameBuff[By] |= (1 << Bi);
 80008a8:	89fb      	ldrh	r3, [r7, #14]
 80008aa:	4a13      	ldr	r2, [pc, #76]	; (80008f8 <nokia5110_SetPixel+0x9c>)
 80008ac:	5cd3      	ldrb	r3, [r2, r3]
 80008ae:	b25a      	sxtb	r2, r3
 80008b0:	7b7b      	ldrb	r3, [r7, #13]
 80008b2:	2101      	movs	r1, #1
 80008b4:	fa01 f303 	lsl.w	r3, r1, r3
 80008b8:	b25b      	sxtb	r3, r3
 80008ba:	4313      	orrs	r3, r2
 80008bc:	b25a      	sxtb	r2, r3
 80008be:	89fb      	ldrh	r3, [r7, #14]
 80008c0:	b2d1      	uxtb	r1, r2
 80008c2:	4a0d      	ldr	r2, [pc, #52]	; (80008f8 <nokia5110_SetPixel+0x9c>)
 80008c4:	54d1      	strb	r1, [r2, r3]
 80008c6:	e012      	b.n	80008ee <nokia5110_SetPixel+0x92>
	}
	else
	{
		frameBuff[By] &= ~(1 << Bi);
 80008c8:	89fb      	ldrh	r3, [r7, #14]
 80008ca:	4a0b      	ldr	r2, [pc, #44]	; (80008f8 <nokia5110_SetPixel+0x9c>)
 80008cc:	5cd3      	ldrb	r3, [r2, r3]
 80008ce:	b25a      	sxtb	r2, r3
 80008d0:	7b7b      	ldrb	r3, [r7, #13]
 80008d2:	2101      	movs	r1, #1
 80008d4:	fa01 f303 	lsl.w	r3, r1, r3
 80008d8:	b25b      	sxtb	r3, r3
 80008da:	43db      	mvns	r3, r3
 80008dc:	b25b      	sxtb	r3, r3
 80008de:	4013      	ands	r3, r2
 80008e0:	b25a      	sxtb	r2, r3
 80008e2:	89fb      	ldrh	r3, [r7, #14]
 80008e4:	b2d1      	uxtb	r1, r2
 80008e6:	4a04      	ldr	r2, [pc, #16]	; (80008f8 <nokia5110_SetPixel+0x9c>)
 80008e8:	54d1      	strb	r1, [r2, r3]
 80008ea:	e000      	b.n	80008ee <nokia5110_SetPixel+0x92>
		return;
 80008ec:	bf00      	nop
	}
}
 80008ee:	3714      	adds	r7, #20
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr
 80008f8:	200000e0 	.word	0x200000e0

080008fc <nokia5110_Clear>:


void nokia5110_Clear(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
	for(int i = 0; i < 504; i++)
 8000902:	2300      	movs	r3, #0
 8000904:	607b      	str	r3, [r7, #4]
 8000906:	e007      	b.n	8000918 <nokia5110_Clear+0x1c>
	{
		frameBuff[i] = 0x00;
 8000908:	4a09      	ldr	r2, [pc, #36]	; (8000930 <nokia5110_Clear+0x34>)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	4413      	add	r3, r2
 800090e:	2200      	movs	r2, #0
 8000910:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 504; i++)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	3301      	adds	r3, #1
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 800091e:	dbf3      	blt.n	8000908 <nokia5110_Clear+0xc>
	}
}
 8000920:	bf00      	nop
 8000922:	bf00      	nop
 8000924:	370c      	adds	r7, #12
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	200000e0 	.word	0x200000e0

08000934 <nokia5110_Write>:




bool nokia5110_Write(uint8_t data, uint8_t mode)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	460a      	mov	r2, r1
 800093e:	71fb      	strb	r3, [r7, #7]
 8000940:	4613      	mov	r3, r2
 8000942:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET); // CE is low
 8000944:	2200      	movs	r2, #0
 8000946:	f44f 7100 	mov.w	r1, #512	; 0x200
 800094a:	4815      	ldr	r0, [pc, #84]	; (80009a0 <nokia5110_Write+0x6c>)
 800094c:	f002 faa6 	bl	8002e9c <HAL_GPIO_WritePin>

	if( mode == 0)
 8000950:	79bb      	ldrb	r3, [r7, #6]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d106      	bne.n	8000964 <nokia5110_Write+0x30>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET); // DC is low
 8000956:	2200      	movs	r2, #0
 8000958:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800095c:	4810      	ldr	r0, [pc, #64]	; (80009a0 <nokia5110_Write+0x6c>)
 800095e:	f002 fa9d 	bl	8002e9c <HAL_GPIO_WritePin>
 8000962:	e011      	b.n	8000988 <nokia5110_Write+0x54>
	}
	else if( mode == 1)
 8000964:	79bb      	ldrb	r3, [r7, #6]
 8000966:	2b01      	cmp	r3, #1
 8000968:	d106      	bne.n	8000978 <nokia5110_Write+0x44>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET); // DC is high
 800096a:	2201      	movs	r2, #1
 800096c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000970:	480b      	ldr	r0, [pc, #44]	; (80009a0 <nokia5110_Write+0x6c>)
 8000972:	f002 fa93 	bl	8002e9c <HAL_GPIO_WritePin>
 8000976:	e007      	b.n	8000988 <nokia5110_Write+0x54>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET); // CE is high
 8000978:	2201      	movs	r2, #1
 800097a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800097e:	4808      	ldr	r0, [pc, #32]	; (80009a0 <nokia5110_Write+0x6c>)
 8000980:	f002 fa8c 	bl	8002e9c <HAL_GPIO_WritePin>
		return false;
 8000984:	2300      	movs	r3, #0
 8000986:	e006      	b.n	8000996 <nokia5110_Write+0x62>
	}

	HAL_SPI_Transmit_DMA(&hspi2, &data, 1);
 8000988:	1dfb      	adds	r3, r7, #7
 800098a:	2201      	movs	r2, #1
 800098c:	4619      	mov	r1, r3
 800098e:	4805      	ldr	r0, [pc, #20]	; (80009a4 <nokia5110_Write+0x70>)
 8000990:	f002 ff8c 	bl	80038ac <HAL_SPI_Transmit_DMA>


	return true;
 8000994:	2301      	movs	r3, #1
}
 8000996:	4618      	mov	r0, r3
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40020c00 	.word	0x40020c00
 80009a4:	20000028 	.word	0x20000028

080009a8 <nokia_bufferWrite>:


void nokia_bufferWrite(uint8_t* data, uint16_t length)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
 80009b0:	460b      	mov	r3, r1
 80009b2:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET); // CE is low
 80009b4:	2200      	movs	r2, #0
 80009b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009ba:	4809      	ldr	r0, [pc, #36]	; (80009e0 <nokia_bufferWrite+0x38>)
 80009bc:	f002 fa6e 	bl	8002e9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET); // DC is high
 80009c0:	2201      	movs	r2, #1
 80009c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009c6:	4806      	ldr	r0, [pc, #24]	; (80009e0 <nokia_bufferWrite+0x38>)
 80009c8:	f002 fa68 	bl	8002e9c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(&hspi2, data, length);
 80009cc:	887b      	ldrh	r3, [r7, #2]
 80009ce:	461a      	mov	r2, r3
 80009d0:	6879      	ldr	r1, [r7, #4]
 80009d2:	4804      	ldr	r0, [pc, #16]	; (80009e4 <nokia_bufferWrite+0x3c>)
 80009d4:	f002 ff6a 	bl	80038ac <HAL_SPI_Transmit_DMA>

}
 80009d8:	bf00      	nop
 80009da:	3708      	adds	r7, #8
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	40020c00 	.word	0x40020c00
 80009e4:	20000028 	.word	0x20000028

080009e8 <nokia5110_WriteCharacter>:


void nokia5110_WriteCharacter(char word[])
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b086      	sub	sp, #24
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
    uint8_t x = 0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	75fb      	strb	r3, [r7, #23]
    uint8_t y = 0;
 80009f4:	2300      	movs	r3, #0
 80009f6:	75bb      	strb	r3, [r7, #22]

	for(int i = 0; i< strlen(word); i++)
 80009f8:	2300      	movs	r3, #0
 80009fa:	613b      	str	r3, [r7, #16]
 80009fc:	f001 ba79 	b.w	8001ef2 <nokia5110_WriteCharacter+0x150a>
	{
		char character = word[i];
 8000a00:	693b      	ldr	r3, [r7, #16]
 8000a02:	687a      	ldr	r2, [r7, #4]
 8000a04:	4413      	add	r3, r2
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	73fb      	strb	r3, [r7, #15]
		character = toupper(character);
 8000a0a:	7bfb      	ldrb	r3, [r7, #15]
 8000a0c:	73bb      	strb	r3, [r7, #14]
 8000a0e:	7bbb      	ldrb	r3, [r7, #14]
 8000a10:	3301      	adds	r3, #1
 8000a12:	4ac2      	ldr	r2, [pc, #776]	; (8000d1c <nokia5110_WriteCharacter+0x334>)
 8000a14:	4413      	add	r3, r2
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	f003 0303 	and.w	r3, r3, #3
 8000a1c:	2b02      	cmp	r3, #2
 8000a1e:	d102      	bne.n	8000a26 <nokia5110_WriteCharacter+0x3e>
 8000a20:	7bbb      	ldrb	r3, [r7, #14]
 8000a22:	3b20      	subs	r3, #32
 8000a24:	e000      	b.n	8000a28 <nokia5110_WriteCharacter+0x40>
 8000a26:	7bbb      	ldrb	r3, [r7, #14]
 8000a28:	73fb      	strb	r3, [r7, #15]

	switch(character)
 8000a2a:	7bfb      	ldrb	r3, [r7, #15]
 8000a2c:	3b41      	subs	r3, #65	; 0x41
 8000a2e:	2b19      	cmp	r3, #25
 8000a30:	f201 824d 	bhi.w	8001ece <nokia5110_WriteCharacter+0x14e6>
 8000a34:	a201      	add	r2, pc, #4	; (adr r2, 8000a3c <nokia5110_WriteCharacter+0x54>)
 8000a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a3a:	bf00      	nop
 8000a3c:	08000aa5 	.word	0x08000aa5
 8000a40:	08000b81 	.word	0x08000b81
 8000a44:	08000c7d 	.word	0x08000c7d
 8000a48:	08000d21 	.word	0x08000d21
 8000a4c:	08000df5 	.word	0x08000df5
 8000a50:	08000ed9 	.word	0x08000ed9
 8000a54:	08000f81 	.word	0x08000f81
 8000a58:	0800105d 	.word	0x0800105d
 8000a5c:	08001135 	.word	0x08001135
 8000a60:	08001199 	.word	0x08001199
 8000a64:	0800124d 	.word	0x0800124d
 8000a68:	080012fd 	.word	0x080012fd
 8000a6c:	08001389 	.word	0x08001389
 8000a70:	0800149d 	.word	0x0800149d
 8000a74:	08001589 	.word	0x08001589
 8000a78:	08001665 	.word	0x08001665
 8000a7c:	0800170f 	.word	0x0800170f
 8000a80:	080017fd 	.word	0x080017fd
 8000a84:	080018cf 	.word	0x080018cf
 8000a88:	080019a9 	.word	0x080019a9
 8000a8c:	08001a47 	.word	0x08001a47
 8000a90:	08001af9 	.word	0x08001af9
 8000a94:	08001bd3 	.word	0x08001bd3
 8000a98:	08001cd1 	.word	0x08001cd1
 8000a9c:	08001d77 	.word	0x08001d77
 8000aa0:	08001df9 	.word	0x08001df9
	{
	case 'A':
	{
		nokia5110_SetPixel(x + 1, y + 0, 1);
 8000aa4:	7dfb      	ldrb	r3, [r7, #23]
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	7db9      	ldrb	r1, [r7, #22]
 8000aac:	2201      	movs	r2, #1
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f7ff fed4 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 0, 1);
 8000ab4:	7dfb      	ldrb	r3, [r7, #23]
 8000ab6:	3302      	adds	r3, #2
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	7db9      	ldrb	r1, [r7, #22]
 8000abc:	2201      	movs	r2, #1
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f7ff fecc 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 1, 1);
 8000ac4:	7dbb      	ldrb	r3, [r7, #22]
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	b2d9      	uxtb	r1, r3
 8000aca:	7dfb      	ldrb	r3, [r7, #23]
 8000acc:	2201      	movs	r2, #1
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f7ff fec4 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 1, 1);
 8000ad4:	7dfb      	ldrb	r3, [r7, #23]
 8000ad6:	3303      	adds	r3, #3
 8000ad8:	b2d8      	uxtb	r0, r3
 8000ada:	7dbb      	ldrb	r3, [r7, #22]
 8000adc:	3301      	adds	r3, #1
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	f7ff feba 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 2, 1);
 8000ae8:	7dbb      	ldrb	r3, [r7, #22]
 8000aea:	3302      	adds	r3, #2
 8000aec:	b2d9      	uxtb	r1, r3
 8000aee:	7dfb      	ldrb	r3, [r7, #23]
 8000af0:	2201      	movs	r2, #1
 8000af2:	4618      	mov	r0, r3
 8000af4:	f7ff feb2 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 1, y + 2, 1);
 8000af8:	7dfb      	ldrb	r3, [r7, #23]
 8000afa:	3301      	adds	r3, #1
 8000afc:	b2d8      	uxtb	r0, r3
 8000afe:	7dbb      	ldrb	r3, [r7, #22]
 8000b00:	3302      	adds	r3, #2
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	2201      	movs	r2, #1
 8000b06:	4619      	mov	r1, r3
 8000b08:	f7ff fea8 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 2, 1);
 8000b0c:	7dfb      	ldrb	r3, [r7, #23]
 8000b0e:	3302      	adds	r3, #2
 8000b10:	b2d8      	uxtb	r0, r3
 8000b12:	7dbb      	ldrb	r3, [r7, #22]
 8000b14:	3302      	adds	r3, #2
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	2201      	movs	r2, #1
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	f7ff fe9e 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 2, 1);
 8000b20:	7dfb      	ldrb	r3, [r7, #23]
 8000b22:	3303      	adds	r3, #3
 8000b24:	b2d8      	uxtb	r0, r3
 8000b26:	7dbb      	ldrb	r3, [r7, #22]
 8000b28:	3302      	adds	r3, #2
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	4619      	mov	r1, r3
 8000b30:	f7ff fe94 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 3, 1);
 8000b34:	7dbb      	ldrb	r3, [r7, #22]
 8000b36:	3303      	adds	r3, #3
 8000b38:	b2d9      	uxtb	r1, r3
 8000b3a:	7dfb      	ldrb	r3, [r7, #23]
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff fe8c 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 3, 1);
 8000b44:	7dfb      	ldrb	r3, [r7, #23]
 8000b46:	3303      	adds	r3, #3
 8000b48:	b2d8      	uxtb	r0, r3
 8000b4a:	7dbb      	ldrb	r3, [r7, #22]
 8000b4c:	3303      	adds	r3, #3
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	2201      	movs	r2, #1
 8000b52:	4619      	mov	r1, r3
 8000b54:	f7ff fe82 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 4, 1);
 8000b58:	7dbb      	ldrb	r3, [r7, #22]
 8000b5a:	3304      	adds	r3, #4
 8000b5c:	b2d9      	uxtb	r1, r3
 8000b5e:	7dfb      	ldrb	r3, [r7, #23]
 8000b60:	2201      	movs	r2, #1
 8000b62:	4618      	mov	r0, r3
 8000b64:	f7ff fe7a 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 4, 1);
 8000b68:	7dfb      	ldrb	r3, [r7, #23]
 8000b6a:	3303      	adds	r3, #3
 8000b6c:	b2d8      	uxtb	r0, r3
 8000b6e:	7dbb      	ldrb	r3, [r7, #22]
 8000b70:	3304      	adds	r3, #4
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	2201      	movs	r2, #1
 8000b76:	4619      	mov	r1, r3
 8000b78:	f7ff fe70 	bl	800085c <nokia5110_SetPixel>
		break;
 8000b7c:	f001 b9a8 	b.w	8001ed0 <nokia5110_WriteCharacter+0x14e8>

	}
	case 'B':
	{
		nokia5110_SetPixel(x + 0, y + 0, 1);
 8000b80:	7db9      	ldrb	r1, [r7, #22]
 8000b82:	7dfb      	ldrb	r3, [r7, #23]
 8000b84:	2201      	movs	r2, #1
 8000b86:	4618      	mov	r0, r3
 8000b88:	f7ff fe68 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 1, y + 0, 1);
 8000b8c:	7dfb      	ldrb	r3, [r7, #23]
 8000b8e:	3301      	adds	r3, #1
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	7db9      	ldrb	r1, [r7, #22]
 8000b94:	2201      	movs	r2, #1
 8000b96:	4618      	mov	r0, r3
 8000b98:	f7ff fe60 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 0, 1);
 8000b9c:	7dfb      	ldrb	r3, [r7, #23]
 8000b9e:	3302      	adds	r3, #2
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	7db9      	ldrb	r1, [r7, #22]
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f7ff fe58 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 1, 1);
 8000bac:	7dbb      	ldrb	r3, [r7, #22]
 8000bae:	3301      	adds	r3, #1
 8000bb0:	b2d9      	uxtb	r1, r3
 8000bb2:	7dfb      	ldrb	r3, [r7, #23]
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f7ff fe50 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 1, 1);
 8000bbc:	7dfb      	ldrb	r3, [r7, #23]
 8000bbe:	3303      	adds	r3, #3
 8000bc0:	b2d8      	uxtb	r0, r3
 8000bc2:	7dbb      	ldrb	r3, [r7, #22]
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	2201      	movs	r2, #1
 8000bca:	4619      	mov	r1, r3
 8000bcc:	f7ff fe46 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 2, 1);
 8000bd0:	7dbb      	ldrb	r3, [r7, #22]
 8000bd2:	3302      	adds	r3, #2
 8000bd4:	b2d9      	uxtb	r1, r3
 8000bd6:	7dfb      	ldrb	r3, [r7, #23]
 8000bd8:	2201      	movs	r2, #1
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f7ff fe3e 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 1, y + 2, 1);
 8000be0:	7dfb      	ldrb	r3, [r7, #23]
 8000be2:	3301      	adds	r3, #1
 8000be4:	b2d8      	uxtb	r0, r3
 8000be6:	7dbb      	ldrb	r3, [r7, #22]
 8000be8:	3302      	adds	r3, #2
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	2201      	movs	r2, #1
 8000bee:	4619      	mov	r1, r3
 8000bf0:	f7ff fe34 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 2, 1);
 8000bf4:	7dfb      	ldrb	r3, [r7, #23]
 8000bf6:	3302      	adds	r3, #2
 8000bf8:	b2d8      	uxtb	r0, r3
 8000bfa:	7dbb      	ldrb	r3, [r7, #22]
 8000bfc:	3302      	adds	r3, #2
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	2201      	movs	r2, #1
 8000c02:	4619      	mov	r1, r3
 8000c04:	f7ff fe2a 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 2, 1);
 8000c08:	7dfb      	ldrb	r3, [r7, #23]
 8000c0a:	3303      	adds	r3, #3
 8000c0c:	b2d8      	uxtb	r0, r3
 8000c0e:	7dbb      	ldrb	r3, [r7, #22]
 8000c10:	3302      	adds	r3, #2
 8000c12:	b2db      	uxtb	r3, r3
 8000c14:	2201      	movs	r2, #1
 8000c16:	4619      	mov	r1, r3
 8000c18:	f7ff fe20 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 3, 1);
 8000c1c:	7dbb      	ldrb	r3, [r7, #22]
 8000c1e:	3303      	adds	r3, #3
 8000c20:	b2d9      	uxtb	r1, r3
 8000c22:	7dfb      	ldrb	r3, [r7, #23]
 8000c24:	2201      	movs	r2, #1
 8000c26:	4618      	mov	r0, r3
 8000c28:	f7ff fe18 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 3, 1);
 8000c2c:	7dfb      	ldrb	r3, [r7, #23]
 8000c2e:	3303      	adds	r3, #3
 8000c30:	b2d8      	uxtb	r0, r3
 8000c32:	7dbb      	ldrb	r3, [r7, #22]
 8000c34:	3303      	adds	r3, #3
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	2201      	movs	r2, #1
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	f7ff fe0e 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 4, 1);
 8000c40:	7dbb      	ldrb	r3, [r7, #22]
 8000c42:	3304      	adds	r3, #4
 8000c44:	b2d9      	uxtb	r1, r3
 8000c46:	7dfb      	ldrb	r3, [r7, #23]
 8000c48:	2201      	movs	r2, #1
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff fe06 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 1, y + 4, 1);
 8000c50:	7dfb      	ldrb	r3, [r7, #23]
 8000c52:	3301      	adds	r3, #1
 8000c54:	b2d8      	uxtb	r0, r3
 8000c56:	7dbb      	ldrb	r3, [r7, #22]
 8000c58:	3304      	adds	r3, #4
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	4619      	mov	r1, r3
 8000c60:	f7ff fdfc 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 4, 1);
 8000c64:	7dfb      	ldrb	r3, [r7, #23]
 8000c66:	3302      	adds	r3, #2
 8000c68:	b2d8      	uxtb	r0, r3
 8000c6a:	7dbb      	ldrb	r3, [r7, #22]
 8000c6c:	3304      	adds	r3, #4
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	2201      	movs	r2, #1
 8000c72:	4619      	mov	r1, r3
 8000c74:	f7ff fdf2 	bl	800085c <nokia5110_SetPixel>
		break;
 8000c78:	f001 b92a 	b.w	8001ed0 <nokia5110_WriteCharacter+0x14e8>

	}
	case 'C':
	{
		nokia5110_SetPixel(x + 1, y + 0, 1);
 8000c7c:	7dfb      	ldrb	r3, [r7, #23]
 8000c7e:	3301      	adds	r3, #1
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	7db9      	ldrb	r1, [r7, #22]
 8000c84:	2201      	movs	r2, #1
 8000c86:	4618      	mov	r0, r3
 8000c88:	f7ff fde8 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 0, 1);
 8000c8c:	7dfb      	ldrb	r3, [r7, #23]
 8000c8e:	3302      	adds	r3, #2
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	7db9      	ldrb	r1, [r7, #22]
 8000c94:	2201      	movs	r2, #1
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff fde0 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 0, 1);
 8000c9c:	7dfb      	ldrb	r3, [r7, #23]
 8000c9e:	3303      	adds	r3, #3
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	7db9      	ldrb	r1, [r7, #22]
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f7ff fdd8 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 1, 1);
 8000cac:	7dbb      	ldrb	r3, [r7, #22]
 8000cae:	3301      	adds	r3, #1
 8000cb0:	b2d9      	uxtb	r1, r3
 8000cb2:	7dfb      	ldrb	r3, [r7, #23]
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff fdd0 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 2, 1);
 8000cbc:	7dbb      	ldrb	r3, [r7, #22]
 8000cbe:	3302      	adds	r3, #2
 8000cc0:	b2d9      	uxtb	r1, r3
 8000cc2:	7dfb      	ldrb	r3, [r7, #23]
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f7ff fdc8 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 3, 1);
 8000ccc:	7dbb      	ldrb	r3, [r7, #22]
 8000cce:	3303      	adds	r3, #3
 8000cd0:	b2d9      	uxtb	r1, r3
 8000cd2:	7dfb      	ldrb	r3, [r7, #23]
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff fdc0 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 1, y + 4, 1);
 8000cdc:	7dfb      	ldrb	r3, [r7, #23]
 8000cde:	3301      	adds	r3, #1
 8000ce0:	b2d8      	uxtb	r0, r3
 8000ce2:	7dbb      	ldrb	r3, [r7, #22]
 8000ce4:	3304      	adds	r3, #4
 8000ce6:	b2db      	uxtb	r3, r3
 8000ce8:	2201      	movs	r2, #1
 8000cea:	4619      	mov	r1, r3
 8000cec:	f7ff fdb6 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 4, 1);
 8000cf0:	7dfb      	ldrb	r3, [r7, #23]
 8000cf2:	3302      	adds	r3, #2
 8000cf4:	b2d8      	uxtb	r0, r3
 8000cf6:	7dbb      	ldrb	r3, [r7, #22]
 8000cf8:	3304      	adds	r3, #4
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	4619      	mov	r1, r3
 8000d00:	f7ff fdac 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 4, 1);
 8000d04:	7dfb      	ldrb	r3, [r7, #23]
 8000d06:	3303      	adds	r3, #3
 8000d08:	b2d8      	uxtb	r0, r3
 8000d0a:	7dbb      	ldrb	r3, [r7, #22]
 8000d0c:	3304      	adds	r3, #4
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	2201      	movs	r2, #1
 8000d12:	4619      	mov	r1, r3
 8000d14:	f7ff fda2 	bl	800085c <nokia5110_SetPixel>
		break;
 8000d18:	f001 b8da 	b.w	8001ed0 <nokia5110_WriteCharacter+0x14e8>
 8000d1c:	08003d90 	.word	0x08003d90
	}

	case 'D':
	{
		nokia5110_SetPixel(x + 0, y + 0, 1);
 8000d20:	7db9      	ldrb	r1, [r7, #22]
 8000d22:	7dfb      	ldrb	r3, [r7, #23]
 8000d24:	2201      	movs	r2, #1
 8000d26:	4618      	mov	r0, r3
 8000d28:	f7ff fd98 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 1, y + 0, 1);
 8000d2c:	7dfb      	ldrb	r3, [r7, #23]
 8000d2e:	3301      	adds	r3, #1
 8000d30:	b2db      	uxtb	r3, r3
 8000d32:	7db9      	ldrb	r1, [r7, #22]
 8000d34:	2201      	movs	r2, #1
 8000d36:	4618      	mov	r0, r3
 8000d38:	f7ff fd90 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 0, 1);
 8000d3c:	7dfb      	ldrb	r3, [r7, #23]
 8000d3e:	3302      	adds	r3, #2
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	7db9      	ldrb	r1, [r7, #22]
 8000d44:	2201      	movs	r2, #1
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff fd88 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 1, 1);
 8000d4c:	7dbb      	ldrb	r3, [r7, #22]
 8000d4e:	3301      	adds	r3, #1
 8000d50:	b2d9      	uxtb	r1, r3
 8000d52:	7dfb      	ldrb	r3, [r7, #23]
 8000d54:	2201      	movs	r2, #1
 8000d56:	4618      	mov	r0, r3
 8000d58:	f7ff fd80 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 1, 1);
 8000d5c:	7dfb      	ldrb	r3, [r7, #23]
 8000d5e:	3303      	adds	r3, #3
 8000d60:	b2d8      	uxtb	r0, r3
 8000d62:	7dbb      	ldrb	r3, [r7, #22]
 8000d64:	3301      	adds	r3, #1
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	2201      	movs	r2, #1
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	f7ff fd76 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 2, 1);
 8000d70:	7dbb      	ldrb	r3, [r7, #22]
 8000d72:	3302      	adds	r3, #2
 8000d74:	b2d9      	uxtb	r1, r3
 8000d76:	7dfb      	ldrb	r3, [r7, #23]
 8000d78:	2201      	movs	r2, #1
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f7ff fd6e 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 2, 1);
 8000d80:	7dfb      	ldrb	r3, [r7, #23]
 8000d82:	3303      	adds	r3, #3
 8000d84:	b2d8      	uxtb	r0, r3
 8000d86:	7dbb      	ldrb	r3, [r7, #22]
 8000d88:	3302      	adds	r3, #2
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	4619      	mov	r1, r3
 8000d90:	f7ff fd64 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 3, 1);
 8000d94:	7dbb      	ldrb	r3, [r7, #22]
 8000d96:	3303      	adds	r3, #3
 8000d98:	b2d9      	uxtb	r1, r3
 8000d9a:	7dfb      	ldrb	r3, [r7, #23]
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff fd5c 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 3, 1);
 8000da4:	7dfb      	ldrb	r3, [r7, #23]
 8000da6:	3303      	adds	r3, #3
 8000da8:	b2d8      	uxtb	r0, r3
 8000daa:	7dbb      	ldrb	r3, [r7, #22]
 8000dac:	3303      	adds	r3, #3
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	2201      	movs	r2, #1
 8000db2:	4619      	mov	r1, r3
 8000db4:	f7ff fd52 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 4, 1);
 8000db8:	7dbb      	ldrb	r3, [r7, #22]
 8000dba:	3304      	adds	r3, #4
 8000dbc:	b2d9      	uxtb	r1, r3
 8000dbe:	7dfb      	ldrb	r3, [r7, #23]
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f7ff fd4a 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 1, y + 4, 1);
 8000dc8:	7dfb      	ldrb	r3, [r7, #23]
 8000dca:	3301      	adds	r3, #1
 8000dcc:	b2d8      	uxtb	r0, r3
 8000dce:	7dbb      	ldrb	r3, [r7, #22]
 8000dd0:	3304      	adds	r3, #4
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	f7ff fd40 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 4, 1);
 8000ddc:	7dfb      	ldrb	r3, [r7, #23]
 8000dde:	3302      	adds	r3, #2
 8000de0:	b2d8      	uxtb	r0, r3
 8000de2:	7dbb      	ldrb	r3, [r7, #22]
 8000de4:	3304      	adds	r3, #4
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	2201      	movs	r2, #1
 8000dea:	4619      	mov	r1, r3
 8000dec:	f7ff fd36 	bl	800085c <nokia5110_SetPixel>
		break;
 8000df0:	f001 b86e 	b.w	8001ed0 <nokia5110_WriteCharacter+0x14e8>
	}
	case 'E':
	{
		nokia5110_SetPixel(x + 0, y + 0, 1);
 8000df4:	7db9      	ldrb	r1, [r7, #22]
 8000df6:	7dfb      	ldrb	r3, [r7, #23]
 8000df8:	2201      	movs	r2, #1
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff fd2e 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 1, y + 0, 1);
 8000e00:	7dfb      	ldrb	r3, [r7, #23]
 8000e02:	3301      	adds	r3, #1
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	7db9      	ldrb	r1, [r7, #22]
 8000e08:	2201      	movs	r2, #1
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f7ff fd26 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 0, 1);
 8000e10:	7dfb      	ldrb	r3, [r7, #23]
 8000e12:	3302      	adds	r3, #2
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	7db9      	ldrb	r1, [r7, #22]
 8000e18:	2201      	movs	r2, #1
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f7ff fd1e 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 0, 1);
 8000e20:	7dfb      	ldrb	r3, [r7, #23]
 8000e22:	3303      	adds	r3, #3
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	7db9      	ldrb	r1, [r7, #22]
 8000e28:	2201      	movs	r2, #1
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f7ff fd16 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 1, 1);
 8000e30:	7dbb      	ldrb	r3, [r7, #22]
 8000e32:	3301      	adds	r3, #1
 8000e34:	b2d9      	uxtb	r1, r3
 8000e36:	7dfb      	ldrb	r3, [r7, #23]
 8000e38:	2201      	movs	r2, #1
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff fd0e 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 2, 1);
 8000e40:	7dbb      	ldrb	r3, [r7, #22]
 8000e42:	3302      	adds	r3, #2
 8000e44:	b2d9      	uxtb	r1, r3
 8000e46:	7dfb      	ldrb	r3, [r7, #23]
 8000e48:	2201      	movs	r2, #1
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff fd06 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 1, y + 2, 1);
 8000e50:	7dfb      	ldrb	r3, [r7, #23]
 8000e52:	3301      	adds	r3, #1
 8000e54:	b2d8      	uxtb	r0, r3
 8000e56:	7dbb      	ldrb	r3, [r7, #22]
 8000e58:	3302      	adds	r3, #2
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	4619      	mov	r1, r3
 8000e60:	f7ff fcfc 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 2, 1);
 8000e64:	7dfb      	ldrb	r3, [r7, #23]
 8000e66:	3302      	adds	r3, #2
 8000e68:	b2d8      	uxtb	r0, r3
 8000e6a:	7dbb      	ldrb	r3, [r7, #22]
 8000e6c:	3302      	adds	r3, #2
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	2201      	movs	r2, #1
 8000e72:	4619      	mov	r1, r3
 8000e74:	f7ff fcf2 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 3, 1);
 8000e78:	7dbb      	ldrb	r3, [r7, #22]
 8000e7a:	3303      	adds	r3, #3
 8000e7c:	b2d9      	uxtb	r1, r3
 8000e7e:	7dfb      	ldrb	r3, [r7, #23]
 8000e80:	2201      	movs	r2, #1
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff fcea 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 4, 1);
 8000e88:	7dbb      	ldrb	r3, [r7, #22]
 8000e8a:	3304      	adds	r3, #4
 8000e8c:	b2d9      	uxtb	r1, r3
 8000e8e:	7dfb      	ldrb	r3, [r7, #23]
 8000e90:	2201      	movs	r2, #1
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff fce2 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 1, y + 4, 1);
 8000e98:	7dfb      	ldrb	r3, [r7, #23]
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	b2d8      	uxtb	r0, r3
 8000e9e:	7dbb      	ldrb	r3, [r7, #22]
 8000ea0:	3304      	adds	r3, #4
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	f7ff fcd8 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 4, 1);
 8000eac:	7dfb      	ldrb	r3, [r7, #23]
 8000eae:	3302      	adds	r3, #2
 8000eb0:	b2d8      	uxtb	r0, r3
 8000eb2:	7dbb      	ldrb	r3, [r7, #22]
 8000eb4:	3304      	adds	r3, #4
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	2201      	movs	r2, #1
 8000eba:	4619      	mov	r1, r3
 8000ebc:	f7ff fcce 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 4, 1);
 8000ec0:	7dfb      	ldrb	r3, [r7, #23]
 8000ec2:	3303      	adds	r3, #3
 8000ec4:	b2d8      	uxtb	r0, r3
 8000ec6:	7dbb      	ldrb	r3, [r7, #22]
 8000ec8:	3304      	adds	r3, #4
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	2201      	movs	r2, #1
 8000ece:	4619      	mov	r1, r3
 8000ed0:	f7ff fcc4 	bl	800085c <nokia5110_SetPixel>
		break;
 8000ed4:	f000 bffc 	b.w	8001ed0 <nokia5110_WriteCharacter+0x14e8>
	}
	case 'F':
	{
		nokia5110_SetPixel(x + 0, y + 0, 1);
 8000ed8:	7db9      	ldrb	r1, [r7, #22]
 8000eda:	7dfb      	ldrb	r3, [r7, #23]
 8000edc:	2201      	movs	r2, #1
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff fcbc 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 1, 1);
 8000ee4:	7dbb      	ldrb	r3, [r7, #22]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	b2d9      	uxtb	r1, r3
 8000eea:	7dfb      	ldrb	r3, [r7, #23]
 8000eec:	2201      	movs	r2, #1
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f7ff fcb4 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 2, 1);
 8000ef4:	7dbb      	ldrb	r3, [r7, #22]
 8000ef6:	3302      	adds	r3, #2
 8000ef8:	b2d9      	uxtb	r1, r3
 8000efa:	7dfb      	ldrb	r3, [r7, #23]
 8000efc:	2201      	movs	r2, #1
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff fcac 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 3, 1);
 8000f04:	7dbb      	ldrb	r3, [r7, #22]
 8000f06:	3303      	adds	r3, #3
 8000f08:	b2d9      	uxtb	r1, r3
 8000f0a:	7dfb      	ldrb	r3, [r7, #23]
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff fca4 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 4, 1);
 8000f14:	7dbb      	ldrb	r3, [r7, #22]
 8000f16:	3304      	adds	r3, #4
 8000f18:	b2d9      	uxtb	r1, r3
 8000f1a:	7dfb      	ldrb	r3, [r7, #23]
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff fc9c 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 1, y + 0, 1);
 8000f24:	7dfb      	ldrb	r3, [r7, #23]
 8000f26:	3301      	adds	r3, #1
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	7db9      	ldrb	r1, [r7, #22]
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff fc94 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 0, 1);
 8000f34:	7dfb      	ldrb	r3, [r7, #23]
 8000f36:	3302      	adds	r3, #2
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	7db9      	ldrb	r1, [r7, #22]
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff fc8c 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 0, 1);
 8000f44:	7dfb      	ldrb	r3, [r7, #23]
 8000f46:	3303      	adds	r3, #3
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	7db9      	ldrb	r1, [r7, #22]
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f7ff fc84 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 1, y + 2, 1);
 8000f54:	7dfb      	ldrb	r3, [r7, #23]
 8000f56:	3301      	adds	r3, #1
 8000f58:	b2d8      	uxtb	r0, r3
 8000f5a:	7dbb      	ldrb	r3, [r7, #22]
 8000f5c:	3302      	adds	r3, #2
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	2201      	movs	r2, #1
 8000f62:	4619      	mov	r1, r3
 8000f64:	f7ff fc7a 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 2, 1);
 8000f68:	7dfb      	ldrb	r3, [r7, #23]
 8000f6a:	3302      	adds	r3, #2
 8000f6c:	b2d8      	uxtb	r0, r3
 8000f6e:	7dbb      	ldrb	r3, [r7, #22]
 8000f70:	3302      	adds	r3, #2
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	2201      	movs	r2, #1
 8000f76:	4619      	mov	r1, r3
 8000f78:	f7ff fc70 	bl	800085c <nokia5110_SetPixel>
		break;
 8000f7c:	f000 bfa8 	b.w	8001ed0 <nokia5110_WriteCharacter+0x14e8>
	}
	case 'G':
	{
		nokia5110_SetPixel(x + 1, y + 0, 1);
 8000f80:	7dfb      	ldrb	r3, [r7, #23]
 8000f82:	3301      	adds	r3, #1
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	7db9      	ldrb	r1, [r7, #22]
 8000f88:	2201      	movs	r2, #1
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff fc66 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 0, 1);
 8000f90:	7dfb      	ldrb	r3, [r7, #23]
 8000f92:	3302      	adds	r3, #2
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	7db9      	ldrb	r1, [r7, #22]
 8000f98:	2201      	movs	r2, #1
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff fc5e 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 0, 1);
 8000fa0:	7dfb      	ldrb	r3, [r7, #23]
 8000fa2:	3303      	adds	r3, #3
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	7db9      	ldrb	r1, [r7, #22]
 8000fa8:	2201      	movs	r2, #1
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff fc56 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 1, 1);
 8000fb0:	7dbb      	ldrb	r3, [r7, #22]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	b2d9      	uxtb	r1, r3
 8000fb6:	7dfb      	ldrb	r3, [r7, #23]
 8000fb8:	2201      	movs	r2, #1
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f7ff fc4e 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 2, 1);
 8000fc0:	7dbb      	ldrb	r3, [r7, #22]
 8000fc2:	3302      	adds	r3, #2
 8000fc4:	b2d9      	uxtb	r1, r3
 8000fc6:	7dfb      	ldrb	r3, [r7, #23]
 8000fc8:	2201      	movs	r2, #1
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff fc46 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 2, 1);
 8000fd0:	7dfb      	ldrb	r3, [r7, #23]
 8000fd2:	3302      	adds	r3, #2
 8000fd4:	b2d8      	uxtb	r0, r3
 8000fd6:	7dbb      	ldrb	r3, [r7, #22]
 8000fd8:	3302      	adds	r3, #2
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	2201      	movs	r2, #1
 8000fde:	4619      	mov	r1, r3
 8000fe0:	f7ff fc3c 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 2, 1);
 8000fe4:	7dfb      	ldrb	r3, [r7, #23]
 8000fe6:	3303      	adds	r3, #3
 8000fe8:	b2d8      	uxtb	r0, r3
 8000fea:	7dbb      	ldrb	r3, [r7, #22]
 8000fec:	3302      	adds	r3, #2
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	f7ff fc32 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 3, 1);
 8000ff8:	7dbb      	ldrb	r3, [r7, #22]
 8000ffa:	3303      	adds	r3, #3
 8000ffc:	b2d9      	uxtb	r1, r3
 8000ffe:	7dfb      	ldrb	r3, [r7, #23]
 8001000:	2201      	movs	r2, #1
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff fc2a 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 3, 1);
 8001008:	7dfb      	ldrb	r3, [r7, #23]
 800100a:	3303      	adds	r3, #3
 800100c:	b2d8      	uxtb	r0, r3
 800100e:	7dbb      	ldrb	r3, [r7, #22]
 8001010:	3303      	adds	r3, #3
 8001012:	b2db      	uxtb	r3, r3
 8001014:	2201      	movs	r2, #1
 8001016:	4619      	mov	r1, r3
 8001018:	f7ff fc20 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 1, y + 4, 1);
 800101c:	7dfb      	ldrb	r3, [r7, #23]
 800101e:	3301      	adds	r3, #1
 8001020:	b2d8      	uxtb	r0, r3
 8001022:	7dbb      	ldrb	r3, [r7, #22]
 8001024:	3304      	adds	r3, #4
 8001026:	b2db      	uxtb	r3, r3
 8001028:	2201      	movs	r2, #1
 800102a:	4619      	mov	r1, r3
 800102c:	f7ff fc16 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 4, 1);
 8001030:	7dfb      	ldrb	r3, [r7, #23]
 8001032:	3302      	adds	r3, #2
 8001034:	b2d8      	uxtb	r0, r3
 8001036:	7dbb      	ldrb	r3, [r7, #22]
 8001038:	3304      	adds	r3, #4
 800103a:	b2db      	uxtb	r3, r3
 800103c:	2201      	movs	r2, #1
 800103e:	4619      	mov	r1, r3
 8001040:	f7ff fc0c 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 4, 1);
 8001044:	7dfb      	ldrb	r3, [r7, #23]
 8001046:	3303      	adds	r3, #3
 8001048:	b2d8      	uxtb	r0, r3
 800104a:	7dbb      	ldrb	r3, [r7, #22]
 800104c:	3304      	adds	r3, #4
 800104e:	b2db      	uxtb	r3, r3
 8001050:	2201      	movs	r2, #1
 8001052:	4619      	mov	r1, r3
 8001054:	f7ff fc02 	bl	800085c <nokia5110_SetPixel>
		break;
 8001058:	f000 bf3a 	b.w	8001ed0 <nokia5110_WriteCharacter+0x14e8>
	}
	case 'H':
	{
		nokia5110_SetPixel(x + 0, y + 0, 1);
 800105c:	7db9      	ldrb	r1, [r7, #22]
 800105e:	7dfb      	ldrb	r3, [r7, #23]
 8001060:	2201      	movs	r2, #1
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff fbfa 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 0, 1);
 8001068:	7dfb      	ldrb	r3, [r7, #23]
 800106a:	3303      	adds	r3, #3
 800106c:	b2db      	uxtb	r3, r3
 800106e:	7db9      	ldrb	r1, [r7, #22]
 8001070:	2201      	movs	r2, #1
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff fbf2 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 1, 1);
 8001078:	7dbb      	ldrb	r3, [r7, #22]
 800107a:	3301      	adds	r3, #1
 800107c:	b2d9      	uxtb	r1, r3
 800107e:	7dfb      	ldrb	r3, [r7, #23]
 8001080:	2201      	movs	r2, #1
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff fbea 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 1, 1);
 8001088:	7dfb      	ldrb	r3, [r7, #23]
 800108a:	3303      	adds	r3, #3
 800108c:	b2d8      	uxtb	r0, r3
 800108e:	7dbb      	ldrb	r3, [r7, #22]
 8001090:	3301      	adds	r3, #1
 8001092:	b2db      	uxtb	r3, r3
 8001094:	2201      	movs	r2, #1
 8001096:	4619      	mov	r1, r3
 8001098:	f7ff fbe0 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 2, 1);
 800109c:	7dbb      	ldrb	r3, [r7, #22]
 800109e:	3302      	adds	r3, #2
 80010a0:	b2d9      	uxtb	r1, r3
 80010a2:	7dfb      	ldrb	r3, [r7, #23]
 80010a4:	2201      	movs	r2, #1
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff fbd8 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 1, y + 2, 1);
 80010ac:	7dfb      	ldrb	r3, [r7, #23]
 80010ae:	3301      	adds	r3, #1
 80010b0:	b2d8      	uxtb	r0, r3
 80010b2:	7dbb      	ldrb	r3, [r7, #22]
 80010b4:	3302      	adds	r3, #2
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	2201      	movs	r2, #1
 80010ba:	4619      	mov	r1, r3
 80010bc:	f7ff fbce 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 2, 1);
 80010c0:	7dfb      	ldrb	r3, [r7, #23]
 80010c2:	3302      	adds	r3, #2
 80010c4:	b2d8      	uxtb	r0, r3
 80010c6:	7dbb      	ldrb	r3, [r7, #22]
 80010c8:	3302      	adds	r3, #2
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	2201      	movs	r2, #1
 80010ce:	4619      	mov	r1, r3
 80010d0:	f7ff fbc4 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 2, 1);
 80010d4:	7dfb      	ldrb	r3, [r7, #23]
 80010d6:	3303      	adds	r3, #3
 80010d8:	b2d8      	uxtb	r0, r3
 80010da:	7dbb      	ldrb	r3, [r7, #22]
 80010dc:	3302      	adds	r3, #2
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	2201      	movs	r2, #1
 80010e2:	4619      	mov	r1, r3
 80010e4:	f7ff fbba 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 3, 1);
 80010e8:	7dbb      	ldrb	r3, [r7, #22]
 80010ea:	3303      	adds	r3, #3
 80010ec:	b2d9      	uxtb	r1, r3
 80010ee:	7dfb      	ldrb	r3, [r7, #23]
 80010f0:	2201      	movs	r2, #1
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff fbb2 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 3, 1);
 80010f8:	7dfb      	ldrb	r3, [r7, #23]
 80010fa:	3303      	adds	r3, #3
 80010fc:	b2d8      	uxtb	r0, r3
 80010fe:	7dbb      	ldrb	r3, [r7, #22]
 8001100:	3303      	adds	r3, #3
 8001102:	b2db      	uxtb	r3, r3
 8001104:	2201      	movs	r2, #1
 8001106:	4619      	mov	r1, r3
 8001108:	f7ff fba8 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 4, 1);
 800110c:	7dbb      	ldrb	r3, [r7, #22]
 800110e:	3304      	adds	r3, #4
 8001110:	b2d9      	uxtb	r1, r3
 8001112:	7dfb      	ldrb	r3, [r7, #23]
 8001114:	2201      	movs	r2, #1
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff fba0 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 4, 1);
 800111c:	7dfb      	ldrb	r3, [r7, #23]
 800111e:	3303      	adds	r3, #3
 8001120:	b2d8      	uxtb	r0, r3
 8001122:	7dbb      	ldrb	r3, [r7, #22]
 8001124:	3304      	adds	r3, #4
 8001126:	b2db      	uxtb	r3, r3
 8001128:	2201      	movs	r2, #1
 800112a:	4619      	mov	r1, r3
 800112c:	f7ff fb96 	bl	800085c <nokia5110_SetPixel>
		break;
 8001130:	f000 bece 	b.w	8001ed0 <nokia5110_WriteCharacter+0x14e8>
	}
	case 'I':
	{
	    nokia5110_SetPixel(x + 2, y + 0, 1);
 8001134:	7dfb      	ldrb	r3, [r7, #23]
 8001136:	3302      	adds	r3, #2
 8001138:	b2db      	uxtb	r3, r3
 800113a:	7db9      	ldrb	r1, [r7, #22]
 800113c:	2201      	movs	r2, #1
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff fb8c 	bl	800085c <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 2, y + 1, 1);
 8001144:	7dfb      	ldrb	r3, [r7, #23]
 8001146:	3302      	adds	r3, #2
 8001148:	b2d8      	uxtb	r0, r3
 800114a:	7dbb      	ldrb	r3, [r7, #22]
 800114c:	3301      	adds	r3, #1
 800114e:	b2db      	uxtb	r3, r3
 8001150:	2201      	movs	r2, #1
 8001152:	4619      	mov	r1, r3
 8001154:	f7ff fb82 	bl	800085c <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 2, y + 2, 1);
 8001158:	7dfb      	ldrb	r3, [r7, #23]
 800115a:	3302      	adds	r3, #2
 800115c:	b2d8      	uxtb	r0, r3
 800115e:	7dbb      	ldrb	r3, [r7, #22]
 8001160:	3302      	adds	r3, #2
 8001162:	b2db      	uxtb	r3, r3
 8001164:	2201      	movs	r2, #1
 8001166:	4619      	mov	r1, r3
 8001168:	f7ff fb78 	bl	800085c <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 2, y + 3, 1);
 800116c:	7dfb      	ldrb	r3, [r7, #23]
 800116e:	3302      	adds	r3, #2
 8001170:	b2d8      	uxtb	r0, r3
 8001172:	7dbb      	ldrb	r3, [r7, #22]
 8001174:	3303      	adds	r3, #3
 8001176:	b2db      	uxtb	r3, r3
 8001178:	2201      	movs	r2, #1
 800117a:	4619      	mov	r1, r3
 800117c:	f7ff fb6e 	bl	800085c <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 2, y + 4, 1);
 8001180:	7dfb      	ldrb	r3, [r7, #23]
 8001182:	3302      	adds	r3, #2
 8001184:	b2d8      	uxtb	r0, r3
 8001186:	7dbb      	ldrb	r3, [r7, #22]
 8001188:	3304      	adds	r3, #4
 800118a:	b2db      	uxtb	r3, r3
 800118c:	2201      	movs	r2, #1
 800118e:	4619      	mov	r1, r3
 8001190:	f7ff fb64 	bl	800085c <nokia5110_SetPixel>
	    break;
 8001194:	f000 be9c 	b.w	8001ed0 <nokia5110_WriteCharacter+0x14e8>
	}
	case 'J':
	{
		nokia5110_SetPixel(x + 0, y + 0, 1);
 8001198:	7db9      	ldrb	r1, [r7, #22]
 800119a:	7dfb      	ldrb	r3, [r7, #23]
 800119c:	2201      	movs	r2, #1
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff fb5c 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 1, y + 0, 1);
 80011a4:	7dfb      	ldrb	r3, [r7, #23]
 80011a6:	3301      	adds	r3, #1
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	7db9      	ldrb	r1, [r7, #22]
 80011ac:	2201      	movs	r2, #1
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff fb54 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 0, 1);
 80011b4:	7dfb      	ldrb	r3, [r7, #23]
 80011b6:	3302      	adds	r3, #2
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	7db9      	ldrb	r1, [r7, #22]
 80011bc:	2201      	movs	r2, #1
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff fb4c 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 0, 1);
 80011c4:	7dfb      	ldrb	r3, [r7, #23]
 80011c6:	3303      	adds	r3, #3
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	7db9      	ldrb	r1, [r7, #22]
 80011cc:	2201      	movs	r2, #1
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff fb44 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 1, 1);
 80011d4:	7dfb      	ldrb	r3, [r7, #23]
 80011d6:	3303      	adds	r3, #3
 80011d8:	b2d8      	uxtb	r0, r3
 80011da:	7dbb      	ldrb	r3, [r7, #22]
 80011dc:	3301      	adds	r3, #1
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	2201      	movs	r2, #1
 80011e2:	4619      	mov	r1, r3
 80011e4:	f7ff fb3a 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 2, 1);
 80011e8:	7dfb      	ldrb	r3, [r7, #23]
 80011ea:	3303      	adds	r3, #3
 80011ec:	b2d8      	uxtb	r0, r3
 80011ee:	7dbb      	ldrb	r3, [r7, #22]
 80011f0:	3302      	adds	r3, #2
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	2201      	movs	r2, #1
 80011f6:	4619      	mov	r1, r3
 80011f8:	f7ff fb30 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 3, 1);
 80011fc:	7dbb      	ldrb	r3, [r7, #22]
 80011fe:	3303      	adds	r3, #3
 8001200:	b2d9      	uxtb	r1, r3
 8001202:	7dfb      	ldrb	r3, [r7, #23]
 8001204:	2201      	movs	r2, #1
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff fb28 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 3, 1);
 800120c:	7dfb      	ldrb	r3, [r7, #23]
 800120e:	3303      	adds	r3, #3
 8001210:	b2d8      	uxtb	r0, r3
 8001212:	7dbb      	ldrb	r3, [r7, #22]
 8001214:	3303      	adds	r3, #3
 8001216:	b2db      	uxtb	r3, r3
 8001218:	2201      	movs	r2, #1
 800121a:	4619      	mov	r1, r3
 800121c:	f7ff fb1e 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 1, y + 4, 1);
 8001220:	7dfb      	ldrb	r3, [r7, #23]
 8001222:	3301      	adds	r3, #1
 8001224:	b2d8      	uxtb	r0, r3
 8001226:	7dbb      	ldrb	r3, [r7, #22]
 8001228:	3304      	adds	r3, #4
 800122a:	b2db      	uxtb	r3, r3
 800122c:	2201      	movs	r2, #1
 800122e:	4619      	mov	r1, r3
 8001230:	f7ff fb14 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 4, 1);
 8001234:	7dfb      	ldrb	r3, [r7, #23]
 8001236:	3302      	adds	r3, #2
 8001238:	b2d8      	uxtb	r0, r3
 800123a:	7dbb      	ldrb	r3, [r7, #22]
 800123c:	3304      	adds	r3, #4
 800123e:	b2db      	uxtb	r3, r3
 8001240:	2201      	movs	r2, #1
 8001242:	4619      	mov	r1, r3
 8001244:	f7ff fb0a 	bl	800085c <nokia5110_SetPixel>
		break;
 8001248:	f000 be42 	b.w	8001ed0 <nokia5110_WriteCharacter+0x14e8>
	}
	case 'K':
	{
		nokia5110_SetPixel(x + 0, y + 0, 1);
 800124c:	7db9      	ldrb	r1, [r7, #22]
 800124e:	7dfb      	ldrb	r3, [r7, #23]
 8001250:	2201      	movs	r2, #1
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff fb02 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 1, 1);
 8001258:	7dbb      	ldrb	r3, [r7, #22]
 800125a:	3301      	adds	r3, #1
 800125c:	b2d9      	uxtb	r1, r3
 800125e:	7dfb      	ldrb	r3, [r7, #23]
 8001260:	2201      	movs	r2, #1
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff fafa 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 2, 1);
 8001268:	7dbb      	ldrb	r3, [r7, #22]
 800126a:	3302      	adds	r3, #2
 800126c:	b2d9      	uxtb	r1, r3
 800126e:	7dfb      	ldrb	r3, [r7, #23]
 8001270:	2201      	movs	r2, #1
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff faf2 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 3, 1);
 8001278:	7dbb      	ldrb	r3, [r7, #22]
 800127a:	3303      	adds	r3, #3
 800127c:	b2d9      	uxtb	r1, r3
 800127e:	7dfb      	ldrb	r3, [r7, #23]
 8001280:	2201      	movs	r2, #1
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff faea 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 4, 1);
 8001288:	7dbb      	ldrb	r3, [r7, #22]
 800128a:	3304      	adds	r3, #4
 800128c:	b2d9      	uxtb	r1, r3
 800128e:	7dfb      	ldrb	r3, [r7, #23]
 8001290:	2201      	movs	r2, #1
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff fae2 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 1, y + 2, 1);
 8001298:	7dfb      	ldrb	r3, [r7, #23]
 800129a:	3301      	adds	r3, #1
 800129c:	b2d8      	uxtb	r0, r3
 800129e:	7dbb      	ldrb	r3, [r7, #22]
 80012a0:	3302      	adds	r3, #2
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	2201      	movs	r2, #1
 80012a6:	4619      	mov	r1, r3
 80012a8:	f7ff fad8 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 1, 1);
 80012ac:	7dfb      	ldrb	r3, [r7, #23]
 80012ae:	3302      	adds	r3, #2
 80012b0:	b2d8      	uxtb	r0, r3
 80012b2:	7dbb      	ldrb	r3, [r7, #22]
 80012b4:	3301      	adds	r3, #1
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	2201      	movs	r2, #1
 80012ba:	4619      	mov	r1, r3
 80012bc:	f7ff face 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 3, 1);
 80012c0:	7dfb      	ldrb	r3, [r7, #23]
 80012c2:	3302      	adds	r3, #2
 80012c4:	b2d8      	uxtb	r0, r3
 80012c6:	7dbb      	ldrb	r3, [r7, #22]
 80012c8:	3303      	adds	r3, #3
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	2201      	movs	r2, #1
 80012ce:	4619      	mov	r1, r3
 80012d0:	f7ff fac4 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 0, 1);
 80012d4:	7dfb      	ldrb	r3, [r7, #23]
 80012d6:	3303      	adds	r3, #3
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	7db9      	ldrb	r1, [r7, #22]
 80012dc:	2201      	movs	r2, #1
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff fabc 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 4, 1);
 80012e4:	7dfb      	ldrb	r3, [r7, #23]
 80012e6:	3303      	adds	r3, #3
 80012e8:	b2d8      	uxtb	r0, r3
 80012ea:	7dbb      	ldrb	r3, [r7, #22]
 80012ec:	3304      	adds	r3, #4
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	2201      	movs	r2, #1
 80012f2:	4619      	mov	r1, r3
 80012f4:	f7ff fab2 	bl	800085c <nokia5110_SetPixel>
		break;
 80012f8:	f000 bdea 	b.w	8001ed0 <nokia5110_WriteCharacter+0x14e8>
	}
	case 'L':
	{
		nokia5110_SetPixel(x + 0, y + 0, 1);
 80012fc:	7db9      	ldrb	r1, [r7, #22]
 80012fe:	7dfb      	ldrb	r3, [r7, #23]
 8001300:	2201      	movs	r2, #1
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff faaa 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 1, 1);
 8001308:	7dbb      	ldrb	r3, [r7, #22]
 800130a:	3301      	adds	r3, #1
 800130c:	b2d9      	uxtb	r1, r3
 800130e:	7dfb      	ldrb	r3, [r7, #23]
 8001310:	2201      	movs	r2, #1
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff faa2 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 2, 1);
 8001318:	7dbb      	ldrb	r3, [r7, #22]
 800131a:	3302      	adds	r3, #2
 800131c:	b2d9      	uxtb	r1, r3
 800131e:	7dfb      	ldrb	r3, [r7, #23]
 8001320:	2201      	movs	r2, #1
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff fa9a 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 3, 1);
 8001328:	7dbb      	ldrb	r3, [r7, #22]
 800132a:	3303      	adds	r3, #3
 800132c:	b2d9      	uxtb	r1, r3
 800132e:	7dfb      	ldrb	r3, [r7, #23]
 8001330:	2201      	movs	r2, #1
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff fa92 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 4, 1);
 8001338:	7dbb      	ldrb	r3, [r7, #22]
 800133a:	3304      	adds	r3, #4
 800133c:	b2d9      	uxtb	r1, r3
 800133e:	7dfb      	ldrb	r3, [r7, #23]
 8001340:	2201      	movs	r2, #1
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff fa8a 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 1, y + 4, 1);
 8001348:	7dfb      	ldrb	r3, [r7, #23]
 800134a:	3301      	adds	r3, #1
 800134c:	b2d8      	uxtb	r0, r3
 800134e:	7dbb      	ldrb	r3, [r7, #22]
 8001350:	3304      	adds	r3, #4
 8001352:	b2db      	uxtb	r3, r3
 8001354:	2201      	movs	r2, #1
 8001356:	4619      	mov	r1, r3
 8001358:	f7ff fa80 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 4, 1);
 800135c:	7dfb      	ldrb	r3, [r7, #23]
 800135e:	3302      	adds	r3, #2
 8001360:	b2d8      	uxtb	r0, r3
 8001362:	7dbb      	ldrb	r3, [r7, #22]
 8001364:	3304      	adds	r3, #4
 8001366:	b2db      	uxtb	r3, r3
 8001368:	2201      	movs	r2, #1
 800136a:	4619      	mov	r1, r3
 800136c:	f7ff fa76 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 4, 1);
 8001370:	7dfb      	ldrb	r3, [r7, #23]
 8001372:	3303      	adds	r3, #3
 8001374:	b2d8      	uxtb	r0, r3
 8001376:	7dbb      	ldrb	r3, [r7, #22]
 8001378:	3304      	adds	r3, #4
 800137a:	b2db      	uxtb	r3, r3
 800137c:	2201      	movs	r2, #1
 800137e:	4619      	mov	r1, r3
 8001380:	f7ff fa6c 	bl	800085c <nokia5110_SetPixel>
		break;
 8001384:	f000 bda4 	b.w	8001ed0 <nokia5110_WriteCharacter+0x14e8>
	}
	case 'M':
	{
		nokia5110_SetPixel(x + 0, y + 0, 1);
 8001388:	7db9      	ldrb	r1, [r7, #22]
 800138a:	7dfb      	ldrb	r3, [r7, #23]
 800138c:	2201      	movs	r2, #1
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff fa64 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 1, 1);
 8001394:	7dbb      	ldrb	r3, [r7, #22]
 8001396:	3301      	adds	r3, #1
 8001398:	b2d9      	uxtb	r1, r3
 800139a:	7dfb      	ldrb	r3, [r7, #23]
 800139c:	2201      	movs	r2, #1
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff fa5c 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 2, 1);
 80013a4:	7dbb      	ldrb	r3, [r7, #22]
 80013a6:	3302      	adds	r3, #2
 80013a8:	b2d9      	uxtb	r1, r3
 80013aa:	7dfb      	ldrb	r3, [r7, #23]
 80013ac:	2201      	movs	r2, #1
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff fa54 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 3, 1);
 80013b4:	7dbb      	ldrb	r3, [r7, #22]
 80013b6:	3303      	adds	r3, #3
 80013b8:	b2d9      	uxtb	r1, r3
 80013ba:	7dfb      	ldrb	r3, [r7, #23]
 80013bc:	2201      	movs	r2, #1
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff fa4c 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 4, 1);
 80013c4:	7dbb      	ldrb	r3, [r7, #22]
 80013c6:	3304      	adds	r3, #4
 80013c8:	b2d9      	uxtb	r1, r3
 80013ca:	7dfb      	ldrb	r3, [r7, #23]
 80013cc:	2201      	movs	r2, #1
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff fa44 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 6, y + 0, 1);
 80013d4:	7dfb      	ldrb	r3, [r7, #23]
 80013d6:	3306      	adds	r3, #6
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	7db9      	ldrb	r1, [r7, #22]
 80013dc:	2201      	movs	r2, #1
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff fa3c 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 6, y + 1, 1);
 80013e4:	7dfb      	ldrb	r3, [r7, #23]
 80013e6:	3306      	adds	r3, #6
 80013e8:	b2d8      	uxtb	r0, r3
 80013ea:	7dbb      	ldrb	r3, [r7, #22]
 80013ec:	3301      	adds	r3, #1
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	2201      	movs	r2, #1
 80013f2:	4619      	mov	r1, r3
 80013f4:	f7ff fa32 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 6, y + 2, 1);
 80013f8:	7dfb      	ldrb	r3, [r7, #23]
 80013fa:	3306      	adds	r3, #6
 80013fc:	b2d8      	uxtb	r0, r3
 80013fe:	7dbb      	ldrb	r3, [r7, #22]
 8001400:	3302      	adds	r3, #2
 8001402:	b2db      	uxtb	r3, r3
 8001404:	2201      	movs	r2, #1
 8001406:	4619      	mov	r1, r3
 8001408:	f7ff fa28 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 6, y + 3, 1);
 800140c:	7dfb      	ldrb	r3, [r7, #23]
 800140e:	3306      	adds	r3, #6
 8001410:	b2d8      	uxtb	r0, r3
 8001412:	7dbb      	ldrb	r3, [r7, #22]
 8001414:	3303      	adds	r3, #3
 8001416:	b2db      	uxtb	r3, r3
 8001418:	2201      	movs	r2, #1
 800141a:	4619      	mov	r1, r3
 800141c:	f7ff fa1e 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 6, y + 4, 1);
 8001420:	7dfb      	ldrb	r3, [r7, #23]
 8001422:	3306      	adds	r3, #6
 8001424:	b2d8      	uxtb	r0, r3
 8001426:	7dbb      	ldrb	r3, [r7, #22]
 8001428:	3304      	adds	r3, #4
 800142a:	b2db      	uxtb	r3, r3
 800142c:	2201      	movs	r2, #1
 800142e:	4619      	mov	r1, r3
 8001430:	f7ff fa14 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 1, y + 1, 1);
 8001434:	7dfb      	ldrb	r3, [r7, #23]
 8001436:	3301      	adds	r3, #1
 8001438:	b2d8      	uxtb	r0, r3
 800143a:	7dbb      	ldrb	r3, [r7, #22]
 800143c:	3301      	adds	r3, #1
 800143e:	b2db      	uxtb	r3, r3
 8001440:	2201      	movs	r2, #1
 8001442:	4619      	mov	r1, r3
 8001444:	f7ff fa0a 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 5, y + 1, 1);
 8001448:	7dfb      	ldrb	r3, [r7, #23]
 800144a:	3305      	adds	r3, #5
 800144c:	b2d8      	uxtb	r0, r3
 800144e:	7dbb      	ldrb	r3, [r7, #22]
 8001450:	3301      	adds	r3, #1
 8001452:	b2db      	uxtb	r3, r3
 8001454:	2201      	movs	r2, #1
 8001456:	4619      	mov	r1, r3
 8001458:	f7ff fa00 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 2, 1);
 800145c:	7dfb      	ldrb	r3, [r7, #23]
 800145e:	3302      	adds	r3, #2
 8001460:	b2d8      	uxtb	r0, r3
 8001462:	7dbb      	ldrb	r3, [r7, #22]
 8001464:	3302      	adds	r3, #2
 8001466:	b2db      	uxtb	r3, r3
 8001468:	2201      	movs	r2, #1
 800146a:	4619      	mov	r1, r3
 800146c:	f7ff f9f6 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 4, y + 2, 1);
 8001470:	7dfb      	ldrb	r3, [r7, #23]
 8001472:	3304      	adds	r3, #4
 8001474:	b2d8      	uxtb	r0, r3
 8001476:	7dbb      	ldrb	r3, [r7, #22]
 8001478:	3302      	adds	r3, #2
 800147a:	b2db      	uxtb	r3, r3
 800147c:	2201      	movs	r2, #1
 800147e:	4619      	mov	r1, r3
 8001480:	f7ff f9ec 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 3, 1);
 8001484:	7dfb      	ldrb	r3, [r7, #23]
 8001486:	3303      	adds	r3, #3
 8001488:	b2d8      	uxtb	r0, r3
 800148a:	7dbb      	ldrb	r3, [r7, #22]
 800148c:	3303      	adds	r3, #3
 800148e:	b2db      	uxtb	r3, r3
 8001490:	2201      	movs	r2, #1
 8001492:	4619      	mov	r1, r3
 8001494:	f7ff f9e2 	bl	800085c <nokia5110_SetPixel>
		break;
 8001498:	f000 bd1a 	b.w	8001ed0 <nokia5110_WriteCharacter+0x14e8>
	}
	case 'N':
	{
		nokia5110_SetPixel(x + 0, y + 0, 1);
 800149c:	7db9      	ldrb	r1, [r7, #22]
 800149e:	7dfb      	ldrb	r3, [r7, #23]
 80014a0:	2201      	movs	r2, #1
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff f9da 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 1, 1);
 80014a8:	7dbb      	ldrb	r3, [r7, #22]
 80014aa:	3301      	adds	r3, #1
 80014ac:	b2d9      	uxtb	r1, r3
 80014ae:	7dfb      	ldrb	r3, [r7, #23]
 80014b0:	2201      	movs	r2, #1
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff f9d2 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 2, 1);
 80014b8:	7dbb      	ldrb	r3, [r7, #22]
 80014ba:	3302      	adds	r3, #2
 80014bc:	b2d9      	uxtb	r1, r3
 80014be:	7dfb      	ldrb	r3, [r7, #23]
 80014c0:	2201      	movs	r2, #1
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff f9ca 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 3, 1);
 80014c8:	7dbb      	ldrb	r3, [r7, #22]
 80014ca:	3303      	adds	r3, #3
 80014cc:	b2d9      	uxtb	r1, r3
 80014ce:	7dfb      	ldrb	r3, [r7, #23]
 80014d0:	2201      	movs	r2, #1
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff f9c2 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 4, 1);
 80014d8:	7dbb      	ldrb	r3, [r7, #22]
 80014da:	3304      	adds	r3, #4
 80014dc:	b2d9      	uxtb	r1, r3
 80014de:	7dfb      	ldrb	r3, [r7, #23]
 80014e0:	2201      	movs	r2, #1
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7ff f9ba 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 4, y + 0, 1);
 80014e8:	7dfb      	ldrb	r3, [r7, #23]
 80014ea:	3304      	adds	r3, #4
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	7db9      	ldrb	r1, [r7, #22]
 80014f0:	2201      	movs	r2, #1
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff f9b2 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 4, y + 1, 1);
 80014f8:	7dfb      	ldrb	r3, [r7, #23]
 80014fa:	3304      	adds	r3, #4
 80014fc:	b2d8      	uxtb	r0, r3
 80014fe:	7dbb      	ldrb	r3, [r7, #22]
 8001500:	3301      	adds	r3, #1
 8001502:	b2db      	uxtb	r3, r3
 8001504:	2201      	movs	r2, #1
 8001506:	4619      	mov	r1, r3
 8001508:	f7ff f9a8 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 4, y + 2, 1);
 800150c:	7dfb      	ldrb	r3, [r7, #23]
 800150e:	3304      	adds	r3, #4
 8001510:	b2d8      	uxtb	r0, r3
 8001512:	7dbb      	ldrb	r3, [r7, #22]
 8001514:	3302      	adds	r3, #2
 8001516:	b2db      	uxtb	r3, r3
 8001518:	2201      	movs	r2, #1
 800151a:	4619      	mov	r1, r3
 800151c:	f7ff f99e 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 4, y + 3, 1);
 8001520:	7dfb      	ldrb	r3, [r7, #23]
 8001522:	3304      	adds	r3, #4
 8001524:	b2d8      	uxtb	r0, r3
 8001526:	7dbb      	ldrb	r3, [r7, #22]
 8001528:	3303      	adds	r3, #3
 800152a:	b2db      	uxtb	r3, r3
 800152c:	2201      	movs	r2, #1
 800152e:	4619      	mov	r1, r3
 8001530:	f7ff f994 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 4, y + 4, 1);
 8001534:	7dfb      	ldrb	r3, [r7, #23]
 8001536:	3304      	adds	r3, #4
 8001538:	b2d8      	uxtb	r0, r3
 800153a:	7dbb      	ldrb	r3, [r7, #22]
 800153c:	3304      	adds	r3, #4
 800153e:	b2db      	uxtb	r3, r3
 8001540:	2201      	movs	r2, #1
 8001542:	4619      	mov	r1, r3
 8001544:	f7ff f98a 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 1, y + 1, 1);
 8001548:	7dfb      	ldrb	r3, [r7, #23]
 800154a:	3301      	adds	r3, #1
 800154c:	b2d8      	uxtb	r0, r3
 800154e:	7dbb      	ldrb	r3, [r7, #22]
 8001550:	3301      	adds	r3, #1
 8001552:	b2db      	uxtb	r3, r3
 8001554:	2201      	movs	r2, #1
 8001556:	4619      	mov	r1, r3
 8001558:	f7ff f980 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 2, 1);
 800155c:	7dfb      	ldrb	r3, [r7, #23]
 800155e:	3302      	adds	r3, #2
 8001560:	b2d8      	uxtb	r0, r3
 8001562:	7dbb      	ldrb	r3, [r7, #22]
 8001564:	3302      	adds	r3, #2
 8001566:	b2db      	uxtb	r3, r3
 8001568:	2201      	movs	r2, #1
 800156a:	4619      	mov	r1, r3
 800156c:	f7ff f976 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 3, 1);
 8001570:	7dfb      	ldrb	r3, [r7, #23]
 8001572:	3303      	adds	r3, #3
 8001574:	b2d8      	uxtb	r0, r3
 8001576:	7dbb      	ldrb	r3, [r7, #22]
 8001578:	3303      	adds	r3, #3
 800157a:	b2db      	uxtb	r3, r3
 800157c:	2201      	movs	r2, #1
 800157e:	4619      	mov	r1, r3
 8001580:	f7ff f96c 	bl	800085c <nokia5110_SetPixel>
		break;
 8001584:	f000 bca4 	b.w	8001ed0 <nokia5110_WriteCharacter+0x14e8>
	}
	case 'O':
	{
		nokia5110_SetPixel(x + 1, y + 0, 1);
 8001588:	7dfb      	ldrb	r3, [r7, #23]
 800158a:	3301      	adds	r3, #1
 800158c:	b2db      	uxtb	r3, r3
 800158e:	7db9      	ldrb	r1, [r7, #22]
 8001590:	2201      	movs	r2, #1
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff f962 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 0, 1);
 8001598:	7dfb      	ldrb	r3, [r7, #23]
 800159a:	3302      	adds	r3, #2
 800159c:	b2db      	uxtb	r3, r3
 800159e:	7db9      	ldrb	r1, [r7, #22]
 80015a0:	2201      	movs	r2, #1
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff f95a 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 0, 1);
 80015a8:	7dfb      	ldrb	r3, [r7, #23]
 80015aa:	3303      	adds	r3, #3
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	7db9      	ldrb	r1, [r7, #22]
 80015b0:	2201      	movs	r2, #1
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7ff f952 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 1, 1);
 80015b8:	7dbb      	ldrb	r3, [r7, #22]
 80015ba:	3301      	adds	r3, #1
 80015bc:	b2d9      	uxtb	r1, r3
 80015be:	7dfb      	ldrb	r3, [r7, #23]
 80015c0:	2201      	movs	r2, #1
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff f94a 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 4, y + 1, 1);
 80015c8:	7dfb      	ldrb	r3, [r7, #23]
 80015ca:	3304      	adds	r3, #4
 80015cc:	b2d8      	uxtb	r0, r3
 80015ce:	7dbb      	ldrb	r3, [r7, #22]
 80015d0:	3301      	adds	r3, #1
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	2201      	movs	r2, #1
 80015d6:	4619      	mov	r1, r3
 80015d8:	f7ff f940 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 2, 1);
 80015dc:	7dbb      	ldrb	r3, [r7, #22]
 80015de:	3302      	adds	r3, #2
 80015e0:	b2d9      	uxtb	r1, r3
 80015e2:	7dfb      	ldrb	r3, [r7, #23]
 80015e4:	2201      	movs	r2, #1
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7ff f938 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 4, y + 2, 1);
 80015ec:	7dfb      	ldrb	r3, [r7, #23]
 80015ee:	3304      	adds	r3, #4
 80015f0:	b2d8      	uxtb	r0, r3
 80015f2:	7dbb      	ldrb	r3, [r7, #22]
 80015f4:	3302      	adds	r3, #2
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	2201      	movs	r2, #1
 80015fa:	4619      	mov	r1, r3
 80015fc:	f7ff f92e 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 3, 1);
 8001600:	7dbb      	ldrb	r3, [r7, #22]
 8001602:	3303      	adds	r3, #3
 8001604:	b2d9      	uxtb	r1, r3
 8001606:	7dfb      	ldrb	r3, [r7, #23]
 8001608:	2201      	movs	r2, #1
 800160a:	4618      	mov	r0, r3
 800160c:	f7ff f926 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 4, y + 3, 1);
 8001610:	7dfb      	ldrb	r3, [r7, #23]
 8001612:	3304      	adds	r3, #4
 8001614:	b2d8      	uxtb	r0, r3
 8001616:	7dbb      	ldrb	r3, [r7, #22]
 8001618:	3303      	adds	r3, #3
 800161a:	b2db      	uxtb	r3, r3
 800161c:	2201      	movs	r2, #1
 800161e:	4619      	mov	r1, r3
 8001620:	f7ff f91c 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 1, y + 4, 1);
 8001624:	7dfb      	ldrb	r3, [r7, #23]
 8001626:	3301      	adds	r3, #1
 8001628:	b2d8      	uxtb	r0, r3
 800162a:	7dbb      	ldrb	r3, [r7, #22]
 800162c:	3304      	adds	r3, #4
 800162e:	b2db      	uxtb	r3, r3
 8001630:	2201      	movs	r2, #1
 8001632:	4619      	mov	r1, r3
 8001634:	f7ff f912 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 4, 1);
 8001638:	7dfb      	ldrb	r3, [r7, #23]
 800163a:	3302      	adds	r3, #2
 800163c:	b2d8      	uxtb	r0, r3
 800163e:	7dbb      	ldrb	r3, [r7, #22]
 8001640:	3304      	adds	r3, #4
 8001642:	b2db      	uxtb	r3, r3
 8001644:	2201      	movs	r2, #1
 8001646:	4619      	mov	r1, r3
 8001648:	f7ff f908 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 4, 1);
 800164c:	7dfb      	ldrb	r3, [r7, #23]
 800164e:	3303      	adds	r3, #3
 8001650:	b2d8      	uxtb	r0, r3
 8001652:	7dbb      	ldrb	r3, [r7, #22]
 8001654:	3304      	adds	r3, #4
 8001656:	b2db      	uxtb	r3, r3
 8001658:	2201      	movs	r2, #1
 800165a:	4619      	mov	r1, r3
 800165c:	f7ff f8fe 	bl	800085c <nokia5110_SetPixel>
		break;
 8001660:	f000 bc36 	b.w	8001ed0 <nokia5110_WriteCharacter+0x14e8>
	}
	case 'P':
	{
		nokia5110_SetPixel(x + 0, y + 0, 1);
 8001664:	7db9      	ldrb	r1, [r7, #22]
 8001666:	7dfb      	ldrb	r3, [r7, #23]
 8001668:	2201      	movs	r2, #1
 800166a:	4618      	mov	r0, r3
 800166c:	f7ff f8f6 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 1, y + 0, 1);
 8001670:	7dfb      	ldrb	r3, [r7, #23]
 8001672:	3301      	adds	r3, #1
 8001674:	b2db      	uxtb	r3, r3
 8001676:	7db9      	ldrb	r1, [r7, #22]
 8001678:	2201      	movs	r2, #1
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff f8ee 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 0, 1);
 8001680:	7dfb      	ldrb	r3, [r7, #23]
 8001682:	3302      	adds	r3, #2
 8001684:	b2db      	uxtb	r3, r3
 8001686:	7db9      	ldrb	r1, [r7, #22]
 8001688:	2201      	movs	r2, #1
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff f8e6 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 1, 1);
 8001690:	7dbb      	ldrb	r3, [r7, #22]
 8001692:	3301      	adds	r3, #1
 8001694:	b2d9      	uxtb	r1, r3
 8001696:	7dfb      	ldrb	r3, [r7, #23]
 8001698:	2201      	movs	r2, #1
 800169a:	4618      	mov	r0, r3
 800169c:	f7ff f8de 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 1, 1);
 80016a0:	7dfb      	ldrb	r3, [r7, #23]
 80016a2:	3303      	adds	r3, #3
 80016a4:	b2d8      	uxtb	r0, r3
 80016a6:	7dbb      	ldrb	r3, [r7, #22]
 80016a8:	3301      	adds	r3, #1
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	2201      	movs	r2, #1
 80016ae:	4619      	mov	r1, r3
 80016b0:	f7ff f8d4 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 2, 1);
 80016b4:	7dbb      	ldrb	r3, [r7, #22]
 80016b6:	3302      	adds	r3, #2
 80016b8:	b2d9      	uxtb	r1, r3
 80016ba:	7dfb      	ldrb	r3, [r7, #23]
 80016bc:	2201      	movs	r2, #1
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff f8cc 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 1, y + 2, 1);
 80016c4:	7dfb      	ldrb	r3, [r7, #23]
 80016c6:	3301      	adds	r3, #1
 80016c8:	b2d8      	uxtb	r0, r3
 80016ca:	7dbb      	ldrb	r3, [r7, #22]
 80016cc:	3302      	adds	r3, #2
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	2201      	movs	r2, #1
 80016d2:	4619      	mov	r1, r3
 80016d4:	f7ff f8c2 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 2, 1);
 80016d8:	7dfb      	ldrb	r3, [r7, #23]
 80016da:	3302      	adds	r3, #2
 80016dc:	b2d8      	uxtb	r0, r3
 80016de:	7dbb      	ldrb	r3, [r7, #22]
 80016e0:	3302      	adds	r3, #2
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	2201      	movs	r2, #1
 80016e6:	4619      	mov	r1, r3
 80016e8:	f7ff f8b8 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 3, 1);
 80016ec:	7dbb      	ldrb	r3, [r7, #22]
 80016ee:	3303      	adds	r3, #3
 80016f0:	b2d9      	uxtb	r1, r3
 80016f2:	7dfb      	ldrb	r3, [r7, #23]
 80016f4:	2201      	movs	r2, #1
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff f8b0 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 4, 1);
 80016fc:	7dbb      	ldrb	r3, [r7, #22]
 80016fe:	3304      	adds	r3, #4
 8001700:	b2d9      	uxtb	r1, r3
 8001702:	7dfb      	ldrb	r3, [r7, #23]
 8001704:	2201      	movs	r2, #1
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff f8a8 	bl	800085c <nokia5110_SetPixel>
		break;
 800170c:	e3e0      	b.n	8001ed0 <nokia5110_WriteCharacter+0x14e8>
	}
	case 'Q':
	{
		nokia5110_SetPixel(x + 1, y + 0, 1);
 800170e:	7dfb      	ldrb	r3, [r7, #23]
 8001710:	3301      	adds	r3, #1
 8001712:	b2db      	uxtb	r3, r3
 8001714:	7db9      	ldrb	r1, [r7, #22]
 8001716:	2201      	movs	r2, #1
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff f89f 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 0, 1);
 800171e:	7dfb      	ldrb	r3, [r7, #23]
 8001720:	3302      	adds	r3, #2
 8001722:	b2db      	uxtb	r3, r3
 8001724:	7db9      	ldrb	r1, [r7, #22]
 8001726:	2201      	movs	r2, #1
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff f897 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 0, 1);
 800172e:	7dfb      	ldrb	r3, [r7, #23]
 8001730:	3303      	adds	r3, #3
 8001732:	b2db      	uxtb	r3, r3
 8001734:	7db9      	ldrb	r1, [r7, #22]
 8001736:	2201      	movs	r2, #1
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff f88f 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 1, 1);
 800173e:	7dbb      	ldrb	r3, [r7, #22]
 8001740:	3301      	adds	r3, #1
 8001742:	b2d9      	uxtb	r1, r3
 8001744:	7dfb      	ldrb	r3, [r7, #23]
 8001746:	2201      	movs	r2, #1
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff f887 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 4, y + 1, 1);
 800174e:	7dfb      	ldrb	r3, [r7, #23]
 8001750:	3304      	adds	r3, #4
 8001752:	b2d8      	uxtb	r0, r3
 8001754:	7dbb      	ldrb	r3, [r7, #22]
 8001756:	3301      	adds	r3, #1
 8001758:	b2db      	uxtb	r3, r3
 800175a:	2201      	movs	r2, #1
 800175c:	4619      	mov	r1, r3
 800175e:	f7ff f87d 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 2, 1);
 8001762:	7dbb      	ldrb	r3, [r7, #22]
 8001764:	3302      	adds	r3, #2
 8001766:	b2d9      	uxtb	r1, r3
 8001768:	7dfb      	ldrb	r3, [r7, #23]
 800176a:	2201      	movs	r2, #1
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff f875 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 4, y + 2, 1);
 8001772:	7dfb      	ldrb	r3, [r7, #23]
 8001774:	3304      	adds	r3, #4
 8001776:	b2d8      	uxtb	r0, r3
 8001778:	7dbb      	ldrb	r3, [r7, #22]
 800177a:	3302      	adds	r3, #2
 800177c:	b2db      	uxtb	r3, r3
 800177e:	2201      	movs	r2, #1
 8001780:	4619      	mov	r1, r3
 8001782:	f7ff f86b 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 3, 1);
 8001786:	7dbb      	ldrb	r3, [r7, #22]
 8001788:	3303      	adds	r3, #3
 800178a:	b2d9      	uxtb	r1, r3
 800178c:	7dfb      	ldrb	r3, [r7, #23]
 800178e:	2201      	movs	r2, #1
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff f863 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 3, 1);
 8001796:	7dfb      	ldrb	r3, [r7, #23]
 8001798:	3303      	adds	r3, #3
 800179a:	b2d8      	uxtb	r0, r3
 800179c:	7dbb      	ldrb	r3, [r7, #22]
 800179e:	3303      	adds	r3, #3
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	2201      	movs	r2, #1
 80017a4:	4619      	mov	r1, r3
 80017a6:	f7ff f859 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 1, y + 4, 1);
 80017aa:	7dfb      	ldrb	r3, [r7, #23]
 80017ac:	3301      	adds	r3, #1
 80017ae:	b2d8      	uxtb	r0, r3
 80017b0:	7dbb      	ldrb	r3, [r7, #22]
 80017b2:	3304      	adds	r3, #4
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	2201      	movs	r2, #1
 80017b8:	4619      	mov	r1, r3
 80017ba:	f7ff f84f 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 4, 1);
 80017be:	7dfb      	ldrb	r3, [r7, #23]
 80017c0:	3302      	adds	r3, #2
 80017c2:	b2d8      	uxtb	r0, r3
 80017c4:	7dbb      	ldrb	r3, [r7, #22]
 80017c6:	3304      	adds	r3, #4
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	2201      	movs	r2, #1
 80017cc:	4619      	mov	r1, r3
 80017ce:	f7ff f845 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 4, 1);
 80017d2:	7dfb      	ldrb	r3, [r7, #23]
 80017d4:	3303      	adds	r3, #3
 80017d6:	b2d8      	uxtb	r0, r3
 80017d8:	7dbb      	ldrb	r3, [r7, #22]
 80017da:	3304      	adds	r3, #4
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	2201      	movs	r2, #1
 80017e0:	4619      	mov	r1, r3
 80017e2:	f7ff f83b 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 4, y + 4, 1);
 80017e6:	7dfb      	ldrb	r3, [r7, #23]
 80017e8:	3304      	adds	r3, #4
 80017ea:	b2d8      	uxtb	r0, r3
 80017ec:	7dbb      	ldrb	r3, [r7, #22]
 80017ee:	3304      	adds	r3, #4
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	2201      	movs	r2, #1
 80017f4:	4619      	mov	r1, r3
 80017f6:	f7ff f831 	bl	800085c <nokia5110_SetPixel>
		break;
 80017fa:	e369      	b.n	8001ed0 <nokia5110_WriteCharacter+0x14e8>
	}
	case 'R':
	{
		nokia5110_SetPixel(x + 0, y + 0, 1);
 80017fc:	7db9      	ldrb	r1, [r7, #22]
 80017fe:	7dfb      	ldrb	r3, [r7, #23]
 8001800:	2201      	movs	r2, #1
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff f82a 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 1, y + 0, 1);
 8001808:	7dfb      	ldrb	r3, [r7, #23]
 800180a:	3301      	adds	r3, #1
 800180c:	b2db      	uxtb	r3, r3
 800180e:	7db9      	ldrb	r1, [r7, #22]
 8001810:	2201      	movs	r2, #1
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff f822 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 0, 1);
 8001818:	7dfb      	ldrb	r3, [r7, #23]
 800181a:	3302      	adds	r3, #2
 800181c:	b2db      	uxtb	r3, r3
 800181e:	7db9      	ldrb	r1, [r7, #22]
 8001820:	2201      	movs	r2, #1
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff f81a 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 1, 1);
 8001828:	7dbb      	ldrb	r3, [r7, #22]
 800182a:	3301      	adds	r3, #1
 800182c:	b2d9      	uxtb	r1, r3
 800182e:	7dfb      	ldrb	r3, [r7, #23]
 8001830:	2201      	movs	r2, #1
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff f812 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 4, y + 1, 1);
 8001838:	7dfb      	ldrb	r3, [r7, #23]
 800183a:	3304      	adds	r3, #4
 800183c:	b2d8      	uxtb	r0, r3
 800183e:	7dbb      	ldrb	r3, [r7, #22]
 8001840:	3301      	adds	r3, #1
 8001842:	b2db      	uxtb	r3, r3
 8001844:	2201      	movs	r2, #1
 8001846:	4619      	mov	r1, r3
 8001848:	f7ff f808 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 2, 1);
 800184c:	7dbb      	ldrb	r3, [r7, #22]
 800184e:	3302      	adds	r3, #2
 8001850:	b2d9      	uxtb	r1, r3
 8001852:	7dfb      	ldrb	r3, [r7, #23]
 8001854:	2201      	movs	r2, #1
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff f800 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 4, y + 2, 1);
 800185c:	7dfb      	ldrb	r3, [r7, #23]
 800185e:	3304      	adds	r3, #4
 8001860:	b2d8      	uxtb	r0, r3
 8001862:	7dbb      	ldrb	r3, [r7, #22]
 8001864:	3302      	adds	r3, #2
 8001866:	b2db      	uxtb	r3, r3
 8001868:	2201      	movs	r2, #1
 800186a:	4619      	mov	r1, r3
 800186c:	f7fe fff6 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 3, 1);
 8001870:	7dbb      	ldrb	r3, [r7, #22]
 8001872:	3303      	adds	r3, #3
 8001874:	b2d9      	uxtb	r1, r3
 8001876:	7dfb      	ldrb	r3, [r7, #23]
 8001878:	2201      	movs	r2, #1
 800187a:	4618      	mov	r0, r3
 800187c:	f7fe ffee 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 1, y + 3, 1);
 8001880:	7dfb      	ldrb	r3, [r7, #23]
 8001882:	3301      	adds	r3, #1
 8001884:	b2d8      	uxtb	r0, r3
 8001886:	7dbb      	ldrb	r3, [r7, #22]
 8001888:	3303      	adds	r3, #3
 800188a:	b2db      	uxtb	r3, r3
 800188c:	2201      	movs	r2, #1
 800188e:	4619      	mov	r1, r3
 8001890:	f7fe ffe4 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 3, 1);
 8001894:	7dfb      	ldrb	r3, [r7, #23]
 8001896:	3302      	adds	r3, #2
 8001898:	b2d8      	uxtb	r0, r3
 800189a:	7dbb      	ldrb	r3, [r7, #22]
 800189c:	3303      	adds	r3, #3
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	2201      	movs	r2, #1
 80018a2:	4619      	mov	r1, r3
 80018a4:	f7fe ffda 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 4, 1);
 80018a8:	7dbb      	ldrb	r3, [r7, #22]
 80018aa:	3304      	adds	r3, #4
 80018ac:	b2d9      	uxtb	r1, r3
 80018ae:	7dfb      	ldrb	r3, [r7, #23]
 80018b0:	2201      	movs	r2, #1
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7fe ffd2 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 4, 1);
 80018b8:	7dfb      	ldrb	r3, [r7, #23]
 80018ba:	3303      	adds	r3, #3
 80018bc:	b2d8      	uxtb	r0, r3
 80018be:	7dbb      	ldrb	r3, [r7, #22]
 80018c0:	3304      	adds	r3, #4
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	2201      	movs	r2, #1
 80018c6:	4619      	mov	r1, r3
 80018c8:	f7fe ffc8 	bl	800085c <nokia5110_SetPixel>

		break;
 80018cc:	e300      	b.n	8001ed0 <nokia5110_WriteCharacter+0x14e8>
	}
	case 'S':
	{
		nokia5110_SetPixel(x + 1, y + 0, 1);
 80018ce:	7dfb      	ldrb	r3, [r7, #23]
 80018d0:	3301      	adds	r3, #1
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	7db9      	ldrb	r1, [r7, #22]
 80018d6:	2201      	movs	r2, #1
 80018d8:	4618      	mov	r0, r3
 80018da:	f7fe ffbf 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 0, 1);
 80018de:	7dfb      	ldrb	r3, [r7, #23]
 80018e0:	3302      	adds	r3, #2
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	7db9      	ldrb	r1, [r7, #22]
 80018e6:	2201      	movs	r2, #1
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7fe ffb7 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 0, 1);
 80018ee:	7dfb      	ldrb	r3, [r7, #23]
 80018f0:	3303      	adds	r3, #3
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	7db9      	ldrb	r1, [r7, #22]
 80018f6:	2201      	movs	r2, #1
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7fe ffaf 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 1, 1);
 80018fe:	7dbb      	ldrb	r3, [r7, #22]
 8001900:	3301      	adds	r3, #1
 8001902:	b2d9      	uxtb	r1, r3
 8001904:	7dfb      	ldrb	r3, [r7, #23]
 8001906:	2201      	movs	r2, #1
 8001908:	4618      	mov	r0, r3
 800190a:	f7fe ffa7 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 2, 1);
 800190e:	7dbb      	ldrb	r3, [r7, #22]
 8001910:	3302      	adds	r3, #2
 8001912:	b2d9      	uxtb	r1, r3
 8001914:	7dfb      	ldrb	r3, [r7, #23]
 8001916:	2201      	movs	r2, #1
 8001918:	4618      	mov	r0, r3
 800191a:	f7fe ff9f 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 1, y + 2, 1);
 800191e:	7dfb      	ldrb	r3, [r7, #23]
 8001920:	3301      	adds	r3, #1
 8001922:	b2d8      	uxtb	r0, r3
 8001924:	7dbb      	ldrb	r3, [r7, #22]
 8001926:	3302      	adds	r3, #2
 8001928:	b2db      	uxtb	r3, r3
 800192a:	2201      	movs	r2, #1
 800192c:	4619      	mov	r1, r3
 800192e:	f7fe ff95 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 2, 1);
 8001932:	7dfb      	ldrb	r3, [r7, #23]
 8001934:	3302      	adds	r3, #2
 8001936:	b2d8      	uxtb	r0, r3
 8001938:	7dbb      	ldrb	r3, [r7, #22]
 800193a:	3302      	adds	r3, #2
 800193c:	b2db      	uxtb	r3, r3
 800193e:	2201      	movs	r2, #1
 8001940:	4619      	mov	r1, r3
 8001942:	f7fe ff8b 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 2, 1);
 8001946:	7dfb      	ldrb	r3, [r7, #23]
 8001948:	3303      	adds	r3, #3
 800194a:	b2d8      	uxtb	r0, r3
 800194c:	7dbb      	ldrb	r3, [r7, #22]
 800194e:	3302      	adds	r3, #2
 8001950:	b2db      	uxtb	r3, r3
 8001952:	2201      	movs	r2, #1
 8001954:	4619      	mov	r1, r3
 8001956:	f7fe ff81 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 3, 1);
 800195a:	7dfb      	ldrb	r3, [r7, #23]
 800195c:	3303      	adds	r3, #3
 800195e:	b2d8      	uxtb	r0, r3
 8001960:	7dbb      	ldrb	r3, [r7, #22]
 8001962:	3303      	adds	r3, #3
 8001964:	b2db      	uxtb	r3, r3
 8001966:	2201      	movs	r2, #1
 8001968:	4619      	mov	r1, r3
 800196a:	f7fe ff77 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 4, 1);
 800196e:	7dbb      	ldrb	r3, [r7, #22]
 8001970:	3304      	adds	r3, #4
 8001972:	b2d9      	uxtb	r1, r3
 8001974:	7dfb      	ldrb	r3, [r7, #23]
 8001976:	2201      	movs	r2, #1
 8001978:	4618      	mov	r0, r3
 800197a:	f7fe ff6f 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 1, y + 4, 1);
 800197e:	7dfb      	ldrb	r3, [r7, #23]
 8001980:	3301      	adds	r3, #1
 8001982:	b2d8      	uxtb	r0, r3
 8001984:	7dbb      	ldrb	r3, [r7, #22]
 8001986:	3304      	adds	r3, #4
 8001988:	b2db      	uxtb	r3, r3
 800198a:	2201      	movs	r2, #1
 800198c:	4619      	mov	r1, r3
 800198e:	f7fe ff65 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 4, 1);
 8001992:	7dfb      	ldrb	r3, [r7, #23]
 8001994:	3302      	adds	r3, #2
 8001996:	b2d8      	uxtb	r0, r3
 8001998:	7dbb      	ldrb	r3, [r7, #22]
 800199a:	3304      	adds	r3, #4
 800199c:	b2db      	uxtb	r3, r3
 800199e:	2201      	movs	r2, #1
 80019a0:	4619      	mov	r1, r3
 80019a2:	f7fe ff5b 	bl	800085c <nokia5110_SetPixel>
		break;
 80019a6:	e293      	b.n	8001ed0 <nokia5110_WriteCharacter+0x14e8>
	}
	case 'T':
	{
		nokia5110_SetPixel(x + 0, y + 0, 1);
 80019a8:	7db9      	ldrb	r1, [r7, #22]
 80019aa:	7dfb      	ldrb	r3, [r7, #23]
 80019ac:	2201      	movs	r2, #1
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7fe ff54 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 1, y + 0, 1);
 80019b4:	7dfb      	ldrb	r3, [r7, #23]
 80019b6:	3301      	adds	r3, #1
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	7db9      	ldrb	r1, [r7, #22]
 80019bc:	2201      	movs	r2, #1
 80019be:	4618      	mov	r0, r3
 80019c0:	f7fe ff4c 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 0, 1);
 80019c4:	7dfb      	ldrb	r3, [r7, #23]
 80019c6:	3302      	adds	r3, #2
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	7db9      	ldrb	r1, [r7, #22]
 80019cc:	2201      	movs	r2, #1
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7fe ff44 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 0, 1);
 80019d4:	7dfb      	ldrb	r3, [r7, #23]
 80019d6:	3303      	adds	r3, #3
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	7db9      	ldrb	r1, [r7, #22]
 80019dc:	2201      	movs	r2, #1
 80019de:	4618      	mov	r0, r3
 80019e0:	f7fe ff3c 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 4, y + 0, 1);
 80019e4:	7dfb      	ldrb	r3, [r7, #23]
 80019e6:	3304      	adds	r3, #4
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	7db9      	ldrb	r1, [r7, #22]
 80019ec:	2201      	movs	r2, #1
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7fe ff34 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 1, 1);
 80019f4:	7dfb      	ldrb	r3, [r7, #23]
 80019f6:	3302      	adds	r3, #2
 80019f8:	b2d8      	uxtb	r0, r3
 80019fa:	7dbb      	ldrb	r3, [r7, #22]
 80019fc:	3301      	adds	r3, #1
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	2201      	movs	r2, #1
 8001a02:	4619      	mov	r1, r3
 8001a04:	f7fe ff2a 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 2, 1);
 8001a08:	7dfb      	ldrb	r3, [r7, #23]
 8001a0a:	3302      	adds	r3, #2
 8001a0c:	b2d8      	uxtb	r0, r3
 8001a0e:	7dbb      	ldrb	r3, [r7, #22]
 8001a10:	3302      	adds	r3, #2
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	2201      	movs	r2, #1
 8001a16:	4619      	mov	r1, r3
 8001a18:	f7fe ff20 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 3, 1);
 8001a1c:	7dfb      	ldrb	r3, [r7, #23]
 8001a1e:	3302      	adds	r3, #2
 8001a20:	b2d8      	uxtb	r0, r3
 8001a22:	7dbb      	ldrb	r3, [r7, #22]
 8001a24:	3303      	adds	r3, #3
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	2201      	movs	r2, #1
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	f7fe ff16 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 4, 1);
 8001a30:	7dfb      	ldrb	r3, [r7, #23]
 8001a32:	3302      	adds	r3, #2
 8001a34:	b2d8      	uxtb	r0, r3
 8001a36:	7dbb      	ldrb	r3, [r7, #22]
 8001a38:	3304      	adds	r3, #4
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	4619      	mov	r1, r3
 8001a40:	f7fe ff0c 	bl	800085c <nokia5110_SetPixel>
		break;
 8001a44:	e244      	b.n	8001ed0 <nokia5110_WriteCharacter+0x14e8>
	}
	case 'U':
	{
		nokia5110_SetPixel(x + 0, y + 0, 1);
 8001a46:	7db9      	ldrb	r1, [r7, #22]
 8001a48:	7dfb      	ldrb	r3, [r7, #23]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7fe ff05 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 0, 1);
 8001a52:	7dfb      	ldrb	r3, [r7, #23]
 8001a54:	3303      	adds	r3, #3
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	7db9      	ldrb	r1, [r7, #22]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7fe fefd 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 1, 1);
 8001a62:	7dbb      	ldrb	r3, [r7, #22]
 8001a64:	3301      	adds	r3, #1
 8001a66:	b2d9      	uxtb	r1, r3
 8001a68:	7dfb      	ldrb	r3, [r7, #23]
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7fe fef5 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 1, 1);
 8001a72:	7dfb      	ldrb	r3, [r7, #23]
 8001a74:	3303      	adds	r3, #3
 8001a76:	b2d8      	uxtb	r0, r3
 8001a78:	7dbb      	ldrb	r3, [r7, #22]
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	2201      	movs	r2, #1
 8001a80:	4619      	mov	r1, r3
 8001a82:	f7fe feeb 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 2, 1);
 8001a86:	7dbb      	ldrb	r3, [r7, #22]
 8001a88:	3302      	adds	r3, #2
 8001a8a:	b2d9      	uxtb	r1, r3
 8001a8c:	7dfb      	ldrb	r3, [r7, #23]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7fe fee3 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 2, 1);
 8001a96:	7dfb      	ldrb	r3, [r7, #23]
 8001a98:	3303      	adds	r3, #3
 8001a9a:	b2d8      	uxtb	r0, r3
 8001a9c:	7dbb      	ldrb	r3, [r7, #22]
 8001a9e:	3302      	adds	r3, #2
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	f7fe fed9 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 3, 1);
 8001aaa:	7dbb      	ldrb	r3, [r7, #22]
 8001aac:	3303      	adds	r3, #3
 8001aae:	b2d9      	uxtb	r1, r3
 8001ab0:	7dfb      	ldrb	r3, [r7, #23]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7fe fed1 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 3, 1);
 8001aba:	7dfb      	ldrb	r3, [r7, #23]
 8001abc:	3303      	adds	r3, #3
 8001abe:	b2d8      	uxtb	r0, r3
 8001ac0:	7dbb      	ldrb	r3, [r7, #22]
 8001ac2:	3303      	adds	r3, #3
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	4619      	mov	r1, r3
 8001aca:	f7fe fec7 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 1, y + 4, 1);
 8001ace:	7dfb      	ldrb	r3, [r7, #23]
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	b2d8      	uxtb	r0, r3
 8001ad4:	7dbb      	ldrb	r3, [r7, #22]
 8001ad6:	3304      	adds	r3, #4
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	2201      	movs	r2, #1
 8001adc:	4619      	mov	r1, r3
 8001ade:	f7fe febd 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 4, 1);
 8001ae2:	7dfb      	ldrb	r3, [r7, #23]
 8001ae4:	3302      	adds	r3, #2
 8001ae6:	b2d8      	uxtb	r0, r3
 8001ae8:	7dbb      	ldrb	r3, [r7, #22]
 8001aea:	3304      	adds	r3, #4
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	2201      	movs	r2, #1
 8001af0:	4619      	mov	r1, r3
 8001af2:	f7fe feb3 	bl	800085c <nokia5110_SetPixel>
		break;
 8001af6:	e1eb      	b.n	8001ed0 <nokia5110_WriteCharacter+0x14e8>
	}
	case 'V':
	{
		nokia5110_SetPixel(x + 0, y + 0, 1);
 8001af8:	7db9      	ldrb	r1, [r7, #22]
 8001afa:	7dfb      	ldrb	r3, [r7, #23]
 8001afc:	2201      	movs	r2, #1
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7fe feac 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 0, 1);
 8001b04:	7dfb      	ldrb	r3, [r7, #23]
 8001b06:	3303      	adds	r3, #3
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	7db9      	ldrb	r1, [r7, #22]
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7fe fea4 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 1, 1);
 8001b14:	7dbb      	ldrb	r3, [r7, #22]
 8001b16:	3301      	adds	r3, #1
 8001b18:	b2d9      	uxtb	r1, r3
 8001b1a:	7dfb      	ldrb	r3, [r7, #23]
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7fe fe9c 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 1, 1);
 8001b24:	7dfb      	ldrb	r3, [r7, #23]
 8001b26:	3303      	adds	r3, #3
 8001b28:	b2d8      	uxtb	r0, r3
 8001b2a:	7dbb      	ldrb	r3, [r7, #22]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	2201      	movs	r2, #1
 8001b32:	4619      	mov	r1, r3
 8001b34:	f7fe fe92 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 2, 1);
 8001b38:	7dbb      	ldrb	r3, [r7, #22]
 8001b3a:	3302      	adds	r3, #2
 8001b3c:	b2d9      	uxtb	r1, r3
 8001b3e:	7dfb      	ldrb	r3, [r7, #23]
 8001b40:	2201      	movs	r2, #1
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7fe fe8a 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 2, 1);
 8001b48:	7dfb      	ldrb	r3, [r7, #23]
 8001b4a:	3303      	adds	r3, #3
 8001b4c:	b2d8      	uxtb	r0, r3
 8001b4e:	7dbb      	ldrb	r3, [r7, #22]
 8001b50:	3302      	adds	r3, #2
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	2201      	movs	r2, #1
 8001b56:	4619      	mov	r1, r3
 8001b58:	f7fe fe80 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 3, 1);
 8001b5c:	7dbb      	ldrb	r3, [r7, #22]
 8001b5e:	3303      	adds	r3, #3
 8001b60:	b2d9      	uxtb	r1, r3
 8001b62:	7dfb      	ldrb	r3, [r7, #23]
 8001b64:	2201      	movs	r2, #1
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7fe fe78 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 3, 1);
 8001b6c:	7dfb      	ldrb	r3, [r7, #23]
 8001b6e:	3303      	adds	r3, #3
 8001b70:	b2d8      	uxtb	r0, r3
 8001b72:	7dbb      	ldrb	r3, [r7, #22]
 8001b74:	3303      	adds	r3, #3
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	2201      	movs	r2, #1
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	f7fe fe6e 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 1, y + 4, 1);
 8001b80:	7dfb      	ldrb	r3, [r7, #23]
 8001b82:	3301      	adds	r3, #1
 8001b84:	b2d8      	uxtb	r0, r3
 8001b86:	7dbb      	ldrb	r3, [r7, #22]
 8001b88:	3304      	adds	r3, #4
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	4619      	mov	r1, r3
 8001b90:	f7fe fe64 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 4, 1);
 8001b94:	7dfb      	ldrb	r3, [r7, #23]
 8001b96:	3302      	adds	r3, #2
 8001b98:	b2d8      	uxtb	r0, r3
 8001b9a:	7dbb      	ldrb	r3, [r7, #22]
 8001b9c:	3304      	adds	r3, #4
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	f7fe fe5a 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 1, y + 5, 1);
 8001ba8:	7dfb      	ldrb	r3, [r7, #23]
 8001baa:	3301      	adds	r3, #1
 8001bac:	b2d8      	uxtb	r0, r3
 8001bae:	7dbb      	ldrb	r3, [r7, #22]
 8001bb0:	3305      	adds	r3, #5
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	f7fe fe50 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 5, 1);
 8001bbc:	7dfb      	ldrb	r3, [r7, #23]
 8001bbe:	3302      	adds	r3, #2
 8001bc0:	b2d8      	uxtb	r0, r3
 8001bc2:	7dbb      	ldrb	r3, [r7, #22]
 8001bc4:	3305      	adds	r3, #5
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	2201      	movs	r2, #1
 8001bca:	4619      	mov	r1, r3
 8001bcc:	f7fe fe46 	bl	800085c <nokia5110_SetPixel>
		break;
 8001bd0:	e17e      	b.n	8001ed0 <nokia5110_WriteCharacter+0x14e8>
	}
	case 'W':
	{
		nokia5110_SetPixel(x + 0, y + 0, 1);
 8001bd2:	7db9      	ldrb	r1, [r7, #22]
 8001bd4:	7dfb      	ldrb	r3, [r7, #23]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7fe fe3f 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 0, 1);
 8001bde:	7dfb      	ldrb	r3, [r7, #23]
 8001be0:	3302      	adds	r3, #2
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	7db9      	ldrb	r1, [r7, #22]
 8001be6:	2201      	movs	r2, #1
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7fe fe37 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 4, y + 0, 1);
 8001bee:	7dfb      	ldrb	r3, [r7, #23]
 8001bf0:	3304      	adds	r3, #4
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	7db9      	ldrb	r1, [r7, #22]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7fe fe2f 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 1, 1);
 8001bfe:	7dbb      	ldrb	r3, [r7, #22]
 8001c00:	3301      	adds	r3, #1
 8001c02:	b2d9      	uxtb	r1, r3
 8001c04:	7dfb      	ldrb	r3, [r7, #23]
 8001c06:	2201      	movs	r2, #1
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7fe fe27 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 1, 1);
 8001c0e:	7dfb      	ldrb	r3, [r7, #23]
 8001c10:	3302      	adds	r3, #2
 8001c12:	b2d8      	uxtb	r0, r3
 8001c14:	7dbb      	ldrb	r3, [r7, #22]
 8001c16:	3301      	adds	r3, #1
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	f7fe fe1d 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 4, y + 1, 1);
 8001c22:	7dfb      	ldrb	r3, [r7, #23]
 8001c24:	3304      	adds	r3, #4
 8001c26:	b2d8      	uxtb	r0, r3
 8001c28:	7dbb      	ldrb	r3, [r7, #22]
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	2201      	movs	r2, #1
 8001c30:	4619      	mov	r1, r3
 8001c32:	f7fe fe13 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 2, 1);
 8001c36:	7dbb      	ldrb	r3, [r7, #22]
 8001c38:	3302      	adds	r3, #2
 8001c3a:	b2d9      	uxtb	r1, r3
 8001c3c:	7dfb      	ldrb	r3, [r7, #23]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7fe fe0b 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 2, 1);
 8001c46:	7dfb      	ldrb	r3, [r7, #23]
 8001c48:	3302      	adds	r3, #2
 8001c4a:	b2d8      	uxtb	r0, r3
 8001c4c:	7dbb      	ldrb	r3, [r7, #22]
 8001c4e:	3302      	adds	r3, #2
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	2201      	movs	r2, #1
 8001c54:	4619      	mov	r1, r3
 8001c56:	f7fe fe01 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 4, y + 2, 1);
 8001c5a:	7dfb      	ldrb	r3, [r7, #23]
 8001c5c:	3304      	adds	r3, #4
 8001c5e:	b2d8      	uxtb	r0, r3
 8001c60:	7dbb      	ldrb	r3, [r7, #22]
 8001c62:	3302      	adds	r3, #2
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	2201      	movs	r2, #1
 8001c68:	4619      	mov	r1, r3
 8001c6a:	f7fe fdf7 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 3, 1);
 8001c6e:	7dbb      	ldrb	r3, [r7, #22]
 8001c70:	3303      	adds	r3, #3
 8001c72:	b2d9      	uxtb	r1, r3
 8001c74:	7dfb      	ldrb	r3, [r7, #23]
 8001c76:	2201      	movs	r2, #1
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7fe fdef 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 3, 1);
 8001c7e:	7dfb      	ldrb	r3, [r7, #23]
 8001c80:	3302      	adds	r3, #2
 8001c82:	b2d8      	uxtb	r0, r3
 8001c84:	7dbb      	ldrb	r3, [r7, #22]
 8001c86:	3303      	adds	r3, #3
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	f7fe fde5 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 4, y + 3, 1);
 8001c92:	7dfb      	ldrb	r3, [r7, #23]
 8001c94:	3304      	adds	r3, #4
 8001c96:	b2d8      	uxtb	r0, r3
 8001c98:	7dbb      	ldrb	r3, [r7, #22]
 8001c9a:	3303      	adds	r3, #3
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	f7fe fddb 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 1, y + 4, 1);
 8001ca6:	7dfb      	ldrb	r3, [r7, #23]
 8001ca8:	3301      	adds	r3, #1
 8001caa:	b2d8      	uxtb	r0, r3
 8001cac:	7dbb      	ldrb	r3, [r7, #22]
 8001cae:	3304      	adds	r3, #4
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	f7fe fdd1 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 4, 1);
 8001cba:	7dfb      	ldrb	r3, [r7, #23]
 8001cbc:	3303      	adds	r3, #3
 8001cbe:	b2d8      	uxtb	r0, r3
 8001cc0:	7dbb      	ldrb	r3, [r7, #22]
 8001cc2:	3304      	adds	r3, #4
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	4619      	mov	r1, r3
 8001cca:	f7fe fdc7 	bl	800085c <nokia5110_SetPixel>

		break;
 8001cce:	e0ff      	b.n	8001ed0 <nokia5110_WriteCharacter+0x14e8>
	}
	case 'X':
	{
		nokia5110_SetPixel(x + 0, y + 0, 1);
 8001cd0:	7db9      	ldrb	r1, [r7, #22]
 8001cd2:	7dfb      	ldrb	r3, [r7, #23]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7fe fdc0 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 4, y + 0, 1);
 8001cdc:	7dfb      	ldrb	r3, [r7, #23]
 8001cde:	3304      	adds	r3, #4
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	7db9      	ldrb	r1, [r7, #22]
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7fe fdb8 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 1, y + 1, 1);
 8001cec:	7dfb      	ldrb	r3, [r7, #23]
 8001cee:	3301      	adds	r3, #1
 8001cf0:	b2d8      	uxtb	r0, r3
 8001cf2:	7dbb      	ldrb	r3, [r7, #22]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	f7fe fdae 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 1, 1);
 8001d00:	7dfb      	ldrb	r3, [r7, #23]
 8001d02:	3303      	adds	r3, #3
 8001d04:	b2d8      	uxtb	r0, r3
 8001d06:	7dbb      	ldrb	r3, [r7, #22]
 8001d08:	3301      	adds	r3, #1
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	4619      	mov	r1, r3
 8001d10:	f7fe fda4 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 2, 1);
 8001d14:	7dfb      	ldrb	r3, [r7, #23]
 8001d16:	3302      	adds	r3, #2
 8001d18:	b2d8      	uxtb	r0, r3
 8001d1a:	7dbb      	ldrb	r3, [r7, #22]
 8001d1c:	3302      	adds	r3, #2
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	2201      	movs	r2, #1
 8001d22:	4619      	mov	r1, r3
 8001d24:	f7fe fd9a 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 1, y + 3, 1);
 8001d28:	7dfb      	ldrb	r3, [r7, #23]
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	b2d8      	uxtb	r0, r3
 8001d2e:	7dbb      	ldrb	r3, [r7, #22]
 8001d30:	3303      	adds	r3, #3
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	2201      	movs	r2, #1
 8001d36:	4619      	mov	r1, r3
 8001d38:	f7fe fd90 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 3, 1);
 8001d3c:	7dfb      	ldrb	r3, [r7, #23]
 8001d3e:	3303      	adds	r3, #3
 8001d40:	b2d8      	uxtb	r0, r3
 8001d42:	7dbb      	ldrb	r3, [r7, #22]
 8001d44:	3303      	adds	r3, #3
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	2201      	movs	r2, #1
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	f7fe fd86 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 4, 1);
 8001d50:	7dbb      	ldrb	r3, [r7, #22]
 8001d52:	3304      	adds	r3, #4
 8001d54:	b2d9      	uxtb	r1, r3
 8001d56:	7dfb      	ldrb	r3, [r7, #23]
 8001d58:	2201      	movs	r2, #1
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7fe fd7e 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 4, y + 4, 1);
 8001d60:	7dfb      	ldrb	r3, [r7, #23]
 8001d62:	3304      	adds	r3, #4
 8001d64:	b2d8      	uxtb	r0, r3
 8001d66:	7dbb      	ldrb	r3, [r7, #22]
 8001d68:	3304      	adds	r3, #4
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	4619      	mov	r1, r3
 8001d70:	f7fe fd74 	bl	800085c <nokia5110_SetPixel>
		break;
 8001d74:	e0ac      	b.n	8001ed0 <nokia5110_WriteCharacter+0x14e8>
	}
	case 'Y':
	{
		nokia5110_SetPixel(x + 0, y + 0, 1);
 8001d76:	7db9      	ldrb	r1, [r7, #22]
 8001d78:	7dfb      	ldrb	r3, [r7, #23]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7fe fd6d 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 4, y + 0, 1);
 8001d82:	7dfb      	ldrb	r3, [r7, #23]
 8001d84:	3304      	adds	r3, #4
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	7db9      	ldrb	r1, [r7, #22]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7fe fd65 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 1, y + 1, 1);
 8001d92:	7dfb      	ldrb	r3, [r7, #23]
 8001d94:	3301      	adds	r3, #1
 8001d96:	b2d8      	uxtb	r0, r3
 8001d98:	7dbb      	ldrb	r3, [r7, #22]
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2201      	movs	r2, #1
 8001da0:	4619      	mov	r1, r3
 8001da2:	f7fe fd5b 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 1, 1);
 8001da6:	7dfb      	ldrb	r3, [r7, #23]
 8001da8:	3303      	adds	r3, #3
 8001daa:	b2d8      	uxtb	r0, r3
 8001dac:	7dbb      	ldrb	r3, [r7, #22]
 8001dae:	3301      	adds	r3, #1
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	2201      	movs	r2, #1
 8001db4:	4619      	mov	r1, r3
 8001db6:	f7fe fd51 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 2, 1);
 8001dba:	7dfb      	ldrb	r3, [r7, #23]
 8001dbc:	3302      	adds	r3, #2
 8001dbe:	b2d8      	uxtb	r0, r3
 8001dc0:	7dbb      	ldrb	r3, [r7, #22]
 8001dc2:	3302      	adds	r3, #2
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	4619      	mov	r1, r3
 8001dca:	f7fe fd47 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 3, 1);
 8001dce:	7dfb      	ldrb	r3, [r7, #23]
 8001dd0:	3302      	adds	r3, #2
 8001dd2:	b2d8      	uxtb	r0, r3
 8001dd4:	7dbb      	ldrb	r3, [r7, #22]
 8001dd6:	3303      	adds	r3, #3
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2201      	movs	r2, #1
 8001ddc:	4619      	mov	r1, r3
 8001dde:	f7fe fd3d 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 4, 1);
 8001de2:	7dfb      	ldrb	r3, [r7, #23]
 8001de4:	3302      	adds	r3, #2
 8001de6:	b2d8      	uxtb	r0, r3
 8001de8:	7dbb      	ldrb	r3, [r7, #22]
 8001dea:	3304      	adds	r3, #4
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2201      	movs	r2, #1
 8001df0:	4619      	mov	r1, r3
 8001df2:	f7fe fd33 	bl	800085c <nokia5110_SetPixel>
		break;
 8001df6:	e06b      	b.n	8001ed0 <nokia5110_WriteCharacter+0x14e8>
	}
	case 'Z':
	{
		nokia5110_SetPixel(x + 0, y + 0, 1);
 8001df8:	7db9      	ldrb	r1, [r7, #22]
 8001dfa:	7dfb      	ldrb	r3, [r7, #23]
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7fe fd2c 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 1, y + 0, 1);
 8001e04:	7dfb      	ldrb	r3, [r7, #23]
 8001e06:	3301      	adds	r3, #1
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	7db9      	ldrb	r1, [r7, #22]
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7fe fd24 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 0, 1);
 8001e14:	7dfb      	ldrb	r3, [r7, #23]
 8001e16:	3302      	adds	r3, #2
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	7db9      	ldrb	r1, [r7, #22]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7fe fd1c 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 0, 1);
 8001e24:	7dfb      	ldrb	r3, [r7, #23]
 8001e26:	3303      	adds	r3, #3
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	7db9      	ldrb	r1, [r7, #22]
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7fe fd14 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 4, y + 0, 1);
 8001e34:	7dfb      	ldrb	r3, [r7, #23]
 8001e36:	3304      	adds	r3, #4
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	7db9      	ldrb	r1, [r7, #22]
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7fe fd0c 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 1, 1);
 8001e44:	7dfb      	ldrb	r3, [r7, #23]
 8001e46:	3303      	adds	r3, #3
 8001e48:	b2d8      	uxtb	r0, r3
 8001e4a:	7dbb      	ldrb	r3, [r7, #22]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	2201      	movs	r2, #1
 8001e52:	4619      	mov	r1, r3
 8001e54:	f7fe fd02 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 2, 1);
 8001e58:	7dfb      	ldrb	r3, [r7, #23]
 8001e5a:	3302      	adds	r3, #2
 8001e5c:	b2d8      	uxtb	r0, r3
 8001e5e:	7dbb      	ldrb	r3, [r7, #22]
 8001e60:	3302      	adds	r3, #2
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	2201      	movs	r2, #1
 8001e66:	4619      	mov	r1, r3
 8001e68:	f7fe fcf8 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 1, y + 3, 1);
 8001e6c:	7dfb      	ldrb	r3, [r7, #23]
 8001e6e:	3301      	adds	r3, #1
 8001e70:	b2d8      	uxtb	r0, r3
 8001e72:	7dbb      	ldrb	r3, [r7, #22]
 8001e74:	3303      	adds	r3, #3
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	2201      	movs	r2, #1
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	f7fe fcee 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 4, 1);
 8001e80:	7dbb      	ldrb	r3, [r7, #22]
 8001e82:	3304      	adds	r3, #4
 8001e84:	b2d9      	uxtb	r1, r3
 8001e86:	7dfb      	ldrb	r3, [r7, #23]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7fe fce6 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 1, y + 4, 1);
 8001e90:	7dfb      	ldrb	r3, [r7, #23]
 8001e92:	3301      	adds	r3, #1
 8001e94:	b2d8      	uxtb	r0, r3
 8001e96:	7dbb      	ldrb	r3, [r7, #22]
 8001e98:	3304      	adds	r3, #4
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	f7fe fcdc 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 4, 1);
 8001ea4:	7dfb      	ldrb	r3, [r7, #23]
 8001ea6:	3303      	adds	r3, #3
 8001ea8:	b2d8      	uxtb	r0, r3
 8001eaa:	7dbb      	ldrb	r3, [r7, #22]
 8001eac:	3304      	adds	r3, #4
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	f7fe fcd2 	bl	800085c <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 4, y + 4, 1);
 8001eb8:	7dfb      	ldrb	r3, [r7, #23]
 8001eba:	3304      	adds	r3, #4
 8001ebc:	b2d8      	uxtb	r0, r3
 8001ebe:	7dbb      	ldrb	r3, [r7, #22]
 8001ec0:	3304      	adds	r3, #4
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	f7fe fcc8 	bl	800085c <nokia5110_SetPixel>
		break;
 8001ecc:	e000      	b.n	8001ed0 <nokia5110_WriteCharacter+0x14e8>
	}
	default:
	{
		  break;
 8001ece:	bf00      	nop
	}
	}

	x += 6;
 8001ed0:	7dfb      	ldrb	r3, [r7, #23]
 8001ed2:	3306      	adds	r3, #6
 8001ed4:	75fb      	strb	r3, [r7, #23]

    if (x >= 80)
 8001ed6:	7dfb      	ldrb	r3, [r7, #23]
 8001ed8:	2b4f      	cmp	r3, #79	; 0x4f
 8001eda:	d904      	bls.n	8001ee6 <nokia5110_WriteCharacter+0x14fe>
    {
        x = 0;
 8001edc:	2300      	movs	r3, #0
 8001ede:	75fb      	strb	r3, [r7, #23]
        y += 6;
 8001ee0:	7dbb      	ldrb	r3, [r7, #22]
 8001ee2:	3306      	adds	r3, #6
 8001ee4:	75bb      	strb	r3, [r7, #22]
    }

    if (y >= 48)
 8001ee6:	7dbb      	ldrb	r3, [r7, #22]
 8001ee8:	2b2f      	cmp	r3, #47	; 0x2f
 8001eea:	d80b      	bhi.n	8001f04 <nokia5110_WriteCharacter+0x151c>
	for(int i = 0; i< strlen(word); i++)
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	3301      	adds	r3, #1
 8001ef0:	613b      	str	r3, [r7, #16]
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f7fe f968 	bl	80001c8 <strlen>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	f63e ad7f 	bhi.w	8000a00 <nokia5110_WriteCharacter+0x18>

        break;
    }

	}
}
 8001f02:	e000      	b.n	8001f06 <nokia5110_WriteCharacter+0x151e>
        break;
 8001f04:	bf00      	nop
}
 8001f06:	bf00      	nop
 8001f08:	3718      	adds	r7, #24
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop

08001f10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f16:	2300      	movs	r3, #0
 8001f18:	607b      	str	r3, [r7, #4]
 8001f1a:	4b10      	ldr	r3, [pc, #64]	; (8001f5c <HAL_MspInit+0x4c>)
 8001f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1e:	4a0f      	ldr	r2, [pc, #60]	; (8001f5c <HAL_MspInit+0x4c>)
 8001f20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f24:	6453      	str	r3, [r2, #68]	; 0x44
 8001f26:	4b0d      	ldr	r3, [pc, #52]	; (8001f5c <HAL_MspInit+0x4c>)
 8001f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f2e:	607b      	str	r3, [r7, #4]
 8001f30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f32:	2300      	movs	r3, #0
 8001f34:	603b      	str	r3, [r7, #0]
 8001f36:	4b09      	ldr	r3, [pc, #36]	; (8001f5c <HAL_MspInit+0x4c>)
 8001f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3a:	4a08      	ldr	r2, [pc, #32]	; (8001f5c <HAL_MspInit+0x4c>)
 8001f3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f40:	6413      	str	r3, [r2, #64]	; 0x40
 8001f42:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <HAL_MspInit+0x4c>)
 8001f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f4a:	603b      	str	r3, [r7, #0]
 8001f4c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001f4e:	2007      	movs	r0, #7
 8001f50:	f000 fa56 	bl	8002400 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f54:	bf00      	nop
 8001f56:	3708      	adds	r7, #8
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	40023800 	.word	0x40023800

08001f60 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b08a      	sub	sp, #40	; 0x28
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f68:	f107 0314 	add.w	r3, r7, #20
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	605a      	str	r2, [r3, #4]
 8001f72:	609a      	str	r2, [r3, #8]
 8001f74:	60da      	str	r2, [r3, #12]
 8001f76:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a30      	ldr	r2, [pc, #192]	; (8002040 <HAL_SPI_MspInit+0xe0>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d159      	bne.n	8002036 <HAL_SPI_MspInit+0xd6>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	613b      	str	r3, [r7, #16]
 8001f86:	4b2f      	ldr	r3, [pc, #188]	; (8002044 <HAL_SPI_MspInit+0xe4>)
 8001f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8a:	4a2e      	ldr	r2, [pc, #184]	; (8002044 <HAL_SPI_MspInit+0xe4>)
 8001f8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f90:	6413      	str	r3, [r2, #64]	; 0x40
 8001f92:	4b2c      	ldr	r3, [pc, #176]	; (8002044 <HAL_SPI_MspInit+0xe4>)
 8001f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f9a:	613b      	str	r3, [r7, #16]
 8001f9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60fb      	str	r3, [r7, #12]
 8001fa2:	4b28      	ldr	r3, [pc, #160]	; (8002044 <HAL_SPI_MspInit+0xe4>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	4a27      	ldr	r2, [pc, #156]	; (8002044 <HAL_SPI_MspInit+0xe4>)
 8001fa8:	f043 0302 	orr.w	r3, r3, #2
 8001fac:	6313      	str	r3, [r2, #48]	; 0x30
 8001fae:	4b25      	ldr	r3, [pc, #148]	; (8002044 <HAL_SPI_MspInit+0xe4>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001fba:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001fbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001fcc:	2305      	movs	r3, #5
 8001fce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fd0:	f107 0314 	add.w	r3, r7, #20
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	481c      	ldr	r0, [pc, #112]	; (8002048 <HAL_SPI_MspInit+0xe8>)
 8001fd8:	f000 fdc4 	bl	8002b64 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001fdc:	4b1b      	ldr	r3, [pc, #108]	; (800204c <HAL_SPI_MspInit+0xec>)
 8001fde:	4a1c      	ldr	r2, [pc, #112]	; (8002050 <HAL_SPI_MspInit+0xf0>)
 8001fe0:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001fe2:	4b1a      	ldr	r3, [pc, #104]	; (800204c <HAL_SPI_MspInit+0xec>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001fe8:	4b18      	ldr	r3, [pc, #96]	; (800204c <HAL_SPI_MspInit+0xec>)
 8001fea:	2240      	movs	r2, #64	; 0x40
 8001fec:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fee:	4b17      	ldr	r3, [pc, #92]	; (800204c <HAL_SPI_MspInit+0xec>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ff4:	4b15      	ldr	r3, [pc, #84]	; (800204c <HAL_SPI_MspInit+0xec>)
 8001ff6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ffa:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ffc:	4b13      	ldr	r3, [pc, #76]	; (800204c <HAL_SPI_MspInit+0xec>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002002:	4b12      	ldr	r3, [pc, #72]	; (800204c <HAL_SPI_MspInit+0xec>)
 8002004:	2200      	movs	r2, #0
 8002006:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8002008:	4b10      	ldr	r3, [pc, #64]	; (800204c <HAL_SPI_MspInit+0xec>)
 800200a:	2200      	movs	r2, #0
 800200c:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800200e:	4b0f      	ldr	r3, [pc, #60]	; (800204c <HAL_SPI_MspInit+0xec>)
 8002010:	2200      	movs	r2, #0
 8002012:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002014:	4b0d      	ldr	r3, [pc, #52]	; (800204c <HAL_SPI_MspInit+0xec>)
 8002016:	2200      	movs	r2, #0
 8002018:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800201a:	480c      	ldr	r0, [pc, #48]	; (800204c <HAL_SPI_MspInit+0xec>)
 800201c:	f000 fa32 	bl	8002484 <HAL_DMA_Init>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8002026:	f7fe fb8b 	bl	8000740 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a07      	ldr	r2, [pc, #28]	; (800204c <HAL_SPI_MspInit+0xec>)
 800202e:	649a      	str	r2, [r3, #72]	; 0x48
 8002030:	4a06      	ldr	r2, [pc, #24]	; (800204c <HAL_SPI_MspInit+0xec>)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002036:	bf00      	nop
 8002038:	3728      	adds	r7, #40	; 0x28
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	40003800 	.word	0x40003800
 8002044:	40023800 	.word	0x40023800
 8002048:	40020400 	.word	0x40020400
 800204c:	20000080 	.word	0x20000080
 8002050:	40026070 	.word	0x40026070

08002054 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002058:	e7fe      	b.n	8002058 <NMI_Handler+0x4>

0800205a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800205a:	b480      	push	{r7}
 800205c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800205e:	e7fe      	b.n	800205e <HardFault_Handler+0x4>

08002060 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002064:	e7fe      	b.n	8002064 <MemManage_Handler+0x4>

08002066 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002066:	b480      	push	{r7}
 8002068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800206a:	e7fe      	b.n	800206a <BusFault_Handler+0x4>

0800206c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002070:	e7fe      	b.n	8002070 <UsageFault_Handler+0x4>

08002072 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002072:	b480      	push	{r7}
 8002074:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002076:	bf00      	nop
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002084:	bf00      	nop
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr

0800208e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800208e:	b480      	push	{r7}
 8002090:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002092:	bf00      	nop
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020a0:	f000 f89a 	bl	80021d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020a4:	bf00      	nop
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80020ac:	4802      	ldr	r0, [pc, #8]	; (80020b8 <DMA1_Stream4_IRQHandler+0x10>)
 80020ae:	f000 faef 	bl	8002690 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80020b2:	bf00      	nop
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	20000080 	.word	0x20000080

080020bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020c0:	4b06      	ldr	r3, [pc, #24]	; (80020dc <SystemInit+0x20>)
 80020c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020c6:	4a05      	ldr	r2, [pc, #20]	; (80020dc <SystemInit+0x20>)
 80020c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020d0:	bf00      	nop
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	e000ed00 	.word	0xe000ed00

080020e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80020e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002118 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020e4:	480d      	ldr	r0, [pc, #52]	; (800211c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80020e6:	490e      	ldr	r1, [pc, #56]	; (8002120 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80020e8:	4a0e      	ldr	r2, [pc, #56]	; (8002124 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020ec:	e002      	b.n	80020f4 <LoopCopyDataInit>

080020ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020f2:	3304      	adds	r3, #4

080020f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020f8:	d3f9      	bcc.n	80020ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020fa:	4a0b      	ldr	r2, [pc, #44]	; (8002128 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80020fc:	4c0b      	ldr	r4, [pc, #44]	; (800212c <LoopFillZerobss+0x26>)
  movs r3, #0
 80020fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002100:	e001      	b.n	8002106 <LoopFillZerobss>

08002102 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002102:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002104:	3204      	adds	r2, #4

08002106 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002106:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002108:	d3fb      	bcc.n	8002102 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800210a:	f7ff ffd7 	bl	80020bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800210e:	f001 fded 	bl	8003cec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002112:	f7fe f9e3 	bl	80004dc <main>
  bx  lr    
 8002116:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002118:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800211c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002120:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002124:	08003ea4 	.word	0x08003ea4
  ldr r2, =_sbss
 8002128:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800212c:	200002dc 	.word	0x200002dc

08002130 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002130:	e7fe      	b.n	8002130 <ADC_IRQHandler>
	...

08002134 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002138:	4b0e      	ldr	r3, [pc, #56]	; (8002174 <HAL_Init+0x40>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a0d      	ldr	r2, [pc, #52]	; (8002174 <HAL_Init+0x40>)
 800213e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002142:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002144:	4b0b      	ldr	r3, [pc, #44]	; (8002174 <HAL_Init+0x40>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a0a      	ldr	r2, [pc, #40]	; (8002174 <HAL_Init+0x40>)
 800214a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800214e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002150:	4b08      	ldr	r3, [pc, #32]	; (8002174 <HAL_Init+0x40>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a07      	ldr	r2, [pc, #28]	; (8002174 <HAL_Init+0x40>)
 8002156:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800215a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800215c:	2003      	movs	r0, #3
 800215e:	f000 f94f 	bl	8002400 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002162:	2000      	movs	r0, #0
 8002164:	f000 f808 	bl	8002178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002168:	f7ff fed2 	bl	8001f10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	40023c00 	.word	0x40023c00

08002178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002180:	4b12      	ldr	r3, [pc, #72]	; (80021cc <HAL_InitTick+0x54>)
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	4b12      	ldr	r3, [pc, #72]	; (80021d0 <HAL_InitTick+0x58>)
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	4619      	mov	r1, r3
 800218a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800218e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002192:	fbb2 f3f3 	udiv	r3, r2, r3
 8002196:	4618      	mov	r0, r3
 8002198:	f000 f967 	bl	800246a <HAL_SYSTICK_Config>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e00e      	b.n	80021c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2b0f      	cmp	r3, #15
 80021aa:	d80a      	bhi.n	80021c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021ac:	2200      	movs	r2, #0
 80021ae:	6879      	ldr	r1, [r7, #4]
 80021b0:	f04f 30ff 	mov.w	r0, #4294967295
 80021b4:	f000 f92f 	bl	8002416 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021b8:	4a06      	ldr	r2, [pc, #24]	; (80021d4 <HAL_InitTick+0x5c>)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021be:	2300      	movs	r3, #0
 80021c0:	e000      	b.n	80021c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3708      	adds	r7, #8
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	20000000 	.word	0x20000000
 80021d0:	20000008 	.word	0x20000008
 80021d4:	20000004 	.word	0x20000004

080021d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021dc:	4b06      	ldr	r3, [pc, #24]	; (80021f8 <HAL_IncTick+0x20>)
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	461a      	mov	r2, r3
 80021e2:	4b06      	ldr	r3, [pc, #24]	; (80021fc <HAL_IncTick+0x24>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4413      	add	r3, r2
 80021e8:	4a04      	ldr	r2, [pc, #16]	; (80021fc <HAL_IncTick+0x24>)
 80021ea:	6013      	str	r3, [r2, #0]
}
 80021ec:	bf00      	nop
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	20000008 	.word	0x20000008
 80021fc:	200002d8 	.word	0x200002d8

08002200 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  return uwTick;
 8002204:	4b03      	ldr	r3, [pc, #12]	; (8002214 <HAL_GetTick+0x14>)
 8002206:	681b      	ldr	r3, [r3, #0]
}
 8002208:	4618      	mov	r0, r3
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	200002d8 	.word	0x200002d8

08002218 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002220:	f7ff ffee 	bl	8002200 <HAL_GetTick>
 8002224:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002230:	d005      	beq.n	800223e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002232:	4b0a      	ldr	r3, [pc, #40]	; (800225c <HAL_Delay+0x44>)
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	461a      	mov	r2, r3
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	4413      	add	r3, r2
 800223c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800223e:	bf00      	nop
 8002240:	f7ff ffde 	bl	8002200 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	68fa      	ldr	r2, [r7, #12]
 800224c:	429a      	cmp	r2, r3
 800224e:	d8f7      	bhi.n	8002240 <HAL_Delay+0x28>
  {
  }
}
 8002250:	bf00      	nop
 8002252:	bf00      	nop
 8002254:	3710      	adds	r7, #16
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	20000008 	.word	0x20000008

08002260 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f003 0307 	and.w	r3, r3, #7
 800226e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002270:	4b0c      	ldr	r3, [pc, #48]	; (80022a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002276:	68ba      	ldr	r2, [r7, #8]
 8002278:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800227c:	4013      	ands	r3, r2
 800227e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002288:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800228c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002290:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002292:	4a04      	ldr	r2, [pc, #16]	; (80022a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	60d3      	str	r3, [r2, #12]
}
 8002298:	bf00      	nop
 800229a:	3714      	adds	r7, #20
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr
 80022a4:	e000ed00 	.word	0xe000ed00

080022a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022ac:	4b04      	ldr	r3, [pc, #16]	; (80022c0 <__NVIC_GetPriorityGrouping+0x18>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	0a1b      	lsrs	r3, r3, #8
 80022b2:	f003 0307 	and.w	r3, r3, #7
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr
 80022c0:	e000ed00 	.word	0xe000ed00

080022c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	4603      	mov	r3, r0
 80022cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	db0b      	blt.n	80022ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022d6:	79fb      	ldrb	r3, [r7, #7]
 80022d8:	f003 021f 	and.w	r2, r3, #31
 80022dc:	4907      	ldr	r1, [pc, #28]	; (80022fc <__NVIC_EnableIRQ+0x38>)
 80022de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e2:	095b      	lsrs	r3, r3, #5
 80022e4:	2001      	movs	r0, #1
 80022e6:	fa00 f202 	lsl.w	r2, r0, r2
 80022ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022ee:	bf00      	nop
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	e000e100 	.word	0xe000e100

08002300 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	4603      	mov	r3, r0
 8002308:	6039      	str	r1, [r7, #0]
 800230a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800230c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002310:	2b00      	cmp	r3, #0
 8002312:	db0a      	blt.n	800232a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	b2da      	uxtb	r2, r3
 8002318:	490c      	ldr	r1, [pc, #48]	; (800234c <__NVIC_SetPriority+0x4c>)
 800231a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231e:	0112      	lsls	r2, r2, #4
 8002320:	b2d2      	uxtb	r2, r2
 8002322:	440b      	add	r3, r1
 8002324:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002328:	e00a      	b.n	8002340 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	b2da      	uxtb	r2, r3
 800232e:	4908      	ldr	r1, [pc, #32]	; (8002350 <__NVIC_SetPriority+0x50>)
 8002330:	79fb      	ldrb	r3, [r7, #7]
 8002332:	f003 030f 	and.w	r3, r3, #15
 8002336:	3b04      	subs	r3, #4
 8002338:	0112      	lsls	r2, r2, #4
 800233a:	b2d2      	uxtb	r2, r2
 800233c:	440b      	add	r3, r1
 800233e:	761a      	strb	r2, [r3, #24]
}
 8002340:	bf00      	nop
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr
 800234c:	e000e100 	.word	0xe000e100
 8002350:	e000ed00 	.word	0xe000ed00

08002354 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002354:	b480      	push	{r7}
 8002356:	b089      	sub	sp, #36	; 0x24
 8002358:	af00      	add	r7, sp, #0
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f003 0307 	and.w	r3, r3, #7
 8002366:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	f1c3 0307 	rsb	r3, r3, #7
 800236e:	2b04      	cmp	r3, #4
 8002370:	bf28      	it	cs
 8002372:	2304      	movcs	r3, #4
 8002374:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	3304      	adds	r3, #4
 800237a:	2b06      	cmp	r3, #6
 800237c:	d902      	bls.n	8002384 <NVIC_EncodePriority+0x30>
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	3b03      	subs	r3, #3
 8002382:	e000      	b.n	8002386 <NVIC_EncodePriority+0x32>
 8002384:	2300      	movs	r3, #0
 8002386:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002388:	f04f 32ff 	mov.w	r2, #4294967295
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	43da      	mvns	r2, r3
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	401a      	ands	r2, r3
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800239c:	f04f 31ff 	mov.w	r1, #4294967295
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	fa01 f303 	lsl.w	r3, r1, r3
 80023a6:	43d9      	mvns	r1, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023ac:	4313      	orrs	r3, r2
         );
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3724      	adds	r7, #36	; 0x24
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
	...

080023bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	3b01      	subs	r3, #1
 80023c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023cc:	d301      	bcc.n	80023d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023ce:	2301      	movs	r3, #1
 80023d0:	e00f      	b.n	80023f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023d2:	4a0a      	ldr	r2, [pc, #40]	; (80023fc <SysTick_Config+0x40>)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	3b01      	subs	r3, #1
 80023d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023da:	210f      	movs	r1, #15
 80023dc:	f04f 30ff 	mov.w	r0, #4294967295
 80023e0:	f7ff ff8e 	bl	8002300 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023e4:	4b05      	ldr	r3, [pc, #20]	; (80023fc <SysTick_Config+0x40>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023ea:	4b04      	ldr	r3, [pc, #16]	; (80023fc <SysTick_Config+0x40>)
 80023ec:	2207      	movs	r2, #7
 80023ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	e000e010 	.word	0xe000e010

08002400 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f7ff ff29 	bl	8002260 <__NVIC_SetPriorityGrouping>
}
 800240e:	bf00      	nop
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}

08002416 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002416:	b580      	push	{r7, lr}
 8002418:	b086      	sub	sp, #24
 800241a:	af00      	add	r7, sp, #0
 800241c:	4603      	mov	r3, r0
 800241e:	60b9      	str	r1, [r7, #8]
 8002420:	607a      	str	r2, [r7, #4]
 8002422:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002424:	2300      	movs	r3, #0
 8002426:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002428:	f7ff ff3e 	bl	80022a8 <__NVIC_GetPriorityGrouping>
 800242c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	68b9      	ldr	r1, [r7, #8]
 8002432:	6978      	ldr	r0, [r7, #20]
 8002434:	f7ff ff8e 	bl	8002354 <NVIC_EncodePriority>
 8002438:	4602      	mov	r2, r0
 800243a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800243e:	4611      	mov	r1, r2
 8002440:	4618      	mov	r0, r3
 8002442:	f7ff ff5d 	bl	8002300 <__NVIC_SetPriority>
}
 8002446:	bf00      	nop
 8002448:	3718      	adds	r7, #24
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}

0800244e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	b082      	sub	sp, #8
 8002452:	af00      	add	r7, sp, #0
 8002454:	4603      	mov	r3, r0
 8002456:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245c:	4618      	mov	r0, r3
 800245e:	f7ff ff31 	bl	80022c4 <__NVIC_EnableIRQ>
}
 8002462:	bf00      	nop
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800246a:	b580      	push	{r7, lr}
 800246c:	b082      	sub	sp, #8
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f7ff ffa2 	bl	80023bc <SysTick_Config>
 8002478:	4603      	mov	r3, r0
}
 800247a:	4618      	mov	r0, r3
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
	...

08002484 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b086      	sub	sp, #24
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800248c:	2300      	movs	r3, #0
 800248e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002490:	f7ff feb6 	bl	8002200 <HAL_GetTick>
 8002494:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d101      	bne.n	80024a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e099      	b.n	80025d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2202      	movs	r2, #2
 80024a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f022 0201 	bic.w	r2, r2, #1
 80024be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024c0:	e00f      	b.n	80024e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024c2:	f7ff fe9d 	bl	8002200 <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	2b05      	cmp	r3, #5
 80024ce:	d908      	bls.n	80024e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2220      	movs	r2, #32
 80024d4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2203      	movs	r2, #3
 80024da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e078      	b.n	80025d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0301 	and.w	r3, r3, #1
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d1e8      	bne.n	80024c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80024f8:	697a      	ldr	r2, [r7, #20]
 80024fa:	4b38      	ldr	r3, [pc, #224]	; (80025dc <HAL_DMA_Init+0x158>)
 80024fc:	4013      	ands	r3, r2
 80024fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685a      	ldr	r2, [r3, #4]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800250e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	691b      	ldr	r3, [r3, #16]
 8002514:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800251a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002526:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a1b      	ldr	r3, [r3, #32]
 800252c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800252e:	697a      	ldr	r2, [r7, #20]
 8002530:	4313      	orrs	r3, r2
 8002532:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002538:	2b04      	cmp	r3, #4
 800253a:	d107      	bne.n	800254c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002544:	4313      	orrs	r3, r2
 8002546:	697a      	ldr	r2, [r7, #20]
 8002548:	4313      	orrs	r3, r2
 800254a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	697a      	ldr	r2, [r7, #20]
 8002552:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	695b      	ldr	r3, [r3, #20]
 800255a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	f023 0307 	bic.w	r3, r3, #7
 8002562:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002568:	697a      	ldr	r2, [r7, #20]
 800256a:	4313      	orrs	r3, r2
 800256c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002572:	2b04      	cmp	r3, #4
 8002574:	d117      	bne.n	80025a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800257a:	697a      	ldr	r2, [r7, #20]
 800257c:	4313      	orrs	r3, r2
 800257e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002584:	2b00      	cmp	r3, #0
 8002586:	d00e      	beq.n	80025a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f000 fa6f 	bl	8002a6c <DMA_CheckFifoParam>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d008      	beq.n	80025a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2240      	movs	r2, #64	; 0x40
 8002598:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2201      	movs	r2, #1
 800259e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80025a2:	2301      	movs	r3, #1
 80025a4:	e016      	b.n	80025d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	697a      	ldr	r2, [r7, #20]
 80025ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 fa26 	bl	8002a00 <DMA_CalcBaseAndBitshift>
 80025b4:	4603      	mov	r3, r0
 80025b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025bc:	223f      	movs	r2, #63	; 0x3f
 80025be:	409a      	lsls	r2, r3
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2201      	movs	r2, #1
 80025ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80025d2:	2300      	movs	r3, #0
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3718      	adds	r7, #24
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	f010803f 	.word	0xf010803f

080025e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b086      	sub	sp, #24
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	607a      	str	r2, [r7, #4]
 80025ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025ee:	2300      	movs	r3, #0
 80025f0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d101      	bne.n	8002606 <HAL_DMA_Start_IT+0x26>
 8002602:	2302      	movs	r3, #2
 8002604:	e040      	b.n	8002688 <HAL_DMA_Start_IT+0xa8>
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2201      	movs	r2, #1
 800260a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b01      	cmp	r3, #1
 8002618:	d12f      	bne.n	800267a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2202      	movs	r2, #2
 800261e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2200      	movs	r2, #0
 8002626:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	68b9      	ldr	r1, [r7, #8]
 800262e:	68f8      	ldr	r0, [r7, #12]
 8002630:	f000 f9b8 	bl	80029a4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002638:	223f      	movs	r2, #63	; 0x3f
 800263a:	409a      	lsls	r2, r3
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f042 0216 	orr.w	r2, r2, #22
 800264e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002654:	2b00      	cmp	r3, #0
 8002656:	d007      	beq.n	8002668 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f042 0208 	orr.w	r2, r2, #8
 8002666:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f042 0201 	orr.w	r2, r2, #1
 8002676:	601a      	str	r2, [r3, #0]
 8002678:	e005      	b.n	8002686 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002682:	2302      	movs	r3, #2
 8002684:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002686:	7dfb      	ldrb	r3, [r7, #23]
}
 8002688:	4618      	mov	r0, r3
 800268a:	3718      	adds	r7, #24
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b086      	sub	sp, #24
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002698:	2300      	movs	r3, #0
 800269a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800269c:	4b8e      	ldr	r3, [pc, #568]	; (80028d8 <HAL_DMA_IRQHandler+0x248>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a8e      	ldr	r2, [pc, #568]	; (80028dc <HAL_DMA_IRQHandler+0x24c>)
 80026a2:	fba2 2303 	umull	r2, r3, r2, r3
 80026a6:	0a9b      	lsrs	r3, r3, #10
 80026a8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ba:	2208      	movs	r2, #8
 80026bc:	409a      	lsls	r2, r3
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	4013      	ands	r3, r2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d01a      	beq.n	80026fc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0304 	and.w	r3, r3, #4
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d013      	beq.n	80026fc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f022 0204 	bic.w	r2, r2, #4
 80026e2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026e8:	2208      	movs	r2, #8
 80026ea:	409a      	lsls	r2, r3
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f4:	f043 0201 	orr.w	r2, r3, #1
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002700:	2201      	movs	r2, #1
 8002702:	409a      	lsls	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	4013      	ands	r3, r2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d012      	beq.n	8002732 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002716:	2b00      	cmp	r3, #0
 8002718:	d00b      	beq.n	8002732 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800271e:	2201      	movs	r2, #1
 8002720:	409a      	lsls	r2, r3
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800272a:	f043 0202 	orr.w	r2, r3, #2
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002736:	2204      	movs	r2, #4
 8002738:	409a      	lsls	r2, r3
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	4013      	ands	r3, r2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d012      	beq.n	8002768 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0302 	and.w	r3, r3, #2
 800274c:	2b00      	cmp	r3, #0
 800274e:	d00b      	beq.n	8002768 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002754:	2204      	movs	r2, #4
 8002756:	409a      	lsls	r2, r3
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002760:	f043 0204 	orr.w	r2, r3, #4
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800276c:	2210      	movs	r2, #16
 800276e:	409a      	lsls	r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	4013      	ands	r3, r2
 8002774:	2b00      	cmp	r3, #0
 8002776:	d043      	beq.n	8002800 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0308 	and.w	r3, r3, #8
 8002782:	2b00      	cmp	r3, #0
 8002784:	d03c      	beq.n	8002800 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800278a:	2210      	movs	r2, #16
 800278c:	409a      	lsls	r2, r3
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d018      	beq.n	80027d2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d108      	bne.n	80027c0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d024      	beq.n	8002800 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	4798      	blx	r3
 80027be:	e01f      	b.n	8002800 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d01b      	beq.n	8002800 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	4798      	blx	r3
 80027d0:	e016      	b.n	8002800 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d107      	bne.n	80027f0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f022 0208 	bic.w	r2, r2, #8
 80027ee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d003      	beq.n	8002800 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002804:	2220      	movs	r2, #32
 8002806:	409a      	lsls	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	4013      	ands	r3, r2
 800280c:	2b00      	cmp	r3, #0
 800280e:	f000 808f 	beq.w	8002930 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0310 	and.w	r3, r3, #16
 800281c:	2b00      	cmp	r3, #0
 800281e:	f000 8087 	beq.w	8002930 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002826:	2220      	movs	r2, #32
 8002828:	409a      	lsls	r2, r3
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b05      	cmp	r3, #5
 8002838:	d136      	bne.n	80028a8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f022 0216 	bic.w	r2, r2, #22
 8002848:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	695a      	ldr	r2, [r3, #20]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002858:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285e:	2b00      	cmp	r3, #0
 8002860:	d103      	bne.n	800286a <HAL_DMA_IRQHandler+0x1da>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002866:	2b00      	cmp	r3, #0
 8002868:	d007      	beq.n	800287a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f022 0208 	bic.w	r2, r2, #8
 8002878:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800287e:	223f      	movs	r2, #63	; 0x3f
 8002880:	409a      	lsls	r2, r3
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2201      	movs	r2, #1
 800288a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800289a:	2b00      	cmp	r3, #0
 800289c:	d07e      	beq.n	800299c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	4798      	blx	r3
        }
        return;
 80028a6:	e079      	b.n	800299c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d01d      	beq.n	80028f2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d10d      	bne.n	80028e0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d031      	beq.n	8002930 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	4798      	blx	r3
 80028d4:	e02c      	b.n	8002930 <HAL_DMA_IRQHandler+0x2a0>
 80028d6:	bf00      	nop
 80028d8:	20000000 	.word	0x20000000
 80028dc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d023      	beq.n	8002930 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	4798      	blx	r3
 80028f0:	e01e      	b.n	8002930 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d10f      	bne.n	8002920 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f022 0210 	bic.w	r2, r2, #16
 800290e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002924:	2b00      	cmp	r3, #0
 8002926:	d003      	beq.n	8002930 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002934:	2b00      	cmp	r3, #0
 8002936:	d032      	beq.n	800299e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800293c:	f003 0301 	and.w	r3, r3, #1
 8002940:	2b00      	cmp	r3, #0
 8002942:	d022      	beq.n	800298a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2205      	movs	r2, #5
 8002948:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f022 0201 	bic.w	r2, r2, #1
 800295a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	3301      	adds	r3, #1
 8002960:	60bb      	str	r3, [r7, #8]
 8002962:	697a      	ldr	r2, [r7, #20]
 8002964:	429a      	cmp	r2, r3
 8002966:	d307      	bcc.n	8002978 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b00      	cmp	r3, #0
 8002974:	d1f2      	bne.n	800295c <HAL_DMA_IRQHandler+0x2cc>
 8002976:	e000      	b.n	800297a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002978:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2201      	movs	r2, #1
 800297e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800298e:	2b00      	cmp	r3, #0
 8002990:	d005      	beq.n	800299e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	4798      	blx	r3
 800299a:	e000      	b.n	800299e <HAL_DMA_IRQHandler+0x30e>
        return;
 800299c:	bf00      	nop
    }
  }
}
 800299e:	3718      	adds	r7, #24
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b085      	sub	sp, #20
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
 80029b0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80029c0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	683a      	ldr	r2, [r7, #0]
 80029c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	2b40      	cmp	r3, #64	; 0x40
 80029d0:	d108      	bne.n	80029e4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68ba      	ldr	r2, [r7, #8]
 80029e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80029e2:	e007      	b.n	80029f4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68ba      	ldr	r2, [r7, #8]
 80029ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	60da      	str	r2, [r3, #12]
}
 80029f4:	bf00      	nop
 80029f6:	3714      	adds	r7, #20
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	3b10      	subs	r3, #16
 8002a10:	4a14      	ldr	r2, [pc, #80]	; (8002a64 <DMA_CalcBaseAndBitshift+0x64>)
 8002a12:	fba2 2303 	umull	r2, r3, r2, r3
 8002a16:	091b      	lsrs	r3, r3, #4
 8002a18:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a1a:	4a13      	ldr	r2, [pc, #76]	; (8002a68 <DMA_CalcBaseAndBitshift+0x68>)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	4413      	add	r3, r2
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	461a      	mov	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2b03      	cmp	r3, #3
 8002a2c:	d909      	bls.n	8002a42 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a36:	f023 0303 	bic.w	r3, r3, #3
 8002a3a:	1d1a      	adds	r2, r3, #4
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	659a      	str	r2, [r3, #88]	; 0x58
 8002a40:	e007      	b.n	8002a52 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a4a:	f023 0303 	bic.w	r3, r3, #3
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3714      	adds	r7, #20
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	aaaaaaab 	.word	0xaaaaaaab
 8002a68:	08003d88 	.word	0x08003d88

08002a6c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b085      	sub	sp, #20
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a74:	2300      	movs	r3, #0
 8002a76:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a7c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d11f      	bne.n	8002ac6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	2b03      	cmp	r3, #3
 8002a8a:	d856      	bhi.n	8002b3a <DMA_CheckFifoParam+0xce>
 8002a8c:	a201      	add	r2, pc, #4	; (adr r2, 8002a94 <DMA_CheckFifoParam+0x28>)
 8002a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a92:	bf00      	nop
 8002a94:	08002aa5 	.word	0x08002aa5
 8002a98:	08002ab7 	.word	0x08002ab7
 8002a9c:	08002aa5 	.word	0x08002aa5
 8002aa0:	08002b3b 	.word	0x08002b3b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d046      	beq.n	8002b3e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ab4:	e043      	b.n	8002b3e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002abe:	d140      	bne.n	8002b42 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ac4:	e03d      	b.n	8002b42 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	699b      	ldr	r3, [r3, #24]
 8002aca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ace:	d121      	bne.n	8002b14 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	2b03      	cmp	r3, #3
 8002ad4:	d837      	bhi.n	8002b46 <DMA_CheckFifoParam+0xda>
 8002ad6:	a201      	add	r2, pc, #4	; (adr r2, 8002adc <DMA_CheckFifoParam+0x70>)
 8002ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002adc:	08002aed 	.word	0x08002aed
 8002ae0:	08002af3 	.word	0x08002af3
 8002ae4:	08002aed 	.word	0x08002aed
 8002ae8:	08002b05 	.word	0x08002b05
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	73fb      	strb	r3, [r7, #15]
      break;
 8002af0:	e030      	b.n	8002b54 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d025      	beq.n	8002b4a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b02:	e022      	b.n	8002b4a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b08:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b0c:	d11f      	bne.n	8002b4e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b12:	e01c      	b.n	8002b4e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d903      	bls.n	8002b22 <DMA_CheckFifoParam+0xb6>
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	2b03      	cmp	r3, #3
 8002b1e:	d003      	beq.n	8002b28 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b20:	e018      	b.n	8002b54 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	73fb      	strb	r3, [r7, #15]
      break;
 8002b26:	e015      	b.n	8002b54 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d00e      	beq.n	8002b52 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	73fb      	strb	r3, [r7, #15]
      break;
 8002b38:	e00b      	b.n	8002b52 <DMA_CheckFifoParam+0xe6>
      break;
 8002b3a:	bf00      	nop
 8002b3c:	e00a      	b.n	8002b54 <DMA_CheckFifoParam+0xe8>
      break;
 8002b3e:	bf00      	nop
 8002b40:	e008      	b.n	8002b54 <DMA_CheckFifoParam+0xe8>
      break;
 8002b42:	bf00      	nop
 8002b44:	e006      	b.n	8002b54 <DMA_CheckFifoParam+0xe8>
      break;
 8002b46:	bf00      	nop
 8002b48:	e004      	b.n	8002b54 <DMA_CheckFifoParam+0xe8>
      break;
 8002b4a:	bf00      	nop
 8002b4c:	e002      	b.n	8002b54 <DMA_CheckFifoParam+0xe8>
      break;   
 8002b4e:	bf00      	nop
 8002b50:	e000      	b.n	8002b54 <DMA_CheckFifoParam+0xe8>
      break;
 8002b52:	bf00      	nop
    }
  } 
  
  return status; 
 8002b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3714      	adds	r7, #20
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop

08002b64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b089      	sub	sp, #36	; 0x24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b72:	2300      	movs	r3, #0
 8002b74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b76:	2300      	movs	r3, #0
 8002b78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	61fb      	str	r3, [r7, #28]
 8002b7e:	e16b      	b.n	8002e58 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b80:	2201      	movs	r2, #1
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	697a      	ldr	r2, [r7, #20]
 8002b90:	4013      	ands	r3, r2
 8002b92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b94:	693a      	ldr	r2, [r7, #16]
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	f040 815a 	bne.w	8002e52 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f003 0303 	and.w	r3, r3, #3
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d005      	beq.n	8002bb6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d130      	bne.n	8002c18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	2203      	movs	r2, #3
 8002bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc6:	43db      	mvns	r3, r3
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	4013      	ands	r3, r2
 8002bcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	68da      	ldr	r2, [r3, #12]
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bda:	69ba      	ldr	r2, [r7, #24]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	69ba      	ldr	r2, [r7, #24]
 8002be4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bec:	2201      	movs	r2, #1
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf4:	43db      	mvns	r3, r3
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	091b      	lsrs	r3, r3, #4
 8002c02:	f003 0201 	and.w	r2, r3, #1
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f003 0303 	and.w	r3, r3, #3
 8002c20:	2b03      	cmp	r3, #3
 8002c22:	d017      	beq.n	8002c54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	005b      	lsls	r3, r3, #1
 8002c2e:	2203      	movs	r2, #3
 8002c30:	fa02 f303 	lsl.w	r3, r2, r3
 8002c34:	43db      	mvns	r3, r3
 8002c36:	69ba      	ldr	r2, [r7, #24]
 8002c38:	4013      	ands	r3, r2
 8002c3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	689a      	ldr	r2, [r3, #8]
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	005b      	lsls	r3, r3, #1
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f003 0303 	and.w	r3, r3, #3
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d123      	bne.n	8002ca8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	08da      	lsrs	r2, r3, #3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	3208      	adds	r2, #8
 8002c68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	f003 0307 	and.w	r3, r3, #7
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	220f      	movs	r2, #15
 8002c78:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7c:	43db      	mvns	r3, r3
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	4013      	ands	r3, r2
 8002c82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	691a      	ldr	r2, [r3, #16]
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	f003 0307 	and.w	r3, r3, #7
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	fa02 f303 	lsl.w	r3, r2, r3
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	08da      	lsrs	r2, r3, #3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	3208      	adds	r2, #8
 8002ca2:	69b9      	ldr	r1, [r7, #24]
 8002ca4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	2203      	movs	r2, #3
 8002cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb8:	43db      	mvns	r3, r3
 8002cba:	69ba      	ldr	r2, [r7, #24]
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f003 0203 	and.w	r2, r3, #3
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	005b      	lsls	r3, r3, #1
 8002ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	f000 80b4 	beq.w	8002e52 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cea:	2300      	movs	r3, #0
 8002cec:	60fb      	str	r3, [r7, #12]
 8002cee:	4b60      	ldr	r3, [pc, #384]	; (8002e70 <HAL_GPIO_Init+0x30c>)
 8002cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf2:	4a5f      	ldr	r2, [pc, #380]	; (8002e70 <HAL_GPIO_Init+0x30c>)
 8002cf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cf8:	6453      	str	r3, [r2, #68]	; 0x44
 8002cfa:	4b5d      	ldr	r3, [pc, #372]	; (8002e70 <HAL_GPIO_Init+0x30c>)
 8002cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d02:	60fb      	str	r3, [r7, #12]
 8002d04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d06:	4a5b      	ldr	r2, [pc, #364]	; (8002e74 <HAL_GPIO_Init+0x310>)
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	089b      	lsrs	r3, r3, #2
 8002d0c:	3302      	adds	r3, #2
 8002d0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	f003 0303 	and.w	r3, r3, #3
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	220f      	movs	r2, #15
 8002d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d22:	43db      	mvns	r3, r3
 8002d24:	69ba      	ldr	r2, [r7, #24]
 8002d26:	4013      	ands	r3, r2
 8002d28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a52      	ldr	r2, [pc, #328]	; (8002e78 <HAL_GPIO_Init+0x314>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d02b      	beq.n	8002d8a <HAL_GPIO_Init+0x226>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a51      	ldr	r2, [pc, #324]	; (8002e7c <HAL_GPIO_Init+0x318>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d025      	beq.n	8002d86 <HAL_GPIO_Init+0x222>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a50      	ldr	r2, [pc, #320]	; (8002e80 <HAL_GPIO_Init+0x31c>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d01f      	beq.n	8002d82 <HAL_GPIO_Init+0x21e>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a4f      	ldr	r2, [pc, #316]	; (8002e84 <HAL_GPIO_Init+0x320>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d019      	beq.n	8002d7e <HAL_GPIO_Init+0x21a>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a4e      	ldr	r2, [pc, #312]	; (8002e88 <HAL_GPIO_Init+0x324>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d013      	beq.n	8002d7a <HAL_GPIO_Init+0x216>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a4d      	ldr	r2, [pc, #308]	; (8002e8c <HAL_GPIO_Init+0x328>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d00d      	beq.n	8002d76 <HAL_GPIO_Init+0x212>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a4c      	ldr	r2, [pc, #304]	; (8002e90 <HAL_GPIO_Init+0x32c>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d007      	beq.n	8002d72 <HAL_GPIO_Init+0x20e>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a4b      	ldr	r2, [pc, #300]	; (8002e94 <HAL_GPIO_Init+0x330>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d101      	bne.n	8002d6e <HAL_GPIO_Init+0x20a>
 8002d6a:	2307      	movs	r3, #7
 8002d6c:	e00e      	b.n	8002d8c <HAL_GPIO_Init+0x228>
 8002d6e:	2308      	movs	r3, #8
 8002d70:	e00c      	b.n	8002d8c <HAL_GPIO_Init+0x228>
 8002d72:	2306      	movs	r3, #6
 8002d74:	e00a      	b.n	8002d8c <HAL_GPIO_Init+0x228>
 8002d76:	2305      	movs	r3, #5
 8002d78:	e008      	b.n	8002d8c <HAL_GPIO_Init+0x228>
 8002d7a:	2304      	movs	r3, #4
 8002d7c:	e006      	b.n	8002d8c <HAL_GPIO_Init+0x228>
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e004      	b.n	8002d8c <HAL_GPIO_Init+0x228>
 8002d82:	2302      	movs	r3, #2
 8002d84:	e002      	b.n	8002d8c <HAL_GPIO_Init+0x228>
 8002d86:	2301      	movs	r3, #1
 8002d88:	e000      	b.n	8002d8c <HAL_GPIO_Init+0x228>
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	69fa      	ldr	r2, [r7, #28]
 8002d8e:	f002 0203 	and.w	r2, r2, #3
 8002d92:	0092      	lsls	r2, r2, #2
 8002d94:	4093      	lsls	r3, r2
 8002d96:	69ba      	ldr	r2, [r7, #24]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d9c:	4935      	ldr	r1, [pc, #212]	; (8002e74 <HAL_GPIO_Init+0x310>)
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	089b      	lsrs	r3, r3, #2
 8002da2:	3302      	adds	r3, #2
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002daa:	4b3b      	ldr	r3, [pc, #236]	; (8002e98 <HAL_GPIO_Init+0x334>)
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	43db      	mvns	r3, r3
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	4013      	ands	r3, r2
 8002db8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d003      	beq.n	8002dce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002dc6:	69ba      	ldr	r2, [r7, #24]
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002dce:	4a32      	ldr	r2, [pc, #200]	; (8002e98 <HAL_GPIO_Init+0x334>)
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002dd4:	4b30      	ldr	r3, [pc, #192]	; (8002e98 <HAL_GPIO_Init+0x334>)
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	43db      	mvns	r3, r3
 8002dde:	69ba      	ldr	r2, [r7, #24]
 8002de0:	4013      	ands	r3, r2
 8002de2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d003      	beq.n	8002df8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002df8:	4a27      	ldr	r2, [pc, #156]	; (8002e98 <HAL_GPIO_Init+0x334>)
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002dfe:	4b26      	ldr	r3, [pc, #152]	; (8002e98 <HAL_GPIO_Init+0x334>)
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	43db      	mvns	r3, r3
 8002e08:	69ba      	ldr	r2, [r7, #24]
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d003      	beq.n	8002e22 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e22:	4a1d      	ldr	r2, [pc, #116]	; (8002e98 <HAL_GPIO_Init+0x334>)
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e28:	4b1b      	ldr	r3, [pc, #108]	; (8002e98 <HAL_GPIO_Init+0x334>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	43db      	mvns	r3, r3
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	4013      	ands	r3, r2
 8002e36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d003      	beq.n	8002e4c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e4c:	4a12      	ldr	r2, [pc, #72]	; (8002e98 <HAL_GPIO_Init+0x334>)
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	3301      	adds	r3, #1
 8002e56:	61fb      	str	r3, [r7, #28]
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	2b0f      	cmp	r3, #15
 8002e5c:	f67f ae90 	bls.w	8002b80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e60:	bf00      	nop
 8002e62:	bf00      	nop
 8002e64:	3724      	adds	r7, #36	; 0x24
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	40023800 	.word	0x40023800
 8002e74:	40013800 	.word	0x40013800
 8002e78:	40020000 	.word	0x40020000
 8002e7c:	40020400 	.word	0x40020400
 8002e80:	40020800 	.word	0x40020800
 8002e84:	40020c00 	.word	0x40020c00
 8002e88:	40021000 	.word	0x40021000
 8002e8c:	40021400 	.word	0x40021400
 8002e90:	40021800 	.word	0x40021800
 8002e94:	40021c00 	.word	0x40021c00
 8002e98:	40013c00 	.word	0x40013c00

08002e9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	807b      	strh	r3, [r7, #2]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002eac:	787b      	ldrb	r3, [r7, #1]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d003      	beq.n	8002eba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002eb2:	887a      	ldrh	r2, [r7, #2]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002eb8:	e003      	b.n	8002ec2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002eba:	887b      	ldrh	r3, [r7, #2]
 8002ebc:	041a      	lsls	r2, r3, #16
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	619a      	str	r2, [r3, #24]
}
 8002ec2:	bf00      	nop
 8002ec4:	370c      	adds	r7, #12
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
	...

08002ed0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b086      	sub	sp, #24
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d101      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e267      	b.n	80033b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d075      	beq.n	8002fda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002eee:	4b88      	ldr	r3, [pc, #544]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f003 030c 	and.w	r3, r3, #12
 8002ef6:	2b04      	cmp	r3, #4
 8002ef8:	d00c      	beq.n	8002f14 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002efa:	4b85      	ldr	r3, [pc, #532]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f02:	2b08      	cmp	r3, #8
 8002f04:	d112      	bne.n	8002f2c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f06:	4b82      	ldr	r3, [pc, #520]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f12:	d10b      	bne.n	8002f2c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f14:	4b7e      	ldr	r3, [pc, #504]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d05b      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x108>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d157      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e242      	b.n	80033b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f34:	d106      	bne.n	8002f44 <HAL_RCC_OscConfig+0x74>
 8002f36:	4b76      	ldr	r3, [pc, #472]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a75      	ldr	r2, [pc, #468]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8002f3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f40:	6013      	str	r3, [r2, #0]
 8002f42:	e01d      	b.n	8002f80 <HAL_RCC_OscConfig+0xb0>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f4c:	d10c      	bne.n	8002f68 <HAL_RCC_OscConfig+0x98>
 8002f4e:	4b70      	ldr	r3, [pc, #448]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a6f      	ldr	r2, [pc, #444]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8002f54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f58:	6013      	str	r3, [r2, #0]
 8002f5a:	4b6d      	ldr	r3, [pc, #436]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a6c      	ldr	r2, [pc, #432]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8002f60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f64:	6013      	str	r3, [r2, #0]
 8002f66:	e00b      	b.n	8002f80 <HAL_RCC_OscConfig+0xb0>
 8002f68:	4b69      	ldr	r3, [pc, #420]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a68      	ldr	r2, [pc, #416]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8002f6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f72:	6013      	str	r3, [r2, #0]
 8002f74:	4b66      	ldr	r3, [pc, #408]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a65      	ldr	r2, [pc, #404]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8002f7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d013      	beq.n	8002fb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f88:	f7ff f93a 	bl	8002200 <HAL_GetTick>
 8002f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f8e:	e008      	b.n	8002fa2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f90:	f7ff f936 	bl	8002200 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b64      	cmp	r3, #100	; 0x64
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e207      	b.n	80033b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fa2:	4b5b      	ldr	r3, [pc, #364]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d0f0      	beq.n	8002f90 <HAL_RCC_OscConfig+0xc0>
 8002fae:	e014      	b.n	8002fda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb0:	f7ff f926 	bl	8002200 <HAL_GetTick>
 8002fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fb6:	e008      	b.n	8002fca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fb8:	f7ff f922 	bl	8002200 <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	2b64      	cmp	r3, #100	; 0x64
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e1f3      	b.n	80033b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fca:	4b51      	ldr	r3, [pc, #324]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d1f0      	bne.n	8002fb8 <HAL_RCC_OscConfig+0xe8>
 8002fd6:	e000      	b.n	8002fda <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d063      	beq.n	80030ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fe6:	4b4a      	ldr	r3, [pc, #296]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f003 030c 	and.w	r3, r3, #12
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d00b      	beq.n	800300a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ff2:	4b47      	ldr	r3, [pc, #284]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ffa:	2b08      	cmp	r3, #8
 8002ffc:	d11c      	bne.n	8003038 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ffe:	4b44      	ldr	r3, [pc, #272]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d116      	bne.n	8003038 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800300a:	4b41      	ldr	r3, [pc, #260]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d005      	beq.n	8003022 <HAL_RCC_OscConfig+0x152>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d001      	beq.n	8003022 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e1c7      	b.n	80033b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003022:	4b3b      	ldr	r3, [pc, #236]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	4937      	ldr	r1, [pc, #220]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8003032:	4313      	orrs	r3, r2
 8003034:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003036:	e03a      	b.n	80030ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d020      	beq.n	8003082 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003040:	4b34      	ldr	r3, [pc, #208]	; (8003114 <HAL_RCC_OscConfig+0x244>)
 8003042:	2201      	movs	r2, #1
 8003044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003046:	f7ff f8db 	bl	8002200 <HAL_GetTick>
 800304a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800304c:	e008      	b.n	8003060 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800304e:	f7ff f8d7 	bl	8002200 <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	2b02      	cmp	r3, #2
 800305a:	d901      	bls.n	8003060 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e1a8      	b.n	80033b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003060:	4b2b      	ldr	r3, [pc, #172]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0302 	and.w	r3, r3, #2
 8003068:	2b00      	cmp	r3, #0
 800306a:	d0f0      	beq.n	800304e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800306c:	4b28      	ldr	r3, [pc, #160]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	691b      	ldr	r3, [r3, #16]
 8003078:	00db      	lsls	r3, r3, #3
 800307a:	4925      	ldr	r1, [pc, #148]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 800307c:	4313      	orrs	r3, r2
 800307e:	600b      	str	r3, [r1, #0]
 8003080:	e015      	b.n	80030ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003082:	4b24      	ldr	r3, [pc, #144]	; (8003114 <HAL_RCC_OscConfig+0x244>)
 8003084:	2200      	movs	r2, #0
 8003086:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003088:	f7ff f8ba 	bl	8002200 <HAL_GetTick>
 800308c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800308e:	e008      	b.n	80030a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003090:	f7ff f8b6 	bl	8002200 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b02      	cmp	r3, #2
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e187      	b.n	80033b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030a2:	4b1b      	ldr	r3, [pc, #108]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0302 	and.w	r3, r3, #2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1f0      	bne.n	8003090 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0308 	and.w	r3, r3, #8
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d036      	beq.n	8003128 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d016      	beq.n	80030f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030c2:	4b15      	ldr	r3, [pc, #84]	; (8003118 <HAL_RCC_OscConfig+0x248>)
 80030c4:	2201      	movs	r2, #1
 80030c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030c8:	f7ff f89a 	bl	8002200 <HAL_GetTick>
 80030cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ce:	e008      	b.n	80030e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030d0:	f7ff f896 	bl	8002200 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e167      	b.n	80033b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030e2:	4b0b      	ldr	r3, [pc, #44]	; (8003110 <HAL_RCC_OscConfig+0x240>)
 80030e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030e6:	f003 0302 	and.w	r3, r3, #2
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d0f0      	beq.n	80030d0 <HAL_RCC_OscConfig+0x200>
 80030ee:	e01b      	b.n	8003128 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030f0:	4b09      	ldr	r3, [pc, #36]	; (8003118 <HAL_RCC_OscConfig+0x248>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030f6:	f7ff f883 	bl	8002200 <HAL_GetTick>
 80030fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030fc:	e00e      	b.n	800311c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030fe:	f7ff f87f 	bl	8002200 <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	2b02      	cmp	r3, #2
 800310a:	d907      	bls.n	800311c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e150      	b.n	80033b2 <HAL_RCC_OscConfig+0x4e2>
 8003110:	40023800 	.word	0x40023800
 8003114:	42470000 	.word	0x42470000
 8003118:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800311c:	4b88      	ldr	r3, [pc, #544]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 800311e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003120:	f003 0302 	and.w	r3, r3, #2
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1ea      	bne.n	80030fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0304 	and.w	r3, r3, #4
 8003130:	2b00      	cmp	r3, #0
 8003132:	f000 8097 	beq.w	8003264 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003136:	2300      	movs	r3, #0
 8003138:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800313a:	4b81      	ldr	r3, [pc, #516]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 800313c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d10f      	bne.n	8003166 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003146:	2300      	movs	r3, #0
 8003148:	60bb      	str	r3, [r7, #8]
 800314a:	4b7d      	ldr	r3, [pc, #500]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 800314c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314e:	4a7c      	ldr	r2, [pc, #496]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 8003150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003154:	6413      	str	r3, [r2, #64]	; 0x40
 8003156:	4b7a      	ldr	r3, [pc, #488]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 8003158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800315e:	60bb      	str	r3, [r7, #8]
 8003160:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003162:	2301      	movs	r3, #1
 8003164:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003166:	4b77      	ldr	r3, [pc, #476]	; (8003344 <HAL_RCC_OscConfig+0x474>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800316e:	2b00      	cmp	r3, #0
 8003170:	d118      	bne.n	80031a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003172:	4b74      	ldr	r3, [pc, #464]	; (8003344 <HAL_RCC_OscConfig+0x474>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a73      	ldr	r2, [pc, #460]	; (8003344 <HAL_RCC_OscConfig+0x474>)
 8003178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800317c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800317e:	f7ff f83f 	bl	8002200 <HAL_GetTick>
 8003182:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003184:	e008      	b.n	8003198 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003186:	f7ff f83b 	bl	8002200 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b02      	cmp	r3, #2
 8003192:	d901      	bls.n	8003198 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e10c      	b.n	80033b2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003198:	4b6a      	ldr	r3, [pc, #424]	; (8003344 <HAL_RCC_OscConfig+0x474>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d0f0      	beq.n	8003186 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d106      	bne.n	80031ba <HAL_RCC_OscConfig+0x2ea>
 80031ac:	4b64      	ldr	r3, [pc, #400]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 80031ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b0:	4a63      	ldr	r2, [pc, #396]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 80031b2:	f043 0301 	orr.w	r3, r3, #1
 80031b6:	6713      	str	r3, [r2, #112]	; 0x70
 80031b8:	e01c      	b.n	80031f4 <HAL_RCC_OscConfig+0x324>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	2b05      	cmp	r3, #5
 80031c0:	d10c      	bne.n	80031dc <HAL_RCC_OscConfig+0x30c>
 80031c2:	4b5f      	ldr	r3, [pc, #380]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 80031c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c6:	4a5e      	ldr	r2, [pc, #376]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 80031c8:	f043 0304 	orr.w	r3, r3, #4
 80031cc:	6713      	str	r3, [r2, #112]	; 0x70
 80031ce:	4b5c      	ldr	r3, [pc, #368]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 80031d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d2:	4a5b      	ldr	r2, [pc, #364]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 80031d4:	f043 0301 	orr.w	r3, r3, #1
 80031d8:	6713      	str	r3, [r2, #112]	; 0x70
 80031da:	e00b      	b.n	80031f4 <HAL_RCC_OscConfig+0x324>
 80031dc:	4b58      	ldr	r3, [pc, #352]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 80031de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e0:	4a57      	ldr	r2, [pc, #348]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 80031e2:	f023 0301 	bic.w	r3, r3, #1
 80031e6:	6713      	str	r3, [r2, #112]	; 0x70
 80031e8:	4b55      	ldr	r3, [pc, #340]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 80031ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ec:	4a54      	ldr	r2, [pc, #336]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 80031ee:	f023 0304 	bic.w	r3, r3, #4
 80031f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d015      	beq.n	8003228 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031fc:	f7ff f800 	bl	8002200 <HAL_GetTick>
 8003200:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003202:	e00a      	b.n	800321a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003204:	f7fe fffc 	bl	8002200 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003212:	4293      	cmp	r3, r2
 8003214:	d901      	bls.n	800321a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e0cb      	b.n	80033b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800321a:	4b49      	ldr	r3, [pc, #292]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 800321c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d0ee      	beq.n	8003204 <HAL_RCC_OscConfig+0x334>
 8003226:	e014      	b.n	8003252 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003228:	f7fe ffea 	bl	8002200 <HAL_GetTick>
 800322c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800322e:	e00a      	b.n	8003246 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003230:	f7fe ffe6 	bl	8002200 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	f241 3288 	movw	r2, #5000	; 0x1388
 800323e:	4293      	cmp	r3, r2
 8003240:	d901      	bls.n	8003246 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e0b5      	b.n	80033b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003246:	4b3e      	ldr	r3, [pc, #248]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 8003248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800324a:	f003 0302 	and.w	r3, r3, #2
 800324e:	2b00      	cmp	r3, #0
 8003250:	d1ee      	bne.n	8003230 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003252:	7dfb      	ldrb	r3, [r7, #23]
 8003254:	2b01      	cmp	r3, #1
 8003256:	d105      	bne.n	8003264 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003258:	4b39      	ldr	r3, [pc, #228]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 800325a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325c:	4a38      	ldr	r2, [pc, #224]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 800325e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003262:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	2b00      	cmp	r3, #0
 800326a:	f000 80a1 	beq.w	80033b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800326e:	4b34      	ldr	r3, [pc, #208]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f003 030c 	and.w	r3, r3, #12
 8003276:	2b08      	cmp	r3, #8
 8003278:	d05c      	beq.n	8003334 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	699b      	ldr	r3, [r3, #24]
 800327e:	2b02      	cmp	r3, #2
 8003280:	d141      	bne.n	8003306 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003282:	4b31      	ldr	r3, [pc, #196]	; (8003348 <HAL_RCC_OscConfig+0x478>)
 8003284:	2200      	movs	r2, #0
 8003286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003288:	f7fe ffba 	bl	8002200 <HAL_GetTick>
 800328c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800328e:	e008      	b.n	80032a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003290:	f7fe ffb6 	bl	8002200 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b02      	cmp	r3, #2
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e087      	b.n	80033b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032a2:	4b27      	ldr	r3, [pc, #156]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1f0      	bne.n	8003290 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	69da      	ldr	r2, [r3, #28]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a1b      	ldr	r3, [r3, #32]
 80032b6:	431a      	orrs	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032bc:	019b      	lsls	r3, r3, #6
 80032be:	431a      	orrs	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c4:	085b      	lsrs	r3, r3, #1
 80032c6:	3b01      	subs	r3, #1
 80032c8:	041b      	lsls	r3, r3, #16
 80032ca:	431a      	orrs	r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d0:	061b      	lsls	r3, r3, #24
 80032d2:	491b      	ldr	r1, [pc, #108]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 80032d4:	4313      	orrs	r3, r2
 80032d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032d8:	4b1b      	ldr	r3, [pc, #108]	; (8003348 <HAL_RCC_OscConfig+0x478>)
 80032da:	2201      	movs	r2, #1
 80032dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032de:	f7fe ff8f 	bl	8002200 <HAL_GetTick>
 80032e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032e4:	e008      	b.n	80032f8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032e6:	f7fe ff8b 	bl	8002200 <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d901      	bls.n	80032f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e05c      	b.n	80033b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032f8:	4b11      	ldr	r3, [pc, #68]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d0f0      	beq.n	80032e6 <HAL_RCC_OscConfig+0x416>
 8003304:	e054      	b.n	80033b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003306:	4b10      	ldr	r3, [pc, #64]	; (8003348 <HAL_RCC_OscConfig+0x478>)
 8003308:	2200      	movs	r2, #0
 800330a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800330c:	f7fe ff78 	bl	8002200 <HAL_GetTick>
 8003310:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003312:	e008      	b.n	8003326 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003314:	f7fe ff74 	bl	8002200 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b02      	cmp	r3, #2
 8003320:	d901      	bls.n	8003326 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e045      	b.n	80033b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003326:	4b06      	ldr	r3, [pc, #24]	; (8003340 <HAL_RCC_OscConfig+0x470>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1f0      	bne.n	8003314 <HAL_RCC_OscConfig+0x444>
 8003332:	e03d      	b.n	80033b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	699b      	ldr	r3, [r3, #24]
 8003338:	2b01      	cmp	r3, #1
 800333a:	d107      	bne.n	800334c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e038      	b.n	80033b2 <HAL_RCC_OscConfig+0x4e2>
 8003340:	40023800 	.word	0x40023800
 8003344:	40007000 	.word	0x40007000
 8003348:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800334c:	4b1b      	ldr	r3, [pc, #108]	; (80033bc <HAL_RCC_OscConfig+0x4ec>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	699b      	ldr	r3, [r3, #24]
 8003356:	2b01      	cmp	r3, #1
 8003358:	d028      	beq.n	80033ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003364:	429a      	cmp	r2, r3
 8003366:	d121      	bne.n	80033ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003372:	429a      	cmp	r2, r3
 8003374:	d11a      	bne.n	80033ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800337c:	4013      	ands	r3, r2
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003382:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003384:	4293      	cmp	r3, r2
 8003386:	d111      	bne.n	80033ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003392:	085b      	lsrs	r3, r3, #1
 8003394:	3b01      	subs	r3, #1
 8003396:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003398:	429a      	cmp	r2, r3
 800339a:	d107      	bne.n	80033ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d001      	beq.n	80033b0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e000      	b.n	80033b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3718      	adds	r7, #24
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	40023800 	.word	0x40023800

080033c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d101      	bne.n	80033d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e0cc      	b.n	800356e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033d4:	4b68      	ldr	r3, [pc, #416]	; (8003578 <HAL_RCC_ClockConfig+0x1b8>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0307 	and.w	r3, r3, #7
 80033dc:	683a      	ldr	r2, [r7, #0]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d90c      	bls.n	80033fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033e2:	4b65      	ldr	r3, [pc, #404]	; (8003578 <HAL_RCC_ClockConfig+0x1b8>)
 80033e4:	683a      	ldr	r2, [r7, #0]
 80033e6:	b2d2      	uxtb	r2, r2
 80033e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ea:	4b63      	ldr	r3, [pc, #396]	; (8003578 <HAL_RCC_ClockConfig+0x1b8>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0307 	and.w	r3, r3, #7
 80033f2:	683a      	ldr	r2, [r7, #0]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d001      	beq.n	80033fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e0b8      	b.n	800356e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0302 	and.w	r3, r3, #2
 8003404:	2b00      	cmp	r3, #0
 8003406:	d020      	beq.n	800344a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0304 	and.w	r3, r3, #4
 8003410:	2b00      	cmp	r3, #0
 8003412:	d005      	beq.n	8003420 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003414:	4b59      	ldr	r3, [pc, #356]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	4a58      	ldr	r2, [pc, #352]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 800341a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800341e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0308 	and.w	r3, r3, #8
 8003428:	2b00      	cmp	r3, #0
 800342a:	d005      	beq.n	8003438 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800342c:	4b53      	ldr	r3, [pc, #332]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	4a52      	ldr	r2, [pc, #328]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 8003432:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003436:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003438:	4b50      	ldr	r3, [pc, #320]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	494d      	ldr	r1, [pc, #308]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 8003446:	4313      	orrs	r3, r2
 8003448:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	2b00      	cmp	r3, #0
 8003454:	d044      	beq.n	80034e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d107      	bne.n	800346e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800345e:	4b47      	ldr	r3, [pc, #284]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d119      	bne.n	800349e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e07f      	b.n	800356e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	2b02      	cmp	r3, #2
 8003474:	d003      	beq.n	800347e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800347a:	2b03      	cmp	r3, #3
 800347c:	d107      	bne.n	800348e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800347e:	4b3f      	ldr	r3, [pc, #252]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d109      	bne.n	800349e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e06f      	b.n	800356e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800348e:	4b3b      	ldr	r3, [pc, #236]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0302 	and.w	r3, r3, #2
 8003496:	2b00      	cmp	r3, #0
 8003498:	d101      	bne.n	800349e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e067      	b.n	800356e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800349e:	4b37      	ldr	r3, [pc, #220]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f023 0203 	bic.w	r2, r3, #3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	4934      	ldr	r1, [pc, #208]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034b0:	f7fe fea6 	bl	8002200 <HAL_GetTick>
 80034b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034b6:	e00a      	b.n	80034ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034b8:	f7fe fea2 	bl	8002200 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e04f      	b.n	800356e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ce:	4b2b      	ldr	r3, [pc, #172]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f003 020c 	and.w	r2, r3, #12
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	429a      	cmp	r2, r3
 80034de:	d1eb      	bne.n	80034b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034e0:	4b25      	ldr	r3, [pc, #148]	; (8003578 <HAL_RCC_ClockConfig+0x1b8>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0307 	and.w	r3, r3, #7
 80034e8:	683a      	ldr	r2, [r7, #0]
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d20c      	bcs.n	8003508 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ee:	4b22      	ldr	r3, [pc, #136]	; (8003578 <HAL_RCC_ClockConfig+0x1b8>)
 80034f0:	683a      	ldr	r2, [r7, #0]
 80034f2:	b2d2      	uxtb	r2, r2
 80034f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034f6:	4b20      	ldr	r3, [pc, #128]	; (8003578 <HAL_RCC_ClockConfig+0x1b8>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0307 	and.w	r3, r3, #7
 80034fe:	683a      	ldr	r2, [r7, #0]
 8003500:	429a      	cmp	r2, r3
 8003502:	d001      	beq.n	8003508 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e032      	b.n	800356e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0304 	and.w	r3, r3, #4
 8003510:	2b00      	cmp	r3, #0
 8003512:	d008      	beq.n	8003526 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003514:	4b19      	ldr	r3, [pc, #100]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	4916      	ldr	r1, [pc, #88]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 8003522:	4313      	orrs	r3, r2
 8003524:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0308 	and.w	r3, r3, #8
 800352e:	2b00      	cmp	r3, #0
 8003530:	d009      	beq.n	8003546 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003532:	4b12      	ldr	r3, [pc, #72]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	00db      	lsls	r3, r3, #3
 8003540:	490e      	ldr	r1, [pc, #56]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 8003542:	4313      	orrs	r3, r2
 8003544:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003546:	f000 f821 	bl	800358c <HAL_RCC_GetSysClockFreq>
 800354a:	4602      	mov	r2, r0
 800354c:	4b0b      	ldr	r3, [pc, #44]	; (800357c <HAL_RCC_ClockConfig+0x1bc>)
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	091b      	lsrs	r3, r3, #4
 8003552:	f003 030f 	and.w	r3, r3, #15
 8003556:	490a      	ldr	r1, [pc, #40]	; (8003580 <HAL_RCC_ClockConfig+0x1c0>)
 8003558:	5ccb      	ldrb	r3, [r1, r3]
 800355a:	fa22 f303 	lsr.w	r3, r2, r3
 800355e:	4a09      	ldr	r2, [pc, #36]	; (8003584 <HAL_RCC_ClockConfig+0x1c4>)
 8003560:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003562:	4b09      	ldr	r3, [pc, #36]	; (8003588 <HAL_RCC_ClockConfig+0x1c8>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4618      	mov	r0, r3
 8003568:	f7fe fe06 	bl	8002178 <HAL_InitTick>

  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3710      	adds	r7, #16
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	40023c00 	.word	0x40023c00
 800357c:	40023800 	.word	0x40023800
 8003580:	08003d78 	.word	0x08003d78
 8003584:	20000000 	.word	0x20000000
 8003588:	20000004 	.word	0x20000004

0800358c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800358c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003590:	b094      	sub	sp, #80	; 0x50
 8003592:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003594:	2300      	movs	r3, #0
 8003596:	647b      	str	r3, [r7, #68]	; 0x44
 8003598:	2300      	movs	r3, #0
 800359a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800359c:	2300      	movs	r3, #0
 800359e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80035a0:	2300      	movs	r3, #0
 80035a2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035a4:	4b79      	ldr	r3, [pc, #484]	; (800378c <HAL_RCC_GetSysClockFreq+0x200>)
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	f003 030c 	and.w	r3, r3, #12
 80035ac:	2b08      	cmp	r3, #8
 80035ae:	d00d      	beq.n	80035cc <HAL_RCC_GetSysClockFreq+0x40>
 80035b0:	2b08      	cmp	r3, #8
 80035b2:	f200 80e1 	bhi.w	8003778 <HAL_RCC_GetSysClockFreq+0x1ec>
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d002      	beq.n	80035c0 <HAL_RCC_GetSysClockFreq+0x34>
 80035ba:	2b04      	cmp	r3, #4
 80035bc:	d003      	beq.n	80035c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80035be:	e0db      	b.n	8003778 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035c0:	4b73      	ldr	r3, [pc, #460]	; (8003790 <HAL_RCC_GetSysClockFreq+0x204>)
 80035c2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80035c4:	e0db      	b.n	800377e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035c6:	4b73      	ldr	r3, [pc, #460]	; (8003794 <HAL_RCC_GetSysClockFreq+0x208>)
 80035c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035ca:	e0d8      	b.n	800377e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035cc:	4b6f      	ldr	r3, [pc, #444]	; (800378c <HAL_RCC_GetSysClockFreq+0x200>)
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035d4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035d6:	4b6d      	ldr	r3, [pc, #436]	; (800378c <HAL_RCC_GetSysClockFreq+0x200>)
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d063      	beq.n	80036aa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035e2:	4b6a      	ldr	r3, [pc, #424]	; (800378c <HAL_RCC_GetSysClockFreq+0x200>)
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	099b      	lsrs	r3, r3, #6
 80035e8:	2200      	movs	r2, #0
 80035ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80035ec:	63fa      	str	r2, [r7, #60]	; 0x3c
 80035ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035f4:	633b      	str	r3, [r7, #48]	; 0x30
 80035f6:	2300      	movs	r3, #0
 80035f8:	637b      	str	r3, [r7, #52]	; 0x34
 80035fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80035fe:	4622      	mov	r2, r4
 8003600:	462b      	mov	r3, r5
 8003602:	f04f 0000 	mov.w	r0, #0
 8003606:	f04f 0100 	mov.w	r1, #0
 800360a:	0159      	lsls	r1, r3, #5
 800360c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003610:	0150      	lsls	r0, r2, #5
 8003612:	4602      	mov	r2, r0
 8003614:	460b      	mov	r3, r1
 8003616:	4621      	mov	r1, r4
 8003618:	1a51      	subs	r1, r2, r1
 800361a:	6139      	str	r1, [r7, #16]
 800361c:	4629      	mov	r1, r5
 800361e:	eb63 0301 	sbc.w	r3, r3, r1
 8003622:	617b      	str	r3, [r7, #20]
 8003624:	f04f 0200 	mov.w	r2, #0
 8003628:	f04f 0300 	mov.w	r3, #0
 800362c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003630:	4659      	mov	r1, fp
 8003632:	018b      	lsls	r3, r1, #6
 8003634:	4651      	mov	r1, sl
 8003636:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800363a:	4651      	mov	r1, sl
 800363c:	018a      	lsls	r2, r1, #6
 800363e:	4651      	mov	r1, sl
 8003640:	ebb2 0801 	subs.w	r8, r2, r1
 8003644:	4659      	mov	r1, fp
 8003646:	eb63 0901 	sbc.w	r9, r3, r1
 800364a:	f04f 0200 	mov.w	r2, #0
 800364e:	f04f 0300 	mov.w	r3, #0
 8003652:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003656:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800365a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800365e:	4690      	mov	r8, r2
 8003660:	4699      	mov	r9, r3
 8003662:	4623      	mov	r3, r4
 8003664:	eb18 0303 	adds.w	r3, r8, r3
 8003668:	60bb      	str	r3, [r7, #8]
 800366a:	462b      	mov	r3, r5
 800366c:	eb49 0303 	adc.w	r3, r9, r3
 8003670:	60fb      	str	r3, [r7, #12]
 8003672:	f04f 0200 	mov.w	r2, #0
 8003676:	f04f 0300 	mov.w	r3, #0
 800367a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800367e:	4629      	mov	r1, r5
 8003680:	024b      	lsls	r3, r1, #9
 8003682:	4621      	mov	r1, r4
 8003684:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003688:	4621      	mov	r1, r4
 800368a:	024a      	lsls	r2, r1, #9
 800368c:	4610      	mov	r0, r2
 800368e:	4619      	mov	r1, r3
 8003690:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003692:	2200      	movs	r2, #0
 8003694:	62bb      	str	r3, [r7, #40]	; 0x28
 8003696:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003698:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800369c:	f7fc fd9c 	bl	80001d8 <__aeabi_uldivmod>
 80036a0:	4602      	mov	r2, r0
 80036a2:	460b      	mov	r3, r1
 80036a4:	4613      	mov	r3, r2
 80036a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036a8:	e058      	b.n	800375c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036aa:	4b38      	ldr	r3, [pc, #224]	; (800378c <HAL_RCC_GetSysClockFreq+0x200>)
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	099b      	lsrs	r3, r3, #6
 80036b0:	2200      	movs	r2, #0
 80036b2:	4618      	mov	r0, r3
 80036b4:	4611      	mov	r1, r2
 80036b6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80036ba:	623b      	str	r3, [r7, #32]
 80036bc:	2300      	movs	r3, #0
 80036be:	627b      	str	r3, [r7, #36]	; 0x24
 80036c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80036c4:	4642      	mov	r2, r8
 80036c6:	464b      	mov	r3, r9
 80036c8:	f04f 0000 	mov.w	r0, #0
 80036cc:	f04f 0100 	mov.w	r1, #0
 80036d0:	0159      	lsls	r1, r3, #5
 80036d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036d6:	0150      	lsls	r0, r2, #5
 80036d8:	4602      	mov	r2, r0
 80036da:	460b      	mov	r3, r1
 80036dc:	4641      	mov	r1, r8
 80036de:	ebb2 0a01 	subs.w	sl, r2, r1
 80036e2:	4649      	mov	r1, r9
 80036e4:	eb63 0b01 	sbc.w	fp, r3, r1
 80036e8:	f04f 0200 	mov.w	r2, #0
 80036ec:	f04f 0300 	mov.w	r3, #0
 80036f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80036f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80036f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80036fc:	ebb2 040a 	subs.w	r4, r2, sl
 8003700:	eb63 050b 	sbc.w	r5, r3, fp
 8003704:	f04f 0200 	mov.w	r2, #0
 8003708:	f04f 0300 	mov.w	r3, #0
 800370c:	00eb      	lsls	r3, r5, #3
 800370e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003712:	00e2      	lsls	r2, r4, #3
 8003714:	4614      	mov	r4, r2
 8003716:	461d      	mov	r5, r3
 8003718:	4643      	mov	r3, r8
 800371a:	18e3      	adds	r3, r4, r3
 800371c:	603b      	str	r3, [r7, #0]
 800371e:	464b      	mov	r3, r9
 8003720:	eb45 0303 	adc.w	r3, r5, r3
 8003724:	607b      	str	r3, [r7, #4]
 8003726:	f04f 0200 	mov.w	r2, #0
 800372a:	f04f 0300 	mov.w	r3, #0
 800372e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003732:	4629      	mov	r1, r5
 8003734:	028b      	lsls	r3, r1, #10
 8003736:	4621      	mov	r1, r4
 8003738:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800373c:	4621      	mov	r1, r4
 800373e:	028a      	lsls	r2, r1, #10
 8003740:	4610      	mov	r0, r2
 8003742:	4619      	mov	r1, r3
 8003744:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003746:	2200      	movs	r2, #0
 8003748:	61bb      	str	r3, [r7, #24]
 800374a:	61fa      	str	r2, [r7, #28]
 800374c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003750:	f7fc fd42 	bl	80001d8 <__aeabi_uldivmod>
 8003754:	4602      	mov	r2, r0
 8003756:	460b      	mov	r3, r1
 8003758:	4613      	mov	r3, r2
 800375a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800375c:	4b0b      	ldr	r3, [pc, #44]	; (800378c <HAL_RCC_GetSysClockFreq+0x200>)
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	0c1b      	lsrs	r3, r3, #16
 8003762:	f003 0303 	and.w	r3, r3, #3
 8003766:	3301      	adds	r3, #1
 8003768:	005b      	lsls	r3, r3, #1
 800376a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800376c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800376e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003770:	fbb2 f3f3 	udiv	r3, r2, r3
 8003774:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003776:	e002      	b.n	800377e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003778:	4b05      	ldr	r3, [pc, #20]	; (8003790 <HAL_RCC_GetSysClockFreq+0x204>)
 800377a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800377c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800377e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003780:	4618      	mov	r0, r3
 8003782:	3750      	adds	r7, #80	; 0x50
 8003784:	46bd      	mov	sp, r7
 8003786:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800378a:	bf00      	nop
 800378c:	40023800 	.word	0x40023800
 8003790:	00f42400 	.word	0x00f42400
 8003794:	007a1200 	.word	0x007a1200

08003798 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d101      	bne.n	80037aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e07b      	b.n	80038a2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d108      	bne.n	80037c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037ba:	d009      	beq.n	80037d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	61da      	str	r2, [r3, #28]
 80037c2:	e005      	b.n	80037d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d106      	bne.n	80037f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f7fe fbb8 	bl	8001f60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2202      	movs	r2, #2
 80037f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003806:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003818:	431a      	orrs	r2, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003822:	431a      	orrs	r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	691b      	ldr	r3, [r3, #16]
 8003828:	f003 0302 	and.w	r3, r3, #2
 800382c:	431a      	orrs	r2, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	695b      	ldr	r3, [r3, #20]
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	431a      	orrs	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	699b      	ldr	r3, [r3, #24]
 800383c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003840:	431a      	orrs	r2, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	69db      	ldr	r3, [r3, #28]
 8003846:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800384a:	431a      	orrs	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a1b      	ldr	r3, [r3, #32]
 8003850:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003854:	ea42 0103 	orr.w	r1, r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800385c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	430a      	orrs	r2, r1
 8003866:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	699b      	ldr	r3, [r3, #24]
 800386c:	0c1b      	lsrs	r3, r3, #16
 800386e:	f003 0104 	and.w	r1, r3, #4
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003876:	f003 0210 	and.w	r2, r3, #16
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	430a      	orrs	r2, r1
 8003880:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	69da      	ldr	r2, [r3, #28]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003890:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3708      	adds	r7, #8
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
	...

080038ac <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b086      	sub	sp, #24
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	4613      	mov	r3, r2
 80038b8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80038ba:	2300      	movs	r3, #0
 80038bc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d101      	bne.n	80038cc <HAL_SPI_Transmit_DMA+0x20>
 80038c8:	2302      	movs	r3, #2
 80038ca:	e09b      	b.n	8003a04 <HAL_SPI_Transmit_DMA+0x158>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d002      	beq.n	80038e6 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80038e0:	2302      	movs	r3, #2
 80038e2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80038e4:	e089      	b.n	80039fa <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d002      	beq.n	80038f2 <HAL_SPI_Transmit_DMA+0x46>
 80038ec:	88fb      	ldrh	r3, [r7, #6]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d102      	bne.n	80038f8 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80038f6:	e080      	b.n	80039fa <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2203      	movs	r2, #3
 80038fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	68ba      	ldr	r2, [r7, #8]
 800390a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	88fa      	ldrh	r2, [r7, #6]
 8003910:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	88fa      	ldrh	r2, [r7, #6]
 8003916:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2200      	movs	r2, #0
 800391c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2200      	movs	r2, #0
 8003922:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2200      	movs	r2, #0
 8003928:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2200      	movs	r2, #0
 800392e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2200      	movs	r2, #0
 8003934:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800393e:	d10f      	bne.n	8003960 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800394e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800395e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003964:	4a29      	ldr	r2, [pc, #164]	; (8003a0c <HAL_SPI_Transmit_DMA+0x160>)
 8003966:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800396c:	4a28      	ldr	r2, [pc, #160]	; (8003a10 <HAL_SPI_Transmit_DMA+0x164>)
 800396e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003974:	4a27      	ldr	r2, [pc, #156]	; (8003a14 <HAL_SPI_Transmit_DMA+0x168>)
 8003976:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800397c:	2200      	movs	r2, #0
 800397e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003988:	4619      	mov	r1, r3
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	330c      	adds	r3, #12
 8003990:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003996:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003998:	f7fe fe22 	bl	80025e0 <HAL_DMA_Start_IT>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00c      	beq.n	80039bc <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a6:	f043 0210 	orr.w	r2, r3, #16
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2201      	movs	r2, #1
 80039b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80039ba:	e01e      	b.n	80039fa <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c6:	2b40      	cmp	r3, #64	; 0x40
 80039c8:	d007      	beq.n	80039da <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039d8:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	685a      	ldr	r2, [r3, #4]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f042 0220 	orr.w	r2, r2, #32
 80039e8:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	685a      	ldr	r2, [r3, #4]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f042 0202 	orr.w	r2, r2, #2
 80039f8:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003a02:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3718      	adds	r7, #24
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	08003afd 	.word	0x08003afd
 8003a10:	08003a55 	.word	0x08003a55
 8003a14:	08003b19 	.word	0x08003b19

08003a18 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8003a20:	bf00      	nop
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8003a34:	bf00      	nop
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003a48:	bf00      	nop
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b086      	sub	sp, #24
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a60:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a62:	f7fe fbcd 	bl	8002200 <HAL_GetTick>
 8003a66:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a76:	d03b      	beq.n	8003af0 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	685a      	ldr	r2, [r3, #4]
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f022 0220 	bic.w	r2, r2, #32
 8003a86:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	685a      	ldr	r2, [r3, #4]
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f022 0202 	bic.w	r2, r2, #2
 8003a96:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003a98:	693a      	ldr	r2, [r7, #16]
 8003a9a:	2164      	movs	r1, #100	; 0x64
 8003a9c:	6978      	ldr	r0, [r7, #20]
 8003a9e:	f000 f8e3 	bl	8003c68 <SPI_EndRxTxTransaction>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d005      	beq.n	8003ab4 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aac:	f043 0220 	orr.w	r2, r3, #32
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d10a      	bne.n	8003ad2 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003abc:	2300      	movs	r3, #0
 8003abe:	60fb      	str	r3, [r7, #12]
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	60fb      	str	r3, [r7, #12]
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	60fb      	str	r3, [r7, #12]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d003      	beq.n	8003af0 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003ae8:	6978      	ldr	r0, [r7, #20]
 8003aea:	f7ff ffa9 	bl	8003a40 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003aee:	e002      	b.n	8003af6 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8003af0:	6978      	ldr	r0, [r7, #20]
 8003af2:	f7ff ff91 	bl	8003a18 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003af6:	3718      	adds	r7, #24
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b08:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8003b0a:	68f8      	ldr	r0, [r7, #12]
 8003b0c:	f7ff ff8e 	bl	8003a2c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003b10:	bf00      	nop
 8003b12:	3710      	adds	r7, #16
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b24:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	685a      	ldr	r2, [r3, #4]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f022 0203 	bic.w	r2, r2, #3
 8003b34:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b3a:	f043 0210 	orr.w	r2, r3, #16
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2201      	movs	r2, #1
 8003b46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003b4a:	68f8      	ldr	r0, [r7, #12]
 8003b4c:	f7ff ff78 	bl	8003a40 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003b50:	bf00      	nop
 8003b52:	3710      	adds	r7, #16
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b088      	sub	sp, #32
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	603b      	str	r3, [r7, #0]
 8003b64:	4613      	mov	r3, r2
 8003b66:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003b68:	f7fe fb4a 	bl	8002200 <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b70:	1a9b      	subs	r3, r3, r2
 8003b72:	683a      	ldr	r2, [r7, #0]
 8003b74:	4413      	add	r3, r2
 8003b76:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003b78:	f7fe fb42 	bl	8002200 <HAL_GetTick>
 8003b7c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003b7e:	4b39      	ldr	r3, [pc, #228]	; (8003c64 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	015b      	lsls	r3, r3, #5
 8003b84:	0d1b      	lsrs	r3, r3, #20
 8003b86:	69fa      	ldr	r2, [r7, #28]
 8003b88:	fb02 f303 	mul.w	r3, r2, r3
 8003b8c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b8e:	e054      	b.n	8003c3a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b96:	d050      	beq.n	8003c3a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b98:	f7fe fb32 	bl	8002200 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	69bb      	ldr	r3, [r7, #24]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	69fa      	ldr	r2, [r7, #28]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d902      	bls.n	8003bae <SPI_WaitFlagStateUntilTimeout+0x56>
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d13d      	bne.n	8003c2a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	685a      	ldr	r2, [r3, #4]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003bbc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bc6:	d111      	bne.n	8003bec <SPI_WaitFlagStateUntilTimeout+0x94>
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bd0:	d004      	beq.n	8003bdc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bda:	d107      	bne.n	8003bec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bf4:	d10f      	bne.n	8003c16 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c04:	601a      	str	r2, [r3, #0]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c14:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e017      	b.n	8003c5a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d101      	bne.n	8003c34 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003c30:	2300      	movs	r3, #0
 8003c32:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	3b01      	subs	r3, #1
 8003c38:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	689a      	ldr	r2, [r3, #8]
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	4013      	ands	r3, r2
 8003c44:	68ba      	ldr	r2, [r7, #8]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	bf0c      	ite	eq
 8003c4a:	2301      	moveq	r3, #1
 8003c4c:	2300      	movne	r3, #0
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	461a      	mov	r2, r3
 8003c52:	79fb      	ldrb	r3, [r7, #7]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d19b      	bne.n	8003b90 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3720      	adds	r7, #32
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	20000000 	.word	0x20000000

08003c68 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b088      	sub	sp, #32
 8003c6c:	af02      	add	r7, sp, #8
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003c74:	4b1b      	ldr	r3, [pc, #108]	; (8003ce4 <SPI_EndRxTxTransaction+0x7c>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a1b      	ldr	r2, [pc, #108]	; (8003ce8 <SPI_EndRxTxTransaction+0x80>)
 8003c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c7e:	0d5b      	lsrs	r3, r3, #21
 8003c80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003c84:	fb02 f303 	mul.w	r3, r2, r3
 8003c88:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c92:	d112      	bne.n	8003cba <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	9300      	str	r3, [sp, #0]
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	2180      	movs	r1, #128	; 0x80
 8003c9e:	68f8      	ldr	r0, [r7, #12]
 8003ca0:	f7ff ff5a 	bl	8003b58 <SPI_WaitFlagStateUntilTimeout>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d016      	beq.n	8003cd8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cae:	f043 0220 	orr.w	r2, r3, #32
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e00f      	b.n	8003cda <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d00a      	beq.n	8003cd6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cd0:	2b80      	cmp	r3, #128	; 0x80
 8003cd2:	d0f2      	beq.n	8003cba <SPI_EndRxTxTransaction+0x52>
 8003cd4:	e000      	b.n	8003cd8 <SPI_EndRxTxTransaction+0x70>
        break;
 8003cd6:	bf00      	nop
  }

  return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3718      	adds	r7, #24
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	20000000 	.word	0x20000000
 8003ce8:	165e9f81 	.word	0x165e9f81

08003cec <__libc_init_array>:
 8003cec:	b570      	push	{r4, r5, r6, lr}
 8003cee:	4d0d      	ldr	r5, [pc, #52]	; (8003d24 <__libc_init_array+0x38>)
 8003cf0:	4c0d      	ldr	r4, [pc, #52]	; (8003d28 <__libc_init_array+0x3c>)
 8003cf2:	1b64      	subs	r4, r4, r5
 8003cf4:	10a4      	asrs	r4, r4, #2
 8003cf6:	2600      	movs	r6, #0
 8003cf8:	42a6      	cmp	r6, r4
 8003cfa:	d109      	bne.n	8003d10 <__libc_init_array+0x24>
 8003cfc:	4d0b      	ldr	r5, [pc, #44]	; (8003d2c <__libc_init_array+0x40>)
 8003cfe:	4c0c      	ldr	r4, [pc, #48]	; (8003d30 <__libc_init_array+0x44>)
 8003d00:	f000 f820 	bl	8003d44 <_init>
 8003d04:	1b64      	subs	r4, r4, r5
 8003d06:	10a4      	asrs	r4, r4, #2
 8003d08:	2600      	movs	r6, #0
 8003d0a:	42a6      	cmp	r6, r4
 8003d0c:	d105      	bne.n	8003d1a <__libc_init_array+0x2e>
 8003d0e:	bd70      	pop	{r4, r5, r6, pc}
 8003d10:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d14:	4798      	blx	r3
 8003d16:	3601      	adds	r6, #1
 8003d18:	e7ee      	b.n	8003cf8 <__libc_init_array+0xc>
 8003d1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d1e:	4798      	blx	r3
 8003d20:	3601      	adds	r6, #1
 8003d22:	e7f2      	b.n	8003d0a <__libc_init_array+0x1e>
 8003d24:	08003e9c 	.word	0x08003e9c
 8003d28:	08003e9c 	.word	0x08003e9c
 8003d2c:	08003e9c 	.word	0x08003e9c
 8003d30:	08003ea0 	.word	0x08003ea0

08003d34 <memset>:
 8003d34:	4402      	add	r2, r0
 8003d36:	4603      	mov	r3, r0
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d100      	bne.n	8003d3e <memset+0xa>
 8003d3c:	4770      	bx	lr
 8003d3e:	f803 1b01 	strb.w	r1, [r3], #1
 8003d42:	e7f9      	b.n	8003d38 <memset+0x4>

08003d44 <_init>:
 8003d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d46:	bf00      	nop
 8003d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d4a:	bc08      	pop	{r3}
 8003d4c:	469e      	mov	lr, r3
 8003d4e:	4770      	bx	lr

08003d50 <_fini>:
 8003d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d52:	bf00      	nop
 8003d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d56:	bc08      	pop	{r3}
 8003d58:	469e      	mov	lr, r3
 8003d5a:	4770      	bx	lr
