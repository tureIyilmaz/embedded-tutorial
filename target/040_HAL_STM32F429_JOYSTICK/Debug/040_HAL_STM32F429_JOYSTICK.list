
040_HAL_STM32F429_JOYSTICK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028c0  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002a6c  08002a6c  00012a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a84  08002a84  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002a84  08002a84  00012a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002a8c  08002a8c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a8c  08002a8c  00012a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a90  08002a90  00012a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002a94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000dc  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000e8  200000e8  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006aea  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000170f  00000000  00000000  00026b26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000608  00000000  00000000  00028238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000550  00000000  00000000  00028840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022d01  00000000  00000000  00028d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007767  00000000  00000000  0004ba91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7ce1  00000000  00000000  000531f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012aed9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000016c0  00000000  00000000  0012af2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08002a54 	.word	0x08002a54

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08002a54 	.word	0x08002a54

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
	joystickX = adcValue[0];
 80004f8:	4b06      	ldr	r3, [pc, #24]	; (8000514 <HAL_ADC_ConvCpltCallback+0x24>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a06      	ldr	r2, [pc, #24]	; (8000518 <HAL_ADC_ConvCpltCallback+0x28>)
 80004fe:	6013      	str	r3, [r2, #0]
	joystickY = adcValue[1];
 8000500:	4b04      	ldr	r3, [pc, #16]	; (8000514 <HAL_ADC_ConvCpltCallback+0x24>)
 8000502:	685b      	ldr	r3, [r3, #4]
 8000504:	4a05      	ldr	r2, [pc, #20]	; (800051c <HAL_ADC_ConvCpltCallback+0x2c>)
 8000506:	6013      	str	r3, [r2, #0]
}
 8000508:	bf00      	nop
 800050a:	370c      	adds	r7, #12
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr
 8000514:	200000d8 	.word	0x200000d8
 8000518:	200000d0 	.word	0x200000d0
 800051c:	200000d4 	.word	0x200000d4

08000520 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000524:	f000 faa8 	bl	8000a78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000528:	f000 f832 	bl	8000590 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800052c:	f000 f920 	bl	8000770 <MX_GPIO_Init>
  MX_DMA_Init();
 8000530:	f000 f8fe 	bl	8000730 <MX_DMA_Init>
  MX_ADC3_Init();
 8000534:	f000 f89c 	bl	8000670 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adcValue, 2);
 8000538:	2202      	movs	r2, #2
 800053a:	4910      	ldr	r1, [pc, #64]	; (800057c <main+0x5c>)
 800053c:	4810      	ldr	r0, [pc, #64]	; (8000580 <main+0x60>)
 800053e:	f000 fb75 	bl	8000c2c <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  button = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_3);
 8000542:	2108      	movs	r1, #8
 8000544:	480f      	ldr	r0, [pc, #60]	; (8000584 <main+0x64>)
 8000546:	f001 fd73 	bl	8002030 <HAL_GPIO_ReadPin>
 800054a:	4603      	mov	r3, r0
 800054c:	461a      	mov	r2, r3
 800054e:	4b0e      	ldr	r3, [pc, #56]	; (8000588 <main+0x68>)
 8000550:	701a      	strb	r2, [r3, #0]

	  if(button)
 8000552:	4b0d      	ldr	r3, [pc, #52]	; (8000588 <main+0x68>)
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	2b00      	cmp	r3, #0
 8000558:	d006      	beq.n	8000568 <main+0x48>
	  {
		  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13 | GPIO_PIN_14, GPIO_PIN_SET);
 800055a:	2201      	movs	r2, #1
 800055c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000560:	480a      	ldr	r0, [pc, #40]	; (800058c <main+0x6c>)
 8000562:	f001 fd7d 	bl	8002060 <HAL_GPIO_WritePin>
 8000566:	e005      	b.n	8000574 <main+0x54>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13 | GPIO_PIN_14, GPIO_PIN_RESET);
 8000568:	2200      	movs	r2, #0
 800056a:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800056e:	4807      	ldr	r0, [pc, #28]	; (800058c <main+0x6c>)
 8000570:	f001 fd76 	bl	8002060 <HAL_GPIO_WritePin>
	  }
	  HAL_Delay(200);
 8000574:	20c8      	movs	r0, #200	; 0xc8
 8000576:	f000 faf1 	bl	8000b5c <HAL_Delay>
	  button = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_3);
 800057a:	e7e2      	b.n	8000542 <main+0x22>
 800057c:	200000d8 	.word	0x200000d8
 8000580:	20000028 	.word	0x20000028
 8000584:	40021400 	.word	0x40021400
 8000588:	200000e0 	.word	0x200000e0
 800058c:	40021800 	.word	0x40021800

08000590 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b094      	sub	sp, #80	; 0x50
 8000594:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000596:	f107 0320 	add.w	r3, r7, #32
 800059a:	2230      	movs	r2, #48	; 0x30
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f002 fa50 	bl	8002a44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a4:	f107 030c 	add.w	r3, r7, #12
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]
 80005b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b4:	2300      	movs	r3, #0
 80005b6:	60bb      	str	r3, [r7, #8]
 80005b8:	4b2b      	ldr	r3, [pc, #172]	; (8000668 <SystemClock_Config+0xd8>)
 80005ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005bc:	4a2a      	ldr	r2, [pc, #168]	; (8000668 <SystemClock_Config+0xd8>)
 80005be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005c2:	6413      	str	r3, [r2, #64]	; 0x40
 80005c4:	4b28      	ldr	r3, [pc, #160]	; (8000668 <SystemClock_Config+0xd8>)
 80005c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005cc:	60bb      	str	r3, [r7, #8]
 80005ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d0:	2300      	movs	r3, #0
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	4b25      	ldr	r3, [pc, #148]	; (800066c <SystemClock_Config+0xdc>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a24      	ldr	r2, [pc, #144]	; (800066c <SystemClock_Config+0xdc>)
 80005da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005de:	6013      	str	r3, [r2, #0]
 80005e0:	4b22      	ldr	r3, [pc, #136]	; (800066c <SystemClock_Config+0xdc>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005e8:	607b      	str	r3, [r7, #4]
 80005ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005ec:	2301      	movs	r3, #1
 80005ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f6:	2302      	movs	r3, #2
 80005f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000600:	2304      	movs	r3, #4
 8000602:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000604:	23b4      	movs	r3, #180	; 0xb4
 8000606:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000608:	2302      	movs	r3, #2
 800060a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800060c:	2307      	movs	r3, #7
 800060e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000610:	f107 0320 	add.w	r3, r7, #32
 8000614:	4618      	mov	r0, r3
 8000616:	f001 fd8d 	bl	8002134 <HAL_RCC_OscConfig>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000620:	f000 f914 	bl	800084c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000624:	f001 fd36 	bl	8002094 <HAL_PWREx_EnableOverDrive>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800062e:	f000 f90d 	bl	800084c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000632:	230f      	movs	r3, #15
 8000634:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000636:	2302      	movs	r3, #2
 8000638:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063a:	2300      	movs	r3, #0
 800063c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800063e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000642:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000644:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000648:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800064a:	f107 030c 	add.w	r3, r7, #12
 800064e:	2105      	movs	r1, #5
 8000650:	4618      	mov	r0, r3
 8000652:	f001 ffe7 	bl	8002624 <HAL_RCC_ClockConfig>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800065c:	f000 f8f6 	bl	800084c <Error_Handler>
  }
}
 8000660:	bf00      	nop
 8000662:	3750      	adds	r7, #80	; 0x50
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	40023800 	.word	0x40023800
 800066c:	40007000 	.word	0x40007000

08000670 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b084      	sub	sp, #16
 8000674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000676:	463b      	mov	r3, r7
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000682:	4b28      	ldr	r3, [pc, #160]	; (8000724 <MX_ADC3_Init+0xb4>)
 8000684:	4a28      	ldr	r2, [pc, #160]	; (8000728 <MX_ADC3_Init+0xb8>)
 8000686:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000688:	4b26      	ldr	r3, [pc, #152]	; (8000724 <MX_ADC3_Init+0xb4>)
 800068a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800068e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000690:	4b24      	ldr	r3, [pc, #144]	; (8000724 <MX_ADC3_Init+0xb4>)
 8000692:	2200      	movs	r2, #0
 8000694:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 8000696:	4b23      	ldr	r3, [pc, #140]	; (8000724 <MX_ADC3_Init+0xb4>)
 8000698:	2201      	movs	r2, #1
 800069a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800069c:	4b21      	ldr	r3, [pc, #132]	; (8000724 <MX_ADC3_Init+0xb4>)
 800069e:	2201      	movs	r2, #1
 80006a0:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80006a2:	4b20      	ldr	r3, [pc, #128]	; (8000724 <MX_ADC3_Init+0xb4>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006aa:	4b1e      	ldr	r3, [pc, #120]	; (8000724 <MX_ADC3_Init+0xb4>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006b0:	4b1c      	ldr	r3, [pc, #112]	; (8000724 <MX_ADC3_Init+0xb4>)
 80006b2:	4a1e      	ldr	r2, [pc, #120]	; (800072c <MX_ADC3_Init+0xbc>)
 80006b4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006b6:	4b1b      	ldr	r3, [pc, #108]	; (8000724 <MX_ADC3_Init+0xb4>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 2;
 80006bc:	4b19      	ldr	r3, [pc, #100]	; (8000724 <MX_ADC3_Init+0xb4>)
 80006be:	2202      	movs	r2, #2
 80006c0:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80006c2:	4b18      	ldr	r3, [pc, #96]	; (8000724 <MX_ADC3_Init+0xb4>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006ca:	4b16      	ldr	r3, [pc, #88]	; (8000724 <MX_ADC3_Init+0xb4>)
 80006cc:	2201      	movs	r2, #1
 80006ce:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80006d0:	4814      	ldr	r0, [pc, #80]	; (8000724 <MX_ADC3_Init+0xb4>)
 80006d2:	f000 fa67 	bl	8000ba4 <HAL_ADC_Init>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80006dc:	f000 f8b6 	bl	800084c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80006e0:	230e      	movs	r3, #14
 80006e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006e4:	2301      	movs	r3, #1
 80006e6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 80006e8:	2306      	movs	r3, #6
 80006ea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80006ec:	463b      	mov	r3, r7
 80006ee:	4619      	mov	r1, r3
 80006f0:	480c      	ldr	r0, [pc, #48]	; (8000724 <MX_ADC3_Init+0xb4>)
 80006f2:	f000 fbbf 	bl	8000e74 <HAL_ADC_ConfigChannel>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80006fc:	f000 f8a6 	bl	800084c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000700:	230f      	movs	r3, #15
 8000702:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000704:	2302      	movs	r3, #2
 8000706:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000708:	463b      	mov	r3, r7
 800070a:	4619      	mov	r1, r3
 800070c:	4805      	ldr	r0, [pc, #20]	; (8000724 <MX_ADC3_Init+0xb4>)
 800070e:	f000 fbb1 	bl	8000e74 <HAL_ADC_ConfigChannel>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_ADC3_Init+0xac>
  {
    Error_Handler();
 8000718:	f000 f898 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800071c:	bf00      	nop
 800071e:	3710      	adds	r7, #16
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	20000028 	.word	0x20000028
 8000728:	40012200 	.word	0x40012200
 800072c:	0f000001 	.word	0x0f000001

08000730 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	4b0c      	ldr	r3, [pc, #48]	; (800076c <MX_DMA_Init+0x3c>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	4a0b      	ldr	r2, [pc, #44]	; (800076c <MX_DMA_Init+0x3c>)
 8000740:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
 8000746:	4b09      	ldr	r3, [pc, #36]	; (800076c <MX_DMA_Init+0x3c>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000752:	2200      	movs	r2, #0
 8000754:	2100      	movs	r1, #0
 8000756:	2039      	movs	r0, #57	; 0x39
 8000758:	f000 ff17 	bl	800158a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800075c:	2039      	movs	r0, #57	; 0x39
 800075e:	f000 ff30 	bl	80015c2 <HAL_NVIC_EnableIRQ>

}
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40023800 	.word	0x40023800

08000770 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b08a      	sub	sp, #40	; 0x28
 8000774:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000776:	f107 0314 	add.w	r3, r7, #20
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]
 8000782:	60da      	str	r2, [r3, #12]
 8000784:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	613b      	str	r3, [r7, #16]
 800078a:	4b2d      	ldr	r3, [pc, #180]	; (8000840 <MX_GPIO_Init+0xd0>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a2c      	ldr	r2, [pc, #176]	; (8000840 <MX_GPIO_Init+0xd0>)
 8000790:	f043 0320 	orr.w	r3, r3, #32
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b2a      	ldr	r3, [pc, #168]	; (8000840 <MX_GPIO_Init+0xd0>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0320 	and.w	r3, r3, #32
 800079e:	613b      	str	r3, [r7, #16]
 80007a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	60fb      	str	r3, [r7, #12]
 80007a6:	4b26      	ldr	r3, [pc, #152]	; (8000840 <MX_GPIO_Init+0xd0>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a25      	ldr	r2, [pc, #148]	; (8000840 <MX_GPIO_Init+0xd0>)
 80007ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b23      	ldr	r3, [pc, #140]	; (8000840 <MX_GPIO_Init+0xd0>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	60bb      	str	r3, [r7, #8]
 80007c2:	4b1f      	ldr	r3, [pc, #124]	; (8000840 <MX_GPIO_Init+0xd0>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a1e      	ldr	r2, [pc, #120]	; (8000840 <MX_GPIO_Init+0xd0>)
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b1c      	ldr	r3, [pc, #112]	; (8000840 <MX_GPIO_Init+0xd0>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	4b18      	ldr	r3, [pc, #96]	; (8000840 <MX_GPIO_Init+0xd0>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a17      	ldr	r2, [pc, #92]	; (8000840 <MX_GPIO_Init+0xd0>)
 80007e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b15      	ldr	r3, [pc, #84]	; (8000840 <MX_GPIO_Init+0xd0>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80007f6:	2200      	movs	r2, #0
 80007f8:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80007fc:	4811      	ldr	r0, [pc, #68]	; (8000844 <MX_GPIO_Init+0xd4>)
 80007fe:	f001 fc2f 	bl	8002060 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000802:	2308      	movs	r3, #8
 8000804:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000806:	2300      	movs	r3, #0
 8000808:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800080e:	f107 0314 	add.w	r3, r7, #20
 8000812:	4619      	mov	r1, r3
 8000814:	480c      	ldr	r0, [pc, #48]	; (8000848 <MX_GPIO_Init+0xd8>)
 8000816:	f001 fa5f 	bl	8001cd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800081a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800081e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000820:	2301      	movs	r3, #1
 8000822:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000828:	2300      	movs	r3, #0
 800082a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800082c:	f107 0314 	add.w	r3, r7, #20
 8000830:	4619      	mov	r1, r3
 8000832:	4804      	ldr	r0, [pc, #16]	; (8000844 <MX_GPIO_Init+0xd4>)
 8000834:	f001 fa50 	bl	8001cd8 <HAL_GPIO_Init>

}
 8000838:	bf00      	nop
 800083a:	3728      	adds	r7, #40	; 0x28
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	40023800 	.word	0x40023800
 8000844:	40021800 	.word	0x40021800
 8000848:	40021400 	.word	0x40021400

0800084c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000850:	b672      	cpsid	i
}
 8000852:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000854:	e7fe      	b.n	8000854 <Error_Handler+0x8>
	...

08000858 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	607b      	str	r3, [r7, #4]
 8000862:	4b10      	ldr	r3, [pc, #64]	; (80008a4 <HAL_MspInit+0x4c>)
 8000864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000866:	4a0f      	ldr	r2, [pc, #60]	; (80008a4 <HAL_MspInit+0x4c>)
 8000868:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800086c:	6453      	str	r3, [r2, #68]	; 0x44
 800086e:	4b0d      	ldr	r3, [pc, #52]	; (80008a4 <HAL_MspInit+0x4c>)
 8000870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000872:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	603b      	str	r3, [r7, #0]
 800087e:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <HAL_MspInit+0x4c>)
 8000880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000882:	4a08      	ldr	r2, [pc, #32]	; (80008a4 <HAL_MspInit+0x4c>)
 8000884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000888:	6413      	str	r3, [r2, #64]	; 0x40
 800088a:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <HAL_MspInit+0x4c>)
 800088c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000892:	603b      	str	r3, [r7, #0]
 8000894:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000896:	2007      	movs	r0, #7
 8000898:	f000 fe6c 	bl	8001574 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800089c:	bf00      	nop
 800089e:	3708      	adds	r7, #8
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	40023800 	.word	0x40023800

080008a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08a      	sub	sp, #40	; 0x28
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	609a      	str	r2, [r3, #8]
 80008bc:	60da      	str	r2, [r3, #12]
 80008be:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a2f      	ldr	r2, [pc, #188]	; (8000984 <HAL_ADC_MspInit+0xdc>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d158      	bne.n	800097c <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	613b      	str	r3, [r7, #16]
 80008ce:	4b2e      	ldr	r3, [pc, #184]	; (8000988 <HAL_ADC_MspInit+0xe0>)
 80008d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d2:	4a2d      	ldr	r2, [pc, #180]	; (8000988 <HAL_ADC_MspInit+0xe0>)
 80008d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008d8:	6453      	str	r3, [r2, #68]	; 0x44
 80008da:	4b2b      	ldr	r3, [pc, #172]	; (8000988 <HAL_ADC_MspInit+0xe0>)
 80008dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80008e2:	613b      	str	r3, [r7, #16]
 80008e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	4b27      	ldr	r3, [pc, #156]	; (8000988 <HAL_ADC_MspInit+0xe0>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a26      	ldr	r2, [pc, #152]	; (8000988 <HAL_ADC_MspInit+0xe0>)
 80008f0:	f043 0320 	orr.w	r3, r3, #32
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b24      	ldr	r3, [pc, #144]	; (8000988 <HAL_ADC_MspInit+0xe0>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f003 0320 	and.w	r3, r3, #32
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PF4     ------> ADC3_IN14
    PF5     ------> ADC3_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000902:	2330      	movs	r3, #48	; 0x30
 8000904:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000906:	2303      	movs	r3, #3
 8000908:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800090e:	f107 0314 	add.w	r3, r7, #20
 8000912:	4619      	mov	r1, r3
 8000914:	481d      	ldr	r0, [pc, #116]	; (800098c <HAL_ADC_MspInit+0xe4>)
 8000916:	f001 f9df 	bl	8001cd8 <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA2_Stream1;
 800091a:	4b1d      	ldr	r3, [pc, #116]	; (8000990 <HAL_ADC_MspInit+0xe8>)
 800091c:	4a1d      	ldr	r2, [pc, #116]	; (8000994 <HAL_ADC_MspInit+0xec>)
 800091e:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8000920:	4b1b      	ldr	r3, [pc, #108]	; (8000990 <HAL_ADC_MspInit+0xe8>)
 8000922:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000926:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000928:	4b19      	ldr	r3, [pc, #100]	; (8000990 <HAL_ADC_MspInit+0xe8>)
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800092e:	4b18      	ldr	r3, [pc, #96]	; (8000990 <HAL_ADC_MspInit+0xe8>)
 8000930:	2200      	movs	r2, #0
 8000932:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000934:	4b16      	ldr	r3, [pc, #88]	; (8000990 <HAL_ADC_MspInit+0xe8>)
 8000936:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800093a:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800093c:	4b14      	ldr	r3, [pc, #80]	; (8000990 <HAL_ADC_MspInit+0xe8>)
 800093e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000942:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000944:	4b12      	ldr	r3, [pc, #72]	; (8000990 <HAL_ADC_MspInit+0xe8>)
 8000946:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800094a:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800094c:	4b10      	ldr	r3, [pc, #64]	; (8000990 <HAL_ADC_MspInit+0xe8>)
 800094e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000952:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000954:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <HAL_ADC_MspInit+0xe8>)
 8000956:	2200      	movs	r2, #0
 8000958:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800095a:	4b0d      	ldr	r3, [pc, #52]	; (8000990 <HAL_ADC_MspInit+0xe8>)
 800095c:	2200      	movs	r2, #0
 800095e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000960:	480b      	ldr	r0, [pc, #44]	; (8000990 <HAL_ADC_MspInit+0xe8>)
 8000962:	f000 fe49 	bl	80015f8 <HAL_DMA_Init>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 800096c:	f7ff ff6e 	bl	800084c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	4a07      	ldr	r2, [pc, #28]	; (8000990 <HAL_ADC_MspInit+0xe8>)
 8000974:	639a      	str	r2, [r3, #56]	; 0x38
 8000976:	4a06      	ldr	r2, [pc, #24]	; (8000990 <HAL_ADC_MspInit+0xe8>)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800097c:	bf00      	nop
 800097e:	3728      	adds	r7, #40	; 0x28
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	40012200 	.word	0x40012200
 8000988:	40023800 	.word	0x40023800
 800098c:	40021400 	.word	0x40021400
 8000990:	20000070 	.word	0x20000070
 8000994:	40026428 	.word	0x40026428

08000998 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800099c:	e7fe      	b.n	800099c <NMI_Handler+0x4>

0800099e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009a2:	e7fe      	b.n	80009a2 <HardFault_Handler+0x4>

080009a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009a8:	e7fe      	b.n	80009a8 <MemManage_Handler+0x4>

080009aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ae:	e7fe      	b.n	80009ae <BusFault_Handler+0x4>

080009b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <UsageFault_Handler+0x4>

080009b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr

080009c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009c8:	bf00      	nop
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr

080009d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009d2:	b480      	push	{r7}
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009d6:	bf00      	nop
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr

080009e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009e4:	f000 f89a 	bl	8000b1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009e8:	bf00      	nop
 80009ea:	bd80      	pop	{r7, pc}

080009ec <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80009f0:	4802      	ldr	r0, [pc, #8]	; (80009fc <DMA2_Stream1_IRQHandler+0x10>)
 80009f2:	f000 ff07 	bl	8001804 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	20000070 	.word	0x20000070

08000a00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a04:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <SystemInit+0x20>)
 8000a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a0a:	4a05      	ldr	r2, [pc, #20]	; (8000a20 <SystemInit+0x20>)
 8000a0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	e000ed00 	.word	0xe000ed00

08000a24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000a24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a5c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a28:	480d      	ldr	r0, [pc, #52]	; (8000a60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a2a:	490e      	ldr	r1, [pc, #56]	; (8000a64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a2c:	4a0e      	ldr	r2, [pc, #56]	; (8000a68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a30:	e002      	b.n	8000a38 <LoopCopyDataInit>

08000a32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a36:	3304      	adds	r3, #4

08000a38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a3c:	d3f9      	bcc.n	8000a32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a3e:	4a0b      	ldr	r2, [pc, #44]	; (8000a6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a40:	4c0b      	ldr	r4, [pc, #44]	; (8000a70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a44:	e001      	b.n	8000a4a <LoopFillZerobss>

08000a46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a48:	3204      	adds	r2, #4

08000a4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a4c:	d3fb      	bcc.n	8000a46 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a4e:	f7ff ffd7 	bl	8000a00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a52:	f001 ffd3 	bl	80029fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a56:	f7ff fd63 	bl	8000520 <main>
  bx  lr    
 8000a5a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000a5c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000a60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a64:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a68:	08002a94 	.word	0x08002a94
  ldr r2, =_sbss
 8000a6c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a70:	200000e8 	.word	0x200000e8

08000a74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a74:	e7fe      	b.n	8000a74 <ADC_IRQHandler>
	...

08000a78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a7c:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <HAL_Init+0x40>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a0d      	ldr	r2, [pc, #52]	; (8000ab8 <HAL_Init+0x40>)
 8000a82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a88:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <HAL_Init+0x40>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a0a      	ldr	r2, [pc, #40]	; (8000ab8 <HAL_Init+0x40>)
 8000a8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a94:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <HAL_Init+0x40>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a07      	ldr	r2, [pc, #28]	; (8000ab8 <HAL_Init+0x40>)
 8000a9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aa0:	2003      	movs	r0, #3
 8000aa2:	f000 fd67 	bl	8001574 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aa6:	2000      	movs	r0, #0
 8000aa8:	f000 f808 	bl	8000abc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aac:	f7ff fed4 	bl	8000858 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ab0:	2300      	movs	r3, #0
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40023c00 	.word	0x40023c00

08000abc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ac4:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <HAL_InitTick+0x54>)
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <HAL_InitTick+0x58>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	4619      	mov	r1, r3
 8000ace:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ad2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ada:	4618      	mov	r0, r3
 8000adc:	f000 fd7f 	bl	80015de <HAL_SYSTICK_Config>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	e00e      	b.n	8000b08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	2b0f      	cmp	r3, #15
 8000aee:	d80a      	bhi.n	8000b06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000af0:	2200      	movs	r2, #0
 8000af2:	6879      	ldr	r1, [r7, #4]
 8000af4:	f04f 30ff 	mov.w	r0, #4294967295
 8000af8:	f000 fd47 	bl	800158a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000afc:	4a06      	ldr	r2, [pc, #24]	; (8000b18 <HAL_InitTick+0x5c>)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b02:	2300      	movs	r3, #0
 8000b04:	e000      	b.n	8000b08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b06:	2301      	movs	r3, #1
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3708      	adds	r7, #8
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	20000000 	.word	0x20000000
 8000b14:	20000008 	.word	0x20000008
 8000b18:	20000004 	.word	0x20000004

08000b1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b20:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <HAL_IncTick+0x20>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	461a      	mov	r2, r3
 8000b26:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <HAL_IncTick+0x24>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4413      	add	r3, r2
 8000b2c:	4a04      	ldr	r2, [pc, #16]	; (8000b40 <HAL_IncTick+0x24>)
 8000b2e:	6013      	str	r3, [r2, #0]
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	20000008 	.word	0x20000008
 8000b40:	200000e4 	.word	0x200000e4

08000b44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  return uwTick;
 8000b48:	4b03      	ldr	r3, [pc, #12]	; (8000b58 <HAL_GetTick+0x14>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	200000e4 	.word	0x200000e4

08000b5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b64:	f7ff ffee 	bl	8000b44 <HAL_GetTick>
 8000b68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b74:	d005      	beq.n	8000b82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b76:	4b0a      	ldr	r3, [pc, #40]	; (8000ba0 <HAL_Delay+0x44>)
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	4413      	add	r3, r2
 8000b80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b82:	bf00      	nop
 8000b84:	f7ff ffde 	bl	8000b44 <HAL_GetTick>
 8000b88:	4602      	mov	r2, r0
 8000b8a:	68bb      	ldr	r3, [r7, #8]
 8000b8c:	1ad3      	subs	r3, r2, r3
 8000b8e:	68fa      	ldr	r2, [r7, #12]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	d8f7      	bhi.n	8000b84 <HAL_Delay+0x28>
  {
  }
}
 8000b94:	bf00      	nop
 8000b96:	bf00      	nop
 8000b98:	3710      	adds	r7, #16
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	20000008 	.word	0x20000008

08000ba4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bac:	2300      	movs	r3, #0
 8000bae:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d101      	bne.n	8000bba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	e033      	b.n	8000c22 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d109      	bne.n	8000bd6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000bc2:	6878      	ldr	r0, [r7, #4]
 8000bc4:	f7ff fe70 	bl	80008a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2200      	movs	r2, #0
 8000bcc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bda:	f003 0310 	and.w	r3, r3, #16
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d118      	bne.n	8000c14 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000bea:	f023 0302 	bic.w	r3, r3, #2
 8000bee:	f043 0202 	orr.w	r2, r3, #2
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000bf6:	6878      	ldr	r0, [r7, #4]
 8000bf8:	f000 fa6e 	bl	80010d8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2200      	movs	r2, #0
 8000c00:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c06:	f023 0303 	bic.w	r3, r3, #3
 8000c0a:	f043 0201 	orr.w	r2, r3, #1
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	641a      	str	r2, [r3, #64]	; 0x40
 8000c12:	e001      	b.n	8000c18 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000c14:	2301      	movs	r3, #1
 8000c16:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3710      	adds	r7, #16
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
	...

08000c2c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	60f8      	str	r0, [r7, #12]
 8000c34:	60b9      	str	r1, [r7, #8]
 8000c36:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000c42:	2b01      	cmp	r3, #1
 8000c44:	d101      	bne.n	8000c4a <HAL_ADC_Start_DMA+0x1e>
 8000c46:	2302      	movs	r3, #2
 8000c48:	e0e9      	b.n	8000e1e <HAL_ADC_Start_DMA+0x1f2>
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	689b      	ldr	r3, [r3, #8]
 8000c58:	f003 0301 	and.w	r3, r3, #1
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d018      	beq.n	8000c92 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	689a      	ldr	r2, [r3, #8]
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f042 0201 	orr.w	r2, r2, #1
 8000c6e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000c70:	4b6d      	ldr	r3, [pc, #436]	; (8000e28 <HAL_ADC_Start_DMA+0x1fc>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a6d      	ldr	r2, [pc, #436]	; (8000e2c <HAL_ADC_Start_DMA+0x200>)
 8000c76:	fba2 2303 	umull	r2, r3, r2, r3
 8000c7a:	0c9a      	lsrs	r2, r3, #18
 8000c7c:	4613      	mov	r3, r2
 8000c7e:	005b      	lsls	r3, r3, #1
 8000c80:	4413      	add	r3, r2
 8000c82:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8000c84:	e002      	b.n	8000c8c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8000c86:	693b      	ldr	r3, [r7, #16]
 8000c88:	3b01      	subs	r3, #1
 8000c8a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8000c8c:	693b      	ldr	r3, [r7, #16]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d1f9      	bne.n	8000c86 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	689b      	ldr	r3, [r3, #8]
 8000c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ca0:	d107      	bne.n	8000cb2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	689a      	ldr	r2, [r3, #8]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000cb0:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	689b      	ldr	r3, [r3, #8]
 8000cb8:	f003 0301 	and.w	r3, r3, #1
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	f040 80a1 	bne.w	8000e04 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000cca:	f023 0301 	bic.w	r3, r3, #1
 8000cce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d007      	beq.n	8000cf4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000cec:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000d00:	d106      	bne.n	8000d10 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d06:	f023 0206 	bic.w	r2, r3, #6
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	645a      	str	r2, [r3, #68]	; 0x44
 8000d0e:	e002      	b.n	8000d16 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	2200      	movs	r2, #0
 8000d14:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	2200      	movs	r2, #0
 8000d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000d1e:	4b44      	ldr	r3, [pc, #272]	; (8000e30 <HAL_ADC_Start_DMA+0x204>)
 8000d20:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d26:	4a43      	ldr	r2, [pc, #268]	; (8000e34 <HAL_ADC_Start_DMA+0x208>)
 8000d28:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d2e:	4a42      	ldr	r2, [pc, #264]	; (8000e38 <HAL_ADC_Start_DMA+0x20c>)
 8000d30:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d36:	4a41      	ldr	r2, [pc, #260]	; (8000e3c <HAL_ADC_Start_DMA+0x210>)
 8000d38:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000d42:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	685a      	ldr	r2, [r3, #4]
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000d52:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	689a      	ldr	r2, [r3, #8]
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000d62:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	334c      	adds	r3, #76	; 0x4c
 8000d6e:	4619      	mov	r1, r3
 8000d70:	68ba      	ldr	r2, [r7, #8]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	f000 fcee 	bl	8001754 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	f003 031f 	and.w	r3, r3, #31
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d12a      	bne.n	8000dda <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a2d      	ldr	r2, [pc, #180]	; (8000e40 <HAL_ADC_Start_DMA+0x214>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d015      	beq.n	8000dba <HAL_ADC_Start_DMA+0x18e>
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a2c      	ldr	r2, [pc, #176]	; (8000e44 <HAL_ADC_Start_DMA+0x218>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d105      	bne.n	8000da4 <HAL_ADC_Start_DMA+0x178>
 8000d98:	4b25      	ldr	r3, [pc, #148]	; (8000e30 <HAL_ADC_Start_DMA+0x204>)
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f003 031f 	and.w	r3, r3, #31
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d00a      	beq.n	8000dba <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a27      	ldr	r2, [pc, #156]	; (8000e48 <HAL_ADC_Start_DMA+0x21c>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d136      	bne.n	8000e1c <HAL_ADC_Start_DMA+0x1f0>
 8000dae:	4b20      	ldr	r3, [pc, #128]	; (8000e30 <HAL_ADC_Start_DMA+0x204>)
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	f003 0310 	and.w	r3, r3, #16
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d130      	bne.n	8000e1c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	689b      	ldr	r3, [r3, #8]
 8000dc0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d129      	bne.n	8000e1c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	689a      	ldr	r2, [r3, #8]
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	e020      	b.n	8000e1c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a18      	ldr	r2, [pc, #96]	; (8000e40 <HAL_ADC_Start_DMA+0x214>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d11b      	bne.n	8000e1c <HAL_ADC_Start_DMA+0x1f0>
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	689b      	ldr	r3, [r3, #8]
 8000dea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d114      	bne.n	8000e1c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	689a      	ldr	r2, [r3, #8]
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000e00:	609a      	str	r2, [r3, #8]
 8000e02:	e00b      	b.n	8000e1c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e08:	f043 0210 	orr.w	r2, r3, #16
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e14:	f043 0201 	orr.w	r2, r3, #1
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8000e1c:	2300      	movs	r3, #0
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3718      	adds	r7, #24
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	20000000 	.word	0x20000000
 8000e2c:	431bde83 	.word	0x431bde83
 8000e30:	40012300 	.word	0x40012300
 8000e34:	080012d1 	.word	0x080012d1
 8000e38:	0800138b 	.word	0x0800138b
 8000e3c:	080013a7 	.word	0x080013a7
 8000e40:	40012000 	.word	0x40012000
 8000e44:	40012100 	.word	0x40012100
 8000e48:	40012200 	.word	0x40012200

08000e4c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8000e54:	bf00      	nop
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr

08000e60 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8000e68:	bf00      	nop
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr

08000e74 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d101      	bne.n	8000e90 <HAL_ADC_ConfigChannel+0x1c>
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	e113      	b.n	80010b8 <HAL_ADC_ConfigChannel+0x244>
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2201      	movs	r2, #1
 8000e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2b09      	cmp	r3, #9
 8000e9e:	d925      	bls.n	8000eec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	68d9      	ldr	r1, [r3, #12]
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	b29b      	uxth	r3, r3
 8000eac:	461a      	mov	r2, r3
 8000eae:	4613      	mov	r3, r2
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	4413      	add	r3, r2
 8000eb4:	3b1e      	subs	r3, #30
 8000eb6:	2207      	movs	r2, #7
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	43da      	mvns	r2, r3
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	400a      	ands	r2, r1
 8000ec4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	68d9      	ldr	r1, [r3, #12]
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	689a      	ldr	r2, [r3, #8]
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	b29b      	uxth	r3, r3
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	4603      	mov	r3, r0
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	4403      	add	r3, r0
 8000ede:	3b1e      	subs	r3, #30
 8000ee0:	409a      	lsls	r2, r3
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	430a      	orrs	r2, r1
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	e022      	b.n	8000f32 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	6919      	ldr	r1, [r3, #16]
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	b29b      	uxth	r3, r3
 8000ef8:	461a      	mov	r2, r3
 8000efa:	4613      	mov	r3, r2
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	4413      	add	r3, r2
 8000f00:	2207      	movs	r2, #7
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	43da      	mvns	r2, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	400a      	ands	r2, r1
 8000f0e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	6919      	ldr	r1, [r3, #16]
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	689a      	ldr	r2, [r3, #8]
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	b29b      	uxth	r3, r3
 8000f20:	4618      	mov	r0, r3
 8000f22:	4603      	mov	r3, r0
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	4403      	add	r3, r0
 8000f28:	409a      	lsls	r2, r3
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	430a      	orrs	r2, r1
 8000f30:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	2b06      	cmp	r3, #6
 8000f38:	d824      	bhi.n	8000f84 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685a      	ldr	r2, [r3, #4]
 8000f44:	4613      	mov	r3, r2
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	4413      	add	r3, r2
 8000f4a:	3b05      	subs	r3, #5
 8000f4c:	221f      	movs	r2, #31
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	43da      	mvns	r2, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	400a      	ands	r2, r1
 8000f5a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	b29b      	uxth	r3, r3
 8000f68:	4618      	mov	r0, r3
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685a      	ldr	r2, [r3, #4]
 8000f6e:	4613      	mov	r3, r2
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	4413      	add	r3, r2
 8000f74:	3b05      	subs	r3, #5
 8000f76:	fa00 f203 	lsl.w	r2, r0, r3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	430a      	orrs	r2, r1
 8000f80:	635a      	str	r2, [r3, #52]	; 0x34
 8000f82:	e04c      	b.n	800101e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	2b0c      	cmp	r3, #12
 8000f8a:	d824      	bhi.n	8000fd6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685a      	ldr	r2, [r3, #4]
 8000f96:	4613      	mov	r3, r2
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	4413      	add	r3, r2
 8000f9c:	3b23      	subs	r3, #35	; 0x23
 8000f9e:	221f      	movs	r2, #31
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	43da      	mvns	r2, r3
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	400a      	ands	r2, r1
 8000fac:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	b29b      	uxth	r3, r3
 8000fba:	4618      	mov	r0, r3
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685a      	ldr	r2, [r3, #4]
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	4413      	add	r3, r2
 8000fc6:	3b23      	subs	r3, #35	; 0x23
 8000fc8:	fa00 f203 	lsl.w	r2, r0, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	430a      	orrs	r2, r1
 8000fd2:	631a      	str	r2, [r3, #48]	; 0x30
 8000fd4:	e023      	b.n	800101e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685a      	ldr	r2, [r3, #4]
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	4413      	add	r3, r2
 8000fe6:	3b41      	subs	r3, #65	; 0x41
 8000fe8:	221f      	movs	r2, #31
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	43da      	mvns	r2, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	400a      	ands	r2, r1
 8000ff6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	b29b      	uxth	r3, r3
 8001004:	4618      	mov	r0, r3
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685a      	ldr	r2, [r3, #4]
 800100a:	4613      	mov	r3, r2
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	4413      	add	r3, r2
 8001010:	3b41      	subs	r3, #65	; 0x41
 8001012:	fa00 f203 	lsl.w	r2, r0, r3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	430a      	orrs	r2, r1
 800101c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800101e:	4b29      	ldr	r3, [pc, #164]	; (80010c4 <HAL_ADC_ConfigChannel+0x250>)
 8001020:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a28      	ldr	r2, [pc, #160]	; (80010c8 <HAL_ADC_ConfigChannel+0x254>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d10f      	bne.n	800104c <HAL_ADC_ConfigChannel+0x1d8>
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2b12      	cmp	r3, #18
 8001032:	d10b      	bne.n	800104c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a1d      	ldr	r2, [pc, #116]	; (80010c8 <HAL_ADC_ConfigChannel+0x254>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d12b      	bne.n	80010ae <HAL_ADC_ConfigChannel+0x23a>
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a1c      	ldr	r2, [pc, #112]	; (80010cc <HAL_ADC_ConfigChannel+0x258>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d003      	beq.n	8001068 <HAL_ADC_ConfigChannel+0x1f4>
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2b11      	cmp	r3, #17
 8001066:	d122      	bne.n	80010ae <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a11      	ldr	r2, [pc, #68]	; (80010cc <HAL_ADC_ConfigChannel+0x258>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d111      	bne.n	80010ae <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800108a:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <HAL_ADC_ConfigChannel+0x25c>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a11      	ldr	r2, [pc, #68]	; (80010d4 <HAL_ADC_ConfigChannel+0x260>)
 8001090:	fba2 2303 	umull	r2, r3, r2, r3
 8001094:	0c9a      	lsrs	r2, r3, #18
 8001096:	4613      	mov	r3, r2
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	4413      	add	r3, r2
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80010a0:	e002      	b.n	80010a8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	3b01      	subs	r3, #1
 80010a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d1f9      	bne.n	80010a2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2200      	movs	r2, #0
 80010b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80010b6:	2300      	movs	r3, #0
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3714      	adds	r7, #20
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	40012300 	.word	0x40012300
 80010c8:	40012000 	.word	0x40012000
 80010cc:	10000012 	.word	0x10000012
 80010d0:	20000000 	.word	0x20000000
 80010d4:	431bde83 	.word	0x431bde83

080010d8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010d8:	b480      	push	{r7}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80010e0:	4b79      	ldr	r3, [pc, #484]	; (80012c8 <ADC_Init+0x1f0>)
 80010e2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	685a      	ldr	r2, [r3, #4]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	431a      	orrs	r2, r3
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	685a      	ldr	r2, [r3, #4]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800110c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	6859      	ldr	r1, [r3, #4]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	691b      	ldr	r3, [r3, #16]
 8001118:	021a      	lsls	r2, r3, #8
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	430a      	orrs	r2, r1
 8001120:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	685a      	ldr	r2, [r3, #4]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001130:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	6859      	ldr	r1, [r3, #4]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	689a      	ldr	r2, [r3, #8]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	430a      	orrs	r2, r1
 8001142:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	689a      	ldr	r2, [r3, #8]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001152:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	6899      	ldr	r1, [r3, #8]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	68da      	ldr	r2, [r3, #12]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	430a      	orrs	r2, r1
 8001164:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800116a:	4a58      	ldr	r2, [pc, #352]	; (80012cc <ADC_Init+0x1f4>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d022      	beq.n	80011b6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	689a      	ldr	r2, [r3, #8]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800117e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	6899      	ldr	r1, [r3, #8]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	430a      	orrs	r2, r1
 8001190:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	689a      	ldr	r2, [r3, #8]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80011a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	6899      	ldr	r1, [r3, #8]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	430a      	orrs	r2, r1
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	e00f      	b.n	80011d6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	689a      	ldr	r2, [r3, #8]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80011c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	689a      	ldr	r2, [r3, #8]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80011d4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	689a      	ldr	r2, [r3, #8]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f022 0202 	bic.w	r2, r2, #2
 80011e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	6899      	ldr	r1, [r3, #8]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	7e1b      	ldrb	r3, [r3, #24]
 80011f0:	005a      	lsls	r2, r3, #1
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	430a      	orrs	r2, r1
 80011f8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d01b      	beq.n	800123c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	685a      	ldr	r2, [r3, #4]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001212:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	685a      	ldr	r2, [r3, #4]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001222:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	6859      	ldr	r1, [r3, #4]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800122e:	3b01      	subs	r3, #1
 8001230:	035a      	lsls	r2, r3, #13
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	430a      	orrs	r2, r1
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	e007      	b.n	800124c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	685a      	ldr	r2, [r3, #4]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800124a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800125a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	69db      	ldr	r3, [r3, #28]
 8001266:	3b01      	subs	r3, #1
 8001268:	051a      	lsls	r2, r3, #20
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	430a      	orrs	r2, r1
 8001270:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	689a      	ldr	r2, [r3, #8]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001280:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	6899      	ldr	r1, [r3, #8]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800128e:	025a      	lsls	r2, r3, #9
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	430a      	orrs	r2, r1
 8001296:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	689a      	ldr	r2, [r3, #8]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80012a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	6899      	ldr	r1, [r3, #8]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	695b      	ldr	r3, [r3, #20]
 80012b2:	029a      	lsls	r2, r3, #10
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	430a      	orrs	r2, r1
 80012ba:	609a      	str	r2, [r3, #8]
}
 80012bc:	bf00      	nop
 80012be:	3714      	adds	r7, #20
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	40012300 	.word	0x40012300
 80012cc:	0f000001 	.word	0x0f000001

080012d0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012dc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d13c      	bne.n	8001364 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ee:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001300:	2b00      	cmp	r3, #0
 8001302:	d12b      	bne.n	800135c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001308:	2b00      	cmp	r3, #0
 800130a:	d127      	bne.n	800135c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001312:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001316:	2b00      	cmp	r3, #0
 8001318:	d006      	beq.n	8001328 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001324:	2b00      	cmp	r3, #0
 8001326:	d119      	bne.n	800135c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	685a      	ldr	r2, [r3, #4]
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f022 0220 	bic.w	r2, r2, #32
 8001336:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001348:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800134c:	2b00      	cmp	r3, #0
 800134e:	d105      	bne.n	800135c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001354:	f043 0201 	orr.w	r2, r3, #1
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800135c:	68f8      	ldr	r0, [r7, #12]
 800135e:	f7ff f8c7 	bl	80004f0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001362:	e00e      	b.n	8001382 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001368:	f003 0310 	and.w	r3, r3, #16
 800136c:	2b00      	cmp	r3, #0
 800136e:	d003      	beq.n	8001378 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001370:	68f8      	ldr	r0, [r7, #12]
 8001372:	f7ff fd75 	bl	8000e60 <HAL_ADC_ErrorCallback>
}
 8001376:	e004      	b.n	8001382 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800137c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	4798      	blx	r3
}
 8001382:	bf00      	nop
 8001384:	3710      	adds	r7, #16
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}

0800138a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800138a:	b580      	push	{r7, lr}
 800138c:	b084      	sub	sp, #16
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001396:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001398:	68f8      	ldr	r0, [r7, #12]
 800139a:	f7ff fd57 	bl	8000e4c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800139e:	bf00      	nop
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b084      	sub	sp, #16
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013b2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	2240      	movs	r2, #64	; 0x40
 80013b8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013be:	f043 0204 	orr.w	r2, r3, #4
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80013c6:	68f8      	ldr	r0, [r7, #12]
 80013c8:	f7ff fd4a 	bl	8000e60 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80013cc:	bf00      	nop
 80013ce:	3710      	adds	r7, #16
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f003 0307 	and.w	r3, r3, #7
 80013e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013e4:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <__NVIC_SetPriorityGrouping+0x44>)
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ea:	68ba      	ldr	r2, [r7, #8]
 80013ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013f0:	4013      	ands	r3, r2
 80013f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001400:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001404:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001406:	4a04      	ldr	r2, [pc, #16]	; (8001418 <__NVIC_SetPriorityGrouping+0x44>)
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	60d3      	str	r3, [r2, #12]
}
 800140c:	bf00      	nop
 800140e:	3714      	adds	r7, #20
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr
 8001418:	e000ed00 	.word	0xe000ed00

0800141c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001420:	4b04      	ldr	r3, [pc, #16]	; (8001434 <__NVIC_GetPriorityGrouping+0x18>)
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	0a1b      	lsrs	r3, r3, #8
 8001426:	f003 0307 	and.w	r3, r3, #7
}
 800142a:	4618      	mov	r0, r3
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr
 8001434:	e000ed00 	.word	0xe000ed00

08001438 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001446:	2b00      	cmp	r3, #0
 8001448:	db0b      	blt.n	8001462 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800144a:	79fb      	ldrb	r3, [r7, #7]
 800144c:	f003 021f 	and.w	r2, r3, #31
 8001450:	4907      	ldr	r1, [pc, #28]	; (8001470 <__NVIC_EnableIRQ+0x38>)
 8001452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001456:	095b      	lsrs	r3, r3, #5
 8001458:	2001      	movs	r0, #1
 800145a:	fa00 f202 	lsl.w	r2, r0, r2
 800145e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001462:	bf00      	nop
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	e000e100 	.word	0xe000e100

08001474 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	6039      	str	r1, [r7, #0]
 800147e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001480:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001484:	2b00      	cmp	r3, #0
 8001486:	db0a      	blt.n	800149e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	b2da      	uxtb	r2, r3
 800148c:	490c      	ldr	r1, [pc, #48]	; (80014c0 <__NVIC_SetPriority+0x4c>)
 800148e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001492:	0112      	lsls	r2, r2, #4
 8001494:	b2d2      	uxtb	r2, r2
 8001496:	440b      	add	r3, r1
 8001498:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800149c:	e00a      	b.n	80014b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	b2da      	uxtb	r2, r3
 80014a2:	4908      	ldr	r1, [pc, #32]	; (80014c4 <__NVIC_SetPriority+0x50>)
 80014a4:	79fb      	ldrb	r3, [r7, #7]
 80014a6:	f003 030f 	and.w	r3, r3, #15
 80014aa:	3b04      	subs	r3, #4
 80014ac:	0112      	lsls	r2, r2, #4
 80014ae:	b2d2      	uxtb	r2, r2
 80014b0:	440b      	add	r3, r1
 80014b2:	761a      	strb	r2, [r3, #24]
}
 80014b4:	bf00      	nop
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	e000e100 	.word	0xe000e100
 80014c4:	e000ed00 	.word	0xe000ed00

080014c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b089      	sub	sp, #36	; 0x24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	60f8      	str	r0, [r7, #12]
 80014d0:	60b9      	str	r1, [r7, #8]
 80014d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	f003 0307 	and.w	r3, r3, #7
 80014da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	f1c3 0307 	rsb	r3, r3, #7
 80014e2:	2b04      	cmp	r3, #4
 80014e4:	bf28      	it	cs
 80014e6:	2304      	movcs	r3, #4
 80014e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	3304      	adds	r3, #4
 80014ee:	2b06      	cmp	r3, #6
 80014f0:	d902      	bls.n	80014f8 <NVIC_EncodePriority+0x30>
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	3b03      	subs	r3, #3
 80014f6:	e000      	b.n	80014fa <NVIC_EncodePriority+0x32>
 80014f8:	2300      	movs	r3, #0
 80014fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	fa02 f303 	lsl.w	r3, r2, r3
 8001506:	43da      	mvns	r2, r3
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	401a      	ands	r2, r3
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001510:	f04f 31ff 	mov.w	r1, #4294967295
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	fa01 f303 	lsl.w	r3, r1, r3
 800151a:	43d9      	mvns	r1, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001520:	4313      	orrs	r3, r2
         );
}
 8001522:	4618      	mov	r0, r3
 8001524:	3724      	adds	r7, #36	; 0x24
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
	...

08001530 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	3b01      	subs	r3, #1
 800153c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001540:	d301      	bcc.n	8001546 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001542:	2301      	movs	r3, #1
 8001544:	e00f      	b.n	8001566 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001546:	4a0a      	ldr	r2, [pc, #40]	; (8001570 <SysTick_Config+0x40>)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	3b01      	subs	r3, #1
 800154c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800154e:	210f      	movs	r1, #15
 8001550:	f04f 30ff 	mov.w	r0, #4294967295
 8001554:	f7ff ff8e 	bl	8001474 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001558:	4b05      	ldr	r3, [pc, #20]	; (8001570 <SysTick_Config+0x40>)
 800155a:	2200      	movs	r2, #0
 800155c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800155e:	4b04      	ldr	r3, [pc, #16]	; (8001570 <SysTick_Config+0x40>)
 8001560:	2207      	movs	r2, #7
 8001562:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001564:	2300      	movs	r3, #0
}
 8001566:	4618      	mov	r0, r3
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	e000e010 	.word	0xe000e010

08001574 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f7ff ff29 	bl	80013d4 <__NVIC_SetPriorityGrouping>
}
 8001582:	bf00      	nop
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800158a:	b580      	push	{r7, lr}
 800158c:	b086      	sub	sp, #24
 800158e:	af00      	add	r7, sp, #0
 8001590:	4603      	mov	r3, r0
 8001592:	60b9      	str	r1, [r7, #8]
 8001594:	607a      	str	r2, [r7, #4]
 8001596:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001598:	2300      	movs	r3, #0
 800159a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800159c:	f7ff ff3e 	bl	800141c <__NVIC_GetPriorityGrouping>
 80015a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	68b9      	ldr	r1, [r7, #8]
 80015a6:	6978      	ldr	r0, [r7, #20]
 80015a8:	f7ff ff8e 	bl	80014c8 <NVIC_EncodePriority>
 80015ac:	4602      	mov	r2, r0
 80015ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015b2:	4611      	mov	r1, r2
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff ff5d 	bl	8001474 <__NVIC_SetPriority>
}
 80015ba:	bf00      	nop
 80015bc:	3718      	adds	r7, #24
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b082      	sub	sp, #8
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	4603      	mov	r3, r0
 80015ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff ff31 	bl	8001438 <__NVIC_EnableIRQ>
}
 80015d6:	bf00      	nop
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015de:	b580      	push	{r7, lr}
 80015e0:	b082      	sub	sp, #8
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f7ff ffa2 	bl	8001530 <SysTick_Config>
 80015ec:	4603      	mov	r3, r0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
	...

080015f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001600:	2300      	movs	r3, #0
 8001602:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001604:	f7ff fa9e 	bl	8000b44 <HAL_GetTick>
 8001608:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d101      	bne.n	8001614 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e099      	b.n	8001748 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2202      	movs	r2, #2
 8001618:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2200      	movs	r2, #0
 8001620:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f022 0201 	bic.w	r2, r2, #1
 8001632:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001634:	e00f      	b.n	8001656 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001636:	f7ff fa85 	bl	8000b44 <HAL_GetTick>
 800163a:	4602      	mov	r2, r0
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	2b05      	cmp	r3, #5
 8001642:	d908      	bls.n	8001656 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2220      	movs	r2, #32
 8001648:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2203      	movs	r2, #3
 800164e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e078      	b.n	8001748 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 0301 	and.w	r3, r3, #1
 8001660:	2b00      	cmp	r3, #0
 8001662:	d1e8      	bne.n	8001636 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800166c:	697a      	ldr	r2, [r7, #20]
 800166e:	4b38      	ldr	r3, [pc, #224]	; (8001750 <HAL_DMA_Init+0x158>)
 8001670:	4013      	ands	r3, r2
 8001672:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685a      	ldr	r2, [r3, #4]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001682:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	691b      	ldr	r3, [r3, #16]
 8001688:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800168e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800169a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a1b      	ldr	r3, [r3, #32]
 80016a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016a2:	697a      	ldr	r2, [r7, #20]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ac:	2b04      	cmp	r3, #4
 80016ae:	d107      	bne.n	80016c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b8:	4313      	orrs	r3, r2
 80016ba:	697a      	ldr	r2, [r7, #20]
 80016bc:	4313      	orrs	r3, r2
 80016be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	697a      	ldr	r2, [r7, #20]
 80016c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	695b      	ldr	r3, [r3, #20]
 80016ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	f023 0307 	bic.w	r3, r3, #7
 80016d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016dc:	697a      	ldr	r2, [r7, #20]
 80016de:	4313      	orrs	r3, r2
 80016e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e6:	2b04      	cmp	r3, #4
 80016e8:	d117      	bne.n	800171a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ee:	697a      	ldr	r2, [r7, #20]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d00e      	beq.n	800171a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f000 fa6f 	bl	8001be0 <DMA_CheckFifoParam>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d008      	beq.n	800171a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2240      	movs	r2, #64	; 0x40
 800170c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2201      	movs	r2, #1
 8001712:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001716:	2301      	movs	r3, #1
 8001718:	e016      	b.n	8001748 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	697a      	ldr	r2, [r7, #20]
 8001720:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f000 fa26 	bl	8001b74 <DMA_CalcBaseAndBitshift>
 8001728:	4603      	mov	r3, r0
 800172a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001730:	223f      	movs	r2, #63	; 0x3f
 8001732:	409a      	lsls	r2, r3
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2200      	movs	r2, #0
 800173c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2201      	movs	r2, #1
 8001742:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001746:	2300      	movs	r3, #0
}
 8001748:	4618      	mov	r0, r3
 800174a:	3718      	adds	r7, #24
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	f010803f 	.word	0xf010803f

08001754 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af00      	add	r7, sp, #0
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	607a      	str	r2, [r7, #4]
 8001760:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001762:	2300      	movs	r3, #0
 8001764:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800176a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001772:	2b01      	cmp	r3, #1
 8001774:	d101      	bne.n	800177a <HAL_DMA_Start_IT+0x26>
 8001776:	2302      	movs	r3, #2
 8001778:	e040      	b.n	80017fc <HAL_DMA_Start_IT+0xa8>
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2201      	movs	r2, #1
 800177e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001788:	b2db      	uxtb	r3, r3
 800178a:	2b01      	cmp	r3, #1
 800178c:	d12f      	bne.n	80017ee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	2202      	movs	r2, #2
 8001792:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	2200      	movs	r2, #0
 800179a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	68b9      	ldr	r1, [r7, #8]
 80017a2:	68f8      	ldr	r0, [r7, #12]
 80017a4:	f000 f9b8 	bl	8001b18 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ac:	223f      	movs	r2, #63	; 0x3f
 80017ae:	409a      	lsls	r2, r3
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f042 0216 	orr.w	r2, r2, #22
 80017c2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d007      	beq.n	80017dc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f042 0208 	orr.w	r2, r2, #8
 80017da:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f042 0201 	orr.w	r2, r2, #1
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	e005      	b.n	80017fa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	2200      	movs	r2, #0
 80017f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80017f6:	2302      	movs	r3, #2
 80017f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80017fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3718      	adds	r7, #24
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800180c:	2300      	movs	r3, #0
 800180e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001810:	4b8e      	ldr	r3, [pc, #568]	; (8001a4c <HAL_DMA_IRQHandler+0x248>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a8e      	ldr	r2, [pc, #568]	; (8001a50 <HAL_DMA_IRQHandler+0x24c>)
 8001816:	fba2 2303 	umull	r2, r3, r2, r3
 800181a:	0a9b      	lsrs	r3, r3, #10
 800181c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001822:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800182e:	2208      	movs	r2, #8
 8001830:	409a      	lsls	r2, r3
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	4013      	ands	r3, r2
 8001836:	2b00      	cmp	r3, #0
 8001838:	d01a      	beq.n	8001870 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0304 	and.w	r3, r3, #4
 8001844:	2b00      	cmp	r3, #0
 8001846:	d013      	beq.n	8001870 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f022 0204 	bic.w	r2, r2, #4
 8001856:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800185c:	2208      	movs	r2, #8
 800185e:	409a      	lsls	r2, r3
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001868:	f043 0201 	orr.w	r2, r3, #1
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001874:	2201      	movs	r2, #1
 8001876:	409a      	lsls	r2, r3
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	4013      	ands	r3, r2
 800187c:	2b00      	cmp	r3, #0
 800187e:	d012      	beq.n	80018a6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	695b      	ldr	r3, [r3, #20]
 8001886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800188a:	2b00      	cmp	r3, #0
 800188c:	d00b      	beq.n	80018a6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001892:	2201      	movs	r2, #1
 8001894:	409a      	lsls	r2, r3
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800189e:	f043 0202 	orr.w	r2, r3, #2
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018aa:	2204      	movs	r2, #4
 80018ac:	409a      	lsls	r2, r3
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	4013      	ands	r3, r2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d012      	beq.n	80018dc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0302 	and.w	r3, r3, #2
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d00b      	beq.n	80018dc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018c8:	2204      	movs	r2, #4
 80018ca:	409a      	lsls	r2, r3
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018d4:	f043 0204 	orr.w	r2, r3, #4
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018e0:	2210      	movs	r2, #16
 80018e2:	409a      	lsls	r2, r3
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	4013      	ands	r3, r2
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d043      	beq.n	8001974 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0308 	and.w	r3, r3, #8
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d03c      	beq.n	8001974 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018fe:	2210      	movs	r2, #16
 8001900:	409a      	lsls	r2, r3
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d018      	beq.n	8001946 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d108      	bne.n	8001934 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001926:	2b00      	cmp	r3, #0
 8001928:	d024      	beq.n	8001974 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	4798      	blx	r3
 8001932:	e01f      	b.n	8001974 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001938:	2b00      	cmp	r3, #0
 800193a:	d01b      	beq.n	8001974 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	4798      	blx	r3
 8001944:	e016      	b.n	8001974 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001950:	2b00      	cmp	r3, #0
 8001952:	d107      	bne.n	8001964 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f022 0208 	bic.w	r2, r2, #8
 8001962:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001968:	2b00      	cmp	r3, #0
 800196a:	d003      	beq.n	8001974 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001978:	2220      	movs	r2, #32
 800197a:	409a      	lsls	r2, r3
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	4013      	ands	r3, r2
 8001980:	2b00      	cmp	r3, #0
 8001982:	f000 808f 	beq.w	8001aa4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0310 	and.w	r3, r3, #16
 8001990:	2b00      	cmp	r3, #0
 8001992:	f000 8087 	beq.w	8001aa4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800199a:	2220      	movs	r2, #32
 800199c:	409a      	lsls	r2, r3
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	2b05      	cmp	r3, #5
 80019ac:	d136      	bne.n	8001a1c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f022 0216 	bic.w	r2, r2, #22
 80019bc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	695a      	ldr	r2, [r3, #20]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019cc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d103      	bne.n	80019de <HAL_DMA_IRQHandler+0x1da>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d007      	beq.n	80019ee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f022 0208 	bic.w	r2, r2, #8
 80019ec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019f2:	223f      	movs	r2, #63	; 0x3f
 80019f4:	409a      	lsls	r2, r3
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2201      	movs	r2, #1
 80019fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2200      	movs	r2, #0
 8001a06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d07e      	beq.n	8001b10 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	4798      	blx	r3
        }
        return;
 8001a1a:	e079      	b.n	8001b10 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d01d      	beq.n	8001a66 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d10d      	bne.n	8001a54 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d031      	beq.n	8001aa4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	4798      	blx	r3
 8001a48:	e02c      	b.n	8001aa4 <HAL_DMA_IRQHandler+0x2a0>
 8001a4a:	bf00      	nop
 8001a4c:	20000000 	.word	0x20000000
 8001a50:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d023      	beq.n	8001aa4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	4798      	blx	r3
 8001a64:	e01e      	b.n	8001aa4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d10f      	bne.n	8001a94 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f022 0210 	bic.w	r2, r2, #16
 8001a82:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2201      	movs	r2, #1
 8001a88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d003      	beq.n	8001aa4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d032      	beq.n	8001b12 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ab0:	f003 0301 	and.w	r3, r3, #1
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d022      	beq.n	8001afe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2205      	movs	r2, #5
 8001abc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f022 0201 	bic.w	r2, r2, #1
 8001ace:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	60bb      	str	r3, [r7, #8]
 8001ad6:	697a      	ldr	r2, [r7, #20]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d307      	bcc.n	8001aec <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d1f2      	bne.n	8001ad0 <HAL_DMA_IRQHandler+0x2cc>
 8001aea:	e000      	b.n	8001aee <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001aec:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2201      	movs	r2, #1
 8001af2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d005      	beq.n	8001b12 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	4798      	blx	r3
 8001b0e:	e000      	b.n	8001b12 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001b10:	bf00      	nop
    }
  }
}
 8001b12:	3718      	adds	r7, #24
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	60b9      	str	r1, [r7, #8]
 8001b22:	607a      	str	r2, [r7, #4]
 8001b24:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b34:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	683a      	ldr	r2, [r7, #0]
 8001b3c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	2b40      	cmp	r3, #64	; 0x40
 8001b44:	d108      	bne.n	8001b58 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	68ba      	ldr	r2, [r7, #8]
 8001b54:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001b56:	e007      	b.n	8001b68 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	68ba      	ldr	r2, [r7, #8]
 8001b5e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	60da      	str	r2, [r3, #12]
}
 8001b68:	bf00      	nop
 8001b6a:	3714      	adds	r7, #20
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	3b10      	subs	r3, #16
 8001b84:	4a14      	ldr	r2, [pc, #80]	; (8001bd8 <DMA_CalcBaseAndBitshift+0x64>)
 8001b86:	fba2 2303 	umull	r2, r3, r2, r3
 8001b8a:	091b      	lsrs	r3, r3, #4
 8001b8c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001b8e:	4a13      	ldr	r2, [pc, #76]	; (8001bdc <DMA_CalcBaseAndBitshift+0x68>)
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	4413      	add	r3, r2
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	461a      	mov	r2, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2b03      	cmp	r3, #3
 8001ba0:	d909      	bls.n	8001bb6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001baa:	f023 0303 	bic.w	r3, r3, #3
 8001bae:	1d1a      	adds	r2, r3, #4
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	659a      	str	r2, [r3, #88]	; 0x58
 8001bb4:	e007      	b.n	8001bc6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001bbe:	f023 0303 	bic.w	r3, r3, #3
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3714      	adds	r7, #20
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	aaaaaaab 	.word	0xaaaaaaab
 8001bdc:	08002a7c 	.word	0x08002a7c

08001be0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b085      	sub	sp, #20
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001be8:	2300      	movs	r3, #0
 8001bea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	699b      	ldr	r3, [r3, #24]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d11f      	bne.n	8001c3a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	2b03      	cmp	r3, #3
 8001bfe:	d856      	bhi.n	8001cae <DMA_CheckFifoParam+0xce>
 8001c00:	a201      	add	r2, pc, #4	; (adr r2, 8001c08 <DMA_CheckFifoParam+0x28>)
 8001c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c06:	bf00      	nop
 8001c08:	08001c19 	.word	0x08001c19
 8001c0c:	08001c2b 	.word	0x08001c2b
 8001c10:	08001c19 	.word	0x08001c19
 8001c14:	08001caf 	.word	0x08001caf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d046      	beq.n	8001cb2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c28:	e043      	b.n	8001cb2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c2e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c32:	d140      	bne.n	8001cb6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c38:	e03d      	b.n	8001cb6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	699b      	ldr	r3, [r3, #24]
 8001c3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c42:	d121      	bne.n	8001c88 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	2b03      	cmp	r3, #3
 8001c48:	d837      	bhi.n	8001cba <DMA_CheckFifoParam+0xda>
 8001c4a:	a201      	add	r2, pc, #4	; (adr r2, 8001c50 <DMA_CheckFifoParam+0x70>)
 8001c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c50:	08001c61 	.word	0x08001c61
 8001c54:	08001c67 	.word	0x08001c67
 8001c58:	08001c61 	.word	0x08001c61
 8001c5c:	08001c79 	.word	0x08001c79
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	73fb      	strb	r3, [r7, #15]
      break;
 8001c64:	e030      	b.n	8001cc8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d025      	beq.n	8001cbe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c76:	e022      	b.n	8001cbe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c7c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c80:	d11f      	bne.n	8001cc2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001c86:	e01c      	b.n	8001cc2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d903      	bls.n	8001c96 <DMA_CheckFifoParam+0xb6>
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	2b03      	cmp	r3, #3
 8001c92:	d003      	beq.n	8001c9c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001c94:	e018      	b.n	8001cc8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	73fb      	strb	r3, [r7, #15]
      break;
 8001c9a:	e015      	b.n	8001cc8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d00e      	beq.n	8001cc6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	73fb      	strb	r3, [r7, #15]
      break;
 8001cac:	e00b      	b.n	8001cc6 <DMA_CheckFifoParam+0xe6>
      break;
 8001cae:	bf00      	nop
 8001cb0:	e00a      	b.n	8001cc8 <DMA_CheckFifoParam+0xe8>
      break;
 8001cb2:	bf00      	nop
 8001cb4:	e008      	b.n	8001cc8 <DMA_CheckFifoParam+0xe8>
      break;
 8001cb6:	bf00      	nop
 8001cb8:	e006      	b.n	8001cc8 <DMA_CheckFifoParam+0xe8>
      break;
 8001cba:	bf00      	nop
 8001cbc:	e004      	b.n	8001cc8 <DMA_CheckFifoParam+0xe8>
      break;
 8001cbe:	bf00      	nop
 8001cc0:	e002      	b.n	8001cc8 <DMA_CheckFifoParam+0xe8>
      break;   
 8001cc2:	bf00      	nop
 8001cc4:	e000      	b.n	8001cc8 <DMA_CheckFifoParam+0xe8>
      break;
 8001cc6:	bf00      	nop
    }
  } 
  
  return status; 
 8001cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3714      	adds	r7, #20
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop

08001cd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b089      	sub	sp, #36	; 0x24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cea:	2300      	movs	r3, #0
 8001cec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cee:	2300      	movs	r3, #0
 8001cf0:	61fb      	str	r3, [r7, #28]
 8001cf2:	e177      	b.n	8001fe4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	697a      	ldr	r2, [r7, #20]
 8001d04:	4013      	ands	r3, r2
 8001d06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d08:	693a      	ldr	r2, [r7, #16]
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	f040 8166 	bne.w	8001fde <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f003 0303 	and.w	r3, r3, #3
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d005      	beq.n	8001d2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d130      	bne.n	8001d8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	2203      	movs	r2, #3
 8001d36:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3a:	43db      	mvns	r3, r3
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	68da      	ldr	r2, [r3, #12]
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d60:	2201      	movs	r2, #1
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	091b      	lsrs	r3, r3, #4
 8001d76:	f003 0201 	and.w	r2, r3, #1
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f003 0303 	and.w	r3, r3, #3
 8001d94:	2b03      	cmp	r3, #3
 8001d96:	d017      	beq.n	8001dc8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	2203      	movs	r2, #3
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	43db      	mvns	r3, r3
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	4013      	ands	r3, r2
 8001dae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	689a      	ldr	r2, [r3, #8]
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f003 0303 	and.w	r3, r3, #3
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d123      	bne.n	8001e1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	08da      	lsrs	r2, r3, #3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	3208      	adds	r2, #8
 8001ddc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001de0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	f003 0307 	and.w	r3, r3, #7
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	220f      	movs	r2, #15
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	43db      	mvns	r3, r3
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	4013      	ands	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	691a      	ldr	r2, [r3, #16]
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	f003 0307 	and.w	r3, r3, #7
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	08da      	lsrs	r2, r3, #3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	3208      	adds	r2, #8
 8001e16:	69b9      	ldr	r1, [r7, #24]
 8001e18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	2203      	movs	r2, #3
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	4013      	ands	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f003 0203 	and.w	r2, r3, #3
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f000 80c0 	beq.w	8001fde <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	4b66      	ldr	r3, [pc, #408]	; (8001ffc <HAL_GPIO_Init+0x324>)
 8001e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e66:	4a65      	ldr	r2, [pc, #404]	; (8001ffc <HAL_GPIO_Init+0x324>)
 8001e68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e6e:	4b63      	ldr	r3, [pc, #396]	; (8001ffc <HAL_GPIO_Init+0x324>)
 8001e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e76:	60fb      	str	r3, [r7, #12]
 8001e78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e7a:	4a61      	ldr	r2, [pc, #388]	; (8002000 <HAL_GPIO_Init+0x328>)
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	089b      	lsrs	r3, r3, #2
 8001e80:	3302      	adds	r3, #2
 8001e82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	f003 0303 	and.w	r3, r3, #3
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	220f      	movs	r2, #15
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	43db      	mvns	r3, r3
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a58      	ldr	r2, [pc, #352]	; (8002004 <HAL_GPIO_Init+0x32c>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d037      	beq.n	8001f16 <HAL_GPIO_Init+0x23e>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a57      	ldr	r2, [pc, #348]	; (8002008 <HAL_GPIO_Init+0x330>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d031      	beq.n	8001f12 <HAL_GPIO_Init+0x23a>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a56      	ldr	r2, [pc, #344]	; (800200c <HAL_GPIO_Init+0x334>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d02b      	beq.n	8001f0e <HAL_GPIO_Init+0x236>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a55      	ldr	r2, [pc, #340]	; (8002010 <HAL_GPIO_Init+0x338>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d025      	beq.n	8001f0a <HAL_GPIO_Init+0x232>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a54      	ldr	r2, [pc, #336]	; (8002014 <HAL_GPIO_Init+0x33c>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d01f      	beq.n	8001f06 <HAL_GPIO_Init+0x22e>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a53      	ldr	r2, [pc, #332]	; (8002018 <HAL_GPIO_Init+0x340>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d019      	beq.n	8001f02 <HAL_GPIO_Init+0x22a>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a52      	ldr	r2, [pc, #328]	; (800201c <HAL_GPIO_Init+0x344>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d013      	beq.n	8001efe <HAL_GPIO_Init+0x226>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a51      	ldr	r2, [pc, #324]	; (8002020 <HAL_GPIO_Init+0x348>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d00d      	beq.n	8001efa <HAL_GPIO_Init+0x222>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a50      	ldr	r2, [pc, #320]	; (8002024 <HAL_GPIO_Init+0x34c>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d007      	beq.n	8001ef6 <HAL_GPIO_Init+0x21e>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a4f      	ldr	r2, [pc, #316]	; (8002028 <HAL_GPIO_Init+0x350>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d101      	bne.n	8001ef2 <HAL_GPIO_Init+0x21a>
 8001eee:	2309      	movs	r3, #9
 8001ef0:	e012      	b.n	8001f18 <HAL_GPIO_Init+0x240>
 8001ef2:	230a      	movs	r3, #10
 8001ef4:	e010      	b.n	8001f18 <HAL_GPIO_Init+0x240>
 8001ef6:	2308      	movs	r3, #8
 8001ef8:	e00e      	b.n	8001f18 <HAL_GPIO_Init+0x240>
 8001efa:	2307      	movs	r3, #7
 8001efc:	e00c      	b.n	8001f18 <HAL_GPIO_Init+0x240>
 8001efe:	2306      	movs	r3, #6
 8001f00:	e00a      	b.n	8001f18 <HAL_GPIO_Init+0x240>
 8001f02:	2305      	movs	r3, #5
 8001f04:	e008      	b.n	8001f18 <HAL_GPIO_Init+0x240>
 8001f06:	2304      	movs	r3, #4
 8001f08:	e006      	b.n	8001f18 <HAL_GPIO_Init+0x240>
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e004      	b.n	8001f18 <HAL_GPIO_Init+0x240>
 8001f0e:	2302      	movs	r3, #2
 8001f10:	e002      	b.n	8001f18 <HAL_GPIO_Init+0x240>
 8001f12:	2301      	movs	r3, #1
 8001f14:	e000      	b.n	8001f18 <HAL_GPIO_Init+0x240>
 8001f16:	2300      	movs	r3, #0
 8001f18:	69fa      	ldr	r2, [r7, #28]
 8001f1a:	f002 0203 	and.w	r2, r2, #3
 8001f1e:	0092      	lsls	r2, r2, #2
 8001f20:	4093      	lsls	r3, r2
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f28:	4935      	ldr	r1, [pc, #212]	; (8002000 <HAL_GPIO_Init+0x328>)
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	089b      	lsrs	r3, r3, #2
 8001f2e:	3302      	adds	r3, #2
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f36:	4b3d      	ldr	r3, [pc, #244]	; (800202c <HAL_GPIO_Init+0x354>)
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	43db      	mvns	r3, r3
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	4013      	ands	r3, r2
 8001f44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d003      	beq.n	8001f5a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f5a:	4a34      	ldr	r2, [pc, #208]	; (800202c <HAL_GPIO_Init+0x354>)
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f60:	4b32      	ldr	r3, [pc, #200]	; (800202c <HAL_GPIO_Init+0x354>)
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	69ba      	ldr	r2, [r7, #24]
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d003      	beq.n	8001f84 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f84:	4a29      	ldr	r2, [pc, #164]	; (800202c <HAL_GPIO_Init+0x354>)
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f8a:	4b28      	ldr	r3, [pc, #160]	; (800202c <HAL_GPIO_Init+0x354>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	43db      	mvns	r3, r3
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	4013      	ands	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d003      	beq.n	8001fae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fae:	4a1f      	ldr	r2, [pc, #124]	; (800202c <HAL_GPIO_Init+0x354>)
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fb4:	4b1d      	ldr	r3, [pc, #116]	; (800202c <HAL_GPIO_Init+0x354>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d003      	beq.n	8001fd8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fd8:	4a14      	ldr	r2, [pc, #80]	; (800202c <HAL_GPIO_Init+0x354>)
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	61fb      	str	r3, [r7, #28]
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	2b0f      	cmp	r3, #15
 8001fe8:	f67f ae84 	bls.w	8001cf4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fec:	bf00      	nop
 8001fee:	bf00      	nop
 8001ff0:	3724      	adds	r7, #36	; 0x24
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	40023800 	.word	0x40023800
 8002000:	40013800 	.word	0x40013800
 8002004:	40020000 	.word	0x40020000
 8002008:	40020400 	.word	0x40020400
 800200c:	40020800 	.word	0x40020800
 8002010:	40020c00 	.word	0x40020c00
 8002014:	40021000 	.word	0x40021000
 8002018:	40021400 	.word	0x40021400
 800201c:	40021800 	.word	0x40021800
 8002020:	40021c00 	.word	0x40021c00
 8002024:	40022000 	.word	0x40022000
 8002028:	40022400 	.word	0x40022400
 800202c:	40013c00 	.word	0x40013c00

08002030 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002030:	b480      	push	{r7}
 8002032:	b085      	sub	sp, #20
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	460b      	mov	r3, r1
 800203a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	691a      	ldr	r2, [r3, #16]
 8002040:	887b      	ldrh	r3, [r7, #2]
 8002042:	4013      	ands	r3, r2
 8002044:	2b00      	cmp	r3, #0
 8002046:	d002      	beq.n	800204e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002048:	2301      	movs	r3, #1
 800204a:	73fb      	strb	r3, [r7, #15]
 800204c:	e001      	b.n	8002052 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800204e:	2300      	movs	r3, #0
 8002050:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002052:	7bfb      	ldrb	r3, [r7, #15]
}
 8002054:	4618      	mov	r0, r3
 8002056:	3714      	adds	r7, #20
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	460b      	mov	r3, r1
 800206a:	807b      	strh	r3, [r7, #2]
 800206c:	4613      	mov	r3, r2
 800206e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002070:	787b      	ldrb	r3, [r7, #1]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d003      	beq.n	800207e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002076:	887a      	ldrh	r2, [r7, #2]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800207c:	e003      	b.n	8002086 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800207e:	887b      	ldrh	r3, [r7, #2]
 8002080:	041a      	lsls	r2, r3, #16
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	619a      	str	r2, [r3, #24]
}
 8002086:	bf00      	nop
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
	...

08002094 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800209a:	2300      	movs	r3, #0
 800209c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800209e:	2300      	movs	r3, #0
 80020a0:	603b      	str	r3, [r7, #0]
 80020a2:	4b20      	ldr	r3, [pc, #128]	; (8002124 <HAL_PWREx_EnableOverDrive+0x90>)
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	4a1f      	ldr	r2, [pc, #124]	; (8002124 <HAL_PWREx_EnableOverDrive+0x90>)
 80020a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ac:	6413      	str	r3, [r2, #64]	; 0x40
 80020ae:	4b1d      	ldr	r3, [pc, #116]	; (8002124 <HAL_PWREx_EnableOverDrive+0x90>)
 80020b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b6:	603b      	str	r3, [r7, #0]
 80020b8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80020ba:	4b1b      	ldr	r3, [pc, #108]	; (8002128 <HAL_PWREx_EnableOverDrive+0x94>)
 80020bc:	2201      	movs	r2, #1
 80020be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020c0:	f7fe fd40 	bl	8000b44 <HAL_GetTick>
 80020c4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80020c6:	e009      	b.n	80020dc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80020c8:	f7fe fd3c 	bl	8000b44 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020d6:	d901      	bls.n	80020dc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e01f      	b.n	800211c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80020dc:	4b13      	ldr	r3, [pc, #76]	; (800212c <HAL_PWREx_EnableOverDrive+0x98>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020e8:	d1ee      	bne.n	80020c8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80020ea:	4b11      	ldr	r3, [pc, #68]	; (8002130 <HAL_PWREx_EnableOverDrive+0x9c>)
 80020ec:	2201      	movs	r2, #1
 80020ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020f0:	f7fe fd28 	bl	8000b44 <HAL_GetTick>
 80020f4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80020f6:	e009      	b.n	800210c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80020f8:	f7fe fd24 	bl	8000b44 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002106:	d901      	bls.n	800210c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	e007      	b.n	800211c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800210c:	4b07      	ldr	r3, [pc, #28]	; (800212c <HAL_PWREx_EnableOverDrive+0x98>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002114:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002118:	d1ee      	bne.n	80020f8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800211a:	2300      	movs	r3, #0
}
 800211c:	4618      	mov	r0, r3
 800211e:	3708      	adds	r7, #8
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	40023800 	.word	0x40023800
 8002128:	420e0040 	.word	0x420e0040
 800212c:	40007000 	.word	0x40007000
 8002130:	420e0044 	.word	0x420e0044

08002134 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e267      	b.n	8002616 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	2b00      	cmp	r3, #0
 8002150:	d075      	beq.n	800223e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002152:	4b88      	ldr	r3, [pc, #544]	; (8002374 <HAL_RCC_OscConfig+0x240>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f003 030c 	and.w	r3, r3, #12
 800215a:	2b04      	cmp	r3, #4
 800215c:	d00c      	beq.n	8002178 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800215e:	4b85      	ldr	r3, [pc, #532]	; (8002374 <HAL_RCC_OscConfig+0x240>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002166:	2b08      	cmp	r3, #8
 8002168:	d112      	bne.n	8002190 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800216a:	4b82      	ldr	r3, [pc, #520]	; (8002374 <HAL_RCC_OscConfig+0x240>)
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002172:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002176:	d10b      	bne.n	8002190 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002178:	4b7e      	ldr	r3, [pc, #504]	; (8002374 <HAL_RCC_OscConfig+0x240>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d05b      	beq.n	800223c <HAL_RCC_OscConfig+0x108>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d157      	bne.n	800223c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e242      	b.n	8002616 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002198:	d106      	bne.n	80021a8 <HAL_RCC_OscConfig+0x74>
 800219a:	4b76      	ldr	r3, [pc, #472]	; (8002374 <HAL_RCC_OscConfig+0x240>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a75      	ldr	r2, [pc, #468]	; (8002374 <HAL_RCC_OscConfig+0x240>)
 80021a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021a4:	6013      	str	r3, [r2, #0]
 80021a6:	e01d      	b.n	80021e4 <HAL_RCC_OscConfig+0xb0>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021b0:	d10c      	bne.n	80021cc <HAL_RCC_OscConfig+0x98>
 80021b2:	4b70      	ldr	r3, [pc, #448]	; (8002374 <HAL_RCC_OscConfig+0x240>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a6f      	ldr	r2, [pc, #444]	; (8002374 <HAL_RCC_OscConfig+0x240>)
 80021b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021bc:	6013      	str	r3, [r2, #0]
 80021be:	4b6d      	ldr	r3, [pc, #436]	; (8002374 <HAL_RCC_OscConfig+0x240>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a6c      	ldr	r2, [pc, #432]	; (8002374 <HAL_RCC_OscConfig+0x240>)
 80021c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021c8:	6013      	str	r3, [r2, #0]
 80021ca:	e00b      	b.n	80021e4 <HAL_RCC_OscConfig+0xb0>
 80021cc:	4b69      	ldr	r3, [pc, #420]	; (8002374 <HAL_RCC_OscConfig+0x240>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a68      	ldr	r2, [pc, #416]	; (8002374 <HAL_RCC_OscConfig+0x240>)
 80021d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021d6:	6013      	str	r3, [r2, #0]
 80021d8:	4b66      	ldr	r3, [pc, #408]	; (8002374 <HAL_RCC_OscConfig+0x240>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a65      	ldr	r2, [pc, #404]	; (8002374 <HAL_RCC_OscConfig+0x240>)
 80021de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d013      	beq.n	8002214 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ec:	f7fe fcaa 	bl	8000b44 <HAL_GetTick>
 80021f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021f2:	e008      	b.n	8002206 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021f4:	f7fe fca6 	bl	8000b44 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b64      	cmp	r3, #100	; 0x64
 8002200:	d901      	bls.n	8002206 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e207      	b.n	8002616 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002206:	4b5b      	ldr	r3, [pc, #364]	; (8002374 <HAL_RCC_OscConfig+0x240>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d0f0      	beq.n	80021f4 <HAL_RCC_OscConfig+0xc0>
 8002212:	e014      	b.n	800223e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002214:	f7fe fc96 	bl	8000b44 <HAL_GetTick>
 8002218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800221a:	e008      	b.n	800222e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800221c:	f7fe fc92 	bl	8000b44 <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	2b64      	cmp	r3, #100	; 0x64
 8002228:	d901      	bls.n	800222e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e1f3      	b.n	8002616 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800222e:	4b51      	ldr	r3, [pc, #324]	; (8002374 <HAL_RCC_OscConfig+0x240>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d1f0      	bne.n	800221c <HAL_RCC_OscConfig+0xe8>
 800223a:	e000      	b.n	800223e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800223c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	2b00      	cmp	r3, #0
 8002248:	d063      	beq.n	8002312 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800224a:	4b4a      	ldr	r3, [pc, #296]	; (8002374 <HAL_RCC_OscConfig+0x240>)
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f003 030c 	and.w	r3, r3, #12
 8002252:	2b00      	cmp	r3, #0
 8002254:	d00b      	beq.n	800226e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002256:	4b47      	ldr	r3, [pc, #284]	; (8002374 <HAL_RCC_OscConfig+0x240>)
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800225e:	2b08      	cmp	r3, #8
 8002260:	d11c      	bne.n	800229c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002262:	4b44      	ldr	r3, [pc, #272]	; (8002374 <HAL_RCC_OscConfig+0x240>)
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d116      	bne.n	800229c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800226e:	4b41      	ldr	r3, [pc, #260]	; (8002374 <HAL_RCC_OscConfig+0x240>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	2b00      	cmp	r3, #0
 8002278:	d005      	beq.n	8002286 <HAL_RCC_OscConfig+0x152>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d001      	beq.n	8002286 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e1c7      	b.n	8002616 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002286:	4b3b      	ldr	r3, [pc, #236]	; (8002374 <HAL_RCC_OscConfig+0x240>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	4937      	ldr	r1, [pc, #220]	; (8002374 <HAL_RCC_OscConfig+0x240>)
 8002296:	4313      	orrs	r3, r2
 8002298:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800229a:	e03a      	b.n	8002312 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d020      	beq.n	80022e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022a4:	4b34      	ldr	r3, [pc, #208]	; (8002378 <HAL_RCC_OscConfig+0x244>)
 80022a6:	2201      	movs	r2, #1
 80022a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022aa:	f7fe fc4b 	bl	8000b44 <HAL_GetTick>
 80022ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022b0:	e008      	b.n	80022c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022b2:	f7fe fc47 	bl	8000b44 <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d901      	bls.n	80022c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e1a8      	b.n	8002616 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022c4:	4b2b      	ldr	r3, [pc, #172]	; (8002374 <HAL_RCC_OscConfig+0x240>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0302 	and.w	r3, r3, #2
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d0f0      	beq.n	80022b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022d0:	4b28      	ldr	r3, [pc, #160]	; (8002374 <HAL_RCC_OscConfig+0x240>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	691b      	ldr	r3, [r3, #16]
 80022dc:	00db      	lsls	r3, r3, #3
 80022de:	4925      	ldr	r1, [pc, #148]	; (8002374 <HAL_RCC_OscConfig+0x240>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	600b      	str	r3, [r1, #0]
 80022e4:	e015      	b.n	8002312 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022e6:	4b24      	ldr	r3, [pc, #144]	; (8002378 <HAL_RCC_OscConfig+0x244>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ec:	f7fe fc2a 	bl	8000b44 <HAL_GetTick>
 80022f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022f2:	e008      	b.n	8002306 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022f4:	f7fe fc26 	bl	8000b44 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e187      	b.n	8002616 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002306:	4b1b      	ldr	r3, [pc, #108]	; (8002374 <HAL_RCC_OscConfig+0x240>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	2b00      	cmp	r3, #0
 8002310:	d1f0      	bne.n	80022f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0308 	and.w	r3, r3, #8
 800231a:	2b00      	cmp	r3, #0
 800231c:	d036      	beq.n	800238c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	695b      	ldr	r3, [r3, #20]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d016      	beq.n	8002354 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002326:	4b15      	ldr	r3, [pc, #84]	; (800237c <HAL_RCC_OscConfig+0x248>)
 8002328:	2201      	movs	r2, #1
 800232a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800232c:	f7fe fc0a 	bl	8000b44 <HAL_GetTick>
 8002330:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002332:	e008      	b.n	8002346 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002334:	f7fe fc06 	bl	8000b44 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	2b02      	cmp	r3, #2
 8002340:	d901      	bls.n	8002346 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e167      	b.n	8002616 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002346:	4b0b      	ldr	r3, [pc, #44]	; (8002374 <HAL_RCC_OscConfig+0x240>)
 8002348:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	2b00      	cmp	r3, #0
 8002350:	d0f0      	beq.n	8002334 <HAL_RCC_OscConfig+0x200>
 8002352:	e01b      	b.n	800238c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002354:	4b09      	ldr	r3, [pc, #36]	; (800237c <HAL_RCC_OscConfig+0x248>)
 8002356:	2200      	movs	r2, #0
 8002358:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800235a:	f7fe fbf3 	bl	8000b44 <HAL_GetTick>
 800235e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002360:	e00e      	b.n	8002380 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002362:	f7fe fbef 	bl	8000b44 <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	2b02      	cmp	r3, #2
 800236e:	d907      	bls.n	8002380 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	e150      	b.n	8002616 <HAL_RCC_OscConfig+0x4e2>
 8002374:	40023800 	.word	0x40023800
 8002378:	42470000 	.word	0x42470000
 800237c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002380:	4b88      	ldr	r3, [pc, #544]	; (80025a4 <HAL_RCC_OscConfig+0x470>)
 8002382:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002384:	f003 0302 	and.w	r3, r3, #2
 8002388:	2b00      	cmp	r3, #0
 800238a:	d1ea      	bne.n	8002362 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0304 	and.w	r3, r3, #4
 8002394:	2b00      	cmp	r3, #0
 8002396:	f000 8097 	beq.w	80024c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800239a:	2300      	movs	r3, #0
 800239c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800239e:	4b81      	ldr	r3, [pc, #516]	; (80025a4 <HAL_RCC_OscConfig+0x470>)
 80023a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d10f      	bne.n	80023ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023aa:	2300      	movs	r3, #0
 80023ac:	60bb      	str	r3, [r7, #8]
 80023ae:	4b7d      	ldr	r3, [pc, #500]	; (80025a4 <HAL_RCC_OscConfig+0x470>)
 80023b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b2:	4a7c      	ldr	r2, [pc, #496]	; (80025a4 <HAL_RCC_OscConfig+0x470>)
 80023b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023b8:	6413      	str	r3, [r2, #64]	; 0x40
 80023ba:	4b7a      	ldr	r3, [pc, #488]	; (80025a4 <HAL_RCC_OscConfig+0x470>)
 80023bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023c2:	60bb      	str	r3, [r7, #8]
 80023c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023c6:	2301      	movs	r3, #1
 80023c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ca:	4b77      	ldr	r3, [pc, #476]	; (80025a8 <HAL_RCC_OscConfig+0x474>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d118      	bne.n	8002408 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023d6:	4b74      	ldr	r3, [pc, #464]	; (80025a8 <HAL_RCC_OscConfig+0x474>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a73      	ldr	r2, [pc, #460]	; (80025a8 <HAL_RCC_OscConfig+0x474>)
 80023dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023e2:	f7fe fbaf 	bl	8000b44 <HAL_GetTick>
 80023e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023e8:	e008      	b.n	80023fc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023ea:	f7fe fbab 	bl	8000b44 <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d901      	bls.n	80023fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e10c      	b.n	8002616 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023fc:	4b6a      	ldr	r3, [pc, #424]	; (80025a8 <HAL_RCC_OscConfig+0x474>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002404:	2b00      	cmp	r3, #0
 8002406:	d0f0      	beq.n	80023ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	2b01      	cmp	r3, #1
 800240e:	d106      	bne.n	800241e <HAL_RCC_OscConfig+0x2ea>
 8002410:	4b64      	ldr	r3, [pc, #400]	; (80025a4 <HAL_RCC_OscConfig+0x470>)
 8002412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002414:	4a63      	ldr	r2, [pc, #396]	; (80025a4 <HAL_RCC_OscConfig+0x470>)
 8002416:	f043 0301 	orr.w	r3, r3, #1
 800241a:	6713      	str	r3, [r2, #112]	; 0x70
 800241c:	e01c      	b.n	8002458 <HAL_RCC_OscConfig+0x324>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	2b05      	cmp	r3, #5
 8002424:	d10c      	bne.n	8002440 <HAL_RCC_OscConfig+0x30c>
 8002426:	4b5f      	ldr	r3, [pc, #380]	; (80025a4 <HAL_RCC_OscConfig+0x470>)
 8002428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800242a:	4a5e      	ldr	r2, [pc, #376]	; (80025a4 <HAL_RCC_OscConfig+0x470>)
 800242c:	f043 0304 	orr.w	r3, r3, #4
 8002430:	6713      	str	r3, [r2, #112]	; 0x70
 8002432:	4b5c      	ldr	r3, [pc, #368]	; (80025a4 <HAL_RCC_OscConfig+0x470>)
 8002434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002436:	4a5b      	ldr	r2, [pc, #364]	; (80025a4 <HAL_RCC_OscConfig+0x470>)
 8002438:	f043 0301 	orr.w	r3, r3, #1
 800243c:	6713      	str	r3, [r2, #112]	; 0x70
 800243e:	e00b      	b.n	8002458 <HAL_RCC_OscConfig+0x324>
 8002440:	4b58      	ldr	r3, [pc, #352]	; (80025a4 <HAL_RCC_OscConfig+0x470>)
 8002442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002444:	4a57      	ldr	r2, [pc, #348]	; (80025a4 <HAL_RCC_OscConfig+0x470>)
 8002446:	f023 0301 	bic.w	r3, r3, #1
 800244a:	6713      	str	r3, [r2, #112]	; 0x70
 800244c:	4b55      	ldr	r3, [pc, #340]	; (80025a4 <HAL_RCC_OscConfig+0x470>)
 800244e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002450:	4a54      	ldr	r2, [pc, #336]	; (80025a4 <HAL_RCC_OscConfig+0x470>)
 8002452:	f023 0304 	bic.w	r3, r3, #4
 8002456:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d015      	beq.n	800248c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002460:	f7fe fb70 	bl	8000b44 <HAL_GetTick>
 8002464:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002466:	e00a      	b.n	800247e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002468:	f7fe fb6c 	bl	8000b44 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	f241 3288 	movw	r2, #5000	; 0x1388
 8002476:	4293      	cmp	r3, r2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e0cb      	b.n	8002616 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800247e:	4b49      	ldr	r3, [pc, #292]	; (80025a4 <HAL_RCC_OscConfig+0x470>)
 8002480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d0ee      	beq.n	8002468 <HAL_RCC_OscConfig+0x334>
 800248a:	e014      	b.n	80024b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800248c:	f7fe fb5a 	bl	8000b44 <HAL_GetTick>
 8002490:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002492:	e00a      	b.n	80024aa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002494:	f7fe fb56 	bl	8000b44 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e0b5      	b.n	8002616 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024aa:	4b3e      	ldr	r3, [pc, #248]	; (80025a4 <HAL_RCC_OscConfig+0x470>)
 80024ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d1ee      	bne.n	8002494 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024b6:	7dfb      	ldrb	r3, [r7, #23]
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d105      	bne.n	80024c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024bc:	4b39      	ldr	r3, [pc, #228]	; (80025a4 <HAL_RCC_OscConfig+0x470>)
 80024be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c0:	4a38      	ldr	r2, [pc, #224]	; (80025a4 <HAL_RCC_OscConfig+0x470>)
 80024c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024c6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	f000 80a1 	beq.w	8002614 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024d2:	4b34      	ldr	r3, [pc, #208]	; (80025a4 <HAL_RCC_OscConfig+0x470>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f003 030c 	and.w	r3, r3, #12
 80024da:	2b08      	cmp	r3, #8
 80024dc:	d05c      	beq.n	8002598 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	699b      	ldr	r3, [r3, #24]
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d141      	bne.n	800256a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024e6:	4b31      	ldr	r3, [pc, #196]	; (80025ac <HAL_RCC_OscConfig+0x478>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ec:	f7fe fb2a 	bl	8000b44 <HAL_GetTick>
 80024f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024f2:	e008      	b.n	8002506 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024f4:	f7fe fb26 	bl	8000b44 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e087      	b.n	8002616 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002506:	4b27      	ldr	r3, [pc, #156]	; (80025a4 <HAL_RCC_OscConfig+0x470>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d1f0      	bne.n	80024f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	69da      	ldr	r2, [r3, #28]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a1b      	ldr	r3, [r3, #32]
 800251a:	431a      	orrs	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002520:	019b      	lsls	r3, r3, #6
 8002522:	431a      	orrs	r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002528:	085b      	lsrs	r3, r3, #1
 800252a:	3b01      	subs	r3, #1
 800252c:	041b      	lsls	r3, r3, #16
 800252e:	431a      	orrs	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002534:	061b      	lsls	r3, r3, #24
 8002536:	491b      	ldr	r1, [pc, #108]	; (80025a4 <HAL_RCC_OscConfig+0x470>)
 8002538:	4313      	orrs	r3, r2
 800253a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800253c:	4b1b      	ldr	r3, [pc, #108]	; (80025ac <HAL_RCC_OscConfig+0x478>)
 800253e:	2201      	movs	r2, #1
 8002540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002542:	f7fe faff 	bl	8000b44 <HAL_GetTick>
 8002546:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002548:	e008      	b.n	800255c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800254a:	f7fe fafb 	bl	8000b44 <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	2b02      	cmp	r3, #2
 8002556:	d901      	bls.n	800255c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e05c      	b.n	8002616 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800255c:	4b11      	ldr	r3, [pc, #68]	; (80025a4 <HAL_RCC_OscConfig+0x470>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d0f0      	beq.n	800254a <HAL_RCC_OscConfig+0x416>
 8002568:	e054      	b.n	8002614 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800256a:	4b10      	ldr	r3, [pc, #64]	; (80025ac <HAL_RCC_OscConfig+0x478>)
 800256c:	2200      	movs	r2, #0
 800256e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002570:	f7fe fae8 	bl	8000b44 <HAL_GetTick>
 8002574:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002576:	e008      	b.n	800258a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002578:	f7fe fae4 	bl	8000b44 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b02      	cmp	r3, #2
 8002584:	d901      	bls.n	800258a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e045      	b.n	8002616 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800258a:	4b06      	ldr	r3, [pc, #24]	; (80025a4 <HAL_RCC_OscConfig+0x470>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1f0      	bne.n	8002578 <HAL_RCC_OscConfig+0x444>
 8002596:	e03d      	b.n	8002614 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	699b      	ldr	r3, [r3, #24]
 800259c:	2b01      	cmp	r3, #1
 800259e:	d107      	bne.n	80025b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e038      	b.n	8002616 <HAL_RCC_OscConfig+0x4e2>
 80025a4:	40023800 	.word	0x40023800
 80025a8:	40007000 	.word	0x40007000
 80025ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025b0:	4b1b      	ldr	r3, [pc, #108]	; (8002620 <HAL_RCC_OscConfig+0x4ec>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	699b      	ldr	r3, [r3, #24]
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d028      	beq.n	8002610 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d121      	bne.n	8002610 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d11a      	bne.n	8002610 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025da:	68fa      	ldr	r2, [r7, #12]
 80025dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80025e0:	4013      	ands	r3, r2
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80025e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d111      	bne.n	8002610 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f6:	085b      	lsrs	r3, r3, #1
 80025f8:	3b01      	subs	r3, #1
 80025fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d107      	bne.n	8002610 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800260a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800260c:	429a      	cmp	r2, r3
 800260e:	d001      	beq.n	8002614 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e000      	b.n	8002616 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3718      	adds	r7, #24
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	40023800 	.word	0x40023800

08002624 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d101      	bne.n	8002638 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e0cc      	b.n	80027d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002638:	4b68      	ldr	r3, [pc, #416]	; (80027dc <HAL_RCC_ClockConfig+0x1b8>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 030f 	and.w	r3, r3, #15
 8002640:	683a      	ldr	r2, [r7, #0]
 8002642:	429a      	cmp	r2, r3
 8002644:	d90c      	bls.n	8002660 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002646:	4b65      	ldr	r3, [pc, #404]	; (80027dc <HAL_RCC_ClockConfig+0x1b8>)
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	b2d2      	uxtb	r2, r2
 800264c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800264e:	4b63      	ldr	r3, [pc, #396]	; (80027dc <HAL_RCC_ClockConfig+0x1b8>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 030f 	and.w	r3, r3, #15
 8002656:	683a      	ldr	r2, [r7, #0]
 8002658:	429a      	cmp	r2, r3
 800265a:	d001      	beq.n	8002660 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e0b8      	b.n	80027d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0302 	and.w	r3, r3, #2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d020      	beq.n	80026ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0304 	and.w	r3, r3, #4
 8002674:	2b00      	cmp	r3, #0
 8002676:	d005      	beq.n	8002684 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002678:	4b59      	ldr	r3, [pc, #356]	; (80027e0 <HAL_RCC_ClockConfig+0x1bc>)
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	4a58      	ldr	r2, [pc, #352]	; (80027e0 <HAL_RCC_ClockConfig+0x1bc>)
 800267e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002682:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0308 	and.w	r3, r3, #8
 800268c:	2b00      	cmp	r3, #0
 800268e:	d005      	beq.n	800269c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002690:	4b53      	ldr	r3, [pc, #332]	; (80027e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	4a52      	ldr	r2, [pc, #328]	; (80027e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002696:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800269a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800269c:	4b50      	ldr	r3, [pc, #320]	; (80027e0 <HAL_RCC_ClockConfig+0x1bc>)
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	494d      	ldr	r1, [pc, #308]	; (80027e0 <HAL_RCC_ClockConfig+0x1bc>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d044      	beq.n	8002744 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d107      	bne.n	80026d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026c2:	4b47      	ldr	r3, [pc, #284]	; (80027e0 <HAL_RCC_ClockConfig+0x1bc>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d119      	bne.n	8002702 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e07f      	b.n	80027d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d003      	beq.n	80026e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026de:	2b03      	cmp	r3, #3
 80026e0:	d107      	bne.n	80026f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026e2:	4b3f      	ldr	r3, [pc, #252]	; (80027e0 <HAL_RCC_ClockConfig+0x1bc>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d109      	bne.n	8002702 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e06f      	b.n	80027d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026f2:	4b3b      	ldr	r3, [pc, #236]	; (80027e0 <HAL_RCC_ClockConfig+0x1bc>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d101      	bne.n	8002702 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e067      	b.n	80027d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002702:	4b37      	ldr	r3, [pc, #220]	; (80027e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f023 0203 	bic.w	r2, r3, #3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	4934      	ldr	r1, [pc, #208]	; (80027e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002710:	4313      	orrs	r3, r2
 8002712:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002714:	f7fe fa16 	bl	8000b44 <HAL_GetTick>
 8002718:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800271a:	e00a      	b.n	8002732 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800271c:	f7fe fa12 	bl	8000b44 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	f241 3288 	movw	r2, #5000	; 0x1388
 800272a:	4293      	cmp	r3, r2
 800272c:	d901      	bls.n	8002732 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e04f      	b.n	80027d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002732:	4b2b      	ldr	r3, [pc, #172]	; (80027e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f003 020c 	and.w	r2, r3, #12
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	429a      	cmp	r2, r3
 8002742:	d1eb      	bne.n	800271c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002744:	4b25      	ldr	r3, [pc, #148]	; (80027dc <HAL_RCC_ClockConfig+0x1b8>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 030f 	and.w	r3, r3, #15
 800274c:	683a      	ldr	r2, [r7, #0]
 800274e:	429a      	cmp	r2, r3
 8002750:	d20c      	bcs.n	800276c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002752:	4b22      	ldr	r3, [pc, #136]	; (80027dc <HAL_RCC_ClockConfig+0x1b8>)
 8002754:	683a      	ldr	r2, [r7, #0]
 8002756:	b2d2      	uxtb	r2, r2
 8002758:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800275a:	4b20      	ldr	r3, [pc, #128]	; (80027dc <HAL_RCC_ClockConfig+0x1b8>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 030f 	and.w	r3, r3, #15
 8002762:	683a      	ldr	r2, [r7, #0]
 8002764:	429a      	cmp	r2, r3
 8002766:	d001      	beq.n	800276c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e032      	b.n	80027d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0304 	and.w	r3, r3, #4
 8002774:	2b00      	cmp	r3, #0
 8002776:	d008      	beq.n	800278a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002778:	4b19      	ldr	r3, [pc, #100]	; (80027e0 <HAL_RCC_ClockConfig+0x1bc>)
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	4916      	ldr	r1, [pc, #88]	; (80027e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002786:	4313      	orrs	r3, r2
 8002788:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0308 	and.w	r3, r3, #8
 8002792:	2b00      	cmp	r3, #0
 8002794:	d009      	beq.n	80027aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002796:	4b12      	ldr	r3, [pc, #72]	; (80027e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	00db      	lsls	r3, r3, #3
 80027a4:	490e      	ldr	r1, [pc, #56]	; (80027e0 <HAL_RCC_ClockConfig+0x1bc>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027aa:	f000 f821 	bl	80027f0 <HAL_RCC_GetSysClockFreq>
 80027ae:	4602      	mov	r2, r0
 80027b0:	4b0b      	ldr	r3, [pc, #44]	; (80027e0 <HAL_RCC_ClockConfig+0x1bc>)
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	091b      	lsrs	r3, r3, #4
 80027b6:	f003 030f 	and.w	r3, r3, #15
 80027ba:	490a      	ldr	r1, [pc, #40]	; (80027e4 <HAL_RCC_ClockConfig+0x1c0>)
 80027bc:	5ccb      	ldrb	r3, [r1, r3]
 80027be:	fa22 f303 	lsr.w	r3, r2, r3
 80027c2:	4a09      	ldr	r2, [pc, #36]	; (80027e8 <HAL_RCC_ClockConfig+0x1c4>)
 80027c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80027c6:	4b09      	ldr	r3, [pc, #36]	; (80027ec <HAL_RCC_ClockConfig+0x1c8>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7fe f976 	bl	8000abc <HAL_InitTick>

  return HAL_OK;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	40023c00 	.word	0x40023c00
 80027e0:	40023800 	.word	0x40023800
 80027e4:	08002a6c 	.word	0x08002a6c
 80027e8:	20000000 	.word	0x20000000
 80027ec:	20000004 	.word	0x20000004

080027f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027f4:	b094      	sub	sp, #80	; 0x50
 80027f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80027f8:	2300      	movs	r3, #0
 80027fa:	647b      	str	r3, [r7, #68]	; 0x44
 80027fc:	2300      	movs	r3, #0
 80027fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002800:	2300      	movs	r3, #0
 8002802:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002804:	2300      	movs	r3, #0
 8002806:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002808:	4b79      	ldr	r3, [pc, #484]	; (80029f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f003 030c 	and.w	r3, r3, #12
 8002810:	2b08      	cmp	r3, #8
 8002812:	d00d      	beq.n	8002830 <HAL_RCC_GetSysClockFreq+0x40>
 8002814:	2b08      	cmp	r3, #8
 8002816:	f200 80e1 	bhi.w	80029dc <HAL_RCC_GetSysClockFreq+0x1ec>
 800281a:	2b00      	cmp	r3, #0
 800281c:	d002      	beq.n	8002824 <HAL_RCC_GetSysClockFreq+0x34>
 800281e:	2b04      	cmp	r3, #4
 8002820:	d003      	beq.n	800282a <HAL_RCC_GetSysClockFreq+0x3a>
 8002822:	e0db      	b.n	80029dc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002824:	4b73      	ldr	r3, [pc, #460]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002826:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002828:	e0db      	b.n	80029e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800282a:	4b73      	ldr	r3, [pc, #460]	; (80029f8 <HAL_RCC_GetSysClockFreq+0x208>)
 800282c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800282e:	e0d8      	b.n	80029e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002830:	4b6f      	ldr	r3, [pc, #444]	; (80029f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002838:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800283a:	4b6d      	ldr	r3, [pc, #436]	; (80029f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d063      	beq.n	800290e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002846:	4b6a      	ldr	r3, [pc, #424]	; (80029f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	099b      	lsrs	r3, r3, #6
 800284c:	2200      	movs	r2, #0
 800284e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002850:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002854:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002858:	633b      	str	r3, [r7, #48]	; 0x30
 800285a:	2300      	movs	r3, #0
 800285c:	637b      	str	r3, [r7, #52]	; 0x34
 800285e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002862:	4622      	mov	r2, r4
 8002864:	462b      	mov	r3, r5
 8002866:	f04f 0000 	mov.w	r0, #0
 800286a:	f04f 0100 	mov.w	r1, #0
 800286e:	0159      	lsls	r1, r3, #5
 8002870:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002874:	0150      	lsls	r0, r2, #5
 8002876:	4602      	mov	r2, r0
 8002878:	460b      	mov	r3, r1
 800287a:	4621      	mov	r1, r4
 800287c:	1a51      	subs	r1, r2, r1
 800287e:	6139      	str	r1, [r7, #16]
 8002880:	4629      	mov	r1, r5
 8002882:	eb63 0301 	sbc.w	r3, r3, r1
 8002886:	617b      	str	r3, [r7, #20]
 8002888:	f04f 0200 	mov.w	r2, #0
 800288c:	f04f 0300 	mov.w	r3, #0
 8002890:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002894:	4659      	mov	r1, fp
 8002896:	018b      	lsls	r3, r1, #6
 8002898:	4651      	mov	r1, sl
 800289a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800289e:	4651      	mov	r1, sl
 80028a0:	018a      	lsls	r2, r1, #6
 80028a2:	4651      	mov	r1, sl
 80028a4:	ebb2 0801 	subs.w	r8, r2, r1
 80028a8:	4659      	mov	r1, fp
 80028aa:	eb63 0901 	sbc.w	r9, r3, r1
 80028ae:	f04f 0200 	mov.w	r2, #0
 80028b2:	f04f 0300 	mov.w	r3, #0
 80028b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80028ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028c2:	4690      	mov	r8, r2
 80028c4:	4699      	mov	r9, r3
 80028c6:	4623      	mov	r3, r4
 80028c8:	eb18 0303 	adds.w	r3, r8, r3
 80028cc:	60bb      	str	r3, [r7, #8]
 80028ce:	462b      	mov	r3, r5
 80028d0:	eb49 0303 	adc.w	r3, r9, r3
 80028d4:	60fb      	str	r3, [r7, #12]
 80028d6:	f04f 0200 	mov.w	r2, #0
 80028da:	f04f 0300 	mov.w	r3, #0
 80028de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80028e2:	4629      	mov	r1, r5
 80028e4:	024b      	lsls	r3, r1, #9
 80028e6:	4621      	mov	r1, r4
 80028e8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80028ec:	4621      	mov	r1, r4
 80028ee:	024a      	lsls	r2, r1, #9
 80028f0:	4610      	mov	r0, r2
 80028f2:	4619      	mov	r1, r3
 80028f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028f6:	2200      	movs	r2, #0
 80028f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80028fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80028fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002900:	f7fd fc74 	bl	80001ec <__aeabi_uldivmod>
 8002904:	4602      	mov	r2, r0
 8002906:	460b      	mov	r3, r1
 8002908:	4613      	mov	r3, r2
 800290a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800290c:	e058      	b.n	80029c0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800290e:	4b38      	ldr	r3, [pc, #224]	; (80029f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	099b      	lsrs	r3, r3, #6
 8002914:	2200      	movs	r2, #0
 8002916:	4618      	mov	r0, r3
 8002918:	4611      	mov	r1, r2
 800291a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800291e:	623b      	str	r3, [r7, #32]
 8002920:	2300      	movs	r3, #0
 8002922:	627b      	str	r3, [r7, #36]	; 0x24
 8002924:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002928:	4642      	mov	r2, r8
 800292a:	464b      	mov	r3, r9
 800292c:	f04f 0000 	mov.w	r0, #0
 8002930:	f04f 0100 	mov.w	r1, #0
 8002934:	0159      	lsls	r1, r3, #5
 8002936:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800293a:	0150      	lsls	r0, r2, #5
 800293c:	4602      	mov	r2, r0
 800293e:	460b      	mov	r3, r1
 8002940:	4641      	mov	r1, r8
 8002942:	ebb2 0a01 	subs.w	sl, r2, r1
 8002946:	4649      	mov	r1, r9
 8002948:	eb63 0b01 	sbc.w	fp, r3, r1
 800294c:	f04f 0200 	mov.w	r2, #0
 8002950:	f04f 0300 	mov.w	r3, #0
 8002954:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002958:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800295c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002960:	ebb2 040a 	subs.w	r4, r2, sl
 8002964:	eb63 050b 	sbc.w	r5, r3, fp
 8002968:	f04f 0200 	mov.w	r2, #0
 800296c:	f04f 0300 	mov.w	r3, #0
 8002970:	00eb      	lsls	r3, r5, #3
 8002972:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002976:	00e2      	lsls	r2, r4, #3
 8002978:	4614      	mov	r4, r2
 800297a:	461d      	mov	r5, r3
 800297c:	4643      	mov	r3, r8
 800297e:	18e3      	adds	r3, r4, r3
 8002980:	603b      	str	r3, [r7, #0]
 8002982:	464b      	mov	r3, r9
 8002984:	eb45 0303 	adc.w	r3, r5, r3
 8002988:	607b      	str	r3, [r7, #4]
 800298a:	f04f 0200 	mov.w	r2, #0
 800298e:	f04f 0300 	mov.w	r3, #0
 8002992:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002996:	4629      	mov	r1, r5
 8002998:	028b      	lsls	r3, r1, #10
 800299a:	4621      	mov	r1, r4
 800299c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029a0:	4621      	mov	r1, r4
 80029a2:	028a      	lsls	r2, r1, #10
 80029a4:	4610      	mov	r0, r2
 80029a6:	4619      	mov	r1, r3
 80029a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029aa:	2200      	movs	r2, #0
 80029ac:	61bb      	str	r3, [r7, #24]
 80029ae:	61fa      	str	r2, [r7, #28]
 80029b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029b4:	f7fd fc1a 	bl	80001ec <__aeabi_uldivmod>
 80029b8:	4602      	mov	r2, r0
 80029ba:	460b      	mov	r3, r1
 80029bc:	4613      	mov	r3, r2
 80029be:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80029c0:	4b0b      	ldr	r3, [pc, #44]	; (80029f0 <HAL_RCC_GetSysClockFreq+0x200>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	0c1b      	lsrs	r3, r3, #16
 80029c6:	f003 0303 	and.w	r3, r3, #3
 80029ca:	3301      	adds	r3, #1
 80029cc:	005b      	lsls	r3, r3, #1
 80029ce:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80029d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80029d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80029da:	e002      	b.n	80029e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029dc:	4b05      	ldr	r3, [pc, #20]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x204>)
 80029de:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80029e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3750      	adds	r7, #80	; 0x50
 80029e8:	46bd      	mov	sp, r7
 80029ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029ee:	bf00      	nop
 80029f0:	40023800 	.word	0x40023800
 80029f4:	00f42400 	.word	0x00f42400
 80029f8:	007a1200 	.word	0x007a1200

080029fc <__libc_init_array>:
 80029fc:	b570      	push	{r4, r5, r6, lr}
 80029fe:	4d0d      	ldr	r5, [pc, #52]	; (8002a34 <__libc_init_array+0x38>)
 8002a00:	4c0d      	ldr	r4, [pc, #52]	; (8002a38 <__libc_init_array+0x3c>)
 8002a02:	1b64      	subs	r4, r4, r5
 8002a04:	10a4      	asrs	r4, r4, #2
 8002a06:	2600      	movs	r6, #0
 8002a08:	42a6      	cmp	r6, r4
 8002a0a:	d109      	bne.n	8002a20 <__libc_init_array+0x24>
 8002a0c:	4d0b      	ldr	r5, [pc, #44]	; (8002a3c <__libc_init_array+0x40>)
 8002a0e:	4c0c      	ldr	r4, [pc, #48]	; (8002a40 <__libc_init_array+0x44>)
 8002a10:	f000 f820 	bl	8002a54 <_init>
 8002a14:	1b64      	subs	r4, r4, r5
 8002a16:	10a4      	asrs	r4, r4, #2
 8002a18:	2600      	movs	r6, #0
 8002a1a:	42a6      	cmp	r6, r4
 8002a1c:	d105      	bne.n	8002a2a <__libc_init_array+0x2e>
 8002a1e:	bd70      	pop	{r4, r5, r6, pc}
 8002a20:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a24:	4798      	blx	r3
 8002a26:	3601      	adds	r6, #1
 8002a28:	e7ee      	b.n	8002a08 <__libc_init_array+0xc>
 8002a2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a2e:	4798      	blx	r3
 8002a30:	3601      	adds	r6, #1
 8002a32:	e7f2      	b.n	8002a1a <__libc_init_array+0x1e>
 8002a34:	08002a8c 	.word	0x08002a8c
 8002a38:	08002a8c 	.word	0x08002a8c
 8002a3c:	08002a8c 	.word	0x08002a8c
 8002a40:	08002a90 	.word	0x08002a90

08002a44 <memset>:
 8002a44:	4402      	add	r2, r0
 8002a46:	4603      	mov	r3, r0
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d100      	bne.n	8002a4e <memset+0xa>
 8002a4c:	4770      	bx	lr
 8002a4e:	f803 1b01 	strb.w	r1, [r3], #1
 8002a52:	e7f9      	b.n	8002a48 <memset+0x4>

08002a54 <_init>:
 8002a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a56:	bf00      	nop
 8002a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a5a:	bc08      	pop	{r3}
 8002a5c:	469e      	mov	lr, r3
 8002a5e:	4770      	bx	lr

08002a60 <_fini>:
 8002a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a62:	bf00      	nop
 8002a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a66:	bc08      	pop	{r3}
 8002a68:	469e      	mov	lr, r3
 8002a6a:	4770      	bx	lr
