
031_HAL_HEX-KEYPAD_with_NOKIA5110.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b54  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08004cdc  08004cdc  00014cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e14  08004e14  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004e14  08004e14  00014e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e1c  08004e1c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e1c  08004e1c  00014e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e20  08004e20  00014e20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004e24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000318  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000324  20000324  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007c50  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019d1  00000000  00000000  00027c8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000708  00000000  00000000  00029660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000670  00000000  00000000  00029d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002014c  00000000  00000000  0002a3d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008cda  00000000  00000000  0004a524  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c1967  00000000  00000000  000531fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00114b65  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001afc  00000000  00000000  00114bb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004cc4 	.word	0x08004cc4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004cc4 	.word	0x08004cc4

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <Keypad4x3_Init>:
    {'4', '5', '6'},
    {'7', '8', '9'},
    {'*', '0', '#'}
};

void Keypad4x3_Init(Keypad4x3_WiresTypeDef* keypadWires) {
 80004dc:	b5b0      	push	{r4, r5, r7, lr}
 80004de:	b088      	sub	sp, #32
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
    // Keypad yapısını kaydedin
    KeypadStruct = *keypadWires;
 80004e4:	4a32      	ldr	r2, [pc, #200]	; (80005b0 <Keypad4x3_Init+0xd4>)
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	4614      	mov	r4, r2
 80004ea:	461d      	mov	r5, r3
 80004ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004f0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80004f4:	e884 0003 	stmia.w	r4, {r0, r1}

    // Giriş pinlerini tanımlayın
    GPIO_InitTypeDef GPIO_InitStruct;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004f8:	2300      	movs	r3, #0
 80004fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004fc:	2301      	movs	r3, #1
 80004fe:	617b      	str	r3, [r7, #20]

    GPIO_InitStruct.Pin = KeypadStruct.IN_PIN_0;
 8000500:	4b2b      	ldr	r3, [pc, #172]	; (80005b0 <Keypad4x3_Init+0xd4>)
 8000502:	891b      	ldrh	r3, [r3, #8]
 8000504:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(KeypadStruct.IN_Port, &GPIO_InitStruct);
 8000506:	4b2a      	ldr	r3, [pc, #168]	; (80005b0 <Keypad4x3_Init+0xd4>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	f107 020c 	add.w	r2, r7, #12
 800050e:	4611      	mov	r1, r2
 8000510:	4618      	mov	r0, r3
 8000512:	f003 facf 	bl	8003ab4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = KeypadStruct.IN_PIN_1;
 8000516:	4b26      	ldr	r3, [pc, #152]	; (80005b0 <Keypad4x3_Init+0xd4>)
 8000518:	895b      	ldrh	r3, [r3, #10]
 800051a:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(KeypadStruct.IN_Port, &GPIO_InitStruct);
 800051c:	4b24      	ldr	r3, [pc, #144]	; (80005b0 <Keypad4x3_Init+0xd4>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	f107 020c 	add.w	r2, r7, #12
 8000524:	4611      	mov	r1, r2
 8000526:	4618      	mov	r0, r3
 8000528:	f003 fac4 	bl	8003ab4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = KeypadStruct.IN_PIN_2;
 800052c:	4b20      	ldr	r3, [pc, #128]	; (80005b0 <Keypad4x3_Init+0xd4>)
 800052e:	899b      	ldrh	r3, [r3, #12]
 8000530:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(KeypadStruct.IN_Port, &GPIO_InitStruct);
 8000532:	4b1f      	ldr	r3, [pc, #124]	; (80005b0 <Keypad4x3_Init+0xd4>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	f107 020c 	add.w	r2, r7, #12
 800053a:	4611      	mov	r1, r2
 800053c:	4618      	mov	r0, r3
 800053e:	f003 fab9 	bl	8003ab4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = KeypadStruct.IN_PIN_3;
 8000542:	4b1b      	ldr	r3, [pc, #108]	; (80005b0 <Keypad4x3_Init+0xd4>)
 8000544:	89db      	ldrh	r3, [r3, #14]
 8000546:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(KeypadStruct.IN_Port, &GPIO_InitStruct);
 8000548:	4b19      	ldr	r3, [pc, #100]	; (80005b0 <Keypad4x3_Init+0xd4>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f107 020c 	add.w	r2, r7, #12
 8000550:	4611      	mov	r1, r2
 8000552:	4618      	mov	r0, r3
 8000554:	f003 faae 	bl	8003ab4 <HAL_GPIO_Init>

    // Çıkış pinlerini tanımlayın
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000558:	2301      	movs	r3, #1
 800055a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055c:	2300      	movs	r3, #0
 800055e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000560:	2300      	movs	r3, #0
 8000562:	61bb      	str	r3, [r7, #24]

    GPIO_InitStruct.Pin = KeypadStruct.OUT_PIN_0;
 8000564:	4b12      	ldr	r3, [pc, #72]	; (80005b0 <Keypad4x3_Init+0xd4>)
 8000566:	8a1b      	ldrh	r3, [r3, #16]
 8000568:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(KeypadStruct.OUT_Port, &GPIO_InitStruct);
 800056a:	4b11      	ldr	r3, [pc, #68]	; (80005b0 <Keypad4x3_Init+0xd4>)
 800056c:	685b      	ldr	r3, [r3, #4]
 800056e:	f107 020c 	add.w	r2, r7, #12
 8000572:	4611      	mov	r1, r2
 8000574:	4618      	mov	r0, r3
 8000576:	f003 fa9d 	bl	8003ab4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = KeypadStruct.OUT_PIN_1;
 800057a:	4b0d      	ldr	r3, [pc, #52]	; (80005b0 <Keypad4x3_Init+0xd4>)
 800057c:	8a5b      	ldrh	r3, [r3, #18]
 800057e:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(KeypadStruct.OUT_Port, &GPIO_InitStruct);
 8000580:	4b0b      	ldr	r3, [pc, #44]	; (80005b0 <Keypad4x3_Init+0xd4>)
 8000582:	685b      	ldr	r3, [r3, #4]
 8000584:	f107 020c 	add.w	r2, r7, #12
 8000588:	4611      	mov	r1, r2
 800058a:	4618      	mov	r0, r3
 800058c:	f003 fa92 	bl	8003ab4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = KeypadStruct.OUT_PIN_2;
 8000590:	4b07      	ldr	r3, [pc, #28]	; (80005b0 <Keypad4x3_Init+0xd4>)
 8000592:	8a9b      	ldrh	r3, [r3, #20]
 8000594:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(KeypadStruct.OUT_Port, &GPIO_InitStruct);
 8000596:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <Keypad4x3_Init+0xd4>)
 8000598:	685b      	ldr	r3, [r3, #4]
 800059a:	f107 020c 	add.w	r2, r7, #12
 800059e:	4611      	mov	r1, r2
 80005a0:	4618      	mov	r0, r3
 80005a2:	f003 fa87 	bl	8003ab4 <HAL_GPIO_Init>
}
 80005a6:	bf00      	nop
 80005a8:	3720      	adds	r7, #32
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bdb0      	pop	{r4, r5, r7, pc}
 80005ae:	bf00      	nop
 80005b0:	20000028 	.word	0x20000028

080005b4 <Keypad4x3_ReadKeypad>:

void Keypad4x3_ReadKeypad(bool keys[12]) {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
    // Keypad'deki tuşları okuyun

    for (col = 0; col < 3; col++) {
 80005bc:	4b2d      	ldr	r3, [pc, #180]	; (8000674 <Keypad4x3_ReadKeypad+0xc0>)
 80005be:	2200      	movs	r2, #0
 80005c0:	701a      	strb	r2, [r3, #0]
 80005c2:	e04e      	b.n	8000662 <Keypad4x3_ReadKeypad+0xae>
        HAL_GPIO_WritePin(KeypadStruct.OUT_Port, KeypadStruct.OUT_PIN_0 << col, GPIO_PIN_RESET);
 80005c4:	4b2c      	ldr	r3, [pc, #176]	; (8000678 <Keypad4x3_ReadKeypad+0xc4>)
 80005c6:	685b      	ldr	r3, [r3, #4]
 80005c8:	4a2b      	ldr	r2, [pc, #172]	; (8000678 <Keypad4x3_ReadKeypad+0xc4>)
 80005ca:	8a12      	ldrh	r2, [r2, #16]
 80005cc:	4611      	mov	r1, r2
 80005ce:	4a29      	ldr	r2, [pc, #164]	; (8000674 <Keypad4x3_ReadKeypad+0xc0>)
 80005d0:	7812      	ldrb	r2, [r2, #0]
 80005d2:	fa01 f202 	lsl.w	r2, r1, r2
 80005d6:	b291      	uxth	r1, r2
 80005d8:	2200      	movs	r2, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f003 fc1e 	bl	8003e1c <HAL_GPIO_WritePin>

        // Belirli bir sütundaki tuşları oku
        for (row = 0; row < 4; row++) {
 80005e0:	4b26      	ldr	r3, [pc, #152]	; (800067c <Keypad4x3_ReadKeypad+0xc8>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	701a      	strb	r2, [r3, #0]
 80005e6:	e024      	b.n	8000632 <Keypad4x3_ReadKeypad+0x7e>
            keys[col * 4 + row] = (HAL_GPIO_ReadPin(KeypadStruct.IN_Port, KeypadStruct.IN_PIN_0 << row) == GPIO_PIN_RESET);
 80005e8:	4b23      	ldr	r3, [pc, #140]	; (8000678 <Keypad4x3_ReadKeypad+0xc4>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a22      	ldr	r2, [pc, #136]	; (8000678 <Keypad4x3_ReadKeypad+0xc4>)
 80005ee:	8912      	ldrh	r2, [r2, #8]
 80005f0:	4611      	mov	r1, r2
 80005f2:	4a22      	ldr	r2, [pc, #136]	; (800067c <Keypad4x3_ReadKeypad+0xc8>)
 80005f4:	7812      	ldrb	r2, [r2, #0]
 80005f6:	fa01 f202 	lsl.w	r2, r1, r2
 80005fa:	b292      	uxth	r2, r2
 80005fc:	4611      	mov	r1, r2
 80005fe:	4618      	mov	r0, r3
 8000600:	f003 fbf4 	bl	8003dec <HAL_GPIO_ReadPin>
 8000604:	4603      	mov	r3, r0
 8000606:	4619      	mov	r1, r3
 8000608:	4b1a      	ldr	r3, [pc, #104]	; (8000674 <Keypad4x3_ReadKeypad+0xc0>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	009b      	lsls	r3, r3, #2
 800060e:	4a1b      	ldr	r2, [pc, #108]	; (800067c <Keypad4x3_ReadKeypad+0xc8>)
 8000610:	7812      	ldrb	r2, [r2, #0]
 8000612:	4413      	add	r3, r2
 8000614:	461a      	mov	r2, r3
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	4413      	add	r3, r2
 800061a:	2900      	cmp	r1, #0
 800061c:	bf0c      	ite	eq
 800061e:	2201      	moveq	r2, #1
 8000620:	2200      	movne	r2, #0
 8000622:	b2d2      	uxtb	r2, r2
 8000624:	701a      	strb	r2, [r3, #0]
        for (row = 0; row < 4; row++) {
 8000626:	4b15      	ldr	r3, [pc, #84]	; (800067c <Keypad4x3_ReadKeypad+0xc8>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	3301      	adds	r3, #1
 800062c:	b2da      	uxtb	r2, r3
 800062e:	4b13      	ldr	r3, [pc, #76]	; (800067c <Keypad4x3_ReadKeypad+0xc8>)
 8000630:	701a      	strb	r2, [r3, #0]
 8000632:	4b12      	ldr	r3, [pc, #72]	; (800067c <Keypad4x3_ReadKeypad+0xc8>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	2b03      	cmp	r3, #3
 8000638:	d9d6      	bls.n	80005e8 <Keypad4x3_ReadKeypad+0x34>
        }

        // Sütunu tekrar pasif yap
        HAL_GPIO_WritePin(KeypadStruct.OUT_Port, KeypadStruct.OUT_PIN_0 << col, GPIO_PIN_SET);
 800063a:	4b0f      	ldr	r3, [pc, #60]	; (8000678 <Keypad4x3_ReadKeypad+0xc4>)
 800063c:	685b      	ldr	r3, [r3, #4]
 800063e:	4a0e      	ldr	r2, [pc, #56]	; (8000678 <Keypad4x3_ReadKeypad+0xc4>)
 8000640:	8a12      	ldrh	r2, [r2, #16]
 8000642:	4611      	mov	r1, r2
 8000644:	4a0b      	ldr	r2, [pc, #44]	; (8000674 <Keypad4x3_ReadKeypad+0xc0>)
 8000646:	7812      	ldrb	r2, [r2, #0]
 8000648:	fa01 f202 	lsl.w	r2, r1, r2
 800064c:	b291      	uxth	r1, r2
 800064e:	2201      	movs	r2, #1
 8000650:	4618      	mov	r0, r3
 8000652:	f003 fbe3 	bl	8003e1c <HAL_GPIO_WritePin>
    for (col = 0; col < 3; col++) {
 8000656:	4b07      	ldr	r3, [pc, #28]	; (8000674 <Keypad4x3_ReadKeypad+0xc0>)
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	3301      	adds	r3, #1
 800065c:	b2da      	uxtb	r2, r3
 800065e:	4b05      	ldr	r3, [pc, #20]	; (8000674 <Keypad4x3_ReadKeypad+0xc0>)
 8000660:	701a      	strb	r2, [r3, #0]
 8000662:	4b04      	ldr	r3, [pc, #16]	; (8000674 <Keypad4x3_ReadKeypad+0xc0>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	2b02      	cmp	r3, #2
 8000668:	d9ac      	bls.n	80005c4 <Keypad4x3_ReadKeypad+0x10>
    }
}
 800066a:	bf00      	nop
 800066c:	bf00      	nop
 800066e:	3708      	adds	r7, #8
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	20000041 	.word	0x20000041
 8000678:	20000028 	.word	0x20000028
 800067c:	20000040 	.word	0x20000040

08000680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08a      	sub	sp, #40	; 0x28
 8000684:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000686:	f002 fcfd 	bl	8003084 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800068a:	f000 f949 	bl	8000920 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800068e:	f000 fa07 	bl	8000aa0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000692:	f000 f9e5 	bl	8000a60 <MX_DMA_Init>
  MX_SPI2_Init();
 8000696:	f000 f9ad 	bl	80009f4 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  keypadWires.IN_Port = KEYPAD_IN_PORT;
 800069a:	4b8e      	ldr	r3, [pc, #568]	; (80008d4 <main+0x254>)
 800069c:	4a8e      	ldr	r2, [pc, #568]	; (80008d8 <main+0x258>)
 800069e:	601a      	str	r2, [r3, #0]
  keypadWires.IN_PIN_0 = KEYPAD_IN_PIN_0;
 80006a0:	4b8c      	ldr	r3, [pc, #560]	; (80008d4 <main+0x254>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	811a      	strh	r2, [r3, #8]
  keypadWires.IN_PIN_1 = KEYPAD_IN_PIN_1;
 80006a6:	4b8b      	ldr	r3, [pc, #556]	; (80008d4 <main+0x254>)
 80006a8:	2202      	movs	r2, #2
 80006aa:	815a      	strh	r2, [r3, #10]
  keypadWires.IN_PIN_2 = KEYPAD_IN_PIN_2;
 80006ac:	4b89      	ldr	r3, [pc, #548]	; (80008d4 <main+0x254>)
 80006ae:	2204      	movs	r2, #4
 80006b0:	819a      	strh	r2, [r3, #12]
  keypadWires.IN_PIN_3 = KEYPAD_IN_PIN_3;
 80006b2:	4b88      	ldr	r3, [pc, #544]	; (80008d4 <main+0x254>)
 80006b4:	2208      	movs	r2, #8
 80006b6:	81da      	strh	r2, [r3, #14]

  keypadWires.OUT_Port = KEYPAD_OUT_PORT;
 80006b8:	4b86      	ldr	r3, [pc, #536]	; (80008d4 <main+0x254>)
 80006ba:	4a87      	ldr	r2, [pc, #540]	; (80008d8 <main+0x258>)
 80006bc:	605a      	str	r2, [r3, #4]
  keypadWires.OUT_PIN_0 = KEYPAD_OUT_PIN_0;
 80006be:	4b85      	ldr	r3, [pc, #532]	; (80008d4 <main+0x254>)
 80006c0:	2210      	movs	r2, #16
 80006c2:	821a      	strh	r2, [r3, #16]
  keypadWires.OUT_PIN_1 = KEYPAD_OUT_PIN_1;
 80006c4:	4b83      	ldr	r3, [pc, #524]	; (80008d4 <main+0x254>)
 80006c6:	2220      	movs	r2, #32
 80006c8:	825a      	strh	r2, [r3, #18]
  keypadWires.OUT_PIN_2 = KEYPAD_OUT_PIN_2;
 80006ca:	4b82      	ldr	r3, [pc, #520]	; (80008d4 <main+0x254>)
 80006cc:	2240      	movs	r2, #64	; 0x40
 80006ce:	829a      	strh	r2, [r3, #20]

  Keypad4x3_Init(&keypadWires);
 80006d0:	4880      	ldr	r0, [pc, #512]	; (80008d4 <main+0x254>)
 80006d2:	f7ff ff03 	bl	80004dc <Keypad4x3_Init>
  nokia5110_Init();
 80006d6:	f000 fa76 	bl	8000bc6 <nokia5110_Init>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80006da:	2201      	movs	r2, #1
 80006dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006e0:	487d      	ldr	r0, [pc, #500]	; (80008d8 <main+0x258>)
 80006e2:	f003 fb9b 	bl	8003e1c <HAL_GPIO_WritePin>
  bool keys[12] = {false};
 80006e6:	f107 0314 	add.w	r3, r7, #20
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
  nokia5110_WriteString("password");
 80006f2:	487a      	ldr	r0, [pc, #488]	; (80008dc <main+0x25c>)
 80006f4:	f000 fbb6 	bl	8000e64 <nokia5110_WriteString>
  nokia5110_Update();
 80006f8:	f000 fab4 	bl	8000c64 <nokia5110_Update>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Keypad4x3_ReadKeypad(keys);
 80006fc:	f107 0314 	add.w	r3, r7, #20
 8000700:	4618      	mov	r0, r3
 8000702:	f7ff ff57 	bl	80005b4 <Keypad4x3_ReadKeypad>
	  key1 = keys[0];
 8000706:	7d3b      	ldrb	r3, [r7, #20]
 8000708:	461a      	mov	r2, r3
 800070a:	4b75      	ldr	r3, [pc, #468]	; (80008e0 <main+0x260>)
 800070c:	701a      	strb	r2, [r3, #0]
	  key2 = keys[4];
 800070e:	7e3b      	ldrb	r3, [r7, #24]
 8000710:	461a      	mov	r2, r3
 8000712:	4b74      	ldr	r3, [pc, #464]	; (80008e4 <main+0x264>)
 8000714:	701a      	strb	r2, [r3, #0]
	  key3 = keys[8];
 8000716:	7f3b      	ldrb	r3, [r7, #28]
 8000718:	461a      	mov	r2, r3
 800071a:	4b73      	ldr	r3, [pc, #460]	; (80008e8 <main+0x268>)
 800071c:	701a      	strb	r2, [r3, #0]
	  key4 = keys[2];
 800071e:	7dbb      	ldrb	r3, [r7, #22]
 8000720:	461a      	mov	r2, r3
 8000722:	4b72      	ldr	r3, [pc, #456]	; (80008ec <main+0x26c>)
 8000724:	701a      	strb	r2, [r3, #0]
	  key5 = keys[6];
 8000726:	7ebb      	ldrb	r3, [r7, #26]
 8000728:	461a      	mov	r2, r3
 800072a:	4b71      	ldr	r3, [pc, #452]	; (80008f0 <main+0x270>)
 800072c:	701a      	strb	r2, [r3, #0]
	  key6 = keys[10];
 800072e:	7fbb      	ldrb	r3, [r7, #30]
 8000730:	461a      	mov	r2, r3
 8000732:	4b70      	ldr	r3, [pc, #448]	; (80008f4 <main+0x274>)
 8000734:	701a      	strb	r2, [r3, #0]
	  key7 = keys[1];
 8000736:	7d7b      	ldrb	r3, [r7, #21]
 8000738:	461a      	mov	r2, r3
 800073a:	4b6f      	ldr	r3, [pc, #444]	; (80008f8 <main+0x278>)
 800073c:	701a      	strb	r2, [r3, #0]
	  key8 = keys[5];
 800073e:	7e7b      	ldrb	r3, [r7, #25]
 8000740:	461a      	mov	r2, r3
 8000742:	4b6e      	ldr	r3, [pc, #440]	; (80008fc <main+0x27c>)
 8000744:	701a      	strb	r2, [r3, #0]
	  key9 = keys[9];
 8000746:	7f7b      	ldrb	r3, [r7, #29]
 8000748:	461a      	mov	r2, r3
 800074a:	4b6d      	ldr	r3, [pc, #436]	; (8000900 <main+0x280>)
 800074c:	701a      	strb	r2, [r3, #0]
	  keyY = keys[3];
 800074e:	7dfb      	ldrb	r3, [r7, #23]
 8000750:	461a      	mov	r2, r3
 8000752:	4b6c      	ldr	r3, [pc, #432]	; (8000904 <main+0x284>)
 8000754:	701a      	strb	r2, [r3, #0]
	  key0 = keys[7];
 8000756:	7efb      	ldrb	r3, [r7, #27]
 8000758:	461a      	mov	r2, r3
 800075a:	4b6b      	ldr	r3, [pc, #428]	; (8000908 <main+0x288>)
 800075c:	701a      	strb	r2, [r3, #0]
	  keyS = keys[11];
 800075e:	7ffb      	ldrb	r3, [r7, #31]
 8000760:	461a      	mov	r2, r3
 8000762:	4b6a      	ldr	r3, [pc, #424]	; (800090c <main+0x28c>)
 8000764:	701a      	strb	r2, [r3, #0]


	  char Keys[12] ={key1,key2,key3,key4,key5,key6,key7,key8,key9,keyY,key0,keyS};
 8000766:	4b5e      	ldr	r3, [pc, #376]	; (80008e0 <main+0x260>)
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	723b      	strb	r3, [r7, #8]
 800076c:	4b5d      	ldr	r3, [pc, #372]	; (80008e4 <main+0x264>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	727b      	strb	r3, [r7, #9]
 8000772:	4b5d      	ldr	r3, [pc, #372]	; (80008e8 <main+0x268>)
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	72bb      	strb	r3, [r7, #10]
 8000778:	4b5c      	ldr	r3, [pc, #368]	; (80008ec <main+0x26c>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	72fb      	strb	r3, [r7, #11]
 800077e:	4b5c      	ldr	r3, [pc, #368]	; (80008f0 <main+0x270>)
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	733b      	strb	r3, [r7, #12]
 8000784:	4b5b      	ldr	r3, [pc, #364]	; (80008f4 <main+0x274>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	737b      	strb	r3, [r7, #13]
 800078a:	4b5b      	ldr	r3, [pc, #364]	; (80008f8 <main+0x278>)
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	73bb      	strb	r3, [r7, #14]
 8000790:	4b5a      	ldr	r3, [pc, #360]	; (80008fc <main+0x27c>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	73fb      	strb	r3, [r7, #15]
 8000796:	4b5a      	ldr	r3, [pc, #360]	; (8000900 <main+0x280>)
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	743b      	strb	r3, [r7, #16]
 800079c:	4b59      	ldr	r3, [pc, #356]	; (8000904 <main+0x284>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	747b      	strb	r3, [r7, #17]
 80007a2:	4b59      	ldr	r3, [pc, #356]	; (8000908 <main+0x288>)
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	74bb      	strb	r3, [r7, #18]
 80007a8:	4b58      	ldr	r3, [pc, #352]	; (800090c <main+0x28c>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	74fb      	strb	r3, [r7, #19]



	    if (Keys[0] || Keys[1] || Keys[2] || Keys[3] || Keys[4] || Keys[5] ||
 80007ae:	7a3b      	ldrb	r3, [r7, #8]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d120      	bne.n	80007f6 <main+0x176>
 80007b4:	7a7b      	ldrb	r3, [r7, #9]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d11d      	bne.n	80007f6 <main+0x176>
 80007ba:	7abb      	ldrb	r3, [r7, #10]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d11a      	bne.n	80007f6 <main+0x176>
 80007c0:	7afb      	ldrb	r3, [r7, #11]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d117      	bne.n	80007f6 <main+0x176>
 80007c6:	7b3b      	ldrb	r3, [r7, #12]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d114      	bne.n	80007f6 <main+0x176>
 80007cc:	7b7b      	ldrb	r3, [r7, #13]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d111      	bne.n	80007f6 <main+0x176>
	        Keys[6] || Keys[7] || Keys[8] || Keys[9] || Keys[10] || Keys[11])
 80007d2:	7bbb      	ldrb	r3, [r7, #14]
	    if (Keys[0] || Keys[1] || Keys[2] || Keys[3] || Keys[4] || Keys[5] ||
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d10e      	bne.n	80007f6 <main+0x176>
	        Keys[6] || Keys[7] || Keys[8] || Keys[9] || Keys[10] || Keys[11])
 80007d8:	7bfb      	ldrb	r3, [r7, #15]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d10b      	bne.n	80007f6 <main+0x176>
 80007de:	7c3b      	ldrb	r3, [r7, #16]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d108      	bne.n	80007f6 <main+0x176>
 80007e4:	7c7b      	ldrb	r3, [r7, #17]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d105      	bne.n	80007f6 <main+0x176>
 80007ea:	7cbb      	ldrb	r3, [r7, #18]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d102      	bne.n	80007f6 <main+0x176>
 80007f0:	7cfb      	ldrb	r3, [r7, #19]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d082      	beq.n	80006fc <main+0x7c>
	    {

	      for (int i = 0; i < 12; i++)
 80007f6:	2300      	movs	r3, #0
 80007f8:	627b      	str	r3, [r7, #36]	; 0x24
 80007fa:	e017      	b.n	800082c <main+0x1ac>
	      {
	        if (Keys[i])
 80007fc:	f107 0208 	add.w	r2, r7, #8
 8000800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000802:	4413      	add	r3, r2
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d00d      	beq.n	8000826 <main+0x1a6>
	        {
	          enteredPassword[passwordIndex] = i + 1; // +1 because the keypad numbers start from 1
 800080a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800080c:	b2da      	uxtb	r2, r3
 800080e:	4b40      	ldr	r3, [pc, #256]	; (8000910 <main+0x290>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	3201      	adds	r2, #1
 8000814:	b2d1      	uxtb	r1, r2
 8000816:	4a3f      	ldr	r2, [pc, #252]	; (8000914 <main+0x294>)
 8000818:	54d1      	strb	r1, [r2, r3]
	          passwordIndex += 1;
 800081a:	4b3d      	ldr	r3, [pc, #244]	; (8000910 <main+0x290>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	3301      	adds	r3, #1
 8000820:	4a3b      	ldr	r2, [pc, #236]	; (8000910 <main+0x290>)
 8000822:	6013      	str	r3, [r2, #0]
	          break;
 8000824:	e005      	b.n	8000832 <main+0x1b2>
	      for (int i = 0; i < 12; i++)
 8000826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000828:	3301      	adds	r3, #1
 800082a:	627b      	str	r3, [r7, #36]	; 0x24
 800082c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800082e:	2b0b      	cmp	r3, #11
 8000830:	dde4      	ble.n	80007fc <main+0x17c>
	        }
	      }


	      if (passwordIndex > 0 && passwordIndex < 4)
 8000832:	4b37      	ldr	r3, [pc, #220]	; (8000910 <main+0x290>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	2b00      	cmp	r3, #0
 8000838:	dd27      	ble.n	800088a <main+0x20a>
 800083a:	4b35      	ldr	r3, [pc, #212]	; (8000910 <main+0x290>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	2b03      	cmp	r3, #3
 8000840:	dc23      	bgt.n	800088a <main+0x20a>
	             {
	                 char passwordString[5]; // Şifre 4 basamaklı ve son karakter için '\0' gerekiyor
	                 for (int i = 0; i < passwordIndex; i++)
 8000842:	2300      	movs	r3, #0
 8000844:	623b      	str	r3, [r7, #32]
 8000846:	e00d      	b.n	8000864 <main+0x1e4>
	                 {
	                     passwordString[i] = enteredPassword[i] + '0'; // Karakter dizisi olarak dönüştür
 8000848:	4a32      	ldr	r2, [pc, #200]	; (8000914 <main+0x294>)
 800084a:	6a3b      	ldr	r3, [r7, #32]
 800084c:	4413      	add	r3, r2
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	3330      	adds	r3, #48	; 0x30
 8000852:	b2d9      	uxtb	r1, r3
 8000854:	463a      	mov	r2, r7
 8000856:	6a3b      	ldr	r3, [r7, #32]
 8000858:	4413      	add	r3, r2
 800085a:	460a      	mov	r2, r1
 800085c:	701a      	strb	r2, [r3, #0]
	                 for (int i = 0; i < passwordIndex; i++)
 800085e:	6a3b      	ldr	r3, [r7, #32]
 8000860:	3301      	adds	r3, #1
 8000862:	623b      	str	r3, [r7, #32]
 8000864:	4b2a      	ldr	r3, [pc, #168]	; (8000910 <main+0x290>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	6a3a      	ldr	r2, [r7, #32]
 800086a:	429a      	cmp	r2, r3
 800086c:	dbec      	blt.n	8000848 <main+0x1c8>
	                 }
	                 passwordString[passwordIndex] = '\0'; // Son karakteri '\0' olarak ayarla
 800086e:	4b28      	ldr	r3, [pc, #160]	; (8000910 <main+0x290>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	3328      	adds	r3, #40	; 0x28
 8000874:	443b      	add	r3, r7
 8000876:	2200      	movs	r2, #0
 8000878:	f803 2c28 	strb.w	r2, [r3, #-40]

	                 displayPassword(passwordString, passwordIndex);
 800087c:	4b24      	ldr	r3, [pc, #144]	; (8000910 <main+0x290>)
 800087e:	681a      	ldr	r2, [r3, #0]
 8000880:	463b      	mov	r3, r7
 8000882:	4611      	mov	r1, r2
 8000884:	4618      	mov	r0, r3
 8000886:	f000 f981 	bl	8000b8c <displayPassword>

	             }

	      // Check if the full password has been entered
	      if (passwordIndex == 4)
 800088a:	4b21      	ldr	r3, [pc, #132]	; (8000910 <main+0x290>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	2b04      	cmp	r3, #4
 8000890:	f47f af34 	bne.w	80006fc <main+0x7c>
	      {

	        // Check the entered password with the correct password
	        if (checkPassword(enteredPassword))
 8000894:	481f      	ldr	r0, [pc, #124]	; (8000914 <main+0x294>)
 8000896:	f000 f953 	bl	8000b40 <checkPassword>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d003      	beq.n	80008a8 <main+0x228>
	        {

	          nokia5110_WriteString("SUCCESS");
 80008a0:	481d      	ldr	r0, [pc, #116]	; (8000918 <main+0x298>)
 80008a2:	f000 fadf 	bl	8000e64 <nokia5110_WriteString>
 80008a6:	e002      	b.n	80008ae <main+0x22e>
	        }
	        else
	        {

	          nokia5110_WriteString("FAIL");
 80008a8:	481c      	ldr	r0, [pc, #112]	; (800091c <main+0x29c>)
 80008aa:	f000 fadb 	bl	8000e64 <nokia5110_WriteString>
	        }

	        nokia5110_Update(); // Update the LCD screen
 80008ae:	f000 f9d9 	bl	8000c64 <nokia5110_Update>
	        HAL_Delay(2000); // Wait for a short duration before resetting the password entry
 80008b2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80008b6:	f002 fc57 	bl	8003168 <HAL_Delay>
	        passwordIndex = 0; // Reset the password entry for the next attempt
 80008ba:	4b15      	ldr	r3, [pc, #84]	; (8000910 <main+0x290>)
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
	        nokia5110_Clear(); // Clear the LCD screen after displaying the result
 80008c0:	f000 fa5a 	bl	8000d78 <nokia5110_Clear>
	        HAL_Delay(5000);
 80008c4:	f241 3088 	movw	r0, #5000	; 0x1388
 80008c8:	f002 fc4e 	bl	8003168 <HAL_Delay>
	        nokia5110_Update();
 80008cc:	f000 f9ca 	bl	8000c64 <nokia5110_Update>
  {
 80008d0:	e714      	b.n	80006fc <main+0x7c>
 80008d2:	bf00      	nop
 80008d4:	200000fc 	.word	0x200000fc
 80008d8:	40020c00 	.word	0x40020c00
 80008dc:	08004cdc 	.word	0x08004cdc
 80008e0:	20000114 	.word	0x20000114
 80008e4:	20000115 	.word	0x20000115
 80008e8:	20000116 	.word	0x20000116
 80008ec:	20000117 	.word	0x20000117
 80008f0:	20000118 	.word	0x20000118
 80008f4:	20000119 	.word	0x20000119
 80008f8:	2000011a 	.word	0x2000011a
 80008fc:	2000011b 	.word	0x2000011b
 8000900:	2000011c 	.word	0x2000011c
 8000904:	2000011f 	.word	0x2000011f
 8000908:	2000011e 	.word	0x2000011e
 800090c:	2000011d 	.word	0x2000011d
 8000910:	20000124 	.word	0x20000124
 8000914:	20000120 	.word	0x20000120
 8000918:	08004ce8 	.word	0x08004ce8
 800091c:	08004cf0 	.word	0x08004cf0

08000920 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b094      	sub	sp, #80	; 0x50
 8000924:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000926:	f107 0320 	add.w	r3, r7, #32
 800092a:	2230      	movs	r2, #48	; 0x30
 800092c:	2100      	movs	r1, #0
 800092e:	4618      	mov	r0, r3
 8000930:	f004 f9c0 	bl	8004cb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000934:	f107 030c 	add.w	r3, r7, #12
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]
 8000942:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000944:	2300      	movs	r3, #0
 8000946:	60bb      	str	r3, [r7, #8]
 8000948:	4b28      	ldr	r3, [pc, #160]	; (80009ec <SystemClock_Config+0xcc>)
 800094a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094c:	4a27      	ldr	r2, [pc, #156]	; (80009ec <SystemClock_Config+0xcc>)
 800094e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000952:	6413      	str	r3, [r2, #64]	; 0x40
 8000954:	4b25      	ldr	r3, [pc, #148]	; (80009ec <SystemClock_Config+0xcc>)
 8000956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000958:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800095c:	60bb      	str	r3, [r7, #8]
 800095e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000960:	2300      	movs	r3, #0
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	4b22      	ldr	r3, [pc, #136]	; (80009f0 <SystemClock_Config+0xd0>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a21      	ldr	r2, [pc, #132]	; (80009f0 <SystemClock_Config+0xd0>)
 800096a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800096e:	6013      	str	r3, [r2, #0]
 8000970:	4b1f      	ldr	r3, [pc, #124]	; (80009f0 <SystemClock_Config+0xd0>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000978:	607b      	str	r3, [r7, #4]
 800097a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800097c:	2302      	movs	r3, #2
 800097e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000980:	2301      	movs	r3, #1
 8000982:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000984:	2310      	movs	r3, #16
 8000986:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000988:	2302      	movs	r3, #2
 800098a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800098c:	2300      	movs	r3, #0
 800098e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000990:	2308      	movs	r3, #8
 8000992:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000994:	23a8      	movs	r3, #168	; 0xa8
 8000996:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000998:	2302      	movs	r3, #2
 800099a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800099c:	2307      	movs	r3, #7
 800099e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009a0:	f107 0320 	add.w	r3, r7, #32
 80009a4:	4618      	mov	r0, r3
 80009a6:	f003 fa53 	bl	8003e50 <HAL_RCC_OscConfig>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009b0:	f000 f904 	bl	8000bbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009b4:	230f      	movs	r3, #15
 80009b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009b8:	2302      	movs	r3, #2
 80009ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009bc:	2300      	movs	r3, #0
 80009be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009c0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009cc:	f107 030c 	add.w	r3, r7, #12
 80009d0:	2105      	movs	r1, #5
 80009d2:	4618      	mov	r0, r3
 80009d4:	f003 fcb4 	bl	8004340 <HAL_RCC_ClockConfig>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80009de:	f000 f8ed 	bl	8000bbc <Error_Handler>
  }
}
 80009e2:	bf00      	nop
 80009e4:	3750      	adds	r7, #80	; 0x50
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40023800 	.word	0x40023800
 80009f0:	40007000 	.word	0x40007000

080009f4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80009f8:	4b17      	ldr	r3, [pc, #92]	; (8000a58 <MX_SPI2_Init+0x64>)
 80009fa:	4a18      	ldr	r2, [pc, #96]	; (8000a5c <MX_SPI2_Init+0x68>)
 80009fc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80009fe:	4b16      	ldr	r3, [pc, #88]	; (8000a58 <MX_SPI2_Init+0x64>)
 8000a00:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a04:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000a06:	4b14      	ldr	r3, [pc, #80]	; (8000a58 <MX_SPI2_Init+0x64>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a0c:	4b12      	ldr	r3, [pc, #72]	; (8000a58 <MX_SPI2_Init+0x64>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a12:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <MX_SPI2_Init+0x64>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a18:	4b0f      	ldr	r3, [pc, #60]	; (8000a58 <MX_SPI2_Init+0x64>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <MX_SPI2_Init+0x64>)
 8000a20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a24:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a26:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <MX_SPI2_Init+0x64>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a2c:	4b0a      	ldr	r3, [pc, #40]	; (8000a58 <MX_SPI2_Init+0x64>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a32:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <MX_SPI2_Init+0x64>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a38:	4b07      	ldr	r3, [pc, #28]	; (8000a58 <MX_SPI2_Init+0x64>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000a3e:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <MX_SPI2_Init+0x64>)
 8000a40:	220a      	movs	r2, #10
 8000a42:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a44:	4804      	ldr	r0, [pc, #16]	; (8000a58 <MX_SPI2_Init+0x64>)
 8000a46:	f003 fe67 	bl	8004718 <HAL_SPI_Init>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000a50:	f000 f8b4 	bl	8000bbc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a54:	bf00      	nop
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	20000044 	.word	0x20000044
 8000a5c:	40003800 	.word	0x40003800

08000a60 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	607b      	str	r3, [r7, #4]
 8000a6a:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <MX_DMA_Init+0x3c>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a0b      	ldr	r2, [pc, #44]	; (8000a9c <MX_DMA_Init+0x3c>)
 8000a70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <MX_DMA_Init+0x3c>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000a82:	2200      	movs	r2, #0
 8000a84:	2100      	movs	r1, #0
 8000a86:	200f      	movs	r0, #15
 8000a88:	f002 fc6d 	bl	8003366 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000a8c:	200f      	movs	r0, #15
 8000a8e:	f002 fc86 	bl	800339e <HAL_NVIC_EnableIRQ>

}
 8000a92:	bf00      	nop
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40023800 	.word	0x40023800

08000aa0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b088      	sub	sp, #32
 8000aa4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa6:	f107 030c 	add.w	r3, r7, #12
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	609a      	str	r2, [r3, #8]
 8000ab2:	60da      	str	r2, [r3, #12]
 8000ab4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60bb      	str	r3, [r7, #8]
 8000aba:	4b1f      	ldr	r3, [pc, #124]	; (8000b38 <MX_GPIO_Init+0x98>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	4a1e      	ldr	r2, [pc, #120]	; (8000b38 <MX_GPIO_Init+0x98>)
 8000ac0:	f043 0302 	orr.w	r3, r3, #2
 8000ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac6:	4b1c      	ldr	r3, [pc, #112]	; (8000b38 <MX_GPIO_Init+0x98>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	f003 0302 	and.w	r3, r3, #2
 8000ace:	60bb      	str	r3, [r7, #8]
 8000ad0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	607b      	str	r3, [r7, #4]
 8000ad6:	4b18      	ldr	r3, [pc, #96]	; (8000b38 <MX_GPIO_Init+0x98>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4a17      	ldr	r2, [pc, #92]	; (8000b38 <MX_GPIO_Init+0x98>)
 8000adc:	f043 0308 	orr.w	r3, r3, #8
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4b15      	ldr	r3, [pc, #84]	; (8000b38 <MX_GPIO_Init+0x98>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f003 0308 	and.w	r3, r3, #8
 8000aea:	607b      	str	r3, [r7, #4]
 8000aec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15
 8000aee:	2200      	movs	r2, #0
 8000af0:	f248 71f0 	movw	r1, #34800	; 0x87f0
 8000af4:	4811      	ldr	r0, [pc, #68]	; (8000b3c <MX_GPIO_Init+0x9c>)
 8000af6:	f003 f991 	bl	8003e1c <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PD8 PD9 PD10 PD15
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15
 8000afa:	f248 73f0 	movw	r3, #34800	; 0x87f0
 8000afe:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b00:	2301      	movs	r3, #1
 8000b02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b0c:	f107 030c 	add.w	r3, r7, #12
 8000b10:	4619      	mov	r1, r3
 8000b12:	480a      	ldr	r0, [pc, #40]	; (8000b3c <MX_GPIO_Init+0x9c>)
 8000b14:	f002 ffce 	bl	8003ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000b18:	230f      	movs	r3, #15
 8000b1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b24:	f107 030c 	add.w	r3, r7, #12
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4804      	ldr	r0, [pc, #16]	; (8000b3c <MX_GPIO_Init+0x9c>)
 8000b2c:	f002 ffc2 	bl	8003ab4 <HAL_GPIO_Init>

}
 8000b30:	bf00      	nop
 8000b32:	3720      	adds	r7, #32
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	40023800 	.word	0x40023800
 8000b3c:	40020c00 	.word	0x40020c00

08000b40 <checkPassword>:

/* USER CODE BEGIN 4 */
bool checkPassword(char password[]) {
 8000b40:	b480      	push	{r7}
 8000b42:	b085      	sub	sp, #20
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
    uint8_t correctPassword[] = {2, 3, 4, 5};
 8000b48:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <checkPassword+0x48>)
 8000b4a:	60bb      	str	r3, [r7, #8]

    for (int i = 0; i < 4; i++) {
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	e00f      	b.n	8000b72 <checkPassword+0x32>
        if (password[i] != correctPassword[i]) {
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	687a      	ldr	r2, [r7, #4]
 8000b56:	4413      	add	r3, r2
 8000b58:	781a      	ldrb	r2, [r3, #0]
 8000b5a:	f107 0108 	add.w	r1, r7, #8
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	440b      	add	r3, r1
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	d001      	beq.n	8000b6c <checkPassword+0x2c>
            return false;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	e006      	b.n	8000b7a <checkPassword+0x3a>
    for (int i = 0; i < 4; i++) {
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	3301      	adds	r3, #1
 8000b70:	60fb      	str	r3, [r7, #12]
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	2b03      	cmp	r3, #3
 8000b76:	ddec      	ble.n	8000b52 <checkPassword+0x12>
        }
    }

    return true;
 8000b78:	2301      	movs	r3, #1
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3714      	adds	r7, #20
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	05040302 	.word	0x05040302

08000b8c <displayPassword>:

void displayPassword(char password[], int length)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	6039      	str	r1, [r7, #0]
    // Şifreyi ekrana yazdır
    nokia5110_Clear(); // Ekrana temizle
 8000b96:	f000 f8ef 	bl	8000d78 <nokia5110_Clear>
    nokia5110_WriteString(password); // Şifreyi yazdır
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	f000 f962 	bl	8000e64 <nokia5110_WriteString>
    nokia5110_Update(); // Ekrana yazılanları güncelle
 8000ba0:	f000 f860 	bl	8000c64 <nokia5110_Update>
    HAL_Delay(1000);
 8000ba4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ba8:	f002 fade 	bl	8003168 <HAL_Delay>
    nokia5110_Clear();
 8000bac:	f000 f8e4 	bl	8000d78 <nokia5110_Clear>
    nokia5110_Update();
 8000bb0:	f000 f858 	bl	8000c64 <nokia5110_Update>
}
 8000bb4:	bf00      	nop
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc0:	b672      	cpsid	i
}
 8000bc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bc4:	e7fe      	b.n	8000bc4 <Error_Handler+0x8>

08000bc6 <nokia5110_Init>:
#include "nokia5110.h"



bool nokia5110_Init(void)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	af00      	add	r7, sp, #0
	nokia5110_Reset();
 8000bca:	f000 f86f 	bl	8000cac <nokia5110_Reset>

	if(!(nokia5110_Write(0x21, 0)))
 8000bce:	2100      	movs	r1, #0
 8000bd0:	2021      	movs	r0, #33	; 0x21
 8000bd2:	f000 f8ed 	bl	8000db0 <nokia5110_Write>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	f083 0301 	eor.w	r3, r3, #1
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <nokia5110_Init+0x20>
	{
		return false;
 8000be2:	2300      	movs	r3, #0
 8000be4:	e03c      	b.n	8000c60 <nokia5110_Init+0x9a>
	}
	if(!(nokia5110_Write(0xC0, 0)))
 8000be6:	2100      	movs	r1, #0
 8000be8:	20c0      	movs	r0, #192	; 0xc0
 8000bea:	f000 f8e1 	bl	8000db0 <nokia5110_Write>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	f083 0301 	eor.w	r3, r3, #1
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <nokia5110_Init+0x38>
	{
		return false;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	e030      	b.n	8000c60 <nokia5110_Init+0x9a>
	}
	if(!(nokia5110_Write(0x07, 0)))
 8000bfe:	2100      	movs	r1, #0
 8000c00:	2007      	movs	r0, #7
 8000c02:	f000 f8d5 	bl	8000db0 <nokia5110_Write>
 8000c06:	4603      	mov	r3, r0
 8000c08:	f083 0301 	eor.w	r3, r3, #1
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <nokia5110_Init+0x50>
	{
		return false;
 8000c12:	2300      	movs	r3, #0
 8000c14:	e024      	b.n	8000c60 <nokia5110_Init+0x9a>
	}
	if(!(nokia5110_Write(0x13, 0)))
 8000c16:	2100      	movs	r1, #0
 8000c18:	2013      	movs	r0, #19
 8000c1a:	f000 f8c9 	bl	8000db0 <nokia5110_Write>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	f083 0301 	eor.w	r3, r3, #1
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <nokia5110_Init+0x68>
	{
		return false;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	e018      	b.n	8000c60 <nokia5110_Init+0x9a>
	}
	if(!(nokia5110_Write(0x20, 0)))
 8000c2e:	2100      	movs	r1, #0
 8000c30:	2020      	movs	r0, #32
 8000c32:	f000 f8bd 	bl	8000db0 <nokia5110_Write>
 8000c36:	4603      	mov	r3, r0
 8000c38:	f083 0301 	eor.w	r3, r3, #1
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <nokia5110_Init+0x80>
	{
		return false;
 8000c42:	2300      	movs	r3, #0
 8000c44:	e00c      	b.n	8000c60 <nokia5110_Init+0x9a>
	}
	if(!(nokia5110_Write(0x0C, 0)))
 8000c46:	2100      	movs	r1, #0
 8000c48:	200c      	movs	r0, #12
 8000c4a:	f000 f8b1 	bl	8000db0 <nokia5110_Write>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	f083 0301 	eor.w	r3, r3, #1
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <nokia5110_Init+0x98>
	{
		return false;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	e000      	b.n	8000c60 <nokia5110_Init+0x9a>
	}

	return true;
 8000c5e:	2301      	movs	r3, #1
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <nokia5110_Update>:

bool nokia5110_Update(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0

	if(!(nokia5110_Write(0x80, 0))) // move to x = 0
 8000c68:	2100      	movs	r1, #0
 8000c6a:	2080      	movs	r0, #128	; 0x80
 8000c6c:	f000 f8a0 	bl	8000db0 <nokia5110_Write>
 8000c70:	4603      	mov	r3, r0
 8000c72:	f083 0301 	eor.w	r3, r3, #1
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <nokia5110_Update+0x1c>
	{
		return false;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	e011      	b.n	8000ca4 <nokia5110_Update+0x40>
	}

	if(!(nokia5110_Write(0x40, 0))) // move to y = 0
 8000c80:	2100      	movs	r1, #0
 8000c82:	2040      	movs	r0, #64	; 0x40
 8000c84:	f000 f894 	bl	8000db0 <nokia5110_Write>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	f083 0301 	eor.w	r3, r3, #1
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <nokia5110_Update+0x34>
	{
		return false;
 8000c94:	2300      	movs	r3, #0
 8000c96:	e005      	b.n	8000ca4 <nokia5110_Update+0x40>
	}

	nokia_bufferWrite(frameBuff, 504);
 8000c98:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 8000c9c:	4802      	ldr	r0, [pc, #8]	; (8000ca8 <nokia5110_Update+0x44>)
 8000c9e:	f000 f8c1 	bl	8000e24 <nokia_bufferWrite>

	return true;
 8000ca2:	2301      	movs	r3, #1
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	20000128 	.word	0x20000128

08000cac <nokia5110_Reset>:


void nokia5110_Reset(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET); // reset is low
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cb6:	4807      	ldr	r0, [pc, #28]	; (8000cd4 <nokia5110_Reset+0x28>)
 8000cb8:	f003 f8b0 	bl	8003e1c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000cbc:	2064      	movs	r0, #100	; 0x64
 8000cbe:	f002 fa53 	bl	8003168 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_SET); // reset is high
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cc8:	4802      	ldr	r0, [pc, #8]	; (8000cd4 <nokia5110_Reset+0x28>)
 8000cca:	f003 f8a7 	bl	8003e1c <HAL_GPIO_WritePin>
}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40020c00 	.word	0x40020c00

08000cd8 <nokia5110_SetPixel>:


void nokia5110_SetPixel(uint8_t x, uint8_t y, bool set)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	71fb      	strb	r3, [r7, #7]
 8000ce2:	460b      	mov	r3, r1
 8000ce4:	71bb      	strb	r3, [r7, #6]
 8000ce6:	4613      	mov	r3, r2
 8000ce8:	717b      	strb	r3, [r7, #5]
	uint8_t Bi;
	uint16_t By;

	if(x  < 0 || x >= 84 || y < 0 || y >= 84 )
 8000cea:	79fb      	ldrb	r3, [r7, #7]
 8000cec:	2b53      	cmp	r3, #83	; 0x53
 8000cee:	d83b      	bhi.n	8000d68 <nokia5110_SetPixel+0x90>
 8000cf0:	79bb      	ldrb	r3, [r7, #6]
 8000cf2:	2b53      	cmp	r3, #83	; 0x53
 8000cf4:	d838      	bhi.n	8000d68 <nokia5110_SetPixel+0x90>
		return;


	By = (y / 8) * 84 + x;
 8000cf6:	79bb      	ldrb	r3, [r7, #6]
 8000cf8:	08db      	lsrs	r3, r3, #3
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	b29b      	uxth	r3, r3
 8000cfe:	461a      	mov	r2, r3
 8000d00:	0052      	lsls	r2, r2, #1
 8000d02:	4413      	add	r3, r2
 8000d04:	461a      	mov	r2, r3
 8000d06:	00d2      	lsls	r2, r2, #3
 8000d08:	1ad3      	subs	r3, r2, r3
 8000d0a:	009b      	lsls	r3, r3, #2
 8000d0c:	b29a      	uxth	r2, r3
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
 8000d10:	b29b      	uxth	r3, r3
 8000d12:	4413      	add	r3, r2
 8000d14:	81fb      	strh	r3, [r7, #14]
	Bi = y % 8;
 8000d16:	79bb      	ldrb	r3, [r7, #6]
 8000d18:	f003 0307 	and.w	r3, r3, #7
 8000d1c:	737b      	strb	r3, [r7, #13]

	if(set)
 8000d1e:	797b      	ldrb	r3, [r7, #5]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d00f      	beq.n	8000d44 <nokia5110_SetPixel+0x6c>
	{
		frameBuff[By] |= (1 << Bi);
 8000d24:	89fb      	ldrh	r3, [r7, #14]
 8000d26:	4a13      	ldr	r2, [pc, #76]	; (8000d74 <nokia5110_SetPixel+0x9c>)
 8000d28:	5cd3      	ldrb	r3, [r2, r3]
 8000d2a:	b25a      	sxtb	r2, r3
 8000d2c:	7b7b      	ldrb	r3, [r7, #13]
 8000d2e:	2101      	movs	r1, #1
 8000d30:	fa01 f303 	lsl.w	r3, r1, r3
 8000d34:	b25b      	sxtb	r3, r3
 8000d36:	4313      	orrs	r3, r2
 8000d38:	b25a      	sxtb	r2, r3
 8000d3a:	89fb      	ldrh	r3, [r7, #14]
 8000d3c:	b2d1      	uxtb	r1, r2
 8000d3e:	4a0d      	ldr	r2, [pc, #52]	; (8000d74 <nokia5110_SetPixel+0x9c>)
 8000d40:	54d1      	strb	r1, [r2, r3]
 8000d42:	e012      	b.n	8000d6a <nokia5110_SetPixel+0x92>
	}
	else
	{
		frameBuff[By] &= ~(1 << Bi);
 8000d44:	89fb      	ldrh	r3, [r7, #14]
 8000d46:	4a0b      	ldr	r2, [pc, #44]	; (8000d74 <nokia5110_SetPixel+0x9c>)
 8000d48:	5cd3      	ldrb	r3, [r2, r3]
 8000d4a:	b25a      	sxtb	r2, r3
 8000d4c:	7b7b      	ldrb	r3, [r7, #13]
 8000d4e:	2101      	movs	r1, #1
 8000d50:	fa01 f303 	lsl.w	r3, r1, r3
 8000d54:	b25b      	sxtb	r3, r3
 8000d56:	43db      	mvns	r3, r3
 8000d58:	b25b      	sxtb	r3, r3
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	b25a      	sxtb	r2, r3
 8000d5e:	89fb      	ldrh	r3, [r7, #14]
 8000d60:	b2d1      	uxtb	r1, r2
 8000d62:	4a04      	ldr	r2, [pc, #16]	; (8000d74 <nokia5110_SetPixel+0x9c>)
 8000d64:	54d1      	strb	r1, [r2, r3]
 8000d66:	e000      	b.n	8000d6a <nokia5110_SetPixel+0x92>
		return;
 8000d68:	bf00      	nop
	}
}
 8000d6a:	3714      	adds	r7, #20
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	20000128 	.word	0x20000128

08000d78 <nokia5110_Clear>:


void nokia5110_Clear(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
	for(int i = 0; i < 504; i++)
 8000d7e:	2300      	movs	r3, #0
 8000d80:	607b      	str	r3, [r7, #4]
 8000d82:	e007      	b.n	8000d94 <nokia5110_Clear+0x1c>
	{
		frameBuff[i] = 0x00;
 8000d84:	4a09      	ldr	r2, [pc, #36]	; (8000dac <nokia5110_Clear+0x34>)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4413      	add	r3, r2
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 504; i++)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	3301      	adds	r3, #1
 8000d92:	607b      	str	r3, [r7, #4]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 8000d9a:	dbf3      	blt.n	8000d84 <nokia5110_Clear+0xc>
	}
}
 8000d9c:	bf00      	nop
 8000d9e:	bf00      	nop
 8000da0:	370c      	adds	r7, #12
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	20000128 	.word	0x20000128

08000db0 <nokia5110_Write>:




bool nokia5110_Write(uint8_t data, uint8_t mode)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	460a      	mov	r2, r1
 8000dba:	71fb      	strb	r3, [r7, #7]
 8000dbc:	4613      	mov	r3, r2
 8000dbe:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET); // CE is low
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dc6:	4815      	ldr	r0, [pc, #84]	; (8000e1c <nokia5110_Write+0x6c>)
 8000dc8:	f003 f828 	bl	8003e1c <HAL_GPIO_WritePin>

	if( mode == 0)
 8000dcc:	79bb      	ldrb	r3, [r7, #6]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d106      	bne.n	8000de0 <nokia5110_Write+0x30>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET); // DC is low
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dd8:	4810      	ldr	r0, [pc, #64]	; (8000e1c <nokia5110_Write+0x6c>)
 8000dda:	f003 f81f 	bl	8003e1c <HAL_GPIO_WritePin>
 8000dde:	e011      	b.n	8000e04 <nokia5110_Write+0x54>
	}
	else if( mode == 1)
 8000de0:	79bb      	ldrb	r3, [r7, #6]
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d106      	bne.n	8000df4 <nokia5110_Write+0x44>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET); // DC is high
 8000de6:	2201      	movs	r2, #1
 8000de8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dec:	480b      	ldr	r0, [pc, #44]	; (8000e1c <nokia5110_Write+0x6c>)
 8000dee:	f003 f815 	bl	8003e1c <HAL_GPIO_WritePin>
 8000df2:	e007      	b.n	8000e04 <nokia5110_Write+0x54>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET); // CE is high
 8000df4:	2201      	movs	r2, #1
 8000df6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dfa:	4808      	ldr	r0, [pc, #32]	; (8000e1c <nokia5110_Write+0x6c>)
 8000dfc:	f003 f80e 	bl	8003e1c <HAL_GPIO_WritePin>
		return false;
 8000e00:	2300      	movs	r3, #0
 8000e02:	e006      	b.n	8000e12 <nokia5110_Write+0x62>
	}

	HAL_SPI_Transmit_DMA(&hspi2, &data, 1);
 8000e04:	1dfb      	adds	r3, r7, #7
 8000e06:	2201      	movs	r2, #1
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4805      	ldr	r0, [pc, #20]	; (8000e20 <nokia5110_Write+0x70>)
 8000e0c:	f003 fd0e 	bl	800482c <HAL_SPI_Transmit_DMA>


	return true;
 8000e10:	2301      	movs	r3, #1
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40020c00 	.word	0x40020c00
 8000e20:	20000044 	.word	0x20000044

08000e24 <nokia_bufferWrite>:


void nokia_bufferWrite(uint8_t* data, uint16_t length)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	460b      	mov	r3, r1
 8000e2e:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET); // CE is low
 8000e30:	2200      	movs	r2, #0
 8000e32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e36:	4809      	ldr	r0, [pc, #36]	; (8000e5c <nokia_bufferWrite+0x38>)
 8000e38:	f002 fff0 	bl	8003e1c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET); // DC is high
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e42:	4806      	ldr	r0, [pc, #24]	; (8000e5c <nokia_bufferWrite+0x38>)
 8000e44:	f002 ffea 	bl	8003e1c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(&hspi2, data, length);
 8000e48:	887b      	ldrh	r3, [r7, #2]
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	6879      	ldr	r1, [r7, #4]
 8000e4e:	4804      	ldr	r0, [pc, #16]	; (8000e60 <nokia_bufferWrite+0x3c>)
 8000e50:	f003 fcec 	bl	800482c <HAL_SPI_Transmit_DMA>

}
 8000e54:	bf00      	nop
 8000e56:	3708      	adds	r7, #8
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	40020c00 	.word	0x40020c00
 8000e60:	20000044 	.word	0x20000044

08000e64 <nokia5110_WriteString>:


void nokia5110_WriteString(char word[])
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b086      	sub	sp, #24
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
    uint8_t x = 0;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	75fb      	strb	r3, [r7, #23]
    uint8_t y = 0;
 8000e70:	2300      	movs	r3, #0
 8000e72:	75bb      	strb	r3, [r7, #22]

	for(int i = 0; i< strlen(word); i++)
 8000e74:	2300      	movs	r3, #0
 8000e76:	613b      	str	r3, [r7, #16]
 8000e78:	f001 bfe4 	b.w	8002e44 <nokia5110_WriteString+0x1fe0>
	{
		char character = word[i];
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	687a      	ldr	r2, [r7, #4]
 8000e80:	4413      	add	r3, r2
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	73fb      	strb	r3, [r7, #15]
		character = toupper(character);
 8000e86:	7bfb      	ldrb	r3, [r7, #15]
 8000e88:	73bb      	strb	r3, [r7, #14]
 8000e8a:	7bbb      	ldrb	r3, [r7, #14]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	4ab8      	ldr	r2, [pc, #736]	; (8001170 <nokia5110_WriteString+0x30c>)
 8000e90:	4413      	add	r3, r2
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	f003 0303 	and.w	r3, r3, #3
 8000e98:	2b02      	cmp	r3, #2
 8000e9a:	d102      	bne.n	8000ea2 <nokia5110_WriteString+0x3e>
 8000e9c:	7bbb      	ldrb	r3, [r7, #14]
 8000e9e:	3b20      	subs	r3, #32
 8000ea0:	e000      	b.n	8000ea4 <nokia5110_WriteString+0x40>
 8000ea2:	7bbb      	ldrb	r3, [r7, #14]
 8000ea4:	73fb      	strb	r3, [r7, #15]

	switch(character)
 8000ea6:	7bfb      	ldrb	r3, [r7, #15]
 8000ea8:	3b23      	subs	r3, #35	; 0x23
 8000eaa:	2b37      	cmp	r3, #55	; 0x37
 8000eac:	f201 87b8 	bhi.w	8002e20 <nokia5110_WriteString+0x1fbc>
 8000eb0:	a201      	add	r2, pc, #4	; (adr r2, 8000eb8 <nokia5110_WriteString+0x54>)
 8000eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eb6:	bf00      	nop
 8000eb8:	08002cef 	.word	0x08002cef
 8000ebc:	08002e21 	.word	0x08002e21
 8000ec0:	08002e21 	.word	0x08002e21
 8000ec4:	08002e21 	.word	0x08002e21
 8000ec8:	08002e21 	.word	0x08002e21
 8000ecc:	08002e21 	.word	0x08002e21
 8000ed0:	08002e21 	.word	0x08002e21
 8000ed4:	08002bd5 	.word	0x08002bd5
 8000ed8:	08002e21 	.word	0x08002e21
 8000edc:	08002e21 	.word	0x08002e21
 8000ee0:	08002e21 	.word	0x08002e21
 8000ee4:	08002e21 	.word	0x08002e21
 8000ee8:	08002e21 	.word	0x08002e21
 8000eec:	080023d9 	.word	0x080023d9
 8000ef0:	080024c1 	.word	0x080024c1
 8000ef4:	08002561 	.word	0x08002561
 8000ef8:	08002633 	.word	0x08002633
 8000efc:	08002705 	.word	0x08002705
 8000f00:	080027b3 	.word	0x080027b3
 8000f04:	08002885 	.word	0x08002885
 8000f08:	0800296b 	.word	0x0800296b
 8000f0c:	080029f5 	.word	0x080029f5
 8000f10:	08002aef 	.word	0x08002aef
 8000f14:	08002e21 	.word	0x08002e21
 8000f18:	08002e21 	.word	0x08002e21
 8000f1c:	08002e21 	.word	0x08002e21
 8000f20:	08002e21 	.word	0x08002e21
 8000f24:	08002e21 	.word	0x08002e21
 8000f28:	08002e21 	.word	0x08002e21
 8000f2c:	08002e21 	.word	0x08002e21
 8000f30:	08000f99 	.word	0x08000f99
 8000f34:	08001075 	.word	0x08001075
 8000f38:	08001175 	.word	0x08001175
 8000f3c:	08001215 	.word	0x08001215
 8000f40:	080012e9 	.word	0x080012e9
 8000f44:	080013cd 	.word	0x080013cd
 8000f48:	08001475 	.word	0x08001475
 8000f4c:	08001551 	.word	0x08001551
 8000f50:	08001629 	.word	0x08001629
 8000f54:	0800168d 	.word	0x0800168d
 8000f58:	08001741 	.word	0x08001741
 8000f5c:	080017f1 	.word	0x080017f1
 8000f60:	0800187d 	.word	0x0800187d
 8000f64:	08001991 	.word	0x08001991
 8000f68:	08001a7d 	.word	0x08001a7d
 8000f6c:	08001b59 	.word	0x08001b59
 8000f70:	08001c05 	.word	0x08001c05
 8000f74:	08001cf5 	.word	0x08001cf5
 8000f78:	08001dc9 	.word	0x08001dc9
 8000f7c:	08001ea5 	.word	0x08001ea5
 8000f80:	08001f45 	.word	0x08001f45
 8000f84:	08001ff9 	.word	0x08001ff9
 8000f88:	080020d5 	.word	0x080020d5
 8000f8c:	080021d5 	.word	0x080021d5
 8000f90:	0800227d 	.word	0x0800227d
 8000f94:	08002301 	.word	0x08002301
	{
	case 'A':
	{
		nokia5110_SetPixel(x + 1, y + 0, 1);
 8000f98:	7dfb      	ldrb	r3, [r7, #23]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	7db9      	ldrb	r1, [r7, #22]
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff fe98 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 0, 1);
 8000fa8:	7dfb      	ldrb	r3, [r7, #23]
 8000faa:	3302      	adds	r3, #2
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	7db9      	ldrb	r1, [r7, #22]
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff fe90 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 1, 1);
 8000fb8:	7dbb      	ldrb	r3, [r7, #22]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	b2d9      	uxtb	r1, r3
 8000fbe:	7dfb      	ldrb	r3, [r7, #23]
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff fe88 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 1, 1);
 8000fc8:	7dfb      	ldrb	r3, [r7, #23]
 8000fca:	3303      	adds	r3, #3
 8000fcc:	b2d8      	uxtb	r0, r3
 8000fce:	7dbb      	ldrb	r3, [r7, #22]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	f7ff fe7e 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 2, 1);
 8000fdc:	7dbb      	ldrb	r3, [r7, #22]
 8000fde:	3302      	adds	r3, #2
 8000fe0:	b2d9      	uxtb	r1, r3
 8000fe2:	7dfb      	ldrb	r3, [r7, #23]
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff fe76 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 1, y + 2, 1);
 8000fec:	7dfb      	ldrb	r3, [r7, #23]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	b2d8      	uxtb	r0, r3
 8000ff2:	7dbb      	ldrb	r3, [r7, #22]
 8000ff4:	3302      	adds	r3, #2
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	f7ff fe6c 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 2, 1);
 8001000:	7dfb      	ldrb	r3, [r7, #23]
 8001002:	3302      	adds	r3, #2
 8001004:	b2d8      	uxtb	r0, r3
 8001006:	7dbb      	ldrb	r3, [r7, #22]
 8001008:	3302      	adds	r3, #2
 800100a:	b2db      	uxtb	r3, r3
 800100c:	2201      	movs	r2, #1
 800100e:	4619      	mov	r1, r3
 8001010:	f7ff fe62 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 2, 1);
 8001014:	7dfb      	ldrb	r3, [r7, #23]
 8001016:	3303      	adds	r3, #3
 8001018:	b2d8      	uxtb	r0, r3
 800101a:	7dbb      	ldrb	r3, [r7, #22]
 800101c:	3302      	adds	r3, #2
 800101e:	b2db      	uxtb	r3, r3
 8001020:	2201      	movs	r2, #1
 8001022:	4619      	mov	r1, r3
 8001024:	f7ff fe58 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 3, 1);
 8001028:	7dbb      	ldrb	r3, [r7, #22]
 800102a:	3303      	adds	r3, #3
 800102c:	b2d9      	uxtb	r1, r3
 800102e:	7dfb      	ldrb	r3, [r7, #23]
 8001030:	2201      	movs	r2, #1
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff fe50 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 3, 1);
 8001038:	7dfb      	ldrb	r3, [r7, #23]
 800103a:	3303      	adds	r3, #3
 800103c:	b2d8      	uxtb	r0, r3
 800103e:	7dbb      	ldrb	r3, [r7, #22]
 8001040:	3303      	adds	r3, #3
 8001042:	b2db      	uxtb	r3, r3
 8001044:	2201      	movs	r2, #1
 8001046:	4619      	mov	r1, r3
 8001048:	f7ff fe46 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 4, 1);
 800104c:	7dbb      	ldrb	r3, [r7, #22]
 800104e:	3304      	adds	r3, #4
 8001050:	b2d9      	uxtb	r1, r3
 8001052:	7dfb      	ldrb	r3, [r7, #23]
 8001054:	2201      	movs	r2, #1
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff fe3e 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 4, 1);
 800105c:	7dfb      	ldrb	r3, [r7, #23]
 800105e:	3303      	adds	r3, #3
 8001060:	b2d8      	uxtb	r0, r3
 8001062:	7dbb      	ldrb	r3, [r7, #22]
 8001064:	3304      	adds	r3, #4
 8001066:	b2db      	uxtb	r3, r3
 8001068:	2201      	movs	r2, #1
 800106a:	4619      	mov	r1, r3
 800106c:	f7ff fe34 	bl	8000cd8 <nokia5110_SetPixel>
		break;
 8001070:	f001 bed7 	b.w	8002e22 <nokia5110_WriteString+0x1fbe>

	}
	case 'B':
	{
		nokia5110_SetPixel(x + 0, y + 0, 1);
 8001074:	7db9      	ldrb	r1, [r7, #22]
 8001076:	7dfb      	ldrb	r3, [r7, #23]
 8001078:	2201      	movs	r2, #1
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff fe2c 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 1, y + 0, 1);
 8001080:	7dfb      	ldrb	r3, [r7, #23]
 8001082:	3301      	adds	r3, #1
 8001084:	b2db      	uxtb	r3, r3
 8001086:	7db9      	ldrb	r1, [r7, #22]
 8001088:	2201      	movs	r2, #1
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff fe24 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 0, 1);
 8001090:	7dfb      	ldrb	r3, [r7, #23]
 8001092:	3302      	adds	r3, #2
 8001094:	b2db      	uxtb	r3, r3
 8001096:	7db9      	ldrb	r1, [r7, #22]
 8001098:	2201      	movs	r2, #1
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff fe1c 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 1, 1);
 80010a0:	7dbb      	ldrb	r3, [r7, #22]
 80010a2:	3301      	adds	r3, #1
 80010a4:	b2d9      	uxtb	r1, r3
 80010a6:	7dfb      	ldrb	r3, [r7, #23]
 80010a8:	2201      	movs	r2, #1
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff fe14 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 1, 1);
 80010b0:	7dfb      	ldrb	r3, [r7, #23]
 80010b2:	3303      	adds	r3, #3
 80010b4:	b2d8      	uxtb	r0, r3
 80010b6:	7dbb      	ldrb	r3, [r7, #22]
 80010b8:	3301      	adds	r3, #1
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	2201      	movs	r2, #1
 80010be:	4619      	mov	r1, r3
 80010c0:	f7ff fe0a 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 2, 1);
 80010c4:	7dbb      	ldrb	r3, [r7, #22]
 80010c6:	3302      	adds	r3, #2
 80010c8:	b2d9      	uxtb	r1, r3
 80010ca:	7dfb      	ldrb	r3, [r7, #23]
 80010cc:	2201      	movs	r2, #1
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff fe02 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 1, y + 2, 1);
 80010d4:	7dfb      	ldrb	r3, [r7, #23]
 80010d6:	3301      	adds	r3, #1
 80010d8:	b2d8      	uxtb	r0, r3
 80010da:	7dbb      	ldrb	r3, [r7, #22]
 80010dc:	3302      	adds	r3, #2
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	2201      	movs	r2, #1
 80010e2:	4619      	mov	r1, r3
 80010e4:	f7ff fdf8 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 2, 1);
 80010e8:	7dfb      	ldrb	r3, [r7, #23]
 80010ea:	3302      	adds	r3, #2
 80010ec:	b2d8      	uxtb	r0, r3
 80010ee:	7dbb      	ldrb	r3, [r7, #22]
 80010f0:	3302      	adds	r3, #2
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	2201      	movs	r2, #1
 80010f6:	4619      	mov	r1, r3
 80010f8:	f7ff fdee 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 2, 1);
 80010fc:	7dfb      	ldrb	r3, [r7, #23]
 80010fe:	3303      	adds	r3, #3
 8001100:	b2d8      	uxtb	r0, r3
 8001102:	7dbb      	ldrb	r3, [r7, #22]
 8001104:	3302      	adds	r3, #2
 8001106:	b2db      	uxtb	r3, r3
 8001108:	2201      	movs	r2, #1
 800110a:	4619      	mov	r1, r3
 800110c:	f7ff fde4 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 3, 1);
 8001110:	7dbb      	ldrb	r3, [r7, #22]
 8001112:	3303      	adds	r3, #3
 8001114:	b2d9      	uxtb	r1, r3
 8001116:	7dfb      	ldrb	r3, [r7, #23]
 8001118:	2201      	movs	r2, #1
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff fddc 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 3, 1);
 8001120:	7dfb      	ldrb	r3, [r7, #23]
 8001122:	3303      	adds	r3, #3
 8001124:	b2d8      	uxtb	r0, r3
 8001126:	7dbb      	ldrb	r3, [r7, #22]
 8001128:	3303      	adds	r3, #3
 800112a:	b2db      	uxtb	r3, r3
 800112c:	2201      	movs	r2, #1
 800112e:	4619      	mov	r1, r3
 8001130:	f7ff fdd2 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 4, 1);
 8001134:	7dbb      	ldrb	r3, [r7, #22]
 8001136:	3304      	adds	r3, #4
 8001138:	b2d9      	uxtb	r1, r3
 800113a:	7dfb      	ldrb	r3, [r7, #23]
 800113c:	2201      	movs	r2, #1
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff fdca 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 1, y + 4, 1);
 8001144:	7dfb      	ldrb	r3, [r7, #23]
 8001146:	3301      	adds	r3, #1
 8001148:	b2d8      	uxtb	r0, r3
 800114a:	7dbb      	ldrb	r3, [r7, #22]
 800114c:	3304      	adds	r3, #4
 800114e:	b2db      	uxtb	r3, r3
 8001150:	2201      	movs	r2, #1
 8001152:	4619      	mov	r1, r3
 8001154:	f7ff fdc0 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 4, 1);
 8001158:	7dfb      	ldrb	r3, [r7, #23]
 800115a:	3302      	adds	r3, #2
 800115c:	b2d8      	uxtb	r0, r3
 800115e:	7dbb      	ldrb	r3, [r7, #22]
 8001160:	3304      	adds	r3, #4
 8001162:	b2db      	uxtb	r3, r3
 8001164:	2201      	movs	r2, #1
 8001166:	4619      	mov	r1, r3
 8001168:	f7ff fdb6 	bl	8000cd8 <nokia5110_SetPixel>
		break;
 800116c:	f001 be59 	b.w	8002e22 <nokia5110_WriteString+0x1fbe>
 8001170:	08004d10 	.word	0x08004d10

	}
	case 'C':
	{
		nokia5110_SetPixel(x + 1, y + 0, 1);
 8001174:	7dfb      	ldrb	r3, [r7, #23]
 8001176:	3301      	adds	r3, #1
 8001178:	b2db      	uxtb	r3, r3
 800117a:	7db9      	ldrb	r1, [r7, #22]
 800117c:	2201      	movs	r2, #1
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff fdaa 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 0, 1);
 8001184:	7dfb      	ldrb	r3, [r7, #23]
 8001186:	3302      	adds	r3, #2
 8001188:	b2db      	uxtb	r3, r3
 800118a:	7db9      	ldrb	r1, [r7, #22]
 800118c:	2201      	movs	r2, #1
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff fda2 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 0, 1);
 8001194:	7dfb      	ldrb	r3, [r7, #23]
 8001196:	3303      	adds	r3, #3
 8001198:	b2db      	uxtb	r3, r3
 800119a:	7db9      	ldrb	r1, [r7, #22]
 800119c:	2201      	movs	r2, #1
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff fd9a 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 1, 1);
 80011a4:	7dbb      	ldrb	r3, [r7, #22]
 80011a6:	3301      	adds	r3, #1
 80011a8:	b2d9      	uxtb	r1, r3
 80011aa:	7dfb      	ldrb	r3, [r7, #23]
 80011ac:	2201      	movs	r2, #1
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff fd92 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 2, 1);
 80011b4:	7dbb      	ldrb	r3, [r7, #22]
 80011b6:	3302      	adds	r3, #2
 80011b8:	b2d9      	uxtb	r1, r3
 80011ba:	7dfb      	ldrb	r3, [r7, #23]
 80011bc:	2201      	movs	r2, #1
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff fd8a 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 3, 1);
 80011c4:	7dbb      	ldrb	r3, [r7, #22]
 80011c6:	3303      	adds	r3, #3
 80011c8:	b2d9      	uxtb	r1, r3
 80011ca:	7dfb      	ldrb	r3, [r7, #23]
 80011cc:	2201      	movs	r2, #1
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff fd82 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 1, y + 4, 1);
 80011d4:	7dfb      	ldrb	r3, [r7, #23]
 80011d6:	3301      	adds	r3, #1
 80011d8:	b2d8      	uxtb	r0, r3
 80011da:	7dbb      	ldrb	r3, [r7, #22]
 80011dc:	3304      	adds	r3, #4
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	2201      	movs	r2, #1
 80011e2:	4619      	mov	r1, r3
 80011e4:	f7ff fd78 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 4, 1);
 80011e8:	7dfb      	ldrb	r3, [r7, #23]
 80011ea:	3302      	adds	r3, #2
 80011ec:	b2d8      	uxtb	r0, r3
 80011ee:	7dbb      	ldrb	r3, [r7, #22]
 80011f0:	3304      	adds	r3, #4
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	2201      	movs	r2, #1
 80011f6:	4619      	mov	r1, r3
 80011f8:	f7ff fd6e 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 4, 1);
 80011fc:	7dfb      	ldrb	r3, [r7, #23]
 80011fe:	3303      	adds	r3, #3
 8001200:	b2d8      	uxtb	r0, r3
 8001202:	7dbb      	ldrb	r3, [r7, #22]
 8001204:	3304      	adds	r3, #4
 8001206:	b2db      	uxtb	r3, r3
 8001208:	2201      	movs	r2, #1
 800120a:	4619      	mov	r1, r3
 800120c:	f7ff fd64 	bl	8000cd8 <nokia5110_SetPixel>
		break;
 8001210:	f001 be07 	b.w	8002e22 <nokia5110_WriteString+0x1fbe>
	}

	case 'D':
	{
		nokia5110_SetPixel(x + 0, y + 0, 1);
 8001214:	7db9      	ldrb	r1, [r7, #22]
 8001216:	7dfb      	ldrb	r3, [r7, #23]
 8001218:	2201      	movs	r2, #1
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff fd5c 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 1, y + 0, 1);
 8001220:	7dfb      	ldrb	r3, [r7, #23]
 8001222:	3301      	adds	r3, #1
 8001224:	b2db      	uxtb	r3, r3
 8001226:	7db9      	ldrb	r1, [r7, #22]
 8001228:	2201      	movs	r2, #1
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff fd54 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 0, 1);
 8001230:	7dfb      	ldrb	r3, [r7, #23]
 8001232:	3302      	adds	r3, #2
 8001234:	b2db      	uxtb	r3, r3
 8001236:	7db9      	ldrb	r1, [r7, #22]
 8001238:	2201      	movs	r2, #1
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff fd4c 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 1, 1);
 8001240:	7dbb      	ldrb	r3, [r7, #22]
 8001242:	3301      	adds	r3, #1
 8001244:	b2d9      	uxtb	r1, r3
 8001246:	7dfb      	ldrb	r3, [r7, #23]
 8001248:	2201      	movs	r2, #1
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff fd44 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 1, 1);
 8001250:	7dfb      	ldrb	r3, [r7, #23]
 8001252:	3303      	adds	r3, #3
 8001254:	b2d8      	uxtb	r0, r3
 8001256:	7dbb      	ldrb	r3, [r7, #22]
 8001258:	3301      	adds	r3, #1
 800125a:	b2db      	uxtb	r3, r3
 800125c:	2201      	movs	r2, #1
 800125e:	4619      	mov	r1, r3
 8001260:	f7ff fd3a 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 2, 1);
 8001264:	7dbb      	ldrb	r3, [r7, #22]
 8001266:	3302      	adds	r3, #2
 8001268:	b2d9      	uxtb	r1, r3
 800126a:	7dfb      	ldrb	r3, [r7, #23]
 800126c:	2201      	movs	r2, #1
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff fd32 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 2, 1);
 8001274:	7dfb      	ldrb	r3, [r7, #23]
 8001276:	3303      	adds	r3, #3
 8001278:	b2d8      	uxtb	r0, r3
 800127a:	7dbb      	ldrb	r3, [r7, #22]
 800127c:	3302      	adds	r3, #2
 800127e:	b2db      	uxtb	r3, r3
 8001280:	2201      	movs	r2, #1
 8001282:	4619      	mov	r1, r3
 8001284:	f7ff fd28 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 3, 1);
 8001288:	7dbb      	ldrb	r3, [r7, #22]
 800128a:	3303      	adds	r3, #3
 800128c:	b2d9      	uxtb	r1, r3
 800128e:	7dfb      	ldrb	r3, [r7, #23]
 8001290:	2201      	movs	r2, #1
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff fd20 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 3, 1);
 8001298:	7dfb      	ldrb	r3, [r7, #23]
 800129a:	3303      	adds	r3, #3
 800129c:	b2d8      	uxtb	r0, r3
 800129e:	7dbb      	ldrb	r3, [r7, #22]
 80012a0:	3303      	adds	r3, #3
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	2201      	movs	r2, #1
 80012a6:	4619      	mov	r1, r3
 80012a8:	f7ff fd16 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 4, 1);
 80012ac:	7dbb      	ldrb	r3, [r7, #22]
 80012ae:	3304      	adds	r3, #4
 80012b0:	b2d9      	uxtb	r1, r3
 80012b2:	7dfb      	ldrb	r3, [r7, #23]
 80012b4:	2201      	movs	r2, #1
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff fd0e 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 1, y + 4, 1);
 80012bc:	7dfb      	ldrb	r3, [r7, #23]
 80012be:	3301      	adds	r3, #1
 80012c0:	b2d8      	uxtb	r0, r3
 80012c2:	7dbb      	ldrb	r3, [r7, #22]
 80012c4:	3304      	adds	r3, #4
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	2201      	movs	r2, #1
 80012ca:	4619      	mov	r1, r3
 80012cc:	f7ff fd04 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 4, 1);
 80012d0:	7dfb      	ldrb	r3, [r7, #23]
 80012d2:	3302      	adds	r3, #2
 80012d4:	b2d8      	uxtb	r0, r3
 80012d6:	7dbb      	ldrb	r3, [r7, #22]
 80012d8:	3304      	adds	r3, #4
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	2201      	movs	r2, #1
 80012de:	4619      	mov	r1, r3
 80012e0:	f7ff fcfa 	bl	8000cd8 <nokia5110_SetPixel>
		break;
 80012e4:	f001 bd9d 	b.w	8002e22 <nokia5110_WriteString+0x1fbe>
	}
	case 'E':
	{
		nokia5110_SetPixel(x + 0, y + 0, 1);
 80012e8:	7db9      	ldrb	r1, [r7, #22]
 80012ea:	7dfb      	ldrb	r3, [r7, #23]
 80012ec:	2201      	movs	r2, #1
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff fcf2 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 1, y + 0, 1);
 80012f4:	7dfb      	ldrb	r3, [r7, #23]
 80012f6:	3301      	adds	r3, #1
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	7db9      	ldrb	r1, [r7, #22]
 80012fc:	2201      	movs	r2, #1
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff fcea 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 0, 1);
 8001304:	7dfb      	ldrb	r3, [r7, #23]
 8001306:	3302      	adds	r3, #2
 8001308:	b2db      	uxtb	r3, r3
 800130a:	7db9      	ldrb	r1, [r7, #22]
 800130c:	2201      	movs	r2, #1
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff fce2 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 0, 1);
 8001314:	7dfb      	ldrb	r3, [r7, #23]
 8001316:	3303      	adds	r3, #3
 8001318:	b2db      	uxtb	r3, r3
 800131a:	7db9      	ldrb	r1, [r7, #22]
 800131c:	2201      	movs	r2, #1
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff fcda 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 1, 1);
 8001324:	7dbb      	ldrb	r3, [r7, #22]
 8001326:	3301      	adds	r3, #1
 8001328:	b2d9      	uxtb	r1, r3
 800132a:	7dfb      	ldrb	r3, [r7, #23]
 800132c:	2201      	movs	r2, #1
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff fcd2 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 2, 1);
 8001334:	7dbb      	ldrb	r3, [r7, #22]
 8001336:	3302      	adds	r3, #2
 8001338:	b2d9      	uxtb	r1, r3
 800133a:	7dfb      	ldrb	r3, [r7, #23]
 800133c:	2201      	movs	r2, #1
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff fcca 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 1, y + 2, 1);
 8001344:	7dfb      	ldrb	r3, [r7, #23]
 8001346:	3301      	adds	r3, #1
 8001348:	b2d8      	uxtb	r0, r3
 800134a:	7dbb      	ldrb	r3, [r7, #22]
 800134c:	3302      	adds	r3, #2
 800134e:	b2db      	uxtb	r3, r3
 8001350:	2201      	movs	r2, #1
 8001352:	4619      	mov	r1, r3
 8001354:	f7ff fcc0 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 2, 1);
 8001358:	7dfb      	ldrb	r3, [r7, #23]
 800135a:	3302      	adds	r3, #2
 800135c:	b2d8      	uxtb	r0, r3
 800135e:	7dbb      	ldrb	r3, [r7, #22]
 8001360:	3302      	adds	r3, #2
 8001362:	b2db      	uxtb	r3, r3
 8001364:	2201      	movs	r2, #1
 8001366:	4619      	mov	r1, r3
 8001368:	f7ff fcb6 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 3, 1);
 800136c:	7dbb      	ldrb	r3, [r7, #22]
 800136e:	3303      	adds	r3, #3
 8001370:	b2d9      	uxtb	r1, r3
 8001372:	7dfb      	ldrb	r3, [r7, #23]
 8001374:	2201      	movs	r2, #1
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff fcae 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 4, 1);
 800137c:	7dbb      	ldrb	r3, [r7, #22]
 800137e:	3304      	adds	r3, #4
 8001380:	b2d9      	uxtb	r1, r3
 8001382:	7dfb      	ldrb	r3, [r7, #23]
 8001384:	2201      	movs	r2, #1
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff fca6 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 1, y + 4, 1);
 800138c:	7dfb      	ldrb	r3, [r7, #23]
 800138e:	3301      	adds	r3, #1
 8001390:	b2d8      	uxtb	r0, r3
 8001392:	7dbb      	ldrb	r3, [r7, #22]
 8001394:	3304      	adds	r3, #4
 8001396:	b2db      	uxtb	r3, r3
 8001398:	2201      	movs	r2, #1
 800139a:	4619      	mov	r1, r3
 800139c:	f7ff fc9c 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 4, 1);
 80013a0:	7dfb      	ldrb	r3, [r7, #23]
 80013a2:	3302      	adds	r3, #2
 80013a4:	b2d8      	uxtb	r0, r3
 80013a6:	7dbb      	ldrb	r3, [r7, #22]
 80013a8:	3304      	adds	r3, #4
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	2201      	movs	r2, #1
 80013ae:	4619      	mov	r1, r3
 80013b0:	f7ff fc92 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 4, 1);
 80013b4:	7dfb      	ldrb	r3, [r7, #23]
 80013b6:	3303      	adds	r3, #3
 80013b8:	b2d8      	uxtb	r0, r3
 80013ba:	7dbb      	ldrb	r3, [r7, #22]
 80013bc:	3304      	adds	r3, #4
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	2201      	movs	r2, #1
 80013c2:	4619      	mov	r1, r3
 80013c4:	f7ff fc88 	bl	8000cd8 <nokia5110_SetPixel>
		break;
 80013c8:	f001 bd2b 	b.w	8002e22 <nokia5110_WriteString+0x1fbe>
	}
	case 'F':
	{
		nokia5110_SetPixel(x + 0, y + 0, 1);
 80013cc:	7db9      	ldrb	r1, [r7, #22]
 80013ce:	7dfb      	ldrb	r3, [r7, #23]
 80013d0:	2201      	movs	r2, #1
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff fc80 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 1, 1);
 80013d8:	7dbb      	ldrb	r3, [r7, #22]
 80013da:	3301      	adds	r3, #1
 80013dc:	b2d9      	uxtb	r1, r3
 80013de:	7dfb      	ldrb	r3, [r7, #23]
 80013e0:	2201      	movs	r2, #1
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff fc78 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 2, 1);
 80013e8:	7dbb      	ldrb	r3, [r7, #22]
 80013ea:	3302      	adds	r3, #2
 80013ec:	b2d9      	uxtb	r1, r3
 80013ee:	7dfb      	ldrb	r3, [r7, #23]
 80013f0:	2201      	movs	r2, #1
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff fc70 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 3, 1);
 80013f8:	7dbb      	ldrb	r3, [r7, #22]
 80013fa:	3303      	adds	r3, #3
 80013fc:	b2d9      	uxtb	r1, r3
 80013fe:	7dfb      	ldrb	r3, [r7, #23]
 8001400:	2201      	movs	r2, #1
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff fc68 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 4, 1);
 8001408:	7dbb      	ldrb	r3, [r7, #22]
 800140a:	3304      	adds	r3, #4
 800140c:	b2d9      	uxtb	r1, r3
 800140e:	7dfb      	ldrb	r3, [r7, #23]
 8001410:	2201      	movs	r2, #1
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff fc60 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 1, y + 0, 1);
 8001418:	7dfb      	ldrb	r3, [r7, #23]
 800141a:	3301      	adds	r3, #1
 800141c:	b2db      	uxtb	r3, r3
 800141e:	7db9      	ldrb	r1, [r7, #22]
 8001420:	2201      	movs	r2, #1
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff fc58 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 0, 1);
 8001428:	7dfb      	ldrb	r3, [r7, #23]
 800142a:	3302      	adds	r3, #2
 800142c:	b2db      	uxtb	r3, r3
 800142e:	7db9      	ldrb	r1, [r7, #22]
 8001430:	2201      	movs	r2, #1
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff fc50 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 0, 1);
 8001438:	7dfb      	ldrb	r3, [r7, #23]
 800143a:	3303      	adds	r3, #3
 800143c:	b2db      	uxtb	r3, r3
 800143e:	7db9      	ldrb	r1, [r7, #22]
 8001440:	2201      	movs	r2, #1
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff fc48 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 1, y + 2, 1);
 8001448:	7dfb      	ldrb	r3, [r7, #23]
 800144a:	3301      	adds	r3, #1
 800144c:	b2d8      	uxtb	r0, r3
 800144e:	7dbb      	ldrb	r3, [r7, #22]
 8001450:	3302      	adds	r3, #2
 8001452:	b2db      	uxtb	r3, r3
 8001454:	2201      	movs	r2, #1
 8001456:	4619      	mov	r1, r3
 8001458:	f7ff fc3e 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 2, 1);
 800145c:	7dfb      	ldrb	r3, [r7, #23]
 800145e:	3302      	adds	r3, #2
 8001460:	b2d8      	uxtb	r0, r3
 8001462:	7dbb      	ldrb	r3, [r7, #22]
 8001464:	3302      	adds	r3, #2
 8001466:	b2db      	uxtb	r3, r3
 8001468:	2201      	movs	r2, #1
 800146a:	4619      	mov	r1, r3
 800146c:	f7ff fc34 	bl	8000cd8 <nokia5110_SetPixel>
		break;
 8001470:	f001 bcd7 	b.w	8002e22 <nokia5110_WriteString+0x1fbe>
	}
	case 'G':
	{
		nokia5110_SetPixel(x + 1, y + 0, 1);
 8001474:	7dfb      	ldrb	r3, [r7, #23]
 8001476:	3301      	adds	r3, #1
 8001478:	b2db      	uxtb	r3, r3
 800147a:	7db9      	ldrb	r1, [r7, #22]
 800147c:	2201      	movs	r2, #1
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff fc2a 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 0, 1);
 8001484:	7dfb      	ldrb	r3, [r7, #23]
 8001486:	3302      	adds	r3, #2
 8001488:	b2db      	uxtb	r3, r3
 800148a:	7db9      	ldrb	r1, [r7, #22]
 800148c:	2201      	movs	r2, #1
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff fc22 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 0, 1);
 8001494:	7dfb      	ldrb	r3, [r7, #23]
 8001496:	3303      	adds	r3, #3
 8001498:	b2db      	uxtb	r3, r3
 800149a:	7db9      	ldrb	r1, [r7, #22]
 800149c:	2201      	movs	r2, #1
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff fc1a 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 1, 1);
 80014a4:	7dbb      	ldrb	r3, [r7, #22]
 80014a6:	3301      	adds	r3, #1
 80014a8:	b2d9      	uxtb	r1, r3
 80014aa:	7dfb      	ldrb	r3, [r7, #23]
 80014ac:	2201      	movs	r2, #1
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff fc12 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 2, 1);
 80014b4:	7dbb      	ldrb	r3, [r7, #22]
 80014b6:	3302      	adds	r3, #2
 80014b8:	b2d9      	uxtb	r1, r3
 80014ba:	7dfb      	ldrb	r3, [r7, #23]
 80014bc:	2201      	movs	r2, #1
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff fc0a 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 2, 1);
 80014c4:	7dfb      	ldrb	r3, [r7, #23]
 80014c6:	3302      	adds	r3, #2
 80014c8:	b2d8      	uxtb	r0, r3
 80014ca:	7dbb      	ldrb	r3, [r7, #22]
 80014cc:	3302      	adds	r3, #2
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	2201      	movs	r2, #1
 80014d2:	4619      	mov	r1, r3
 80014d4:	f7ff fc00 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 2, 1);
 80014d8:	7dfb      	ldrb	r3, [r7, #23]
 80014da:	3303      	adds	r3, #3
 80014dc:	b2d8      	uxtb	r0, r3
 80014de:	7dbb      	ldrb	r3, [r7, #22]
 80014e0:	3302      	adds	r3, #2
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	2201      	movs	r2, #1
 80014e6:	4619      	mov	r1, r3
 80014e8:	f7ff fbf6 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 3, 1);
 80014ec:	7dbb      	ldrb	r3, [r7, #22]
 80014ee:	3303      	adds	r3, #3
 80014f0:	b2d9      	uxtb	r1, r3
 80014f2:	7dfb      	ldrb	r3, [r7, #23]
 80014f4:	2201      	movs	r2, #1
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff fbee 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 3, 1);
 80014fc:	7dfb      	ldrb	r3, [r7, #23]
 80014fe:	3303      	adds	r3, #3
 8001500:	b2d8      	uxtb	r0, r3
 8001502:	7dbb      	ldrb	r3, [r7, #22]
 8001504:	3303      	adds	r3, #3
 8001506:	b2db      	uxtb	r3, r3
 8001508:	2201      	movs	r2, #1
 800150a:	4619      	mov	r1, r3
 800150c:	f7ff fbe4 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 1, y + 4, 1);
 8001510:	7dfb      	ldrb	r3, [r7, #23]
 8001512:	3301      	adds	r3, #1
 8001514:	b2d8      	uxtb	r0, r3
 8001516:	7dbb      	ldrb	r3, [r7, #22]
 8001518:	3304      	adds	r3, #4
 800151a:	b2db      	uxtb	r3, r3
 800151c:	2201      	movs	r2, #1
 800151e:	4619      	mov	r1, r3
 8001520:	f7ff fbda 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 4, 1);
 8001524:	7dfb      	ldrb	r3, [r7, #23]
 8001526:	3302      	adds	r3, #2
 8001528:	b2d8      	uxtb	r0, r3
 800152a:	7dbb      	ldrb	r3, [r7, #22]
 800152c:	3304      	adds	r3, #4
 800152e:	b2db      	uxtb	r3, r3
 8001530:	2201      	movs	r2, #1
 8001532:	4619      	mov	r1, r3
 8001534:	f7ff fbd0 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 4, 1);
 8001538:	7dfb      	ldrb	r3, [r7, #23]
 800153a:	3303      	adds	r3, #3
 800153c:	b2d8      	uxtb	r0, r3
 800153e:	7dbb      	ldrb	r3, [r7, #22]
 8001540:	3304      	adds	r3, #4
 8001542:	b2db      	uxtb	r3, r3
 8001544:	2201      	movs	r2, #1
 8001546:	4619      	mov	r1, r3
 8001548:	f7ff fbc6 	bl	8000cd8 <nokia5110_SetPixel>
		break;
 800154c:	f001 bc69 	b.w	8002e22 <nokia5110_WriteString+0x1fbe>
	}
	case 'H':
	{
		nokia5110_SetPixel(x + 0, y + 0, 1);
 8001550:	7db9      	ldrb	r1, [r7, #22]
 8001552:	7dfb      	ldrb	r3, [r7, #23]
 8001554:	2201      	movs	r2, #1
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff fbbe 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 0, 1);
 800155c:	7dfb      	ldrb	r3, [r7, #23]
 800155e:	3303      	adds	r3, #3
 8001560:	b2db      	uxtb	r3, r3
 8001562:	7db9      	ldrb	r1, [r7, #22]
 8001564:	2201      	movs	r2, #1
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff fbb6 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 1, 1);
 800156c:	7dbb      	ldrb	r3, [r7, #22]
 800156e:	3301      	adds	r3, #1
 8001570:	b2d9      	uxtb	r1, r3
 8001572:	7dfb      	ldrb	r3, [r7, #23]
 8001574:	2201      	movs	r2, #1
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff fbae 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 1, 1);
 800157c:	7dfb      	ldrb	r3, [r7, #23]
 800157e:	3303      	adds	r3, #3
 8001580:	b2d8      	uxtb	r0, r3
 8001582:	7dbb      	ldrb	r3, [r7, #22]
 8001584:	3301      	adds	r3, #1
 8001586:	b2db      	uxtb	r3, r3
 8001588:	2201      	movs	r2, #1
 800158a:	4619      	mov	r1, r3
 800158c:	f7ff fba4 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 2, 1);
 8001590:	7dbb      	ldrb	r3, [r7, #22]
 8001592:	3302      	adds	r3, #2
 8001594:	b2d9      	uxtb	r1, r3
 8001596:	7dfb      	ldrb	r3, [r7, #23]
 8001598:	2201      	movs	r2, #1
 800159a:	4618      	mov	r0, r3
 800159c:	f7ff fb9c 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 1, y + 2, 1);
 80015a0:	7dfb      	ldrb	r3, [r7, #23]
 80015a2:	3301      	adds	r3, #1
 80015a4:	b2d8      	uxtb	r0, r3
 80015a6:	7dbb      	ldrb	r3, [r7, #22]
 80015a8:	3302      	adds	r3, #2
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	2201      	movs	r2, #1
 80015ae:	4619      	mov	r1, r3
 80015b0:	f7ff fb92 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 2, 1);
 80015b4:	7dfb      	ldrb	r3, [r7, #23]
 80015b6:	3302      	adds	r3, #2
 80015b8:	b2d8      	uxtb	r0, r3
 80015ba:	7dbb      	ldrb	r3, [r7, #22]
 80015bc:	3302      	adds	r3, #2
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	2201      	movs	r2, #1
 80015c2:	4619      	mov	r1, r3
 80015c4:	f7ff fb88 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 2, 1);
 80015c8:	7dfb      	ldrb	r3, [r7, #23]
 80015ca:	3303      	adds	r3, #3
 80015cc:	b2d8      	uxtb	r0, r3
 80015ce:	7dbb      	ldrb	r3, [r7, #22]
 80015d0:	3302      	adds	r3, #2
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	2201      	movs	r2, #1
 80015d6:	4619      	mov	r1, r3
 80015d8:	f7ff fb7e 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 3, 1);
 80015dc:	7dbb      	ldrb	r3, [r7, #22]
 80015de:	3303      	adds	r3, #3
 80015e0:	b2d9      	uxtb	r1, r3
 80015e2:	7dfb      	ldrb	r3, [r7, #23]
 80015e4:	2201      	movs	r2, #1
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7ff fb76 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 3, 1);
 80015ec:	7dfb      	ldrb	r3, [r7, #23]
 80015ee:	3303      	adds	r3, #3
 80015f0:	b2d8      	uxtb	r0, r3
 80015f2:	7dbb      	ldrb	r3, [r7, #22]
 80015f4:	3303      	adds	r3, #3
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	2201      	movs	r2, #1
 80015fa:	4619      	mov	r1, r3
 80015fc:	f7ff fb6c 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 4, 1);
 8001600:	7dbb      	ldrb	r3, [r7, #22]
 8001602:	3304      	adds	r3, #4
 8001604:	b2d9      	uxtb	r1, r3
 8001606:	7dfb      	ldrb	r3, [r7, #23]
 8001608:	2201      	movs	r2, #1
 800160a:	4618      	mov	r0, r3
 800160c:	f7ff fb64 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 4, 1);
 8001610:	7dfb      	ldrb	r3, [r7, #23]
 8001612:	3303      	adds	r3, #3
 8001614:	b2d8      	uxtb	r0, r3
 8001616:	7dbb      	ldrb	r3, [r7, #22]
 8001618:	3304      	adds	r3, #4
 800161a:	b2db      	uxtb	r3, r3
 800161c:	2201      	movs	r2, #1
 800161e:	4619      	mov	r1, r3
 8001620:	f7ff fb5a 	bl	8000cd8 <nokia5110_SetPixel>
		break;
 8001624:	f001 bbfd 	b.w	8002e22 <nokia5110_WriteString+0x1fbe>
	}
	case 'I':
	{
	    nokia5110_SetPixel(x + 2, y + 0, 1);
 8001628:	7dfb      	ldrb	r3, [r7, #23]
 800162a:	3302      	adds	r3, #2
 800162c:	b2db      	uxtb	r3, r3
 800162e:	7db9      	ldrb	r1, [r7, #22]
 8001630:	2201      	movs	r2, #1
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff fb50 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 2, y + 1, 1);
 8001638:	7dfb      	ldrb	r3, [r7, #23]
 800163a:	3302      	adds	r3, #2
 800163c:	b2d8      	uxtb	r0, r3
 800163e:	7dbb      	ldrb	r3, [r7, #22]
 8001640:	3301      	adds	r3, #1
 8001642:	b2db      	uxtb	r3, r3
 8001644:	2201      	movs	r2, #1
 8001646:	4619      	mov	r1, r3
 8001648:	f7ff fb46 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 2, y + 2, 1);
 800164c:	7dfb      	ldrb	r3, [r7, #23]
 800164e:	3302      	adds	r3, #2
 8001650:	b2d8      	uxtb	r0, r3
 8001652:	7dbb      	ldrb	r3, [r7, #22]
 8001654:	3302      	adds	r3, #2
 8001656:	b2db      	uxtb	r3, r3
 8001658:	2201      	movs	r2, #1
 800165a:	4619      	mov	r1, r3
 800165c:	f7ff fb3c 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 2, y + 3, 1);
 8001660:	7dfb      	ldrb	r3, [r7, #23]
 8001662:	3302      	adds	r3, #2
 8001664:	b2d8      	uxtb	r0, r3
 8001666:	7dbb      	ldrb	r3, [r7, #22]
 8001668:	3303      	adds	r3, #3
 800166a:	b2db      	uxtb	r3, r3
 800166c:	2201      	movs	r2, #1
 800166e:	4619      	mov	r1, r3
 8001670:	f7ff fb32 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 2, y + 4, 1);
 8001674:	7dfb      	ldrb	r3, [r7, #23]
 8001676:	3302      	adds	r3, #2
 8001678:	b2d8      	uxtb	r0, r3
 800167a:	7dbb      	ldrb	r3, [r7, #22]
 800167c:	3304      	adds	r3, #4
 800167e:	b2db      	uxtb	r3, r3
 8001680:	2201      	movs	r2, #1
 8001682:	4619      	mov	r1, r3
 8001684:	f7ff fb28 	bl	8000cd8 <nokia5110_SetPixel>
	    break;
 8001688:	f001 bbcb 	b.w	8002e22 <nokia5110_WriteString+0x1fbe>
	}
	case 'J':
	{
		nokia5110_SetPixel(x + 0, y + 0, 1);
 800168c:	7db9      	ldrb	r1, [r7, #22]
 800168e:	7dfb      	ldrb	r3, [r7, #23]
 8001690:	2201      	movs	r2, #1
 8001692:	4618      	mov	r0, r3
 8001694:	f7ff fb20 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 1, y + 0, 1);
 8001698:	7dfb      	ldrb	r3, [r7, #23]
 800169a:	3301      	adds	r3, #1
 800169c:	b2db      	uxtb	r3, r3
 800169e:	7db9      	ldrb	r1, [r7, #22]
 80016a0:	2201      	movs	r2, #1
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff fb18 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 0, 1);
 80016a8:	7dfb      	ldrb	r3, [r7, #23]
 80016aa:	3302      	adds	r3, #2
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	7db9      	ldrb	r1, [r7, #22]
 80016b0:	2201      	movs	r2, #1
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff fb10 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 0, 1);
 80016b8:	7dfb      	ldrb	r3, [r7, #23]
 80016ba:	3303      	adds	r3, #3
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	7db9      	ldrb	r1, [r7, #22]
 80016c0:	2201      	movs	r2, #1
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff fb08 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 1, 1);
 80016c8:	7dfb      	ldrb	r3, [r7, #23]
 80016ca:	3303      	adds	r3, #3
 80016cc:	b2d8      	uxtb	r0, r3
 80016ce:	7dbb      	ldrb	r3, [r7, #22]
 80016d0:	3301      	adds	r3, #1
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	2201      	movs	r2, #1
 80016d6:	4619      	mov	r1, r3
 80016d8:	f7ff fafe 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 2, 1);
 80016dc:	7dfb      	ldrb	r3, [r7, #23]
 80016de:	3303      	adds	r3, #3
 80016e0:	b2d8      	uxtb	r0, r3
 80016e2:	7dbb      	ldrb	r3, [r7, #22]
 80016e4:	3302      	adds	r3, #2
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	2201      	movs	r2, #1
 80016ea:	4619      	mov	r1, r3
 80016ec:	f7ff faf4 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 3, 1);
 80016f0:	7dbb      	ldrb	r3, [r7, #22]
 80016f2:	3303      	adds	r3, #3
 80016f4:	b2d9      	uxtb	r1, r3
 80016f6:	7dfb      	ldrb	r3, [r7, #23]
 80016f8:	2201      	movs	r2, #1
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7ff faec 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 3, 1);
 8001700:	7dfb      	ldrb	r3, [r7, #23]
 8001702:	3303      	adds	r3, #3
 8001704:	b2d8      	uxtb	r0, r3
 8001706:	7dbb      	ldrb	r3, [r7, #22]
 8001708:	3303      	adds	r3, #3
 800170a:	b2db      	uxtb	r3, r3
 800170c:	2201      	movs	r2, #1
 800170e:	4619      	mov	r1, r3
 8001710:	f7ff fae2 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 1, y + 4, 1);
 8001714:	7dfb      	ldrb	r3, [r7, #23]
 8001716:	3301      	adds	r3, #1
 8001718:	b2d8      	uxtb	r0, r3
 800171a:	7dbb      	ldrb	r3, [r7, #22]
 800171c:	3304      	adds	r3, #4
 800171e:	b2db      	uxtb	r3, r3
 8001720:	2201      	movs	r2, #1
 8001722:	4619      	mov	r1, r3
 8001724:	f7ff fad8 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 4, 1);
 8001728:	7dfb      	ldrb	r3, [r7, #23]
 800172a:	3302      	adds	r3, #2
 800172c:	b2d8      	uxtb	r0, r3
 800172e:	7dbb      	ldrb	r3, [r7, #22]
 8001730:	3304      	adds	r3, #4
 8001732:	b2db      	uxtb	r3, r3
 8001734:	2201      	movs	r2, #1
 8001736:	4619      	mov	r1, r3
 8001738:	f7ff face 	bl	8000cd8 <nokia5110_SetPixel>
		break;
 800173c:	f001 bb71 	b.w	8002e22 <nokia5110_WriteString+0x1fbe>
	}
	case 'K':
	{
		nokia5110_SetPixel(x + 0, y + 0, 1);
 8001740:	7db9      	ldrb	r1, [r7, #22]
 8001742:	7dfb      	ldrb	r3, [r7, #23]
 8001744:	2201      	movs	r2, #1
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff fac6 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 1, 1);
 800174c:	7dbb      	ldrb	r3, [r7, #22]
 800174e:	3301      	adds	r3, #1
 8001750:	b2d9      	uxtb	r1, r3
 8001752:	7dfb      	ldrb	r3, [r7, #23]
 8001754:	2201      	movs	r2, #1
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff fabe 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 2, 1);
 800175c:	7dbb      	ldrb	r3, [r7, #22]
 800175e:	3302      	adds	r3, #2
 8001760:	b2d9      	uxtb	r1, r3
 8001762:	7dfb      	ldrb	r3, [r7, #23]
 8001764:	2201      	movs	r2, #1
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff fab6 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 3, 1);
 800176c:	7dbb      	ldrb	r3, [r7, #22]
 800176e:	3303      	adds	r3, #3
 8001770:	b2d9      	uxtb	r1, r3
 8001772:	7dfb      	ldrb	r3, [r7, #23]
 8001774:	2201      	movs	r2, #1
 8001776:	4618      	mov	r0, r3
 8001778:	f7ff faae 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 4, 1);
 800177c:	7dbb      	ldrb	r3, [r7, #22]
 800177e:	3304      	adds	r3, #4
 8001780:	b2d9      	uxtb	r1, r3
 8001782:	7dfb      	ldrb	r3, [r7, #23]
 8001784:	2201      	movs	r2, #1
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff faa6 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 1, y + 2, 1);
 800178c:	7dfb      	ldrb	r3, [r7, #23]
 800178e:	3301      	adds	r3, #1
 8001790:	b2d8      	uxtb	r0, r3
 8001792:	7dbb      	ldrb	r3, [r7, #22]
 8001794:	3302      	adds	r3, #2
 8001796:	b2db      	uxtb	r3, r3
 8001798:	2201      	movs	r2, #1
 800179a:	4619      	mov	r1, r3
 800179c:	f7ff fa9c 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 1, 1);
 80017a0:	7dfb      	ldrb	r3, [r7, #23]
 80017a2:	3302      	adds	r3, #2
 80017a4:	b2d8      	uxtb	r0, r3
 80017a6:	7dbb      	ldrb	r3, [r7, #22]
 80017a8:	3301      	adds	r3, #1
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	2201      	movs	r2, #1
 80017ae:	4619      	mov	r1, r3
 80017b0:	f7ff fa92 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 3, 1);
 80017b4:	7dfb      	ldrb	r3, [r7, #23]
 80017b6:	3302      	adds	r3, #2
 80017b8:	b2d8      	uxtb	r0, r3
 80017ba:	7dbb      	ldrb	r3, [r7, #22]
 80017bc:	3303      	adds	r3, #3
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	2201      	movs	r2, #1
 80017c2:	4619      	mov	r1, r3
 80017c4:	f7ff fa88 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 0, 1);
 80017c8:	7dfb      	ldrb	r3, [r7, #23]
 80017ca:	3303      	adds	r3, #3
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	7db9      	ldrb	r1, [r7, #22]
 80017d0:	2201      	movs	r2, #1
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff fa80 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 4, 1);
 80017d8:	7dfb      	ldrb	r3, [r7, #23]
 80017da:	3303      	adds	r3, #3
 80017dc:	b2d8      	uxtb	r0, r3
 80017de:	7dbb      	ldrb	r3, [r7, #22]
 80017e0:	3304      	adds	r3, #4
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	2201      	movs	r2, #1
 80017e6:	4619      	mov	r1, r3
 80017e8:	f7ff fa76 	bl	8000cd8 <nokia5110_SetPixel>
		break;
 80017ec:	f001 bb19 	b.w	8002e22 <nokia5110_WriteString+0x1fbe>
	}
	case 'L':
	{
		nokia5110_SetPixel(x + 0, y + 0, 1);
 80017f0:	7db9      	ldrb	r1, [r7, #22]
 80017f2:	7dfb      	ldrb	r3, [r7, #23]
 80017f4:	2201      	movs	r2, #1
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff fa6e 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 1, 1);
 80017fc:	7dbb      	ldrb	r3, [r7, #22]
 80017fe:	3301      	adds	r3, #1
 8001800:	b2d9      	uxtb	r1, r3
 8001802:	7dfb      	ldrb	r3, [r7, #23]
 8001804:	2201      	movs	r2, #1
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff fa66 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 2, 1);
 800180c:	7dbb      	ldrb	r3, [r7, #22]
 800180e:	3302      	adds	r3, #2
 8001810:	b2d9      	uxtb	r1, r3
 8001812:	7dfb      	ldrb	r3, [r7, #23]
 8001814:	2201      	movs	r2, #1
 8001816:	4618      	mov	r0, r3
 8001818:	f7ff fa5e 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 3, 1);
 800181c:	7dbb      	ldrb	r3, [r7, #22]
 800181e:	3303      	adds	r3, #3
 8001820:	b2d9      	uxtb	r1, r3
 8001822:	7dfb      	ldrb	r3, [r7, #23]
 8001824:	2201      	movs	r2, #1
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff fa56 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 4, 1);
 800182c:	7dbb      	ldrb	r3, [r7, #22]
 800182e:	3304      	adds	r3, #4
 8001830:	b2d9      	uxtb	r1, r3
 8001832:	7dfb      	ldrb	r3, [r7, #23]
 8001834:	2201      	movs	r2, #1
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff fa4e 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 1, y + 4, 1);
 800183c:	7dfb      	ldrb	r3, [r7, #23]
 800183e:	3301      	adds	r3, #1
 8001840:	b2d8      	uxtb	r0, r3
 8001842:	7dbb      	ldrb	r3, [r7, #22]
 8001844:	3304      	adds	r3, #4
 8001846:	b2db      	uxtb	r3, r3
 8001848:	2201      	movs	r2, #1
 800184a:	4619      	mov	r1, r3
 800184c:	f7ff fa44 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 4, 1);
 8001850:	7dfb      	ldrb	r3, [r7, #23]
 8001852:	3302      	adds	r3, #2
 8001854:	b2d8      	uxtb	r0, r3
 8001856:	7dbb      	ldrb	r3, [r7, #22]
 8001858:	3304      	adds	r3, #4
 800185a:	b2db      	uxtb	r3, r3
 800185c:	2201      	movs	r2, #1
 800185e:	4619      	mov	r1, r3
 8001860:	f7ff fa3a 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 4, 1);
 8001864:	7dfb      	ldrb	r3, [r7, #23]
 8001866:	3303      	adds	r3, #3
 8001868:	b2d8      	uxtb	r0, r3
 800186a:	7dbb      	ldrb	r3, [r7, #22]
 800186c:	3304      	adds	r3, #4
 800186e:	b2db      	uxtb	r3, r3
 8001870:	2201      	movs	r2, #1
 8001872:	4619      	mov	r1, r3
 8001874:	f7ff fa30 	bl	8000cd8 <nokia5110_SetPixel>
		break;
 8001878:	f001 bad3 	b.w	8002e22 <nokia5110_WriteString+0x1fbe>
	}
	case 'M':
	{
		nokia5110_SetPixel(x + 0, y + 0, 1);
 800187c:	7db9      	ldrb	r1, [r7, #22]
 800187e:	7dfb      	ldrb	r3, [r7, #23]
 8001880:	2201      	movs	r2, #1
 8001882:	4618      	mov	r0, r3
 8001884:	f7ff fa28 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 1, 1);
 8001888:	7dbb      	ldrb	r3, [r7, #22]
 800188a:	3301      	adds	r3, #1
 800188c:	b2d9      	uxtb	r1, r3
 800188e:	7dfb      	ldrb	r3, [r7, #23]
 8001890:	2201      	movs	r2, #1
 8001892:	4618      	mov	r0, r3
 8001894:	f7ff fa20 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 2, 1);
 8001898:	7dbb      	ldrb	r3, [r7, #22]
 800189a:	3302      	adds	r3, #2
 800189c:	b2d9      	uxtb	r1, r3
 800189e:	7dfb      	ldrb	r3, [r7, #23]
 80018a0:	2201      	movs	r2, #1
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff fa18 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 3, 1);
 80018a8:	7dbb      	ldrb	r3, [r7, #22]
 80018aa:	3303      	adds	r3, #3
 80018ac:	b2d9      	uxtb	r1, r3
 80018ae:	7dfb      	ldrb	r3, [r7, #23]
 80018b0:	2201      	movs	r2, #1
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7ff fa10 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 4, 1);
 80018b8:	7dbb      	ldrb	r3, [r7, #22]
 80018ba:	3304      	adds	r3, #4
 80018bc:	b2d9      	uxtb	r1, r3
 80018be:	7dfb      	ldrb	r3, [r7, #23]
 80018c0:	2201      	movs	r2, #1
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff fa08 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 6, y + 0, 1);
 80018c8:	7dfb      	ldrb	r3, [r7, #23]
 80018ca:	3306      	adds	r3, #6
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	7db9      	ldrb	r1, [r7, #22]
 80018d0:	2201      	movs	r2, #1
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7ff fa00 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 6, y + 1, 1);
 80018d8:	7dfb      	ldrb	r3, [r7, #23]
 80018da:	3306      	adds	r3, #6
 80018dc:	b2d8      	uxtb	r0, r3
 80018de:	7dbb      	ldrb	r3, [r7, #22]
 80018e0:	3301      	adds	r3, #1
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	2201      	movs	r2, #1
 80018e6:	4619      	mov	r1, r3
 80018e8:	f7ff f9f6 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 6, y + 2, 1);
 80018ec:	7dfb      	ldrb	r3, [r7, #23]
 80018ee:	3306      	adds	r3, #6
 80018f0:	b2d8      	uxtb	r0, r3
 80018f2:	7dbb      	ldrb	r3, [r7, #22]
 80018f4:	3302      	adds	r3, #2
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	2201      	movs	r2, #1
 80018fa:	4619      	mov	r1, r3
 80018fc:	f7ff f9ec 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 6, y + 3, 1);
 8001900:	7dfb      	ldrb	r3, [r7, #23]
 8001902:	3306      	adds	r3, #6
 8001904:	b2d8      	uxtb	r0, r3
 8001906:	7dbb      	ldrb	r3, [r7, #22]
 8001908:	3303      	adds	r3, #3
 800190a:	b2db      	uxtb	r3, r3
 800190c:	2201      	movs	r2, #1
 800190e:	4619      	mov	r1, r3
 8001910:	f7ff f9e2 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 6, y + 4, 1);
 8001914:	7dfb      	ldrb	r3, [r7, #23]
 8001916:	3306      	adds	r3, #6
 8001918:	b2d8      	uxtb	r0, r3
 800191a:	7dbb      	ldrb	r3, [r7, #22]
 800191c:	3304      	adds	r3, #4
 800191e:	b2db      	uxtb	r3, r3
 8001920:	2201      	movs	r2, #1
 8001922:	4619      	mov	r1, r3
 8001924:	f7ff f9d8 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 1, y + 1, 1);
 8001928:	7dfb      	ldrb	r3, [r7, #23]
 800192a:	3301      	adds	r3, #1
 800192c:	b2d8      	uxtb	r0, r3
 800192e:	7dbb      	ldrb	r3, [r7, #22]
 8001930:	3301      	adds	r3, #1
 8001932:	b2db      	uxtb	r3, r3
 8001934:	2201      	movs	r2, #1
 8001936:	4619      	mov	r1, r3
 8001938:	f7ff f9ce 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 5, y + 1, 1);
 800193c:	7dfb      	ldrb	r3, [r7, #23]
 800193e:	3305      	adds	r3, #5
 8001940:	b2d8      	uxtb	r0, r3
 8001942:	7dbb      	ldrb	r3, [r7, #22]
 8001944:	3301      	adds	r3, #1
 8001946:	b2db      	uxtb	r3, r3
 8001948:	2201      	movs	r2, #1
 800194a:	4619      	mov	r1, r3
 800194c:	f7ff f9c4 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 2, 1);
 8001950:	7dfb      	ldrb	r3, [r7, #23]
 8001952:	3302      	adds	r3, #2
 8001954:	b2d8      	uxtb	r0, r3
 8001956:	7dbb      	ldrb	r3, [r7, #22]
 8001958:	3302      	adds	r3, #2
 800195a:	b2db      	uxtb	r3, r3
 800195c:	2201      	movs	r2, #1
 800195e:	4619      	mov	r1, r3
 8001960:	f7ff f9ba 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 4, y + 2, 1);
 8001964:	7dfb      	ldrb	r3, [r7, #23]
 8001966:	3304      	adds	r3, #4
 8001968:	b2d8      	uxtb	r0, r3
 800196a:	7dbb      	ldrb	r3, [r7, #22]
 800196c:	3302      	adds	r3, #2
 800196e:	b2db      	uxtb	r3, r3
 8001970:	2201      	movs	r2, #1
 8001972:	4619      	mov	r1, r3
 8001974:	f7ff f9b0 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 3, 1);
 8001978:	7dfb      	ldrb	r3, [r7, #23]
 800197a:	3303      	adds	r3, #3
 800197c:	b2d8      	uxtb	r0, r3
 800197e:	7dbb      	ldrb	r3, [r7, #22]
 8001980:	3303      	adds	r3, #3
 8001982:	b2db      	uxtb	r3, r3
 8001984:	2201      	movs	r2, #1
 8001986:	4619      	mov	r1, r3
 8001988:	f7ff f9a6 	bl	8000cd8 <nokia5110_SetPixel>
		break;
 800198c:	f001 ba49 	b.w	8002e22 <nokia5110_WriteString+0x1fbe>
	}
	case 'N':
	{
		nokia5110_SetPixel(x + 0, y + 0, 1);
 8001990:	7db9      	ldrb	r1, [r7, #22]
 8001992:	7dfb      	ldrb	r3, [r7, #23]
 8001994:	2201      	movs	r2, #1
 8001996:	4618      	mov	r0, r3
 8001998:	f7ff f99e 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 1, 1);
 800199c:	7dbb      	ldrb	r3, [r7, #22]
 800199e:	3301      	adds	r3, #1
 80019a0:	b2d9      	uxtb	r1, r3
 80019a2:	7dfb      	ldrb	r3, [r7, #23]
 80019a4:	2201      	movs	r2, #1
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7ff f996 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 2, 1);
 80019ac:	7dbb      	ldrb	r3, [r7, #22]
 80019ae:	3302      	adds	r3, #2
 80019b0:	b2d9      	uxtb	r1, r3
 80019b2:	7dfb      	ldrb	r3, [r7, #23]
 80019b4:	2201      	movs	r2, #1
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7ff f98e 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 3, 1);
 80019bc:	7dbb      	ldrb	r3, [r7, #22]
 80019be:	3303      	adds	r3, #3
 80019c0:	b2d9      	uxtb	r1, r3
 80019c2:	7dfb      	ldrb	r3, [r7, #23]
 80019c4:	2201      	movs	r2, #1
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff f986 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 4, 1);
 80019cc:	7dbb      	ldrb	r3, [r7, #22]
 80019ce:	3304      	adds	r3, #4
 80019d0:	b2d9      	uxtb	r1, r3
 80019d2:	7dfb      	ldrb	r3, [r7, #23]
 80019d4:	2201      	movs	r2, #1
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff f97e 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 4, y + 0, 1);
 80019dc:	7dfb      	ldrb	r3, [r7, #23]
 80019de:	3304      	adds	r3, #4
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	7db9      	ldrb	r1, [r7, #22]
 80019e4:	2201      	movs	r2, #1
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff f976 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 4, y + 1, 1);
 80019ec:	7dfb      	ldrb	r3, [r7, #23]
 80019ee:	3304      	adds	r3, #4
 80019f0:	b2d8      	uxtb	r0, r3
 80019f2:	7dbb      	ldrb	r3, [r7, #22]
 80019f4:	3301      	adds	r3, #1
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	2201      	movs	r2, #1
 80019fa:	4619      	mov	r1, r3
 80019fc:	f7ff f96c 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 4, y + 2, 1);
 8001a00:	7dfb      	ldrb	r3, [r7, #23]
 8001a02:	3304      	adds	r3, #4
 8001a04:	b2d8      	uxtb	r0, r3
 8001a06:	7dbb      	ldrb	r3, [r7, #22]
 8001a08:	3302      	adds	r3, #2
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	4619      	mov	r1, r3
 8001a10:	f7ff f962 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 4, y + 3, 1);
 8001a14:	7dfb      	ldrb	r3, [r7, #23]
 8001a16:	3304      	adds	r3, #4
 8001a18:	b2d8      	uxtb	r0, r3
 8001a1a:	7dbb      	ldrb	r3, [r7, #22]
 8001a1c:	3303      	adds	r3, #3
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	2201      	movs	r2, #1
 8001a22:	4619      	mov	r1, r3
 8001a24:	f7ff f958 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 4, y + 4, 1);
 8001a28:	7dfb      	ldrb	r3, [r7, #23]
 8001a2a:	3304      	adds	r3, #4
 8001a2c:	b2d8      	uxtb	r0, r3
 8001a2e:	7dbb      	ldrb	r3, [r7, #22]
 8001a30:	3304      	adds	r3, #4
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	2201      	movs	r2, #1
 8001a36:	4619      	mov	r1, r3
 8001a38:	f7ff f94e 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 1, y + 1, 1);
 8001a3c:	7dfb      	ldrb	r3, [r7, #23]
 8001a3e:	3301      	adds	r3, #1
 8001a40:	b2d8      	uxtb	r0, r3
 8001a42:	7dbb      	ldrb	r3, [r7, #22]
 8001a44:	3301      	adds	r3, #1
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	2201      	movs	r2, #1
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	f7ff f944 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 2, 1);
 8001a50:	7dfb      	ldrb	r3, [r7, #23]
 8001a52:	3302      	adds	r3, #2
 8001a54:	b2d8      	uxtb	r0, r3
 8001a56:	7dbb      	ldrb	r3, [r7, #22]
 8001a58:	3302      	adds	r3, #2
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	4619      	mov	r1, r3
 8001a60:	f7ff f93a 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 3, 1);
 8001a64:	7dfb      	ldrb	r3, [r7, #23]
 8001a66:	3303      	adds	r3, #3
 8001a68:	b2d8      	uxtb	r0, r3
 8001a6a:	7dbb      	ldrb	r3, [r7, #22]
 8001a6c:	3303      	adds	r3, #3
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	2201      	movs	r2, #1
 8001a72:	4619      	mov	r1, r3
 8001a74:	f7ff f930 	bl	8000cd8 <nokia5110_SetPixel>
		break;
 8001a78:	f001 b9d3 	b.w	8002e22 <nokia5110_WriteString+0x1fbe>
	}
	case 'O':
	{
		nokia5110_SetPixel(x + 1, y + 0, 1);
 8001a7c:	7dfb      	ldrb	r3, [r7, #23]
 8001a7e:	3301      	adds	r3, #1
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	7db9      	ldrb	r1, [r7, #22]
 8001a84:	2201      	movs	r2, #1
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff f926 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 0, 1);
 8001a8c:	7dfb      	ldrb	r3, [r7, #23]
 8001a8e:	3302      	adds	r3, #2
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	7db9      	ldrb	r1, [r7, #22]
 8001a94:	2201      	movs	r2, #1
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff f91e 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 0, 1);
 8001a9c:	7dfb      	ldrb	r3, [r7, #23]
 8001a9e:	3303      	adds	r3, #3
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	7db9      	ldrb	r1, [r7, #22]
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7ff f916 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 1, 1);
 8001aac:	7dbb      	ldrb	r3, [r7, #22]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	b2d9      	uxtb	r1, r3
 8001ab2:	7dfb      	ldrb	r3, [r7, #23]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff f90e 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 4, y + 1, 1);
 8001abc:	7dfb      	ldrb	r3, [r7, #23]
 8001abe:	3304      	adds	r3, #4
 8001ac0:	b2d8      	uxtb	r0, r3
 8001ac2:	7dbb      	ldrb	r3, [r7, #22]
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	2201      	movs	r2, #1
 8001aca:	4619      	mov	r1, r3
 8001acc:	f7ff f904 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 2, 1);
 8001ad0:	7dbb      	ldrb	r3, [r7, #22]
 8001ad2:	3302      	adds	r3, #2
 8001ad4:	b2d9      	uxtb	r1, r3
 8001ad6:	7dfb      	ldrb	r3, [r7, #23]
 8001ad8:	2201      	movs	r2, #1
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff f8fc 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 4, y + 2, 1);
 8001ae0:	7dfb      	ldrb	r3, [r7, #23]
 8001ae2:	3304      	adds	r3, #4
 8001ae4:	b2d8      	uxtb	r0, r3
 8001ae6:	7dbb      	ldrb	r3, [r7, #22]
 8001ae8:	3302      	adds	r3, #2
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	2201      	movs	r2, #1
 8001aee:	4619      	mov	r1, r3
 8001af0:	f7ff f8f2 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 3, 1);
 8001af4:	7dbb      	ldrb	r3, [r7, #22]
 8001af6:	3303      	adds	r3, #3
 8001af8:	b2d9      	uxtb	r1, r3
 8001afa:	7dfb      	ldrb	r3, [r7, #23]
 8001afc:	2201      	movs	r2, #1
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff f8ea 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 4, y + 3, 1);
 8001b04:	7dfb      	ldrb	r3, [r7, #23]
 8001b06:	3304      	adds	r3, #4
 8001b08:	b2d8      	uxtb	r0, r3
 8001b0a:	7dbb      	ldrb	r3, [r7, #22]
 8001b0c:	3303      	adds	r3, #3
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	2201      	movs	r2, #1
 8001b12:	4619      	mov	r1, r3
 8001b14:	f7ff f8e0 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 1, y + 4, 1);
 8001b18:	7dfb      	ldrb	r3, [r7, #23]
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	b2d8      	uxtb	r0, r3
 8001b1e:	7dbb      	ldrb	r3, [r7, #22]
 8001b20:	3304      	adds	r3, #4
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	2201      	movs	r2, #1
 8001b26:	4619      	mov	r1, r3
 8001b28:	f7ff f8d6 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 4, 1);
 8001b2c:	7dfb      	ldrb	r3, [r7, #23]
 8001b2e:	3302      	adds	r3, #2
 8001b30:	b2d8      	uxtb	r0, r3
 8001b32:	7dbb      	ldrb	r3, [r7, #22]
 8001b34:	3304      	adds	r3, #4
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	2201      	movs	r2, #1
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	f7ff f8cc 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 4, 1);
 8001b40:	7dfb      	ldrb	r3, [r7, #23]
 8001b42:	3303      	adds	r3, #3
 8001b44:	b2d8      	uxtb	r0, r3
 8001b46:	7dbb      	ldrb	r3, [r7, #22]
 8001b48:	3304      	adds	r3, #4
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	4619      	mov	r1, r3
 8001b50:	f7ff f8c2 	bl	8000cd8 <nokia5110_SetPixel>
		break;
 8001b54:	f001 b965 	b.w	8002e22 <nokia5110_WriteString+0x1fbe>
	}
	case 'P':
	{
		nokia5110_SetPixel(x + 0, y + 0, 1);
 8001b58:	7db9      	ldrb	r1, [r7, #22]
 8001b5a:	7dfb      	ldrb	r3, [r7, #23]
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff f8ba 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 1, y + 0, 1);
 8001b64:	7dfb      	ldrb	r3, [r7, #23]
 8001b66:	3301      	adds	r3, #1
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	7db9      	ldrb	r1, [r7, #22]
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7ff f8b2 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 0, 1);
 8001b74:	7dfb      	ldrb	r3, [r7, #23]
 8001b76:	3302      	adds	r3, #2
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	7db9      	ldrb	r1, [r7, #22]
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7ff f8aa 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 1, 1);
 8001b84:	7dbb      	ldrb	r3, [r7, #22]
 8001b86:	3301      	adds	r3, #1
 8001b88:	b2d9      	uxtb	r1, r3
 8001b8a:	7dfb      	ldrb	r3, [r7, #23]
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff f8a2 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 1, 1);
 8001b94:	7dfb      	ldrb	r3, [r7, #23]
 8001b96:	3303      	adds	r3, #3
 8001b98:	b2d8      	uxtb	r0, r3
 8001b9a:	7dbb      	ldrb	r3, [r7, #22]
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	f7ff f898 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 2, 1);
 8001ba8:	7dbb      	ldrb	r3, [r7, #22]
 8001baa:	3302      	adds	r3, #2
 8001bac:	b2d9      	uxtb	r1, r3
 8001bae:	7dfb      	ldrb	r3, [r7, #23]
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7ff f890 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 1, y + 2, 1);
 8001bb8:	7dfb      	ldrb	r3, [r7, #23]
 8001bba:	3301      	adds	r3, #1
 8001bbc:	b2d8      	uxtb	r0, r3
 8001bbe:	7dbb      	ldrb	r3, [r7, #22]
 8001bc0:	3302      	adds	r3, #2
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	f7ff f886 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 2, 1);
 8001bcc:	7dfb      	ldrb	r3, [r7, #23]
 8001bce:	3302      	adds	r3, #2
 8001bd0:	b2d8      	uxtb	r0, r3
 8001bd2:	7dbb      	ldrb	r3, [r7, #22]
 8001bd4:	3302      	adds	r3, #2
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	2201      	movs	r2, #1
 8001bda:	4619      	mov	r1, r3
 8001bdc:	f7ff f87c 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 3, 1);
 8001be0:	7dbb      	ldrb	r3, [r7, #22]
 8001be2:	3303      	adds	r3, #3
 8001be4:	b2d9      	uxtb	r1, r3
 8001be6:	7dfb      	ldrb	r3, [r7, #23]
 8001be8:	2201      	movs	r2, #1
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff f874 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 4, 1);
 8001bf0:	7dbb      	ldrb	r3, [r7, #22]
 8001bf2:	3304      	adds	r3, #4
 8001bf4:	b2d9      	uxtb	r1, r3
 8001bf6:	7dfb      	ldrb	r3, [r7, #23]
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7ff f86c 	bl	8000cd8 <nokia5110_SetPixel>
		break;
 8001c00:	f001 b90f 	b.w	8002e22 <nokia5110_WriteString+0x1fbe>
	}
	case 'Q':
	{
		nokia5110_SetPixel(x + 1, y + 0, 1);
 8001c04:	7dfb      	ldrb	r3, [r7, #23]
 8001c06:	3301      	adds	r3, #1
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	7db9      	ldrb	r1, [r7, #22]
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff f862 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 0, 1);
 8001c14:	7dfb      	ldrb	r3, [r7, #23]
 8001c16:	3302      	adds	r3, #2
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	7db9      	ldrb	r1, [r7, #22]
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff f85a 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 0, 1);
 8001c24:	7dfb      	ldrb	r3, [r7, #23]
 8001c26:	3303      	adds	r3, #3
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	7db9      	ldrb	r1, [r7, #22]
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7ff f852 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 1, 1);
 8001c34:	7dbb      	ldrb	r3, [r7, #22]
 8001c36:	3301      	adds	r3, #1
 8001c38:	b2d9      	uxtb	r1, r3
 8001c3a:	7dfb      	ldrb	r3, [r7, #23]
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff f84a 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 4, y + 1, 1);
 8001c44:	7dfb      	ldrb	r3, [r7, #23]
 8001c46:	3304      	adds	r3, #4
 8001c48:	b2d8      	uxtb	r0, r3
 8001c4a:	7dbb      	ldrb	r3, [r7, #22]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	2201      	movs	r2, #1
 8001c52:	4619      	mov	r1, r3
 8001c54:	f7ff f840 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 2, 1);
 8001c58:	7dbb      	ldrb	r3, [r7, #22]
 8001c5a:	3302      	adds	r3, #2
 8001c5c:	b2d9      	uxtb	r1, r3
 8001c5e:	7dfb      	ldrb	r3, [r7, #23]
 8001c60:	2201      	movs	r2, #1
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff f838 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 4, y + 2, 1);
 8001c68:	7dfb      	ldrb	r3, [r7, #23]
 8001c6a:	3304      	adds	r3, #4
 8001c6c:	b2d8      	uxtb	r0, r3
 8001c6e:	7dbb      	ldrb	r3, [r7, #22]
 8001c70:	3302      	adds	r3, #2
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	2201      	movs	r2, #1
 8001c76:	4619      	mov	r1, r3
 8001c78:	f7ff f82e 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 3, 1);
 8001c7c:	7dbb      	ldrb	r3, [r7, #22]
 8001c7e:	3303      	adds	r3, #3
 8001c80:	b2d9      	uxtb	r1, r3
 8001c82:	7dfb      	ldrb	r3, [r7, #23]
 8001c84:	2201      	movs	r2, #1
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff f826 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 3, 1);
 8001c8c:	7dfb      	ldrb	r3, [r7, #23]
 8001c8e:	3303      	adds	r3, #3
 8001c90:	b2d8      	uxtb	r0, r3
 8001c92:	7dbb      	ldrb	r3, [r7, #22]
 8001c94:	3303      	adds	r3, #3
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	2201      	movs	r2, #1
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	f7ff f81c 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 1, y + 4, 1);
 8001ca0:	7dfb      	ldrb	r3, [r7, #23]
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	b2d8      	uxtb	r0, r3
 8001ca6:	7dbb      	ldrb	r3, [r7, #22]
 8001ca8:	3304      	adds	r3, #4
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	2201      	movs	r2, #1
 8001cae:	4619      	mov	r1, r3
 8001cb0:	f7ff f812 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 4, 1);
 8001cb4:	7dfb      	ldrb	r3, [r7, #23]
 8001cb6:	3302      	adds	r3, #2
 8001cb8:	b2d8      	uxtb	r0, r3
 8001cba:	7dbb      	ldrb	r3, [r7, #22]
 8001cbc:	3304      	adds	r3, #4
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	f7ff f808 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 4, 1);
 8001cc8:	7dfb      	ldrb	r3, [r7, #23]
 8001cca:	3303      	adds	r3, #3
 8001ccc:	b2d8      	uxtb	r0, r3
 8001cce:	7dbb      	ldrb	r3, [r7, #22]
 8001cd0:	3304      	adds	r3, #4
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	f7fe fffe 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 4, y + 4, 1);
 8001cdc:	7dfb      	ldrb	r3, [r7, #23]
 8001cde:	3304      	adds	r3, #4
 8001ce0:	b2d8      	uxtb	r0, r3
 8001ce2:	7dbb      	ldrb	r3, [r7, #22]
 8001ce4:	3304      	adds	r3, #4
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	2201      	movs	r2, #1
 8001cea:	4619      	mov	r1, r3
 8001cec:	f7fe fff4 	bl	8000cd8 <nokia5110_SetPixel>
		break;
 8001cf0:	f001 b897 	b.w	8002e22 <nokia5110_WriteString+0x1fbe>
	}
	case 'R':
	{
		nokia5110_SetPixel(x + 0, y + 0, 1);
 8001cf4:	7db9      	ldrb	r1, [r7, #22]
 8001cf6:	7dfb      	ldrb	r3, [r7, #23]
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7fe ffec 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 1, y + 0, 1);
 8001d00:	7dfb      	ldrb	r3, [r7, #23]
 8001d02:	3301      	adds	r3, #1
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	7db9      	ldrb	r1, [r7, #22]
 8001d08:	2201      	movs	r2, #1
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7fe ffe4 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 0, 1);
 8001d10:	7dfb      	ldrb	r3, [r7, #23]
 8001d12:	3302      	adds	r3, #2
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	7db9      	ldrb	r1, [r7, #22]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7fe ffdc 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 1, 1);
 8001d20:	7dbb      	ldrb	r3, [r7, #22]
 8001d22:	3301      	adds	r3, #1
 8001d24:	b2d9      	uxtb	r1, r3
 8001d26:	7dfb      	ldrb	r3, [r7, #23]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7fe ffd4 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 4, y + 1, 1);
 8001d30:	7dfb      	ldrb	r3, [r7, #23]
 8001d32:	3304      	adds	r3, #4
 8001d34:	b2d8      	uxtb	r0, r3
 8001d36:	7dbb      	ldrb	r3, [r7, #22]
 8001d38:	3301      	adds	r3, #1
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	4619      	mov	r1, r3
 8001d40:	f7fe ffca 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 2, 1);
 8001d44:	7dbb      	ldrb	r3, [r7, #22]
 8001d46:	3302      	adds	r3, #2
 8001d48:	b2d9      	uxtb	r1, r3
 8001d4a:	7dfb      	ldrb	r3, [r7, #23]
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7fe ffc2 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 4, y + 2, 1);
 8001d54:	7dfb      	ldrb	r3, [r7, #23]
 8001d56:	3304      	adds	r3, #4
 8001d58:	b2d8      	uxtb	r0, r3
 8001d5a:	7dbb      	ldrb	r3, [r7, #22]
 8001d5c:	3302      	adds	r3, #2
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	2201      	movs	r2, #1
 8001d62:	4619      	mov	r1, r3
 8001d64:	f7fe ffb8 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 3, 1);
 8001d68:	7dbb      	ldrb	r3, [r7, #22]
 8001d6a:	3303      	adds	r3, #3
 8001d6c:	b2d9      	uxtb	r1, r3
 8001d6e:	7dfb      	ldrb	r3, [r7, #23]
 8001d70:	2201      	movs	r2, #1
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7fe ffb0 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 1, y + 3, 1);
 8001d78:	7dfb      	ldrb	r3, [r7, #23]
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	b2d8      	uxtb	r0, r3
 8001d7e:	7dbb      	ldrb	r3, [r7, #22]
 8001d80:	3303      	adds	r3, #3
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	2201      	movs	r2, #1
 8001d86:	4619      	mov	r1, r3
 8001d88:	f7fe ffa6 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 3, 1);
 8001d8c:	7dfb      	ldrb	r3, [r7, #23]
 8001d8e:	3302      	adds	r3, #2
 8001d90:	b2d8      	uxtb	r0, r3
 8001d92:	7dbb      	ldrb	r3, [r7, #22]
 8001d94:	3303      	adds	r3, #3
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	2201      	movs	r2, #1
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	f7fe ff9c 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 4, 1);
 8001da0:	7dbb      	ldrb	r3, [r7, #22]
 8001da2:	3304      	adds	r3, #4
 8001da4:	b2d9      	uxtb	r1, r3
 8001da6:	7dfb      	ldrb	r3, [r7, #23]
 8001da8:	2201      	movs	r2, #1
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7fe ff94 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 4, 1);
 8001db0:	7dfb      	ldrb	r3, [r7, #23]
 8001db2:	3303      	adds	r3, #3
 8001db4:	b2d8      	uxtb	r0, r3
 8001db6:	7dbb      	ldrb	r3, [r7, #22]
 8001db8:	3304      	adds	r3, #4
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	f7fe ff8a 	bl	8000cd8 <nokia5110_SetPixel>

		break;
 8001dc4:	f001 b82d 	b.w	8002e22 <nokia5110_WriteString+0x1fbe>
	}
	case 'S':
	{
		nokia5110_SetPixel(x + 1, y + 0, 1);
 8001dc8:	7dfb      	ldrb	r3, [r7, #23]
 8001dca:	3301      	adds	r3, #1
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	7db9      	ldrb	r1, [r7, #22]
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7fe ff80 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 0, 1);
 8001dd8:	7dfb      	ldrb	r3, [r7, #23]
 8001dda:	3302      	adds	r3, #2
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	7db9      	ldrb	r1, [r7, #22]
 8001de0:	2201      	movs	r2, #1
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7fe ff78 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 0, 1);
 8001de8:	7dfb      	ldrb	r3, [r7, #23]
 8001dea:	3303      	adds	r3, #3
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	7db9      	ldrb	r1, [r7, #22]
 8001df0:	2201      	movs	r2, #1
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7fe ff70 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 1, 1);
 8001df8:	7dbb      	ldrb	r3, [r7, #22]
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	b2d9      	uxtb	r1, r3
 8001dfe:	7dfb      	ldrb	r3, [r7, #23]
 8001e00:	2201      	movs	r2, #1
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7fe ff68 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 2, 1);
 8001e08:	7dbb      	ldrb	r3, [r7, #22]
 8001e0a:	3302      	adds	r3, #2
 8001e0c:	b2d9      	uxtb	r1, r3
 8001e0e:	7dfb      	ldrb	r3, [r7, #23]
 8001e10:	2201      	movs	r2, #1
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7fe ff60 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 1, y + 2, 1);
 8001e18:	7dfb      	ldrb	r3, [r7, #23]
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	b2d8      	uxtb	r0, r3
 8001e1e:	7dbb      	ldrb	r3, [r7, #22]
 8001e20:	3302      	adds	r3, #2
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	2201      	movs	r2, #1
 8001e26:	4619      	mov	r1, r3
 8001e28:	f7fe ff56 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 2, 1);
 8001e2c:	7dfb      	ldrb	r3, [r7, #23]
 8001e2e:	3302      	adds	r3, #2
 8001e30:	b2d8      	uxtb	r0, r3
 8001e32:	7dbb      	ldrb	r3, [r7, #22]
 8001e34:	3302      	adds	r3, #2
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	2201      	movs	r2, #1
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	f7fe ff4c 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 2, 1);
 8001e40:	7dfb      	ldrb	r3, [r7, #23]
 8001e42:	3303      	adds	r3, #3
 8001e44:	b2d8      	uxtb	r0, r3
 8001e46:	7dbb      	ldrb	r3, [r7, #22]
 8001e48:	3302      	adds	r3, #2
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	4619      	mov	r1, r3
 8001e50:	f7fe ff42 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 3, 1);
 8001e54:	7dfb      	ldrb	r3, [r7, #23]
 8001e56:	3303      	adds	r3, #3
 8001e58:	b2d8      	uxtb	r0, r3
 8001e5a:	7dbb      	ldrb	r3, [r7, #22]
 8001e5c:	3303      	adds	r3, #3
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	2201      	movs	r2, #1
 8001e62:	4619      	mov	r1, r3
 8001e64:	f7fe ff38 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 4, 1);
 8001e68:	7dbb      	ldrb	r3, [r7, #22]
 8001e6a:	3304      	adds	r3, #4
 8001e6c:	b2d9      	uxtb	r1, r3
 8001e6e:	7dfb      	ldrb	r3, [r7, #23]
 8001e70:	2201      	movs	r2, #1
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7fe ff30 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 1, y + 4, 1);
 8001e78:	7dfb      	ldrb	r3, [r7, #23]
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	b2d8      	uxtb	r0, r3
 8001e7e:	7dbb      	ldrb	r3, [r7, #22]
 8001e80:	3304      	adds	r3, #4
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	2201      	movs	r2, #1
 8001e86:	4619      	mov	r1, r3
 8001e88:	f7fe ff26 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 4, 1);
 8001e8c:	7dfb      	ldrb	r3, [r7, #23]
 8001e8e:	3302      	adds	r3, #2
 8001e90:	b2d8      	uxtb	r0, r3
 8001e92:	7dbb      	ldrb	r3, [r7, #22]
 8001e94:	3304      	adds	r3, #4
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	2201      	movs	r2, #1
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	f7fe ff1c 	bl	8000cd8 <nokia5110_SetPixel>
		break;
 8001ea0:	f000 bfbf 	b.w	8002e22 <nokia5110_WriteString+0x1fbe>
	}
	case 'T':
	{
		nokia5110_SetPixel(x + 0, y + 0, 1);
 8001ea4:	7db9      	ldrb	r1, [r7, #22]
 8001ea6:	7dfb      	ldrb	r3, [r7, #23]
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7fe ff14 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 1, y + 0, 1);
 8001eb0:	7dfb      	ldrb	r3, [r7, #23]
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	7db9      	ldrb	r1, [r7, #22]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7fe ff0c 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 0, 1);
 8001ec0:	7dfb      	ldrb	r3, [r7, #23]
 8001ec2:	3302      	adds	r3, #2
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	7db9      	ldrb	r1, [r7, #22]
 8001ec8:	2201      	movs	r2, #1
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7fe ff04 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 0, 1);
 8001ed0:	7dfb      	ldrb	r3, [r7, #23]
 8001ed2:	3303      	adds	r3, #3
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	7db9      	ldrb	r1, [r7, #22]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7fe fefc 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 4, y + 0, 1);
 8001ee0:	7dfb      	ldrb	r3, [r7, #23]
 8001ee2:	3304      	adds	r3, #4
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	7db9      	ldrb	r1, [r7, #22]
 8001ee8:	2201      	movs	r2, #1
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7fe fef4 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 1, 1);
 8001ef0:	7dfb      	ldrb	r3, [r7, #23]
 8001ef2:	3302      	adds	r3, #2
 8001ef4:	b2d8      	uxtb	r0, r3
 8001ef6:	7dbb      	ldrb	r3, [r7, #22]
 8001ef8:	3301      	adds	r3, #1
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	2201      	movs	r2, #1
 8001efe:	4619      	mov	r1, r3
 8001f00:	f7fe feea 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 2, 1);
 8001f04:	7dfb      	ldrb	r3, [r7, #23]
 8001f06:	3302      	adds	r3, #2
 8001f08:	b2d8      	uxtb	r0, r3
 8001f0a:	7dbb      	ldrb	r3, [r7, #22]
 8001f0c:	3302      	adds	r3, #2
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	2201      	movs	r2, #1
 8001f12:	4619      	mov	r1, r3
 8001f14:	f7fe fee0 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 3, 1);
 8001f18:	7dfb      	ldrb	r3, [r7, #23]
 8001f1a:	3302      	adds	r3, #2
 8001f1c:	b2d8      	uxtb	r0, r3
 8001f1e:	7dbb      	ldrb	r3, [r7, #22]
 8001f20:	3303      	adds	r3, #3
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	2201      	movs	r2, #1
 8001f26:	4619      	mov	r1, r3
 8001f28:	f7fe fed6 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 4, 1);
 8001f2c:	7dfb      	ldrb	r3, [r7, #23]
 8001f2e:	3302      	adds	r3, #2
 8001f30:	b2d8      	uxtb	r0, r3
 8001f32:	7dbb      	ldrb	r3, [r7, #22]
 8001f34:	3304      	adds	r3, #4
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	2201      	movs	r2, #1
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	f7fe fecc 	bl	8000cd8 <nokia5110_SetPixel>
		break;
 8001f40:	f000 bf6f 	b.w	8002e22 <nokia5110_WriteString+0x1fbe>
	}
	case 'U':
	{
		nokia5110_SetPixel(x + 0, y + 0, 1);
 8001f44:	7db9      	ldrb	r1, [r7, #22]
 8001f46:	7dfb      	ldrb	r3, [r7, #23]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7fe fec4 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 0, 1);
 8001f50:	7dfb      	ldrb	r3, [r7, #23]
 8001f52:	3303      	adds	r3, #3
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	7db9      	ldrb	r1, [r7, #22]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7fe febc 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 1, 1);
 8001f60:	7dbb      	ldrb	r3, [r7, #22]
 8001f62:	3301      	adds	r3, #1
 8001f64:	b2d9      	uxtb	r1, r3
 8001f66:	7dfb      	ldrb	r3, [r7, #23]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7fe feb4 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 1, 1);
 8001f70:	7dfb      	ldrb	r3, [r7, #23]
 8001f72:	3303      	adds	r3, #3
 8001f74:	b2d8      	uxtb	r0, r3
 8001f76:	7dbb      	ldrb	r3, [r7, #22]
 8001f78:	3301      	adds	r3, #1
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	4619      	mov	r1, r3
 8001f80:	f7fe feaa 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 2, 1);
 8001f84:	7dbb      	ldrb	r3, [r7, #22]
 8001f86:	3302      	adds	r3, #2
 8001f88:	b2d9      	uxtb	r1, r3
 8001f8a:	7dfb      	ldrb	r3, [r7, #23]
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7fe fea2 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 2, 1);
 8001f94:	7dfb      	ldrb	r3, [r7, #23]
 8001f96:	3303      	adds	r3, #3
 8001f98:	b2d8      	uxtb	r0, r3
 8001f9a:	7dbb      	ldrb	r3, [r7, #22]
 8001f9c:	3302      	adds	r3, #2
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	f7fe fe98 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 3, 1);
 8001fa8:	7dbb      	ldrb	r3, [r7, #22]
 8001faa:	3303      	adds	r3, #3
 8001fac:	b2d9      	uxtb	r1, r3
 8001fae:	7dfb      	ldrb	r3, [r7, #23]
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7fe fe90 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 3, 1);
 8001fb8:	7dfb      	ldrb	r3, [r7, #23]
 8001fba:	3303      	adds	r3, #3
 8001fbc:	b2d8      	uxtb	r0, r3
 8001fbe:	7dbb      	ldrb	r3, [r7, #22]
 8001fc0:	3303      	adds	r3, #3
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	f7fe fe86 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 1, y + 4, 1);
 8001fcc:	7dfb      	ldrb	r3, [r7, #23]
 8001fce:	3301      	adds	r3, #1
 8001fd0:	b2d8      	uxtb	r0, r3
 8001fd2:	7dbb      	ldrb	r3, [r7, #22]
 8001fd4:	3304      	adds	r3, #4
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	2201      	movs	r2, #1
 8001fda:	4619      	mov	r1, r3
 8001fdc:	f7fe fe7c 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 4, 1);
 8001fe0:	7dfb      	ldrb	r3, [r7, #23]
 8001fe2:	3302      	adds	r3, #2
 8001fe4:	b2d8      	uxtb	r0, r3
 8001fe6:	7dbb      	ldrb	r3, [r7, #22]
 8001fe8:	3304      	adds	r3, #4
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	2201      	movs	r2, #1
 8001fee:	4619      	mov	r1, r3
 8001ff0:	f7fe fe72 	bl	8000cd8 <nokia5110_SetPixel>
		break;
 8001ff4:	f000 bf15 	b.w	8002e22 <nokia5110_WriteString+0x1fbe>
	}
	case 'V':
	{
		nokia5110_SetPixel(x + 0, y + 0, 1);
 8001ff8:	7db9      	ldrb	r1, [r7, #22]
 8001ffa:	7dfb      	ldrb	r3, [r7, #23]
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7fe fe6a 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 0, 1);
 8002004:	7dfb      	ldrb	r3, [r7, #23]
 8002006:	3303      	adds	r3, #3
 8002008:	b2db      	uxtb	r3, r3
 800200a:	7db9      	ldrb	r1, [r7, #22]
 800200c:	2201      	movs	r2, #1
 800200e:	4618      	mov	r0, r3
 8002010:	f7fe fe62 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 1, 1);
 8002014:	7dbb      	ldrb	r3, [r7, #22]
 8002016:	3301      	adds	r3, #1
 8002018:	b2d9      	uxtb	r1, r3
 800201a:	7dfb      	ldrb	r3, [r7, #23]
 800201c:	2201      	movs	r2, #1
 800201e:	4618      	mov	r0, r3
 8002020:	f7fe fe5a 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 1, 1);
 8002024:	7dfb      	ldrb	r3, [r7, #23]
 8002026:	3303      	adds	r3, #3
 8002028:	b2d8      	uxtb	r0, r3
 800202a:	7dbb      	ldrb	r3, [r7, #22]
 800202c:	3301      	adds	r3, #1
 800202e:	b2db      	uxtb	r3, r3
 8002030:	2201      	movs	r2, #1
 8002032:	4619      	mov	r1, r3
 8002034:	f7fe fe50 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 2, 1);
 8002038:	7dbb      	ldrb	r3, [r7, #22]
 800203a:	3302      	adds	r3, #2
 800203c:	b2d9      	uxtb	r1, r3
 800203e:	7dfb      	ldrb	r3, [r7, #23]
 8002040:	2201      	movs	r2, #1
 8002042:	4618      	mov	r0, r3
 8002044:	f7fe fe48 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 2, 1);
 8002048:	7dfb      	ldrb	r3, [r7, #23]
 800204a:	3303      	adds	r3, #3
 800204c:	b2d8      	uxtb	r0, r3
 800204e:	7dbb      	ldrb	r3, [r7, #22]
 8002050:	3302      	adds	r3, #2
 8002052:	b2db      	uxtb	r3, r3
 8002054:	2201      	movs	r2, #1
 8002056:	4619      	mov	r1, r3
 8002058:	f7fe fe3e 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 3, 1);
 800205c:	7dbb      	ldrb	r3, [r7, #22]
 800205e:	3303      	adds	r3, #3
 8002060:	b2d9      	uxtb	r1, r3
 8002062:	7dfb      	ldrb	r3, [r7, #23]
 8002064:	2201      	movs	r2, #1
 8002066:	4618      	mov	r0, r3
 8002068:	f7fe fe36 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 3, 1);
 800206c:	7dfb      	ldrb	r3, [r7, #23]
 800206e:	3303      	adds	r3, #3
 8002070:	b2d8      	uxtb	r0, r3
 8002072:	7dbb      	ldrb	r3, [r7, #22]
 8002074:	3303      	adds	r3, #3
 8002076:	b2db      	uxtb	r3, r3
 8002078:	2201      	movs	r2, #1
 800207a:	4619      	mov	r1, r3
 800207c:	f7fe fe2c 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 1, y + 4, 1);
 8002080:	7dfb      	ldrb	r3, [r7, #23]
 8002082:	3301      	adds	r3, #1
 8002084:	b2d8      	uxtb	r0, r3
 8002086:	7dbb      	ldrb	r3, [r7, #22]
 8002088:	3304      	adds	r3, #4
 800208a:	b2db      	uxtb	r3, r3
 800208c:	2201      	movs	r2, #1
 800208e:	4619      	mov	r1, r3
 8002090:	f7fe fe22 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 4, 1);
 8002094:	7dfb      	ldrb	r3, [r7, #23]
 8002096:	3302      	adds	r3, #2
 8002098:	b2d8      	uxtb	r0, r3
 800209a:	7dbb      	ldrb	r3, [r7, #22]
 800209c:	3304      	adds	r3, #4
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	2201      	movs	r2, #1
 80020a2:	4619      	mov	r1, r3
 80020a4:	f7fe fe18 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 1, y + 5, 1);
 80020a8:	7dfb      	ldrb	r3, [r7, #23]
 80020aa:	3301      	adds	r3, #1
 80020ac:	b2d8      	uxtb	r0, r3
 80020ae:	7dbb      	ldrb	r3, [r7, #22]
 80020b0:	3305      	adds	r3, #5
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	2201      	movs	r2, #1
 80020b6:	4619      	mov	r1, r3
 80020b8:	f7fe fe0e 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 5, 1);
 80020bc:	7dfb      	ldrb	r3, [r7, #23]
 80020be:	3302      	adds	r3, #2
 80020c0:	b2d8      	uxtb	r0, r3
 80020c2:	7dbb      	ldrb	r3, [r7, #22]
 80020c4:	3305      	adds	r3, #5
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	2201      	movs	r2, #1
 80020ca:	4619      	mov	r1, r3
 80020cc:	f7fe fe04 	bl	8000cd8 <nokia5110_SetPixel>
		break;
 80020d0:	f000 bea7 	b.w	8002e22 <nokia5110_WriteString+0x1fbe>
	}
	case 'W':
	{
		nokia5110_SetPixel(x + 0, y + 0, 1);
 80020d4:	7db9      	ldrb	r1, [r7, #22]
 80020d6:	7dfb      	ldrb	r3, [r7, #23]
 80020d8:	2201      	movs	r2, #1
 80020da:	4618      	mov	r0, r3
 80020dc:	f7fe fdfc 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 0, 1);
 80020e0:	7dfb      	ldrb	r3, [r7, #23]
 80020e2:	3302      	adds	r3, #2
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	7db9      	ldrb	r1, [r7, #22]
 80020e8:	2201      	movs	r2, #1
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7fe fdf4 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 4, y + 0, 1);
 80020f0:	7dfb      	ldrb	r3, [r7, #23]
 80020f2:	3304      	adds	r3, #4
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	7db9      	ldrb	r1, [r7, #22]
 80020f8:	2201      	movs	r2, #1
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7fe fdec 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 1, 1);
 8002100:	7dbb      	ldrb	r3, [r7, #22]
 8002102:	3301      	adds	r3, #1
 8002104:	b2d9      	uxtb	r1, r3
 8002106:	7dfb      	ldrb	r3, [r7, #23]
 8002108:	2201      	movs	r2, #1
 800210a:	4618      	mov	r0, r3
 800210c:	f7fe fde4 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 1, 1);
 8002110:	7dfb      	ldrb	r3, [r7, #23]
 8002112:	3302      	adds	r3, #2
 8002114:	b2d8      	uxtb	r0, r3
 8002116:	7dbb      	ldrb	r3, [r7, #22]
 8002118:	3301      	adds	r3, #1
 800211a:	b2db      	uxtb	r3, r3
 800211c:	2201      	movs	r2, #1
 800211e:	4619      	mov	r1, r3
 8002120:	f7fe fdda 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 4, y + 1, 1);
 8002124:	7dfb      	ldrb	r3, [r7, #23]
 8002126:	3304      	adds	r3, #4
 8002128:	b2d8      	uxtb	r0, r3
 800212a:	7dbb      	ldrb	r3, [r7, #22]
 800212c:	3301      	adds	r3, #1
 800212e:	b2db      	uxtb	r3, r3
 8002130:	2201      	movs	r2, #1
 8002132:	4619      	mov	r1, r3
 8002134:	f7fe fdd0 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 2, 1);
 8002138:	7dbb      	ldrb	r3, [r7, #22]
 800213a:	3302      	adds	r3, #2
 800213c:	b2d9      	uxtb	r1, r3
 800213e:	7dfb      	ldrb	r3, [r7, #23]
 8002140:	2201      	movs	r2, #1
 8002142:	4618      	mov	r0, r3
 8002144:	f7fe fdc8 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 2, 1);
 8002148:	7dfb      	ldrb	r3, [r7, #23]
 800214a:	3302      	adds	r3, #2
 800214c:	b2d8      	uxtb	r0, r3
 800214e:	7dbb      	ldrb	r3, [r7, #22]
 8002150:	3302      	adds	r3, #2
 8002152:	b2db      	uxtb	r3, r3
 8002154:	2201      	movs	r2, #1
 8002156:	4619      	mov	r1, r3
 8002158:	f7fe fdbe 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 4, y + 2, 1);
 800215c:	7dfb      	ldrb	r3, [r7, #23]
 800215e:	3304      	adds	r3, #4
 8002160:	b2d8      	uxtb	r0, r3
 8002162:	7dbb      	ldrb	r3, [r7, #22]
 8002164:	3302      	adds	r3, #2
 8002166:	b2db      	uxtb	r3, r3
 8002168:	2201      	movs	r2, #1
 800216a:	4619      	mov	r1, r3
 800216c:	f7fe fdb4 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 3, 1);
 8002170:	7dbb      	ldrb	r3, [r7, #22]
 8002172:	3303      	adds	r3, #3
 8002174:	b2d9      	uxtb	r1, r3
 8002176:	7dfb      	ldrb	r3, [r7, #23]
 8002178:	2201      	movs	r2, #1
 800217a:	4618      	mov	r0, r3
 800217c:	f7fe fdac 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 3, 1);
 8002180:	7dfb      	ldrb	r3, [r7, #23]
 8002182:	3302      	adds	r3, #2
 8002184:	b2d8      	uxtb	r0, r3
 8002186:	7dbb      	ldrb	r3, [r7, #22]
 8002188:	3303      	adds	r3, #3
 800218a:	b2db      	uxtb	r3, r3
 800218c:	2201      	movs	r2, #1
 800218e:	4619      	mov	r1, r3
 8002190:	f7fe fda2 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 4, y + 3, 1);
 8002194:	7dfb      	ldrb	r3, [r7, #23]
 8002196:	3304      	adds	r3, #4
 8002198:	b2d8      	uxtb	r0, r3
 800219a:	7dbb      	ldrb	r3, [r7, #22]
 800219c:	3303      	adds	r3, #3
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	2201      	movs	r2, #1
 80021a2:	4619      	mov	r1, r3
 80021a4:	f7fe fd98 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 1, y + 4, 1);
 80021a8:	7dfb      	ldrb	r3, [r7, #23]
 80021aa:	3301      	adds	r3, #1
 80021ac:	b2d8      	uxtb	r0, r3
 80021ae:	7dbb      	ldrb	r3, [r7, #22]
 80021b0:	3304      	adds	r3, #4
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	2201      	movs	r2, #1
 80021b6:	4619      	mov	r1, r3
 80021b8:	f7fe fd8e 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 4, 1);
 80021bc:	7dfb      	ldrb	r3, [r7, #23]
 80021be:	3303      	adds	r3, #3
 80021c0:	b2d8      	uxtb	r0, r3
 80021c2:	7dbb      	ldrb	r3, [r7, #22]
 80021c4:	3304      	adds	r3, #4
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	2201      	movs	r2, #1
 80021ca:	4619      	mov	r1, r3
 80021cc:	f7fe fd84 	bl	8000cd8 <nokia5110_SetPixel>

		break;
 80021d0:	f000 be27 	b.w	8002e22 <nokia5110_WriteString+0x1fbe>
	}
	case 'X':
	{
		nokia5110_SetPixel(x + 0, y + 0, 1);
 80021d4:	7db9      	ldrb	r1, [r7, #22]
 80021d6:	7dfb      	ldrb	r3, [r7, #23]
 80021d8:	2201      	movs	r2, #1
 80021da:	4618      	mov	r0, r3
 80021dc:	f7fe fd7c 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 4, y + 0, 1);
 80021e0:	7dfb      	ldrb	r3, [r7, #23]
 80021e2:	3304      	adds	r3, #4
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	7db9      	ldrb	r1, [r7, #22]
 80021e8:	2201      	movs	r2, #1
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7fe fd74 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 1, y + 1, 1);
 80021f0:	7dfb      	ldrb	r3, [r7, #23]
 80021f2:	3301      	adds	r3, #1
 80021f4:	b2d8      	uxtb	r0, r3
 80021f6:	7dbb      	ldrb	r3, [r7, #22]
 80021f8:	3301      	adds	r3, #1
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	2201      	movs	r2, #1
 80021fe:	4619      	mov	r1, r3
 8002200:	f7fe fd6a 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 1, 1);
 8002204:	7dfb      	ldrb	r3, [r7, #23]
 8002206:	3303      	adds	r3, #3
 8002208:	b2d8      	uxtb	r0, r3
 800220a:	7dbb      	ldrb	r3, [r7, #22]
 800220c:	3301      	adds	r3, #1
 800220e:	b2db      	uxtb	r3, r3
 8002210:	2201      	movs	r2, #1
 8002212:	4619      	mov	r1, r3
 8002214:	f7fe fd60 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 2, 1);
 8002218:	7dfb      	ldrb	r3, [r7, #23]
 800221a:	3302      	adds	r3, #2
 800221c:	b2d8      	uxtb	r0, r3
 800221e:	7dbb      	ldrb	r3, [r7, #22]
 8002220:	3302      	adds	r3, #2
 8002222:	b2db      	uxtb	r3, r3
 8002224:	2201      	movs	r2, #1
 8002226:	4619      	mov	r1, r3
 8002228:	f7fe fd56 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 1, y + 3, 1);
 800222c:	7dfb      	ldrb	r3, [r7, #23]
 800222e:	3301      	adds	r3, #1
 8002230:	b2d8      	uxtb	r0, r3
 8002232:	7dbb      	ldrb	r3, [r7, #22]
 8002234:	3303      	adds	r3, #3
 8002236:	b2db      	uxtb	r3, r3
 8002238:	2201      	movs	r2, #1
 800223a:	4619      	mov	r1, r3
 800223c:	f7fe fd4c 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 3, 1);
 8002240:	7dfb      	ldrb	r3, [r7, #23]
 8002242:	3303      	adds	r3, #3
 8002244:	b2d8      	uxtb	r0, r3
 8002246:	7dbb      	ldrb	r3, [r7, #22]
 8002248:	3303      	adds	r3, #3
 800224a:	b2db      	uxtb	r3, r3
 800224c:	2201      	movs	r2, #1
 800224e:	4619      	mov	r1, r3
 8002250:	f7fe fd42 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 4, 1);
 8002254:	7dbb      	ldrb	r3, [r7, #22]
 8002256:	3304      	adds	r3, #4
 8002258:	b2d9      	uxtb	r1, r3
 800225a:	7dfb      	ldrb	r3, [r7, #23]
 800225c:	2201      	movs	r2, #1
 800225e:	4618      	mov	r0, r3
 8002260:	f7fe fd3a 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 4, y + 4, 1);
 8002264:	7dfb      	ldrb	r3, [r7, #23]
 8002266:	3304      	adds	r3, #4
 8002268:	b2d8      	uxtb	r0, r3
 800226a:	7dbb      	ldrb	r3, [r7, #22]
 800226c:	3304      	adds	r3, #4
 800226e:	b2db      	uxtb	r3, r3
 8002270:	2201      	movs	r2, #1
 8002272:	4619      	mov	r1, r3
 8002274:	f7fe fd30 	bl	8000cd8 <nokia5110_SetPixel>
		break;
 8002278:	f000 bdd3 	b.w	8002e22 <nokia5110_WriteString+0x1fbe>
	}
	case 'Y':
	{
		nokia5110_SetPixel(x + 0, y + 0, 1);
 800227c:	7db9      	ldrb	r1, [r7, #22]
 800227e:	7dfb      	ldrb	r3, [r7, #23]
 8002280:	2201      	movs	r2, #1
 8002282:	4618      	mov	r0, r3
 8002284:	f7fe fd28 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 4, y + 0, 1);
 8002288:	7dfb      	ldrb	r3, [r7, #23]
 800228a:	3304      	adds	r3, #4
 800228c:	b2db      	uxtb	r3, r3
 800228e:	7db9      	ldrb	r1, [r7, #22]
 8002290:	2201      	movs	r2, #1
 8002292:	4618      	mov	r0, r3
 8002294:	f7fe fd20 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 1, y + 1, 1);
 8002298:	7dfb      	ldrb	r3, [r7, #23]
 800229a:	3301      	adds	r3, #1
 800229c:	b2d8      	uxtb	r0, r3
 800229e:	7dbb      	ldrb	r3, [r7, #22]
 80022a0:	3301      	adds	r3, #1
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	2201      	movs	r2, #1
 80022a6:	4619      	mov	r1, r3
 80022a8:	f7fe fd16 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 1, 1);
 80022ac:	7dfb      	ldrb	r3, [r7, #23]
 80022ae:	3303      	adds	r3, #3
 80022b0:	b2d8      	uxtb	r0, r3
 80022b2:	7dbb      	ldrb	r3, [r7, #22]
 80022b4:	3301      	adds	r3, #1
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	2201      	movs	r2, #1
 80022ba:	4619      	mov	r1, r3
 80022bc:	f7fe fd0c 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 2, 1);
 80022c0:	7dfb      	ldrb	r3, [r7, #23]
 80022c2:	3302      	adds	r3, #2
 80022c4:	b2d8      	uxtb	r0, r3
 80022c6:	7dbb      	ldrb	r3, [r7, #22]
 80022c8:	3302      	adds	r3, #2
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	2201      	movs	r2, #1
 80022ce:	4619      	mov	r1, r3
 80022d0:	f7fe fd02 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 3, 1);
 80022d4:	7dfb      	ldrb	r3, [r7, #23]
 80022d6:	3302      	adds	r3, #2
 80022d8:	b2d8      	uxtb	r0, r3
 80022da:	7dbb      	ldrb	r3, [r7, #22]
 80022dc:	3303      	adds	r3, #3
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	2201      	movs	r2, #1
 80022e2:	4619      	mov	r1, r3
 80022e4:	f7fe fcf8 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 4, 1);
 80022e8:	7dfb      	ldrb	r3, [r7, #23]
 80022ea:	3302      	adds	r3, #2
 80022ec:	b2d8      	uxtb	r0, r3
 80022ee:	7dbb      	ldrb	r3, [r7, #22]
 80022f0:	3304      	adds	r3, #4
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	2201      	movs	r2, #1
 80022f6:	4619      	mov	r1, r3
 80022f8:	f7fe fcee 	bl	8000cd8 <nokia5110_SetPixel>
		break;
 80022fc:	f000 bd91 	b.w	8002e22 <nokia5110_WriteString+0x1fbe>
	}
	case 'Z':
	{
		nokia5110_SetPixel(x + 0, y + 0, 1);
 8002300:	7db9      	ldrb	r1, [r7, #22]
 8002302:	7dfb      	ldrb	r3, [r7, #23]
 8002304:	2201      	movs	r2, #1
 8002306:	4618      	mov	r0, r3
 8002308:	f7fe fce6 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 1, y + 0, 1);
 800230c:	7dfb      	ldrb	r3, [r7, #23]
 800230e:	3301      	adds	r3, #1
 8002310:	b2db      	uxtb	r3, r3
 8002312:	7db9      	ldrb	r1, [r7, #22]
 8002314:	2201      	movs	r2, #1
 8002316:	4618      	mov	r0, r3
 8002318:	f7fe fcde 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 0, 1);
 800231c:	7dfb      	ldrb	r3, [r7, #23]
 800231e:	3302      	adds	r3, #2
 8002320:	b2db      	uxtb	r3, r3
 8002322:	7db9      	ldrb	r1, [r7, #22]
 8002324:	2201      	movs	r2, #1
 8002326:	4618      	mov	r0, r3
 8002328:	f7fe fcd6 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 0, 1);
 800232c:	7dfb      	ldrb	r3, [r7, #23]
 800232e:	3303      	adds	r3, #3
 8002330:	b2db      	uxtb	r3, r3
 8002332:	7db9      	ldrb	r1, [r7, #22]
 8002334:	2201      	movs	r2, #1
 8002336:	4618      	mov	r0, r3
 8002338:	f7fe fcce 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 4, y + 0, 1);
 800233c:	7dfb      	ldrb	r3, [r7, #23]
 800233e:	3304      	adds	r3, #4
 8002340:	b2db      	uxtb	r3, r3
 8002342:	7db9      	ldrb	r1, [r7, #22]
 8002344:	2201      	movs	r2, #1
 8002346:	4618      	mov	r0, r3
 8002348:	f7fe fcc6 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 1, 1);
 800234c:	7dfb      	ldrb	r3, [r7, #23]
 800234e:	3303      	adds	r3, #3
 8002350:	b2d8      	uxtb	r0, r3
 8002352:	7dbb      	ldrb	r3, [r7, #22]
 8002354:	3301      	adds	r3, #1
 8002356:	b2db      	uxtb	r3, r3
 8002358:	2201      	movs	r2, #1
 800235a:	4619      	mov	r1, r3
 800235c:	f7fe fcbc 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 2, y + 2, 1);
 8002360:	7dfb      	ldrb	r3, [r7, #23]
 8002362:	3302      	adds	r3, #2
 8002364:	b2d8      	uxtb	r0, r3
 8002366:	7dbb      	ldrb	r3, [r7, #22]
 8002368:	3302      	adds	r3, #2
 800236a:	b2db      	uxtb	r3, r3
 800236c:	2201      	movs	r2, #1
 800236e:	4619      	mov	r1, r3
 8002370:	f7fe fcb2 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 1, y + 3, 1);
 8002374:	7dfb      	ldrb	r3, [r7, #23]
 8002376:	3301      	adds	r3, #1
 8002378:	b2d8      	uxtb	r0, r3
 800237a:	7dbb      	ldrb	r3, [r7, #22]
 800237c:	3303      	adds	r3, #3
 800237e:	b2db      	uxtb	r3, r3
 8002380:	2201      	movs	r2, #1
 8002382:	4619      	mov	r1, r3
 8002384:	f7fe fca8 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 0, y + 4, 1);
 8002388:	7dbb      	ldrb	r3, [r7, #22]
 800238a:	3304      	adds	r3, #4
 800238c:	b2d9      	uxtb	r1, r3
 800238e:	7dfb      	ldrb	r3, [r7, #23]
 8002390:	2201      	movs	r2, #1
 8002392:	4618      	mov	r0, r3
 8002394:	f7fe fca0 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 1, y + 4, 1);
 8002398:	7dfb      	ldrb	r3, [r7, #23]
 800239a:	3301      	adds	r3, #1
 800239c:	b2d8      	uxtb	r0, r3
 800239e:	7dbb      	ldrb	r3, [r7, #22]
 80023a0:	3304      	adds	r3, #4
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	2201      	movs	r2, #1
 80023a6:	4619      	mov	r1, r3
 80023a8:	f7fe fc96 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 3, y + 4, 1);
 80023ac:	7dfb      	ldrb	r3, [r7, #23]
 80023ae:	3303      	adds	r3, #3
 80023b0:	b2d8      	uxtb	r0, r3
 80023b2:	7dbb      	ldrb	r3, [r7, #22]
 80023b4:	3304      	adds	r3, #4
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	2201      	movs	r2, #1
 80023ba:	4619      	mov	r1, r3
 80023bc:	f7fe fc8c 	bl	8000cd8 <nokia5110_SetPixel>
		nokia5110_SetPixel(x + 4, y + 4, 1);
 80023c0:	7dfb      	ldrb	r3, [r7, #23]
 80023c2:	3304      	adds	r3, #4
 80023c4:	b2d8      	uxtb	r0, r3
 80023c6:	7dbb      	ldrb	r3, [r7, #22]
 80023c8:	3304      	adds	r3, #4
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	2201      	movs	r2, #1
 80023ce:	4619      	mov	r1, r3
 80023d0:	f7fe fc82 	bl	8000cd8 <nokia5110_SetPixel>
		break;
 80023d4:	f000 bd25 	b.w	8002e22 <nokia5110_WriteString+0x1fbe>
	}
	case '0':
	{
	    nokia5110_SetPixel(x + 1, y + 0, 1);
 80023d8:	7dfb      	ldrb	r3, [r7, #23]
 80023da:	3301      	adds	r3, #1
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	7db9      	ldrb	r1, [r7, #22]
 80023e0:	2201      	movs	r2, #1
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7fe fc78 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 2, y + 0, 1);
 80023e8:	7dfb      	ldrb	r3, [r7, #23]
 80023ea:	3302      	adds	r3, #2
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	7db9      	ldrb	r1, [r7, #22]
 80023f0:	2201      	movs	r2, #1
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7fe fc70 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 3, y + 0, 1);
 80023f8:	7dfb      	ldrb	r3, [r7, #23]
 80023fa:	3303      	adds	r3, #3
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	7db9      	ldrb	r1, [r7, #22]
 8002400:	2201      	movs	r2, #1
 8002402:	4618      	mov	r0, r3
 8002404:	f7fe fc68 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 1, y + 1, 1);
 8002408:	7dfb      	ldrb	r3, [r7, #23]
 800240a:	3301      	adds	r3, #1
 800240c:	b2d8      	uxtb	r0, r3
 800240e:	7dbb      	ldrb	r3, [r7, #22]
 8002410:	3301      	adds	r3, #1
 8002412:	b2db      	uxtb	r3, r3
 8002414:	2201      	movs	r2, #1
 8002416:	4619      	mov	r1, r3
 8002418:	f7fe fc5e 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 3, y + 1, 1);
 800241c:	7dfb      	ldrb	r3, [r7, #23]
 800241e:	3303      	adds	r3, #3
 8002420:	b2d8      	uxtb	r0, r3
 8002422:	7dbb      	ldrb	r3, [r7, #22]
 8002424:	3301      	adds	r3, #1
 8002426:	b2db      	uxtb	r3, r3
 8002428:	2201      	movs	r2, #1
 800242a:	4619      	mov	r1, r3
 800242c:	f7fe fc54 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 1, y + 2, 1);
 8002430:	7dfb      	ldrb	r3, [r7, #23]
 8002432:	3301      	adds	r3, #1
 8002434:	b2d8      	uxtb	r0, r3
 8002436:	7dbb      	ldrb	r3, [r7, #22]
 8002438:	3302      	adds	r3, #2
 800243a:	b2db      	uxtb	r3, r3
 800243c:	2201      	movs	r2, #1
 800243e:	4619      	mov	r1, r3
 8002440:	f7fe fc4a 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 3, y + 2, 1);
 8002444:	7dfb      	ldrb	r3, [r7, #23]
 8002446:	3303      	adds	r3, #3
 8002448:	b2d8      	uxtb	r0, r3
 800244a:	7dbb      	ldrb	r3, [r7, #22]
 800244c:	3302      	adds	r3, #2
 800244e:	b2db      	uxtb	r3, r3
 8002450:	2201      	movs	r2, #1
 8002452:	4619      	mov	r1, r3
 8002454:	f7fe fc40 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 1, y + 3, 1);
 8002458:	7dfb      	ldrb	r3, [r7, #23]
 800245a:	3301      	adds	r3, #1
 800245c:	b2d8      	uxtb	r0, r3
 800245e:	7dbb      	ldrb	r3, [r7, #22]
 8002460:	3303      	adds	r3, #3
 8002462:	b2db      	uxtb	r3, r3
 8002464:	2201      	movs	r2, #1
 8002466:	4619      	mov	r1, r3
 8002468:	f7fe fc36 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 3, y + 3, 1);
 800246c:	7dfb      	ldrb	r3, [r7, #23]
 800246e:	3303      	adds	r3, #3
 8002470:	b2d8      	uxtb	r0, r3
 8002472:	7dbb      	ldrb	r3, [r7, #22]
 8002474:	3303      	adds	r3, #3
 8002476:	b2db      	uxtb	r3, r3
 8002478:	2201      	movs	r2, #1
 800247a:	4619      	mov	r1, r3
 800247c:	f7fe fc2c 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 1, y + 4, 1);
 8002480:	7dfb      	ldrb	r3, [r7, #23]
 8002482:	3301      	adds	r3, #1
 8002484:	b2d8      	uxtb	r0, r3
 8002486:	7dbb      	ldrb	r3, [r7, #22]
 8002488:	3304      	adds	r3, #4
 800248a:	b2db      	uxtb	r3, r3
 800248c:	2201      	movs	r2, #1
 800248e:	4619      	mov	r1, r3
 8002490:	f7fe fc22 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 2, y + 4, 1);
 8002494:	7dfb      	ldrb	r3, [r7, #23]
 8002496:	3302      	adds	r3, #2
 8002498:	b2d8      	uxtb	r0, r3
 800249a:	7dbb      	ldrb	r3, [r7, #22]
 800249c:	3304      	adds	r3, #4
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	2201      	movs	r2, #1
 80024a2:	4619      	mov	r1, r3
 80024a4:	f7fe fc18 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 3, y + 4, 1);
 80024a8:	7dfb      	ldrb	r3, [r7, #23]
 80024aa:	3303      	adds	r3, #3
 80024ac:	b2d8      	uxtb	r0, r3
 80024ae:	7dbb      	ldrb	r3, [r7, #22]
 80024b0:	3304      	adds	r3, #4
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	2201      	movs	r2, #1
 80024b6:	4619      	mov	r1, r3
 80024b8:	f7fe fc0e 	bl	8000cd8 <nokia5110_SetPixel>
	    break;
 80024bc:	f000 bcb1 	b.w	8002e22 <nokia5110_WriteString+0x1fbe>
	}
	case '1':
	{
		nokia5110_SetPixel(x + 1, y + 1, 1);
 80024c0:	7dfb      	ldrb	r3, [r7, #23]
 80024c2:	3301      	adds	r3, #1
 80024c4:	b2d8      	uxtb	r0, r3
 80024c6:	7dbb      	ldrb	r3, [r7, #22]
 80024c8:	3301      	adds	r3, #1
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	2201      	movs	r2, #1
 80024ce:	4619      	mov	r1, r3
 80024d0:	f7fe fc02 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 2, y + 0, 1);
 80024d4:	7dfb      	ldrb	r3, [r7, #23]
 80024d6:	3302      	adds	r3, #2
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	7db9      	ldrb	r1, [r7, #22]
 80024dc:	2201      	movs	r2, #1
 80024de:	4618      	mov	r0, r3
 80024e0:	f7fe fbfa 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 2, y + 1, 1);
 80024e4:	7dfb      	ldrb	r3, [r7, #23]
 80024e6:	3302      	adds	r3, #2
 80024e8:	b2d8      	uxtb	r0, r3
 80024ea:	7dbb      	ldrb	r3, [r7, #22]
 80024ec:	3301      	adds	r3, #1
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	2201      	movs	r2, #1
 80024f2:	4619      	mov	r1, r3
 80024f4:	f7fe fbf0 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 2, y + 2, 1);
 80024f8:	7dfb      	ldrb	r3, [r7, #23]
 80024fa:	3302      	adds	r3, #2
 80024fc:	b2d8      	uxtb	r0, r3
 80024fe:	7dbb      	ldrb	r3, [r7, #22]
 8002500:	3302      	adds	r3, #2
 8002502:	b2db      	uxtb	r3, r3
 8002504:	2201      	movs	r2, #1
 8002506:	4619      	mov	r1, r3
 8002508:	f7fe fbe6 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 2, y + 3, 1);
 800250c:	7dfb      	ldrb	r3, [r7, #23]
 800250e:	3302      	adds	r3, #2
 8002510:	b2d8      	uxtb	r0, r3
 8002512:	7dbb      	ldrb	r3, [r7, #22]
 8002514:	3303      	adds	r3, #3
 8002516:	b2db      	uxtb	r3, r3
 8002518:	2201      	movs	r2, #1
 800251a:	4619      	mov	r1, r3
 800251c:	f7fe fbdc 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 2, y + 4, 1);
 8002520:	7dfb      	ldrb	r3, [r7, #23]
 8002522:	3302      	adds	r3, #2
 8002524:	b2d8      	uxtb	r0, r3
 8002526:	7dbb      	ldrb	r3, [r7, #22]
 8002528:	3304      	adds	r3, #4
 800252a:	b2db      	uxtb	r3, r3
 800252c:	2201      	movs	r2, #1
 800252e:	4619      	mov	r1, r3
 8002530:	f7fe fbd2 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 1, y + 4, 1);
 8002534:	7dfb      	ldrb	r3, [r7, #23]
 8002536:	3301      	adds	r3, #1
 8002538:	b2d8      	uxtb	r0, r3
 800253a:	7dbb      	ldrb	r3, [r7, #22]
 800253c:	3304      	adds	r3, #4
 800253e:	b2db      	uxtb	r3, r3
 8002540:	2201      	movs	r2, #1
 8002542:	4619      	mov	r1, r3
 8002544:	f7fe fbc8 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 3, y + 4, 1);
 8002548:	7dfb      	ldrb	r3, [r7, #23]
 800254a:	3303      	adds	r3, #3
 800254c:	b2d8      	uxtb	r0, r3
 800254e:	7dbb      	ldrb	r3, [r7, #22]
 8002550:	3304      	adds	r3, #4
 8002552:	b2db      	uxtb	r3, r3
 8002554:	2201      	movs	r2, #1
 8002556:	4619      	mov	r1, r3
 8002558:	f7fe fbbe 	bl	8000cd8 <nokia5110_SetPixel>
	    break;
 800255c:	f000 bc61 	b.w	8002e22 <nokia5110_WriteString+0x1fbe>
	}
	case '2':
	{
	    nokia5110_SetPixel(x + 1, y + 0, 1);
 8002560:	7dfb      	ldrb	r3, [r7, #23]
 8002562:	3301      	adds	r3, #1
 8002564:	b2db      	uxtb	r3, r3
 8002566:	7db9      	ldrb	r1, [r7, #22]
 8002568:	2201      	movs	r2, #1
 800256a:	4618      	mov	r0, r3
 800256c:	f7fe fbb4 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 2, y + 0, 1);
 8002570:	7dfb      	ldrb	r3, [r7, #23]
 8002572:	3302      	adds	r3, #2
 8002574:	b2db      	uxtb	r3, r3
 8002576:	7db9      	ldrb	r1, [r7, #22]
 8002578:	2201      	movs	r2, #1
 800257a:	4618      	mov	r0, r3
 800257c:	f7fe fbac 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 3, y + 0, 1);
 8002580:	7dfb      	ldrb	r3, [r7, #23]
 8002582:	3303      	adds	r3, #3
 8002584:	b2db      	uxtb	r3, r3
 8002586:	7db9      	ldrb	r1, [r7, #22]
 8002588:	2201      	movs	r2, #1
 800258a:	4618      	mov	r0, r3
 800258c:	f7fe fba4 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 3, y + 1, 1);
 8002590:	7dfb      	ldrb	r3, [r7, #23]
 8002592:	3303      	adds	r3, #3
 8002594:	b2d8      	uxtb	r0, r3
 8002596:	7dbb      	ldrb	r3, [r7, #22]
 8002598:	3301      	adds	r3, #1
 800259a:	b2db      	uxtb	r3, r3
 800259c:	2201      	movs	r2, #1
 800259e:	4619      	mov	r1, r3
 80025a0:	f7fe fb9a 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 1, y + 2, 1);
 80025a4:	7dfb      	ldrb	r3, [r7, #23]
 80025a6:	3301      	adds	r3, #1
 80025a8:	b2d8      	uxtb	r0, r3
 80025aa:	7dbb      	ldrb	r3, [r7, #22]
 80025ac:	3302      	adds	r3, #2
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	2201      	movs	r2, #1
 80025b2:	4619      	mov	r1, r3
 80025b4:	f7fe fb90 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 2, y + 2, 1);
 80025b8:	7dfb      	ldrb	r3, [r7, #23]
 80025ba:	3302      	adds	r3, #2
 80025bc:	b2d8      	uxtb	r0, r3
 80025be:	7dbb      	ldrb	r3, [r7, #22]
 80025c0:	3302      	adds	r3, #2
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	2201      	movs	r2, #1
 80025c6:	4619      	mov	r1, r3
 80025c8:	f7fe fb86 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 3, y + 2, 1);
 80025cc:	7dfb      	ldrb	r3, [r7, #23]
 80025ce:	3303      	adds	r3, #3
 80025d0:	b2d8      	uxtb	r0, r3
 80025d2:	7dbb      	ldrb	r3, [r7, #22]
 80025d4:	3302      	adds	r3, #2
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	2201      	movs	r2, #1
 80025da:	4619      	mov	r1, r3
 80025dc:	f7fe fb7c 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 1, y + 3, 1);
 80025e0:	7dfb      	ldrb	r3, [r7, #23]
 80025e2:	3301      	adds	r3, #1
 80025e4:	b2d8      	uxtb	r0, r3
 80025e6:	7dbb      	ldrb	r3, [r7, #22]
 80025e8:	3303      	adds	r3, #3
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	2201      	movs	r2, #1
 80025ee:	4619      	mov	r1, r3
 80025f0:	f7fe fb72 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 1, y + 4, 1);
 80025f4:	7dfb      	ldrb	r3, [r7, #23]
 80025f6:	3301      	adds	r3, #1
 80025f8:	b2d8      	uxtb	r0, r3
 80025fa:	7dbb      	ldrb	r3, [r7, #22]
 80025fc:	3304      	adds	r3, #4
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	2201      	movs	r2, #1
 8002602:	4619      	mov	r1, r3
 8002604:	f7fe fb68 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 2, y + 4, 1);
 8002608:	7dfb      	ldrb	r3, [r7, #23]
 800260a:	3302      	adds	r3, #2
 800260c:	b2d8      	uxtb	r0, r3
 800260e:	7dbb      	ldrb	r3, [r7, #22]
 8002610:	3304      	adds	r3, #4
 8002612:	b2db      	uxtb	r3, r3
 8002614:	2201      	movs	r2, #1
 8002616:	4619      	mov	r1, r3
 8002618:	f7fe fb5e 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 3, y + 4, 1);
 800261c:	7dfb      	ldrb	r3, [r7, #23]
 800261e:	3303      	adds	r3, #3
 8002620:	b2d8      	uxtb	r0, r3
 8002622:	7dbb      	ldrb	r3, [r7, #22]
 8002624:	3304      	adds	r3, #4
 8002626:	b2db      	uxtb	r3, r3
 8002628:	2201      	movs	r2, #1
 800262a:	4619      	mov	r1, r3
 800262c:	f7fe fb54 	bl	8000cd8 <nokia5110_SetPixel>
	    break;
 8002630:	e3f7      	b.n	8002e22 <nokia5110_WriteString+0x1fbe>
	}
	case '3':
	{
	    nokia5110_SetPixel(x + 1, y + 0, 1);
 8002632:	7dfb      	ldrb	r3, [r7, #23]
 8002634:	3301      	adds	r3, #1
 8002636:	b2db      	uxtb	r3, r3
 8002638:	7db9      	ldrb	r1, [r7, #22]
 800263a:	2201      	movs	r2, #1
 800263c:	4618      	mov	r0, r3
 800263e:	f7fe fb4b 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 2, y + 0, 1);
 8002642:	7dfb      	ldrb	r3, [r7, #23]
 8002644:	3302      	adds	r3, #2
 8002646:	b2db      	uxtb	r3, r3
 8002648:	7db9      	ldrb	r1, [r7, #22]
 800264a:	2201      	movs	r2, #1
 800264c:	4618      	mov	r0, r3
 800264e:	f7fe fb43 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 3, y + 0, 1);
 8002652:	7dfb      	ldrb	r3, [r7, #23]
 8002654:	3303      	adds	r3, #3
 8002656:	b2db      	uxtb	r3, r3
 8002658:	7db9      	ldrb	r1, [r7, #22]
 800265a:	2201      	movs	r2, #1
 800265c:	4618      	mov	r0, r3
 800265e:	f7fe fb3b 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 3, y + 1, 1);
 8002662:	7dfb      	ldrb	r3, [r7, #23]
 8002664:	3303      	adds	r3, #3
 8002666:	b2d8      	uxtb	r0, r3
 8002668:	7dbb      	ldrb	r3, [r7, #22]
 800266a:	3301      	adds	r3, #1
 800266c:	b2db      	uxtb	r3, r3
 800266e:	2201      	movs	r2, #1
 8002670:	4619      	mov	r1, r3
 8002672:	f7fe fb31 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 1, y + 2, 1);
 8002676:	7dfb      	ldrb	r3, [r7, #23]
 8002678:	3301      	adds	r3, #1
 800267a:	b2d8      	uxtb	r0, r3
 800267c:	7dbb      	ldrb	r3, [r7, #22]
 800267e:	3302      	adds	r3, #2
 8002680:	b2db      	uxtb	r3, r3
 8002682:	2201      	movs	r2, #1
 8002684:	4619      	mov	r1, r3
 8002686:	f7fe fb27 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 2, y + 2, 1);
 800268a:	7dfb      	ldrb	r3, [r7, #23]
 800268c:	3302      	adds	r3, #2
 800268e:	b2d8      	uxtb	r0, r3
 8002690:	7dbb      	ldrb	r3, [r7, #22]
 8002692:	3302      	adds	r3, #2
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2201      	movs	r2, #1
 8002698:	4619      	mov	r1, r3
 800269a:	f7fe fb1d 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 3, y + 2, 1);
 800269e:	7dfb      	ldrb	r3, [r7, #23]
 80026a0:	3303      	adds	r3, #3
 80026a2:	b2d8      	uxtb	r0, r3
 80026a4:	7dbb      	ldrb	r3, [r7, #22]
 80026a6:	3302      	adds	r3, #2
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	2201      	movs	r2, #1
 80026ac:	4619      	mov	r1, r3
 80026ae:	f7fe fb13 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 3, y + 3, 1);
 80026b2:	7dfb      	ldrb	r3, [r7, #23]
 80026b4:	3303      	adds	r3, #3
 80026b6:	b2d8      	uxtb	r0, r3
 80026b8:	7dbb      	ldrb	r3, [r7, #22]
 80026ba:	3303      	adds	r3, #3
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2201      	movs	r2, #1
 80026c0:	4619      	mov	r1, r3
 80026c2:	f7fe fb09 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 1, y + 4, 1);
 80026c6:	7dfb      	ldrb	r3, [r7, #23]
 80026c8:	3301      	adds	r3, #1
 80026ca:	b2d8      	uxtb	r0, r3
 80026cc:	7dbb      	ldrb	r3, [r7, #22]
 80026ce:	3304      	adds	r3, #4
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	2201      	movs	r2, #1
 80026d4:	4619      	mov	r1, r3
 80026d6:	f7fe faff 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 2, y + 4, 1);
 80026da:	7dfb      	ldrb	r3, [r7, #23]
 80026dc:	3302      	adds	r3, #2
 80026de:	b2d8      	uxtb	r0, r3
 80026e0:	7dbb      	ldrb	r3, [r7, #22]
 80026e2:	3304      	adds	r3, #4
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2201      	movs	r2, #1
 80026e8:	4619      	mov	r1, r3
 80026ea:	f7fe faf5 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 3, y + 4, 1);
 80026ee:	7dfb      	ldrb	r3, [r7, #23]
 80026f0:	3303      	adds	r3, #3
 80026f2:	b2d8      	uxtb	r0, r3
 80026f4:	7dbb      	ldrb	r3, [r7, #22]
 80026f6:	3304      	adds	r3, #4
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2201      	movs	r2, #1
 80026fc:	4619      	mov	r1, r3
 80026fe:	f7fe faeb 	bl	8000cd8 <nokia5110_SetPixel>
	    break;
 8002702:	e38e      	b.n	8002e22 <nokia5110_WriteString+0x1fbe>
	}
	case '4':
	{
	    nokia5110_SetPixel(x + 1, y + 0, 1);
 8002704:	7dfb      	ldrb	r3, [r7, #23]
 8002706:	3301      	adds	r3, #1
 8002708:	b2db      	uxtb	r3, r3
 800270a:	7db9      	ldrb	r1, [r7, #22]
 800270c:	2201      	movs	r2, #1
 800270e:	4618      	mov	r0, r3
 8002710:	f7fe fae2 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 3, y + 0, 1);
 8002714:	7dfb      	ldrb	r3, [r7, #23]
 8002716:	3303      	adds	r3, #3
 8002718:	b2db      	uxtb	r3, r3
 800271a:	7db9      	ldrb	r1, [r7, #22]
 800271c:	2201      	movs	r2, #1
 800271e:	4618      	mov	r0, r3
 8002720:	f7fe fada 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 1, y + 1, 1);
 8002724:	7dfb      	ldrb	r3, [r7, #23]
 8002726:	3301      	adds	r3, #1
 8002728:	b2d8      	uxtb	r0, r3
 800272a:	7dbb      	ldrb	r3, [r7, #22]
 800272c:	3301      	adds	r3, #1
 800272e:	b2db      	uxtb	r3, r3
 8002730:	2201      	movs	r2, #1
 8002732:	4619      	mov	r1, r3
 8002734:	f7fe fad0 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 3, y + 1, 1);
 8002738:	7dfb      	ldrb	r3, [r7, #23]
 800273a:	3303      	adds	r3, #3
 800273c:	b2d8      	uxtb	r0, r3
 800273e:	7dbb      	ldrb	r3, [r7, #22]
 8002740:	3301      	adds	r3, #1
 8002742:	b2db      	uxtb	r3, r3
 8002744:	2201      	movs	r2, #1
 8002746:	4619      	mov	r1, r3
 8002748:	f7fe fac6 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 1, y + 2, 1);
 800274c:	7dfb      	ldrb	r3, [r7, #23]
 800274e:	3301      	adds	r3, #1
 8002750:	b2d8      	uxtb	r0, r3
 8002752:	7dbb      	ldrb	r3, [r7, #22]
 8002754:	3302      	adds	r3, #2
 8002756:	b2db      	uxtb	r3, r3
 8002758:	2201      	movs	r2, #1
 800275a:	4619      	mov	r1, r3
 800275c:	f7fe fabc 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 2, y + 2, 1);
 8002760:	7dfb      	ldrb	r3, [r7, #23]
 8002762:	3302      	adds	r3, #2
 8002764:	b2d8      	uxtb	r0, r3
 8002766:	7dbb      	ldrb	r3, [r7, #22]
 8002768:	3302      	adds	r3, #2
 800276a:	b2db      	uxtb	r3, r3
 800276c:	2201      	movs	r2, #1
 800276e:	4619      	mov	r1, r3
 8002770:	f7fe fab2 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 3, y + 2, 1);
 8002774:	7dfb      	ldrb	r3, [r7, #23]
 8002776:	3303      	adds	r3, #3
 8002778:	b2d8      	uxtb	r0, r3
 800277a:	7dbb      	ldrb	r3, [r7, #22]
 800277c:	3302      	adds	r3, #2
 800277e:	b2db      	uxtb	r3, r3
 8002780:	2201      	movs	r2, #1
 8002782:	4619      	mov	r1, r3
 8002784:	f7fe faa8 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 3, y + 3, 1);
 8002788:	7dfb      	ldrb	r3, [r7, #23]
 800278a:	3303      	adds	r3, #3
 800278c:	b2d8      	uxtb	r0, r3
 800278e:	7dbb      	ldrb	r3, [r7, #22]
 8002790:	3303      	adds	r3, #3
 8002792:	b2db      	uxtb	r3, r3
 8002794:	2201      	movs	r2, #1
 8002796:	4619      	mov	r1, r3
 8002798:	f7fe fa9e 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 3, y + 4, 1);
 800279c:	7dfb      	ldrb	r3, [r7, #23]
 800279e:	3303      	adds	r3, #3
 80027a0:	b2d8      	uxtb	r0, r3
 80027a2:	7dbb      	ldrb	r3, [r7, #22]
 80027a4:	3304      	adds	r3, #4
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	2201      	movs	r2, #1
 80027aa:	4619      	mov	r1, r3
 80027ac:	f7fe fa94 	bl	8000cd8 <nokia5110_SetPixel>
	    break;
 80027b0:	e337      	b.n	8002e22 <nokia5110_WriteString+0x1fbe>
	}
	case '5':
	{
	    nokia5110_SetPixel(x + 1, y + 0, 1);
 80027b2:	7dfb      	ldrb	r3, [r7, #23]
 80027b4:	3301      	adds	r3, #1
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	7db9      	ldrb	r1, [r7, #22]
 80027ba:	2201      	movs	r2, #1
 80027bc:	4618      	mov	r0, r3
 80027be:	f7fe fa8b 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 2, y + 0, 1);
 80027c2:	7dfb      	ldrb	r3, [r7, #23]
 80027c4:	3302      	adds	r3, #2
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	7db9      	ldrb	r1, [r7, #22]
 80027ca:	2201      	movs	r2, #1
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7fe fa83 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 3, y + 0, 1);
 80027d2:	7dfb      	ldrb	r3, [r7, #23]
 80027d4:	3303      	adds	r3, #3
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	7db9      	ldrb	r1, [r7, #22]
 80027da:	2201      	movs	r2, #1
 80027dc:	4618      	mov	r0, r3
 80027de:	f7fe fa7b 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 1, y + 1, 1);
 80027e2:	7dfb      	ldrb	r3, [r7, #23]
 80027e4:	3301      	adds	r3, #1
 80027e6:	b2d8      	uxtb	r0, r3
 80027e8:	7dbb      	ldrb	r3, [r7, #22]
 80027ea:	3301      	adds	r3, #1
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2201      	movs	r2, #1
 80027f0:	4619      	mov	r1, r3
 80027f2:	f7fe fa71 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 1, y + 2, 1);
 80027f6:	7dfb      	ldrb	r3, [r7, #23]
 80027f8:	3301      	adds	r3, #1
 80027fa:	b2d8      	uxtb	r0, r3
 80027fc:	7dbb      	ldrb	r3, [r7, #22]
 80027fe:	3302      	adds	r3, #2
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2201      	movs	r2, #1
 8002804:	4619      	mov	r1, r3
 8002806:	f7fe fa67 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 2, y + 2, 1);
 800280a:	7dfb      	ldrb	r3, [r7, #23]
 800280c:	3302      	adds	r3, #2
 800280e:	b2d8      	uxtb	r0, r3
 8002810:	7dbb      	ldrb	r3, [r7, #22]
 8002812:	3302      	adds	r3, #2
 8002814:	b2db      	uxtb	r3, r3
 8002816:	2201      	movs	r2, #1
 8002818:	4619      	mov	r1, r3
 800281a:	f7fe fa5d 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 3, y + 2, 1);
 800281e:	7dfb      	ldrb	r3, [r7, #23]
 8002820:	3303      	adds	r3, #3
 8002822:	b2d8      	uxtb	r0, r3
 8002824:	7dbb      	ldrb	r3, [r7, #22]
 8002826:	3302      	adds	r3, #2
 8002828:	b2db      	uxtb	r3, r3
 800282a:	2201      	movs	r2, #1
 800282c:	4619      	mov	r1, r3
 800282e:	f7fe fa53 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 3, y + 3, 1);
 8002832:	7dfb      	ldrb	r3, [r7, #23]
 8002834:	3303      	adds	r3, #3
 8002836:	b2d8      	uxtb	r0, r3
 8002838:	7dbb      	ldrb	r3, [r7, #22]
 800283a:	3303      	adds	r3, #3
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2201      	movs	r2, #1
 8002840:	4619      	mov	r1, r3
 8002842:	f7fe fa49 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 1, y + 4, 1);
 8002846:	7dfb      	ldrb	r3, [r7, #23]
 8002848:	3301      	adds	r3, #1
 800284a:	b2d8      	uxtb	r0, r3
 800284c:	7dbb      	ldrb	r3, [r7, #22]
 800284e:	3304      	adds	r3, #4
 8002850:	b2db      	uxtb	r3, r3
 8002852:	2201      	movs	r2, #1
 8002854:	4619      	mov	r1, r3
 8002856:	f7fe fa3f 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 2, y + 4, 1);
 800285a:	7dfb      	ldrb	r3, [r7, #23]
 800285c:	3302      	adds	r3, #2
 800285e:	b2d8      	uxtb	r0, r3
 8002860:	7dbb      	ldrb	r3, [r7, #22]
 8002862:	3304      	adds	r3, #4
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2201      	movs	r2, #1
 8002868:	4619      	mov	r1, r3
 800286a:	f7fe fa35 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 3, y + 4, 1);
 800286e:	7dfb      	ldrb	r3, [r7, #23]
 8002870:	3303      	adds	r3, #3
 8002872:	b2d8      	uxtb	r0, r3
 8002874:	7dbb      	ldrb	r3, [r7, #22]
 8002876:	3304      	adds	r3, #4
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2201      	movs	r2, #1
 800287c:	4619      	mov	r1, r3
 800287e:	f7fe fa2b 	bl	8000cd8 <nokia5110_SetPixel>
	    break;
 8002882:	e2ce      	b.n	8002e22 <nokia5110_WriteString+0x1fbe>
	}
	case '6':
	{
	    nokia5110_SetPixel(x + 1, y + 0, 1);
 8002884:	7dfb      	ldrb	r3, [r7, #23]
 8002886:	3301      	adds	r3, #1
 8002888:	b2db      	uxtb	r3, r3
 800288a:	7db9      	ldrb	r1, [r7, #22]
 800288c:	2201      	movs	r2, #1
 800288e:	4618      	mov	r0, r3
 8002890:	f7fe fa22 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 2, y + 0, 1);
 8002894:	7dfb      	ldrb	r3, [r7, #23]
 8002896:	3302      	adds	r3, #2
 8002898:	b2db      	uxtb	r3, r3
 800289a:	7db9      	ldrb	r1, [r7, #22]
 800289c:	2201      	movs	r2, #1
 800289e:	4618      	mov	r0, r3
 80028a0:	f7fe fa1a 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 3, y + 0, 1);
 80028a4:	7dfb      	ldrb	r3, [r7, #23]
 80028a6:	3303      	adds	r3, #3
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	7db9      	ldrb	r1, [r7, #22]
 80028ac:	2201      	movs	r2, #1
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7fe fa12 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 1, y + 1, 1);
 80028b4:	7dfb      	ldrb	r3, [r7, #23]
 80028b6:	3301      	adds	r3, #1
 80028b8:	b2d8      	uxtb	r0, r3
 80028ba:	7dbb      	ldrb	r3, [r7, #22]
 80028bc:	3301      	adds	r3, #1
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	2201      	movs	r2, #1
 80028c2:	4619      	mov	r1, r3
 80028c4:	f7fe fa08 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 1, y + 2, 1);
 80028c8:	7dfb      	ldrb	r3, [r7, #23]
 80028ca:	3301      	adds	r3, #1
 80028cc:	b2d8      	uxtb	r0, r3
 80028ce:	7dbb      	ldrb	r3, [r7, #22]
 80028d0:	3302      	adds	r3, #2
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	2201      	movs	r2, #1
 80028d6:	4619      	mov	r1, r3
 80028d8:	f7fe f9fe 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 2, y + 2, 1);
 80028dc:	7dfb      	ldrb	r3, [r7, #23]
 80028de:	3302      	adds	r3, #2
 80028e0:	b2d8      	uxtb	r0, r3
 80028e2:	7dbb      	ldrb	r3, [r7, #22]
 80028e4:	3302      	adds	r3, #2
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	2201      	movs	r2, #1
 80028ea:	4619      	mov	r1, r3
 80028ec:	f7fe f9f4 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 3, y + 2, 1);
 80028f0:	7dfb      	ldrb	r3, [r7, #23]
 80028f2:	3303      	adds	r3, #3
 80028f4:	b2d8      	uxtb	r0, r3
 80028f6:	7dbb      	ldrb	r3, [r7, #22]
 80028f8:	3302      	adds	r3, #2
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	2201      	movs	r2, #1
 80028fe:	4619      	mov	r1, r3
 8002900:	f7fe f9ea 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 1, y + 3, 1);
 8002904:	7dfb      	ldrb	r3, [r7, #23]
 8002906:	3301      	adds	r3, #1
 8002908:	b2d8      	uxtb	r0, r3
 800290a:	7dbb      	ldrb	r3, [r7, #22]
 800290c:	3303      	adds	r3, #3
 800290e:	b2db      	uxtb	r3, r3
 8002910:	2201      	movs	r2, #1
 8002912:	4619      	mov	r1, r3
 8002914:	f7fe f9e0 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 3, y + 3, 1);
 8002918:	7dfb      	ldrb	r3, [r7, #23]
 800291a:	3303      	adds	r3, #3
 800291c:	b2d8      	uxtb	r0, r3
 800291e:	7dbb      	ldrb	r3, [r7, #22]
 8002920:	3303      	adds	r3, #3
 8002922:	b2db      	uxtb	r3, r3
 8002924:	2201      	movs	r2, #1
 8002926:	4619      	mov	r1, r3
 8002928:	f7fe f9d6 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 1, y + 4, 1);
 800292c:	7dfb      	ldrb	r3, [r7, #23]
 800292e:	3301      	adds	r3, #1
 8002930:	b2d8      	uxtb	r0, r3
 8002932:	7dbb      	ldrb	r3, [r7, #22]
 8002934:	3304      	adds	r3, #4
 8002936:	b2db      	uxtb	r3, r3
 8002938:	2201      	movs	r2, #1
 800293a:	4619      	mov	r1, r3
 800293c:	f7fe f9cc 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 2, y + 4, 1);
 8002940:	7dfb      	ldrb	r3, [r7, #23]
 8002942:	3302      	adds	r3, #2
 8002944:	b2d8      	uxtb	r0, r3
 8002946:	7dbb      	ldrb	r3, [r7, #22]
 8002948:	3304      	adds	r3, #4
 800294a:	b2db      	uxtb	r3, r3
 800294c:	2201      	movs	r2, #1
 800294e:	4619      	mov	r1, r3
 8002950:	f7fe f9c2 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 3, y + 4, 1);
 8002954:	7dfb      	ldrb	r3, [r7, #23]
 8002956:	3303      	adds	r3, #3
 8002958:	b2d8      	uxtb	r0, r3
 800295a:	7dbb      	ldrb	r3, [r7, #22]
 800295c:	3304      	adds	r3, #4
 800295e:	b2db      	uxtb	r3, r3
 8002960:	2201      	movs	r2, #1
 8002962:	4619      	mov	r1, r3
 8002964:	f7fe f9b8 	bl	8000cd8 <nokia5110_SetPixel>
	    break;
 8002968:	e25b      	b.n	8002e22 <nokia5110_WriteString+0x1fbe>
	}
	case '7':
	{
		nokia5110_SetPixel(x + 0, y + 0, 1);
 800296a:	7db9      	ldrb	r1, [r7, #22]
 800296c:	7dfb      	ldrb	r3, [r7, #23]
 800296e:	2201      	movs	r2, #1
 8002970:	4618      	mov	r0, r3
 8002972:	f7fe f9b1 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 1, y + 0, 1);
 8002976:	7dfb      	ldrb	r3, [r7, #23]
 8002978:	3301      	adds	r3, #1
 800297a:	b2db      	uxtb	r3, r3
 800297c:	7db9      	ldrb	r1, [r7, #22]
 800297e:	2201      	movs	r2, #1
 8002980:	4618      	mov	r0, r3
 8002982:	f7fe f9a9 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 2, y + 0, 1);
 8002986:	7dfb      	ldrb	r3, [r7, #23]
 8002988:	3302      	adds	r3, #2
 800298a:	b2db      	uxtb	r3, r3
 800298c:	7db9      	ldrb	r1, [r7, #22]
 800298e:	2201      	movs	r2, #1
 8002990:	4618      	mov	r0, r3
 8002992:	f7fe f9a1 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 3, y + 0, 1);
 8002996:	7dfb      	ldrb	r3, [r7, #23]
 8002998:	3303      	adds	r3, #3
 800299a:	b2db      	uxtb	r3, r3
 800299c:	7db9      	ldrb	r1, [r7, #22]
 800299e:	2201      	movs	r2, #1
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7fe f999 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 3, y + 1, 1);
 80029a6:	7dfb      	ldrb	r3, [r7, #23]
 80029a8:	3303      	adds	r3, #3
 80029aa:	b2d8      	uxtb	r0, r3
 80029ac:	7dbb      	ldrb	r3, [r7, #22]
 80029ae:	3301      	adds	r3, #1
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	2201      	movs	r2, #1
 80029b4:	4619      	mov	r1, r3
 80029b6:	f7fe f98f 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 2, y + 2, 1);
 80029ba:	7dfb      	ldrb	r3, [r7, #23]
 80029bc:	3302      	adds	r3, #2
 80029be:	b2d8      	uxtb	r0, r3
 80029c0:	7dbb      	ldrb	r3, [r7, #22]
 80029c2:	3302      	adds	r3, #2
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	2201      	movs	r2, #1
 80029c8:	4619      	mov	r1, r3
 80029ca:	f7fe f985 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 1, y + 3, 1);
 80029ce:	7dfb      	ldrb	r3, [r7, #23]
 80029d0:	3301      	adds	r3, #1
 80029d2:	b2d8      	uxtb	r0, r3
 80029d4:	7dbb      	ldrb	r3, [r7, #22]
 80029d6:	3303      	adds	r3, #3
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	2201      	movs	r2, #1
 80029dc:	4619      	mov	r1, r3
 80029de:	f7fe f97b 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 0, y + 4, 1);
 80029e2:	7dbb      	ldrb	r3, [r7, #22]
 80029e4:	3304      	adds	r3, #4
 80029e6:	b2d9      	uxtb	r1, r3
 80029e8:	7dfb      	ldrb	r3, [r7, #23]
 80029ea:	2201      	movs	r2, #1
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7fe f973 	bl	8000cd8 <nokia5110_SetPixel>
	    break;
 80029f2:	e216      	b.n	8002e22 <nokia5110_WriteString+0x1fbe>
	}
	case '8':
	{
	    nokia5110_SetPixel(x + 1, y + 0, 1);
 80029f4:	7dfb      	ldrb	r3, [r7, #23]
 80029f6:	3301      	adds	r3, #1
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	7db9      	ldrb	r1, [r7, #22]
 80029fc:	2201      	movs	r2, #1
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7fe f96a 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 2, y + 0, 1);
 8002a04:	7dfb      	ldrb	r3, [r7, #23]
 8002a06:	3302      	adds	r3, #2
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	7db9      	ldrb	r1, [r7, #22]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7fe f962 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 3, y + 0, 1);
 8002a14:	7dfb      	ldrb	r3, [r7, #23]
 8002a16:	3303      	adds	r3, #3
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	7db9      	ldrb	r1, [r7, #22]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7fe f95a 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 1, y + 1, 1);
 8002a24:	7dfb      	ldrb	r3, [r7, #23]
 8002a26:	3301      	adds	r3, #1
 8002a28:	b2d8      	uxtb	r0, r3
 8002a2a:	7dbb      	ldrb	r3, [r7, #22]
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	2201      	movs	r2, #1
 8002a32:	4619      	mov	r1, r3
 8002a34:	f7fe f950 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 3, y + 1, 1);
 8002a38:	7dfb      	ldrb	r3, [r7, #23]
 8002a3a:	3303      	adds	r3, #3
 8002a3c:	b2d8      	uxtb	r0, r3
 8002a3e:	7dbb      	ldrb	r3, [r7, #22]
 8002a40:	3301      	adds	r3, #1
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	2201      	movs	r2, #1
 8002a46:	4619      	mov	r1, r3
 8002a48:	f7fe f946 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 1, y + 2, 1);
 8002a4c:	7dfb      	ldrb	r3, [r7, #23]
 8002a4e:	3301      	adds	r3, #1
 8002a50:	b2d8      	uxtb	r0, r3
 8002a52:	7dbb      	ldrb	r3, [r7, #22]
 8002a54:	3302      	adds	r3, #2
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	2201      	movs	r2, #1
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	f7fe f93c 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 2, y + 2, 1);
 8002a60:	7dfb      	ldrb	r3, [r7, #23]
 8002a62:	3302      	adds	r3, #2
 8002a64:	b2d8      	uxtb	r0, r3
 8002a66:	7dbb      	ldrb	r3, [r7, #22]
 8002a68:	3302      	adds	r3, #2
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	4619      	mov	r1, r3
 8002a70:	f7fe f932 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 3, y + 2, 1);
 8002a74:	7dfb      	ldrb	r3, [r7, #23]
 8002a76:	3303      	adds	r3, #3
 8002a78:	b2d8      	uxtb	r0, r3
 8002a7a:	7dbb      	ldrb	r3, [r7, #22]
 8002a7c:	3302      	adds	r3, #2
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	2201      	movs	r2, #1
 8002a82:	4619      	mov	r1, r3
 8002a84:	f7fe f928 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 1, y + 3, 1);
 8002a88:	7dfb      	ldrb	r3, [r7, #23]
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	b2d8      	uxtb	r0, r3
 8002a8e:	7dbb      	ldrb	r3, [r7, #22]
 8002a90:	3303      	adds	r3, #3
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	2201      	movs	r2, #1
 8002a96:	4619      	mov	r1, r3
 8002a98:	f7fe f91e 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 3, y + 3, 1);
 8002a9c:	7dfb      	ldrb	r3, [r7, #23]
 8002a9e:	3303      	adds	r3, #3
 8002aa0:	b2d8      	uxtb	r0, r3
 8002aa2:	7dbb      	ldrb	r3, [r7, #22]
 8002aa4:	3303      	adds	r3, #3
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	4619      	mov	r1, r3
 8002aac:	f7fe f914 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 1, y + 4, 1);
 8002ab0:	7dfb      	ldrb	r3, [r7, #23]
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	b2d8      	uxtb	r0, r3
 8002ab6:	7dbb      	ldrb	r3, [r7, #22]
 8002ab8:	3304      	adds	r3, #4
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	2201      	movs	r2, #1
 8002abe:	4619      	mov	r1, r3
 8002ac0:	f7fe f90a 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 2, y + 4, 1);
 8002ac4:	7dfb      	ldrb	r3, [r7, #23]
 8002ac6:	3302      	adds	r3, #2
 8002ac8:	b2d8      	uxtb	r0, r3
 8002aca:	7dbb      	ldrb	r3, [r7, #22]
 8002acc:	3304      	adds	r3, #4
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	f7fe f900 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 3, y + 4, 1);
 8002ad8:	7dfb      	ldrb	r3, [r7, #23]
 8002ada:	3303      	adds	r3, #3
 8002adc:	b2d8      	uxtb	r0, r3
 8002ade:	7dbb      	ldrb	r3, [r7, #22]
 8002ae0:	3304      	adds	r3, #4
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	f7fe f8f6 	bl	8000cd8 <nokia5110_SetPixel>
	    break;
 8002aec:	e199      	b.n	8002e22 <nokia5110_WriteString+0x1fbe>
	}
	case '9':
	{
	    nokia5110_SetPixel(x + 1, y + 0, 1);
 8002aee:	7dfb      	ldrb	r3, [r7, #23]
 8002af0:	3301      	adds	r3, #1
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	7db9      	ldrb	r1, [r7, #22]
 8002af6:	2201      	movs	r2, #1
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7fe f8ed 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 2, y + 0, 1);
 8002afe:	7dfb      	ldrb	r3, [r7, #23]
 8002b00:	3302      	adds	r3, #2
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	7db9      	ldrb	r1, [r7, #22]
 8002b06:	2201      	movs	r2, #1
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7fe f8e5 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 3, y + 0, 1);
 8002b0e:	7dfb      	ldrb	r3, [r7, #23]
 8002b10:	3303      	adds	r3, #3
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	7db9      	ldrb	r1, [r7, #22]
 8002b16:	2201      	movs	r2, #1
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f7fe f8dd 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 1, y + 1, 1);
 8002b1e:	7dfb      	ldrb	r3, [r7, #23]
 8002b20:	3301      	adds	r3, #1
 8002b22:	b2d8      	uxtb	r0, r3
 8002b24:	7dbb      	ldrb	r3, [r7, #22]
 8002b26:	3301      	adds	r3, #1
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	f7fe f8d3 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 3, y + 1, 1);
 8002b32:	7dfb      	ldrb	r3, [r7, #23]
 8002b34:	3303      	adds	r3, #3
 8002b36:	b2d8      	uxtb	r0, r3
 8002b38:	7dbb      	ldrb	r3, [r7, #22]
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2201      	movs	r2, #1
 8002b40:	4619      	mov	r1, r3
 8002b42:	f7fe f8c9 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 1, y + 2, 1);
 8002b46:	7dfb      	ldrb	r3, [r7, #23]
 8002b48:	3301      	adds	r3, #1
 8002b4a:	b2d8      	uxtb	r0, r3
 8002b4c:	7dbb      	ldrb	r3, [r7, #22]
 8002b4e:	3302      	adds	r3, #2
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2201      	movs	r2, #1
 8002b54:	4619      	mov	r1, r3
 8002b56:	f7fe f8bf 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 2, y + 2, 1);
 8002b5a:	7dfb      	ldrb	r3, [r7, #23]
 8002b5c:	3302      	adds	r3, #2
 8002b5e:	b2d8      	uxtb	r0, r3
 8002b60:	7dbb      	ldrb	r3, [r7, #22]
 8002b62:	3302      	adds	r3, #2
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	2201      	movs	r2, #1
 8002b68:	4619      	mov	r1, r3
 8002b6a:	f7fe f8b5 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 3, y + 2, 1);
 8002b6e:	7dfb      	ldrb	r3, [r7, #23]
 8002b70:	3303      	adds	r3, #3
 8002b72:	b2d8      	uxtb	r0, r3
 8002b74:	7dbb      	ldrb	r3, [r7, #22]
 8002b76:	3302      	adds	r3, #2
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	f7fe f8ab 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 3, y + 3, 1);
 8002b82:	7dfb      	ldrb	r3, [r7, #23]
 8002b84:	3303      	adds	r3, #3
 8002b86:	b2d8      	uxtb	r0, r3
 8002b88:	7dbb      	ldrb	r3, [r7, #22]
 8002b8a:	3303      	adds	r3, #3
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2201      	movs	r2, #1
 8002b90:	4619      	mov	r1, r3
 8002b92:	f7fe f8a1 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 1, y + 4, 1);
 8002b96:	7dfb      	ldrb	r3, [r7, #23]
 8002b98:	3301      	adds	r3, #1
 8002b9a:	b2d8      	uxtb	r0, r3
 8002b9c:	7dbb      	ldrb	r3, [r7, #22]
 8002b9e:	3304      	adds	r3, #4
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	f7fe f897 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 2, y + 4, 1);
 8002baa:	7dfb      	ldrb	r3, [r7, #23]
 8002bac:	3302      	adds	r3, #2
 8002bae:	b2d8      	uxtb	r0, r3
 8002bb0:	7dbb      	ldrb	r3, [r7, #22]
 8002bb2:	3304      	adds	r3, #4
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	4619      	mov	r1, r3
 8002bba:	f7fe f88d 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 3, y + 4, 1);
 8002bbe:	7dfb      	ldrb	r3, [r7, #23]
 8002bc0:	3303      	adds	r3, #3
 8002bc2:	b2d8      	uxtb	r0, r3
 8002bc4:	7dbb      	ldrb	r3, [r7, #22]
 8002bc6:	3304      	adds	r3, #4
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	2201      	movs	r2, #1
 8002bcc:	4619      	mov	r1, r3
 8002bce:	f7fe f883 	bl	8000cd8 <nokia5110_SetPixel>
	    break;
 8002bd2:	e126      	b.n	8002e22 <nokia5110_WriteString+0x1fbe>
	}
	case '*':
	{
	    nokia5110_SetPixel(x + 0, y + 0, 1);
 8002bd4:	7db9      	ldrb	r1, [r7, #22]
 8002bd6:	7dfb      	ldrb	r3, [r7, #23]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7fe f87c 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 4, y + 0, 1);
 8002be0:	7dfb      	ldrb	r3, [r7, #23]
 8002be2:	3304      	adds	r3, #4
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	7db9      	ldrb	r1, [r7, #22]
 8002be8:	2201      	movs	r2, #1
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7fe f874 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 1, y + 1, 1);
 8002bf0:	7dfb      	ldrb	r3, [r7, #23]
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	b2d8      	uxtb	r0, r3
 8002bf6:	7dbb      	ldrb	r3, [r7, #22]
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	4619      	mov	r1, r3
 8002c00:	f7fe f86a 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 2, y + 1, 1);
 8002c04:	7dfb      	ldrb	r3, [r7, #23]
 8002c06:	3302      	adds	r3, #2
 8002c08:	b2d8      	uxtb	r0, r3
 8002c0a:	7dbb      	ldrb	r3, [r7, #22]
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	2201      	movs	r2, #1
 8002c12:	4619      	mov	r1, r3
 8002c14:	f7fe f860 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 3, y + 1, 1);
 8002c18:	7dfb      	ldrb	r3, [r7, #23]
 8002c1a:	3303      	adds	r3, #3
 8002c1c:	b2d8      	uxtb	r0, r3
 8002c1e:	7dbb      	ldrb	r3, [r7, #22]
 8002c20:	3301      	adds	r3, #1
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	2201      	movs	r2, #1
 8002c26:	4619      	mov	r1, r3
 8002c28:	f7fe f856 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 0, y + 2, 1);
 8002c2c:	7dbb      	ldrb	r3, [r7, #22]
 8002c2e:	3302      	adds	r3, #2
 8002c30:	b2d9      	uxtb	r1, r3
 8002c32:	7dfb      	ldrb	r3, [r7, #23]
 8002c34:	2201      	movs	r2, #1
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7fe f84e 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 1, y + 2, 1);
 8002c3c:	7dfb      	ldrb	r3, [r7, #23]
 8002c3e:	3301      	adds	r3, #1
 8002c40:	b2d8      	uxtb	r0, r3
 8002c42:	7dbb      	ldrb	r3, [r7, #22]
 8002c44:	3302      	adds	r3, #2
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	2201      	movs	r2, #1
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	f7fe f844 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 2, y + 2, 1);
 8002c50:	7dfb      	ldrb	r3, [r7, #23]
 8002c52:	3302      	adds	r3, #2
 8002c54:	b2d8      	uxtb	r0, r3
 8002c56:	7dbb      	ldrb	r3, [r7, #22]
 8002c58:	3302      	adds	r3, #2
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	4619      	mov	r1, r3
 8002c60:	f7fe f83a 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 3, y + 2, 1);
 8002c64:	7dfb      	ldrb	r3, [r7, #23]
 8002c66:	3303      	adds	r3, #3
 8002c68:	b2d8      	uxtb	r0, r3
 8002c6a:	7dbb      	ldrb	r3, [r7, #22]
 8002c6c:	3302      	adds	r3, #2
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	2201      	movs	r2, #1
 8002c72:	4619      	mov	r1, r3
 8002c74:	f7fe f830 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 4, y + 2, 1);
 8002c78:	7dfb      	ldrb	r3, [r7, #23]
 8002c7a:	3304      	adds	r3, #4
 8002c7c:	b2d8      	uxtb	r0, r3
 8002c7e:	7dbb      	ldrb	r3, [r7, #22]
 8002c80:	3302      	adds	r3, #2
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	2201      	movs	r2, #1
 8002c86:	4619      	mov	r1, r3
 8002c88:	f7fe f826 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 1, y + 3, 1);
 8002c8c:	7dfb      	ldrb	r3, [r7, #23]
 8002c8e:	3301      	adds	r3, #1
 8002c90:	b2d8      	uxtb	r0, r3
 8002c92:	7dbb      	ldrb	r3, [r7, #22]
 8002c94:	3303      	adds	r3, #3
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	2201      	movs	r2, #1
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	f7fe f81c 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 2, y + 3, 1);
 8002ca0:	7dfb      	ldrb	r3, [r7, #23]
 8002ca2:	3302      	adds	r3, #2
 8002ca4:	b2d8      	uxtb	r0, r3
 8002ca6:	7dbb      	ldrb	r3, [r7, #22]
 8002ca8:	3303      	adds	r3, #3
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	2201      	movs	r2, #1
 8002cae:	4619      	mov	r1, r3
 8002cb0:	f7fe f812 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 3, y + 3, 1);
 8002cb4:	7dfb      	ldrb	r3, [r7, #23]
 8002cb6:	3303      	adds	r3, #3
 8002cb8:	b2d8      	uxtb	r0, r3
 8002cba:	7dbb      	ldrb	r3, [r7, #22]
 8002cbc:	3303      	adds	r3, #3
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	f7fe f808 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 0, y + 4, 1);
 8002cc8:	7dbb      	ldrb	r3, [r7, #22]
 8002cca:	3304      	adds	r3, #4
 8002ccc:	b2d9      	uxtb	r1, r3
 8002cce:	7dfb      	ldrb	r3, [r7, #23]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7fe f800 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 4, y + 4, 1);
 8002cd8:	7dfb      	ldrb	r3, [r7, #23]
 8002cda:	3304      	adds	r3, #4
 8002cdc:	b2d8      	uxtb	r0, r3
 8002cde:	7dbb      	ldrb	r3, [r7, #22]
 8002ce0:	3304      	adds	r3, #4
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	f7fd fff6 	bl	8000cd8 <nokia5110_SetPixel>
	    break;
 8002cec:	e099      	b.n	8002e22 <nokia5110_WriteString+0x1fbe>
	}
	case '#':
	{
	    nokia5110_SetPixel(x + 1, y + 0, 1);
 8002cee:	7dfb      	ldrb	r3, [r7, #23]
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	7db9      	ldrb	r1, [r7, #22]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7fd ffed 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 3, y + 0, 1);
 8002cfe:	7dfb      	ldrb	r3, [r7, #23]
 8002d00:	3303      	adds	r3, #3
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	7db9      	ldrb	r1, [r7, #22]
 8002d06:	2201      	movs	r2, #1
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7fd ffe5 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 0, y + 1, 1);
 8002d0e:	7dbb      	ldrb	r3, [r7, #22]
 8002d10:	3301      	adds	r3, #1
 8002d12:	b2d9      	uxtb	r1, r3
 8002d14:	7dfb      	ldrb	r3, [r7, #23]
 8002d16:	2201      	movs	r2, #1
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7fd ffdd 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 1, y + 1, 1);
 8002d1e:	7dfb      	ldrb	r3, [r7, #23]
 8002d20:	3301      	adds	r3, #1
 8002d22:	b2d8      	uxtb	r0, r3
 8002d24:	7dbb      	ldrb	r3, [r7, #22]
 8002d26:	3301      	adds	r3, #1
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	f7fd ffd3 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 2, y + 1, 1);
 8002d32:	7dfb      	ldrb	r3, [r7, #23]
 8002d34:	3302      	adds	r3, #2
 8002d36:	b2d8      	uxtb	r0, r3
 8002d38:	7dbb      	ldrb	r3, [r7, #22]
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	2201      	movs	r2, #1
 8002d40:	4619      	mov	r1, r3
 8002d42:	f7fd ffc9 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 3, y + 1, 1);
 8002d46:	7dfb      	ldrb	r3, [r7, #23]
 8002d48:	3303      	adds	r3, #3
 8002d4a:	b2d8      	uxtb	r0, r3
 8002d4c:	7dbb      	ldrb	r3, [r7, #22]
 8002d4e:	3301      	adds	r3, #1
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2201      	movs	r2, #1
 8002d54:	4619      	mov	r1, r3
 8002d56:	f7fd ffbf 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 4, y + 1, 1);
 8002d5a:	7dfb      	ldrb	r3, [r7, #23]
 8002d5c:	3304      	adds	r3, #4
 8002d5e:	b2d8      	uxtb	r0, r3
 8002d60:	7dbb      	ldrb	r3, [r7, #22]
 8002d62:	3301      	adds	r3, #1
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2201      	movs	r2, #1
 8002d68:	4619      	mov	r1, r3
 8002d6a:	f7fd ffb5 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 1, y + 2, 1);
 8002d6e:	7dfb      	ldrb	r3, [r7, #23]
 8002d70:	3301      	adds	r3, #1
 8002d72:	b2d8      	uxtb	r0, r3
 8002d74:	7dbb      	ldrb	r3, [r7, #22]
 8002d76:	3302      	adds	r3, #2
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	f7fd ffab 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 3, y + 2, 1);
 8002d82:	7dfb      	ldrb	r3, [r7, #23]
 8002d84:	3303      	adds	r3, #3
 8002d86:	b2d8      	uxtb	r0, r3
 8002d88:	7dbb      	ldrb	r3, [r7, #22]
 8002d8a:	3302      	adds	r3, #2
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	2201      	movs	r2, #1
 8002d90:	4619      	mov	r1, r3
 8002d92:	f7fd ffa1 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 0, y + 3, 1);
 8002d96:	7dbb      	ldrb	r3, [r7, #22]
 8002d98:	3303      	adds	r3, #3
 8002d9a:	b2d9      	uxtb	r1, r3
 8002d9c:	7dfb      	ldrb	r3, [r7, #23]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7fd ff99 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 1, y + 3, 1);
 8002da6:	7dfb      	ldrb	r3, [r7, #23]
 8002da8:	3301      	adds	r3, #1
 8002daa:	b2d8      	uxtb	r0, r3
 8002dac:	7dbb      	ldrb	r3, [r7, #22]
 8002dae:	3303      	adds	r3, #3
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	2201      	movs	r2, #1
 8002db4:	4619      	mov	r1, r3
 8002db6:	f7fd ff8f 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 2, y + 3, 1);
 8002dba:	7dfb      	ldrb	r3, [r7, #23]
 8002dbc:	3302      	adds	r3, #2
 8002dbe:	b2d8      	uxtb	r0, r3
 8002dc0:	7dbb      	ldrb	r3, [r7, #22]
 8002dc2:	3303      	adds	r3, #3
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	4619      	mov	r1, r3
 8002dca:	f7fd ff85 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 3, y + 3, 1);
 8002dce:	7dfb      	ldrb	r3, [r7, #23]
 8002dd0:	3303      	adds	r3, #3
 8002dd2:	b2d8      	uxtb	r0, r3
 8002dd4:	7dbb      	ldrb	r3, [r7, #22]
 8002dd6:	3303      	adds	r3, #3
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	2201      	movs	r2, #1
 8002ddc:	4619      	mov	r1, r3
 8002dde:	f7fd ff7b 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 4, y + 3, 1);
 8002de2:	7dfb      	ldrb	r3, [r7, #23]
 8002de4:	3304      	adds	r3, #4
 8002de6:	b2d8      	uxtb	r0, r3
 8002de8:	7dbb      	ldrb	r3, [r7, #22]
 8002dea:	3303      	adds	r3, #3
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2201      	movs	r2, #1
 8002df0:	4619      	mov	r1, r3
 8002df2:	f7fd ff71 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 1, y + 4, 1);
 8002df6:	7dfb      	ldrb	r3, [r7, #23]
 8002df8:	3301      	adds	r3, #1
 8002dfa:	b2d8      	uxtb	r0, r3
 8002dfc:	7dbb      	ldrb	r3, [r7, #22]
 8002dfe:	3304      	adds	r3, #4
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	2201      	movs	r2, #1
 8002e04:	4619      	mov	r1, r3
 8002e06:	f7fd ff67 	bl	8000cd8 <nokia5110_SetPixel>
	    nokia5110_SetPixel(x + 3, y + 4, 1);
 8002e0a:	7dfb      	ldrb	r3, [r7, #23]
 8002e0c:	3303      	adds	r3, #3
 8002e0e:	b2d8      	uxtb	r0, r3
 8002e10:	7dbb      	ldrb	r3, [r7, #22]
 8002e12:	3304      	adds	r3, #4
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2201      	movs	r2, #1
 8002e18:	4619      	mov	r1, r3
 8002e1a:	f7fd ff5d 	bl	8000cd8 <nokia5110_SetPixel>

	    break;
 8002e1e:	e000      	b.n	8002e22 <nokia5110_WriteString+0x1fbe>
	}

	default:
	{
		  break;
 8002e20:	bf00      	nop
	}
	}

	x += 6;
 8002e22:	7dfb      	ldrb	r3, [r7, #23]
 8002e24:	3306      	adds	r3, #6
 8002e26:	75fb      	strb	r3, [r7, #23]

    if (x >= 80)
 8002e28:	7dfb      	ldrb	r3, [r7, #23]
 8002e2a:	2b4f      	cmp	r3, #79	; 0x4f
 8002e2c:	d904      	bls.n	8002e38 <nokia5110_WriteString+0x1fd4>
    {
        x = 0;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	75fb      	strb	r3, [r7, #23]
        y += 6;
 8002e32:	7dbb      	ldrb	r3, [r7, #22]
 8002e34:	3306      	adds	r3, #6
 8002e36:	75bb      	strb	r3, [r7, #22]
    }

    if (y >= 48)
 8002e38:	7dbb      	ldrb	r3, [r7, #22]
 8002e3a:	2b2f      	cmp	r3, #47	; 0x2f
 8002e3c:	d80b      	bhi.n	8002e56 <nokia5110_WriteString+0x1ff2>
	for(int i = 0; i< strlen(word); i++)
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	3301      	adds	r3, #1
 8002e42:	613b      	str	r3, [r7, #16]
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f7fd f9bf 	bl	80001c8 <strlen>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	f63e a814 	bhi.w	8000e7c <nokia5110_WriteString+0x18>

        break;
    }

	}
}
 8002e54:	e000      	b.n	8002e58 <nokia5110_WriteString+0x1ff4>
        break;
 8002e56:	bf00      	nop
}
 8002e58:	bf00      	nop
 8002e5a:	3718      	adds	r7, #24
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e66:	2300      	movs	r3, #0
 8002e68:	607b      	str	r3, [r7, #4]
 8002e6a:	4b10      	ldr	r3, [pc, #64]	; (8002eac <HAL_MspInit+0x4c>)
 8002e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e6e:	4a0f      	ldr	r2, [pc, #60]	; (8002eac <HAL_MspInit+0x4c>)
 8002e70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e74:	6453      	str	r3, [r2, #68]	; 0x44
 8002e76:	4b0d      	ldr	r3, [pc, #52]	; (8002eac <HAL_MspInit+0x4c>)
 8002e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e7e:	607b      	str	r3, [r7, #4]
 8002e80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e82:	2300      	movs	r3, #0
 8002e84:	603b      	str	r3, [r7, #0]
 8002e86:	4b09      	ldr	r3, [pc, #36]	; (8002eac <HAL_MspInit+0x4c>)
 8002e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8a:	4a08      	ldr	r2, [pc, #32]	; (8002eac <HAL_MspInit+0x4c>)
 8002e8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e90:	6413      	str	r3, [r2, #64]	; 0x40
 8002e92:	4b06      	ldr	r3, [pc, #24]	; (8002eac <HAL_MspInit+0x4c>)
 8002e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e9a:	603b      	str	r3, [r7, #0]
 8002e9c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002e9e:	2007      	movs	r0, #7
 8002ea0:	f000 fa56 	bl	8003350 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ea4:	bf00      	nop
 8002ea6:	3708      	adds	r7, #8
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	40023800 	.word	0x40023800

08002eb0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b08a      	sub	sp, #40	; 0x28
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eb8:	f107 0314 	add.w	r3, r7, #20
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	601a      	str	r2, [r3, #0]
 8002ec0:	605a      	str	r2, [r3, #4]
 8002ec2:	609a      	str	r2, [r3, #8]
 8002ec4:	60da      	str	r2, [r3, #12]
 8002ec6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a30      	ldr	r2, [pc, #192]	; (8002f90 <HAL_SPI_MspInit+0xe0>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d159      	bne.n	8002f86 <HAL_SPI_MspInit+0xd6>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	613b      	str	r3, [r7, #16]
 8002ed6:	4b2f      	ldr	r3, [pc, #188]	; (8002f94 <HAL_SPI_MspInit+0xe4>)
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eda:	4a2e      	ldr	r2, [pc, #184]	; (8002f94 <HAL_SPI_MspInit+0xe4>)
 8002edc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ee0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ee2:	4b2c      	ldr	r3, [pc, #176]	; (8002f94 <HAL_SPI_MspInit+0xe4>)
 8002ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eea:	613b      	str	r3, [r7, #16]
 8002eec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eee:	2300      	movs	r3, #0
 8002ef0:	60fb      	str	r3, [r7, #12]
 8002ef2:	4b28      	ldr	r3, [pc, #160]	; (8002f94 <HAL_SPI_MspInit+0xe4>)
 8002ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef6:	4a27      	ldr	r2, [pc, #156]	; (8002f94 <HAL_SPI_MspInit+0xe4>)
 8002ef8:	f043 0302 	orr.w	r3, r3, #2
 8002efc:	6313      	str	r3, [r2, #48]	; 0x30
 8002efe:	4b25      	ldr	r3, [pc, #148]	; (8002f94 <HAL_SPI_MspInit+0xe4>)
 8002f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	60fb      	str	r3, [r7, #12]
 8002f08:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002f0a:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002f0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f10:	2302      	movs	r3, #2
 8002f12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f14:	2300      	movs	r3, #0
 8002f16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002f1c:	2305      	movs	r3, #5
 8002f1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f20:	f107 0314 	add.w	r3, r7, #20
 8002f24:	4619      	mov	r1, r3
 8002f26:	481c      	ldr	r0, [pc, #112]	; (8002f98 <HAL_SPI_MspInit+0xe8>)
 8002f28:	f000 fdc4 	bl	8003ab4 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8002f2c:	4b1b      	ldr	r3, [pc, #108]	; (8002f9c <HAL_SPI_MspInit+0xec>)
 8002f2e:	4a1c      	ldr	r2, [pc, #112]	; (8002fa0 <HAL_SPI_MspInit+0xf0>)
 8002f30:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8002f32:	4b1a      	ldr	r3, [pc, #104]	; (8002f9c <HAL_SPI_MspInit+0xec>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f38:	4b18      	ldr	r3, [pc, #96]	; (8002f9c <HAL_SPI_MspInit+0xec>)
 8002f3a:	2240      	movs	r2, #64	; 0x40
 8002f3c:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f3e:	4b17      	ldr	r3, [pc, #92]	; (8002f9c <HAL_SPI_MspInit+0xec>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f44:	4b15      	ldr	r3, [pc, #84]	; (8002f9c <HAL_SPI_MspInit+0xec>)
 8002f46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f4a:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f4c:	4b13      	ldr	r3, [pc, #76]	; (8002f9c <HAL_SPI_MspInit+0xec>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f52:	4b12      	ldr	r3, [pc, #72]	; (8002f9c <HAL_SPI_MspInit+0xec>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8002f58:	4b10      	ldr	r3, [pc, #64]	; (8002f9c <HAL_SPI_MspInit+0xec>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002f5e:	4b0f      	ldr	r3, [pc, #60]	; (8002f9c <HAL_SPI_MspInit+0xec>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f64:	4b0d      	ldr	r3, [pc, #52]	; (8002f9c <HAL_SPI_MspInit+0xec>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8002f6a:	480c      	ldr	r0, [pc, #48]	; (8002f9c <HAL_SPI_MspInit+0xec>)
 8002f6c:	f000 fa32 	bl	80033d4 <HAL_DMA_Init>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d001      	beq.n	8002f7a <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8002f76:	f7fd fe21 	bl	8000bbc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a07      	ldr	r2, [pc, #28]	; (8002f9c <HAL_SPI_MspInit+0xec>)
 8002f7e:	649a      	str	r2, [r3, #72]	; 0x48
 8002f80:	4a06      	ldr	r2, [pc, #24]	; (8002f9c <HAL_SPI_MspInit+0xec>)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002f86:	bf00      	nop
 8002f88:	3728      	adds	r7, #40	; 0x28
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	40003800 	.word	0x40003800
 8002f94:	40023800 	.word	0x40023800
 8002f98:	40020400 	.word	0x40020400
 8002f9c:	2000009c 	.word	0x2000009c
 8002fa0:	40026070 	.word	0x40026070

08002fa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002fa8:	e7fe      	b.n	8002fa8 <NMI_Handler+0x4>

08002faa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002faa:	b480      	push	{r7}
 8002fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fae:	e7fe      	b.n	8002fae <HardFault_Handler+0x4>

08002fb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fb4:	e7fe      	b.n	8002fb4 <MemManage_Handler+0x4>

08002fb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002fb6:	b480      	push	{r7}
 8002fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002fba:	e7fe      	b.n	8002fba <BusFault_Handler+0x4>

08002fbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fc0:	e7fe      	b.n	8002fc0 <UsageFault_Handler+0x4>

08002fc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002fc2:	b480      	push	{r7}
 8002fc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002fc6:	bf00      	nop
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002fd4:	bf00      	nop
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr

08002fde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002fde:	b480      	push	{r7}
 8002fe0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002fe2:	bf00      	nop
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ff0:	f000 f89a 	bl	8003128 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ff4:	bf00      	nop
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002ffc:	4802      	ldr	r0, [pc, #8]	; (8003008 <DMA1_Stream4_IRQHandler+0x10>)
 8002ffe:	f000 faef 	bl	80035e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003002:	bf00      	nop
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	2000009c 	.word	0x2000009c

0800300c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800300c:	b480      	push	{r7}
 800300e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003010:	4b06      	ldr	r3, [pc, #24]	; (800302c <SystemInit+0x20>)
 8003012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003016:	4a05      	ldr	r2, [pc, #20]	; (800302c <SystemInit+0x20>)
 8003018:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800301c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003020:	bf00      	nop
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	e000ed00 	.word	0xe000ed00

08003030 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003030:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003068 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003034:	480d      	ldr	r0, [pc, #52]	; (800306c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003036:	490e      	ldr	r1, [pc, #56]	; (8003070 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003038:	4a0e      	ldr	r2, [pc, #56]	; (8003074 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800303a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800303c:	e002      	b.n	8003044 <LoopCopyDataInit>

0800303e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800303e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003040:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003042:	3304      	adds	r3, #4

08003044 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003044:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003046:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003048:	d3f9      	bcc.n	800303e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800304a:	4a0b      	ldr	r2, [pc, #44]	; (8003078 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800304c:	4c0b      	ldr	r4, [pc, #44]	; (800307c <LoopFillZerobss+0x26>)
  movs r3, #0
 800304e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003050:	e001      	b.n	8003056 <LoopFillZerobss>

08003052 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003052:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003054:	3204      	adds	r2, #4

08003056 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003056:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003058:	d3fb      	bcc.n	8003052 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800305a:	f7ff ffd7 	bl	800300c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800305e:	f001 fe05 	bl	8004c6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003062:	f7fd fb0d 	bl	8000680 <main>
  bx  lr    
 8003066:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003068:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800306c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003070:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8003074:	08004e24 	.word	0x08004e24
  ldr r2, =_sbss
 8003078:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800307c:	20000324 	.word	0x20000324

08003080 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003080:	e7fe      	b.n	8003080 <ADC_IRQHandler>
	...

08003084 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003088:	4b0e      	ldr	r3, [pc, #56]	; (80030c4 <HAL_Init+0x40>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a0d      	ldr	r2, [pc, #52]	; (80030c4 <HAL_Init+0x40>)
 800308e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003092:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003094:	4b0b      	ldr	r3, [pc, #44]	; (80030c4 <HAL_Init+0x40>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a0a      	ldr	r2, [pc, #40]	; (80030c4 <HAL_Init+0x40>)
 800309a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800309e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030a0:	4b08      	ldr	r3, [pc, #32]	; (80030c4 <HAL_Init+0x40>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a07      	ldr	r2, [pc, #28]	; (80030c4 <HAL_Init+0x40>)
 80030a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030ac:	2003      	movs	r0, #3
 80030ae:	f000 f94f 	bl	8003350 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030b2:	2000      	movs	r0, #0
 80030b4:	f000 f808 	bl	80030c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030b8:	f7ff fed2 	bl	8002e60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	40023c00 	.word	0x40023c00

080030c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030d0:	4b12      	ldr	r3, [pc, #72]	; (800311c <HAL_InitTick+0x54>)
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	4b12      	ldr	r3, [pc, #72]	; (8003120 <HAL_InitTick+0x58>)
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	4619      	mov	r1, r3
 80030da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030de:	fbb3 f3f1 	udiv	r3, r3, r1
 80030e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80030e6:	4618      	mov	r0, r3
 80030e8:	f000 f967 	bl	80033ba <HAL_SYSTICK_Config>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e00e      	b.n	8003114 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2b0f      	cmp	r3, #15
 80030fa:	d80a      	bhi.n	8003112 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030fc:	2200      	movs	r2, #0
 80030fe:	6879      	ldr	r1, [r7, #4]
 8003100:	f04f 30ff 	mov.w	r0, #4294967295
 8003104:	f000 f92f 	bl	8003366 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003108:	4a06      	ldr	r2, [pc, #24]	; (8003124 <HAL_InitTick+0x5c>)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800310e:	2300      	movs	r3, #0
 8003110:	e000      	b.n	8003114 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
}
 8003114:	4618      	mov	r0, r3
 8003116:	3708      	adds	r7, #8
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	20000000 	.word	0x20000000
 8003120:	20000008 	.word	0x20000008
 8003124:	20000004 	.word	0x20000004

08003128 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003128:	b480      	push	{r7}
 800312a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800312c:	4b06      	ldr	r3, [pc, #24]	; (8003148 <HAL_IncTick+0x20>)
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	461a      	mov	r2, r3
 8003132:	4b06      	ldr	r3, [pc, #24]	; (800314c <HAL_IncTick+0x24>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4413      	add	r3, r2
 8003138:	4a04      	ldr	r2, [pc, #16]	; (800314c <HAL_IncTick+0x24>)
 800313a:	6013      	str	r3, [r2, #0]
}
 800313c:	bf00      	nop
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	20000008 	.word	0x20000008
 800314c:	20000320 	.word	0x20000320

08003150 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003150:	b480      	push	{r7}
 8003152:	af00      	add	r7, sp, #0
  return uwTick;
 8003154:	4b03      	ldr	r3, [pc, #12]	; (8003164 <HAL_GetTick+0x14>)
 8003156:	681b      	ldr	r3, [r3, #0]
}
 8003158:	4618      	mov	r0, r3
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	20000320 	.word	0x20000320

08003168 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003170:	f7ff ffee 	bl	8003150 <HAL_GetTick>
 8003174:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003180:	d005      	beq.n	800318e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003182:	4b0a      	ldr	r3, [pc, #40]	; (80031ac <HAL_Delay+0x44>)
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	461a      	mov	r2, r3
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	4413      	add	r3, r2
 800318c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800318e:	bf00      	nop
 8003190:	f7ff ffde 	bl	8003150 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	429a      	cmp	r2, r3
 800319e:	d8f7      	bhi.n	8003190 <HAL_Delay+0x28>
  {
  }
}
 80031a0:	bf00      	nop
 80031a2:	bf00      	nop
 80031a4:	3710      	adds	r7, #16
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	20000008 	.word	0x20000008

080031b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b085      	sub	sp, #20
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f003 0307 	and.w	r3, r3, #7
 80031be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031c0:	4b0c      	ldr	r3, [pc, #48]	; (80031f4 <__NVIC_SetPriorityGrouping+0x44>)
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031c6:	68ba      	ldr	r2, [r7, #8]
 80031c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031cc:	4013      	ands	r3, r2
 80031ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031e2:	4a04      	ldr	r2, [pc, #16]	; (80031f4 <__NVIC_SetPriorityGrouping+0x44>)
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	60d3      	str	r3, [r2, #12]
}
 80031e8:	bf00      	nop
 80031ea:	3714      	adds	r7, #20
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr
 80031f4:	e000ed00 	.word	0xe000ed00

080031f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031f8:	b480      	push	{r7}
 80031fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031fc:	4b04      	ldr	r3, [pc, #16]	; (8003210 <__NVIC_GetPriorityGrouping+0x18>)
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	0a1b      	lsrs	r3, r3, #8
 8003202:	f003 0307 	and.w	r3, r3, #7
}
 8003206:	4618      	mov	r0, r3
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr
 8003210:	e000ed00 	.word	0xe000ed00

08003214 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	4603      	mov	r3, r0
 800321c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800321e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003222:	2b00      	cmp	r3, #0
 8003224:	db0b      	blt.n	800323e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003226:	79fb      	ldrb	r3, [r7, #7]
 8003228:	f003 021f 	and.w	r2, r3, #31
 800322c:	4907      	ldr	r1, [pc, #28]	; (800324c <__NVIC_EnableIRQ+0x38>)
 800322e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003232:	095b      	lsrs	r3, r3, #5
 8003234:	2001      	movs	r0, #1
 8003236:	fa00 f202 	lsl.w	r2, r0, r2
 800323a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800323e:	bf00      	nop
 8003240:	370c      	adds	r7, #12
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	e000e100 	.word	0xe000e100

08003250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	4603      	mov	r3, r0
 8003258:	6039      	str	r1, [r7, #0]
 800325a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800325c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003260:	2b00      	cmp	r3, #0
 8003262:	db0a      	blt.n	800327a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	b2da      	uxtb	r2, r3
 8003268:	490c      	ldr	r1, [pc, #48]	; (800329c <__NVIC_SetPriority+0x4c>)
 800326a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800326e:	0112      	lsls	r2, r2, #4
 8003270:	b2d2      	uxtb	r2, r2
 8003272:	440b      	add	r3, r1
 8003274:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003278:	e00a      	b.n	8003290 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	b2da      	uxtb	r2, r3
 800327e:	4908      	ldr	r1, [pc, #32]	; (80032a0 <__NVIC_SetPriority+0x50>)
 8003280:	79fb      	ldrb	r3, [r7, #7]
 8003282:	f003 030f 	and.w	r3, r3, #15
 8003286:	3b04      	subs	r3, #4
 8003288:	0112      	lsls	r2, r2, #4
 800328a:	b2d2      	uxtb	r2, r2
 800328c:	440b      	add	r3, r1
 800328e:	761a      	strb	r2, [r3, #24]
}
 8003290:	bf00      	nop
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr
 800329c:	e000e100 	.word	0xe000e100
 80032a0:	e000ed00 	.word	0xe000ed00

080032a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b089      	sub	sp, #36	; 0x24
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f003 0307 	and.w	r3, r3, #7
 80032b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	f1c3 0307 	rsb	r3, r3, #7
 80032be:	2b04      	cmp	r3, #4
 80032c0:	bf28      	it	cs
 80032c2:	2304      	movcs	r3, #4
 80032c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	3304      	adds	r3, #4
 80032ca:	2b06      	cmp	r3, #6
 80032cc:	d902      	bls.n	80032d4 <NVIC_EncodePriority+0x30>
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	3b03      	subs	r3, #3
 80032d2:	e000      	b.n	80032d6 <NVIC_EncodePriority+0x32>
 80032d4:	2300      	movs	r3, #0
 80032d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032d8:	f04f 32ff 	mov.w	r2, #4294967295
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	fa02 f303 	lsl.w	r3, r2, r3
 80032e2:	43da      	mvns	r2, r3
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	401a      	ands	r2, r3
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032ec:	f04f 31ff 	mov.w	r1, #4294967295
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	fa01 f303 	lsl.w	r3, r1, r3
 80032f6:	43d9      	mvns	r1, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032fc:	4313      	orrs	r3, r2
         );
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3724      	adds	r7, #36	; 0x24
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
	...

0800330c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	3b01      	subs	r3, #1
 8003318:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800331c:	d301      	bcc.n	8003322 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800331e:	2301      	movs	r3, #1
 8003320:	e00f      	b.n	8003342 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003322:	4a0a      	ldr	r2, [pc, #40]	; (800334c <SysTick_Config+0x40>)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	3b01      	subs	r3, #1
 8003328:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800332a:	210f      	movs	r1, #15
 800332c:	f04f 30ff 	mov.w	r0, #4294967295
 8003330:	f7ff ff8e 	bl	8003250 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003334:	4b05      	ldr	r3, [pc, #20]	; (800334c <SysTick_Config+0x40>)
 8003336:	2200      	movs	r2, #0
 8003338:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800333a:	4b04      	ldr	r3, [pc, #16]	; (800334c <SysTick_Config+0x40>)
 800333c:	2207      	movs	r2, #7
 800333e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3708      	adds	r7, #8
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	e000e010 	.word	0xe000e010

08003350 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f7ff ff29 	bl	80031b0 <__NVIC_SetPriorityGrouping>
}
 800335e:	bf00      	nop
 8003360:	3708      	adds	r7, #8
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}

08003366 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003366:	b580      	push	{r7, lr}
 8003368:	b086      	sub	sp, #24
 800336a:	af00      	add	r7, sp, #0
 800336c:	4603      	mov	r3, r0
 800336e:	60b9      	str	r1, [r7, #8]
 8003370:	607a      	str	r2, [r7, #4]
 8003372:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003374:	2300      	movs	r3, #0
 8003376:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003378:	f7ff ff3e 	bl	80031f8 <__NVIC_GetPriorityGrouping>
 800337c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	68b9      	ldr	r1, [r7, #8]
 8003382:	6978      	ldr	r0, [r7, #20]
 8003384:	f7ff ff8e 	bl	80032a4 <NVIC_EncodePriority>
 8003388:	4602      	mov	r2, r0
 800338a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800338e:	4611      	mov	r1, r2
 8003390:	4618      	mov	r0, r3
 8003392:	f7ff ff5d 	bl	8003250 <__NVIC_SetPriority>
}
 8003396:	bf00      	nop
 8003398:	3718      	adds	r7, #24
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800339e:	b580      	push	{r7, lr}
 80033a0:	b082      	sub	sp, #8
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	4603      	mov	r3, r0
 80033a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f7ff ff31 	bl	8003214 <__NVIC_EnableIRQ>
}
 80033b2:	bf00      	nop
 80033b4:	3708      	adds	r7, #8
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b082      	sub	sp, #8
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f7ff ffa2 	bl	800330c <SysTick_Config>
 80033c8:	4603      	mov	r3, r0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3708      	adds	r7, #8
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
	...

080033d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b086      	sub	sp, #24
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80033dc:	2300      	movs	r3, #0
 80033de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80033e0:	f7ff feb6 	bl	8003150 <HAL_GetTick>
 80033e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d101      	bne.n	80033f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e099      	b.n	8003524 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2202      	movs	r2, #2
 80033f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f022 0201 	bic.w	r2, r2, #1
 800340e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003410:	e00f      	b.n	8003432 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003412:	f7ff fe9d 	bl	8003150 <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	2b05      	cmp	r3, #5
 800341e:	d908      	bls.n	8003432 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2220      	movs	r2, #32
 8003424:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2203      	movs	r2, #3
 800342a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e078      	b.n	8003524 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0301 	and.w	r3, r3, #1
 800343c:	2b00      	cmp	r3, #0
 800343e:	d1e8      	bne.n	8003412 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003448:	697a      	ldr	r2, [r7, #20]
 800344a:	4b38      	ldr	r3, [pc, #224]	; (800352c <HAL_DMA_Init+0x158>)
 800344c:	4013      	ands	r3, r2
 800344e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685a      	ldr	r2, [r3, #4]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800345e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800346a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003476:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a1b      	ldr	r3, [r3, #32]
 800347c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800347e:	697a      	ldr	r2, [r7, #20]
 8003480:	4313      	orrs	r3, r2
 8003482:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003488:	2b04      	cmp	r3, #4
 800348a:	d107      	bne.n	800349c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003494:	4313      	orrs	r3, r2
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	4313      	orrs	r3, r2
 800349a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	697a      	ldr	r2, [r7, #20]
 80034a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	f023 0307 	bic.w	r3, r3, #7
 80034b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b8:	697a      	ldr	r2, [r7, #20]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c2:	2b04      	cmp	r3, #4
 80034c4:	d117      	bne.n	80034f6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ca:	697a      	ldr	r2, [r7, #20]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d00e      	beq.n	80034f6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f000 fa6f 	bl	80039bc <DMA_CheckFifoParam>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d008      	beq.n	80034f6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2240      	movs	r2, #64	; 0x40
 80034e8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2201      	movs	r2, #1
 80034ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80034f2:	2301      	movs	r3, #1
 80034f4:	e016      	b.n	8003524 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	697a      	ldr	r2, [r7, #20]
 80034fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 fa26 	bl	8003950 <DMA_CalcBaseAndBitshift>
 8003504:	4603      	mov	r3, r0
 8003506:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800350c:	223f      	movs	r2, #63	; 0x3f
 800350e:	409a      	lsls	r2, r3
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2201      	movs	r2, #1
 800351e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003522:	2300      	movs	r3, #0
}
 8003524:	4618      	mov	r0, r3
 8003526:	3718      	adds	r7, #24
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	f010803f 	.word	0xf010803f

08003530 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b086      	sub	sp, #24
 8003534:	af00      	add	r7, sp, #0
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	607a      	str	r2, [r7, #4]
 800353c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800353e:	2300      	movs	r3, #0
 8003540:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003546:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800354e:	2b01      	cmp	r3, #1
 8003550:	d101      	bne.n	8003556 <HAL_DMA_Start_IT+0x26>
 8003552:	2302      	movs	r3, #2
 8003554:	e040      	b.n	80035d8 <HAL_DMA_Start_IT+0xa8>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2201      	movs	r2, #1
 800355a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003564:	b2db      	uxtb	r3, r3
 8003566:	2b01      	cmp	r3, #1
 8003568:	d12f      	bne.n	80035ca <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2202      	movs	r2, #2
 800356e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2200      	movs	r2, #0
 8003576:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	68b9      	ldr	r1, [r7, #8]
 800357e:	68f8      	ldr	r0, [r7, #12]
 8003580:	f000 f9b8 	bl	80038f4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003588:	223f      	movs	r2, #63	; 0x3f
 800358a:	409a      	lsls	r2, r3
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f042 0216 	orr.w	r2, r2, #22
 800359e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d007      	beq.n	80035b8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f042 0208 	orr.w	r2, r2, #8
 80035b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f042 0201 	orr.w	r2, r2, #1
 80035c6:	601a      	str	r2, [r3, #0]
 80035c8:	e005      	b.n	80035d6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80035d2:	2302      	movs	r3, #2
 80035d4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80035d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3718      	adds	r7, #24
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b086      	sub	sp, #24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80035e8:	2300      	movs	r3, #0
 80035ea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80035ec:	4b8e      	ldr	r3, [pc, #568]	; (8003828 <HAL_DMA_IRQHandler+0x248>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a8e      	ldr	r2, [pc, #568]	; (800382c <HAL_DMA_IRQHandler+0x24c>)
 80035f2:	fba2 2303 	umull	r2, r3, r2, r3
 80035f6:	0a9b      	lsrs	r3, r3, #10
 80035f8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035fe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800360a:	2208      	movs	r2, #8
 800360c:	409a      	lsls	r2, r3
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	4013      	ands	r3, r2
 8003612:	2b00      	cmp	r3, #0
 8003614:	d01a      	beq.n	800364c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0304 	and.w	r3, r3, #4
 8003620:	2b00      	cmp	r3, #0
 8003622:	d013      	beq.n	800364c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f022 0204 	bic.w	r2, r2, #4
 8003632:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003638:	2208      	movs	r2, #8
 800363a:	409a      	lsls	r2, r3
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003644:	f043 0201 	orr.w	r2, r3, #1
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003650:	2201      	movs	r2, #1
 8003652:	409a      	lsls	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	4013      	ands	r3, r2
 8003658:	2b00      	cmp	r3, #0
 800365a:	d012      	beq.n	8003682 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00b      	beq.n	8003682 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800366e:	2201      	movs	r2, #1
 8003670:	409a      	lsls	r2, r3
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800367a:	f043 0202 	orr.w	r2, r3, #2
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003686:	2204      	movs	r2, #4
 8003688:	409a      	lsls	r2, r3
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	4013      	ands	r3, r2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d012      	beq.n	80036b8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0302 	and.w	r3, r3, #2
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00b      	beq.n	80036b8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036a4:	2204      	movs	r2, #4
 80036a6:	409a      	lsls	r2, r3
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036b0:	f043 0204 	orr.w	r2, r3, #4
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036bc:	2210      	movs	r2, #16
 80036be:	409a      	lsls	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	4013      	ands	r3, r2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d043      	beq.n	8003750 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0308 	and.w	r3, r3, #8
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d03c      	beq.n	8003750 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036da:	2210      	movs	r2, #16
 80036dc:	409a      	lsls	r2, r3
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d018      	beq.n	8003722 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d108      	bne.n	8003710 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003702:	2b00      	cmp	r3, #0
 8003704:	d024      	beq.n	8003750 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	4798      	blx	r3
 800370e:	e01f      	b.n	8003750 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003714:	2b00      	cmp	r3, #0
 8003716:	d01b      	beq.n	8003750 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	4798      	blx	r3
 8003720:	e016      	b.n	8003750 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800372c:	2b00      	cmp	r3, #0
 800372e:	d107      	bne.n	8003740 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 0208 	bic.w	r2, r2, #8
 800373e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003744:	2b00      	cmp	r3, #0
 8003746:	d003      	beq.n	8003750 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003754:	2220      	movs	r2, #32
 8003756:	409a      	lsls	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	4013      	ands	r3, r2
 800375c:	2b00      	cmp	r3, #0
 800375e:	f000 808f 	beq.w	8003880 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0310 	and.w	r3, r3, #16
 800376c:	2b00      	cmp	r3, #0
 800376e:	f000 8087 	beq.w	8003880 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003776:	2220      	movs	r2, #32
 8003778:	409a      	lsls	r2, r3
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b05      	cmp	r3, #5
 8003788:	d136      	bne.n	80037f8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f022 0216 	bic.w	r2, r2, #22
 8003798:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	695a      	ldr	r2, [r3, #20]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037a8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d103      	bne.n	80037ba <HAL_DMA_IRQHandler+0x1da>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d007      	beq.n	80037ca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f022 0208 	bic.w	r2, r2, #8
 80037c8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ce:	223f      	movs	r2, #63	; 0x3f
 80037d0:	409a      	lsls	r2, r3
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2201      	movs	r2, #1
 80037da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d07e      	beq.n	80038ec <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	4798      	blx	r3
        }
        return;
 80037f6:	e079      	b.n	80038ec <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d01d      	beq.n	8003842 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d10d      	bne.n	8003830 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003818:	2b00      	cmp	r3, #0
 800381a:	d031      	beq.n	8003880 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	4798      	blx	r3
 8003824:	e02c      	b.n	8003880 <HAL_DMA_IRQHandler+0x2a0>
 8003826:	bf00      	nop
 8003828:	20000000 	.word	0x20000000
 800382c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003834:	2b00      	cmp	r3, #0
 8003836:	d023      	beq.n	8003880 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	4798      	blx	r3
 8003840:	e01e      	b.n	8003880 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800384c:	2b00      	cmp	r3, #0
 800384e:	d10f      	bne.n	8003870 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f022 0210 	bic.w	r2, r2, #16
 800385e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003874:	2b00      	cmp	r3, #0
 8003876:	d003      	beq.n	8003880 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003884:	2b00      	cmp	r3, #0
 8003886:	d032      	beq.n	80038ee <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800388c:	f003 0301 	and.w	r3, r3, #1
 8003890:	2b00      	cmp	r3, #0
 8003892:	d022      	beq.n	80038da <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2205      	movs	r2, #5
 8003898:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f022 0201 	bic.w	r2, r2, #1
 80038aa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	3301      	adds	r3, #1
 80038b0:	60bb      	str	r3, [r7, #8]
 80038b2:	697a      	ldr	r2, [r7, #20]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d307      	bcc.n	80038c8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0301 	and.w	r3, r3, #1
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d1f2      	bne.n	80038ac <HAL_DMA_IRQHandler+0x2cc>
 80038c6:	e000      	b.n	80038ca <HAL_DMA_IRQHandler+0x2ea>
          break;
 80038c8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2201      	movs	r2, #1
 80038ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d005      	beq.n	80038ee <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	4798      	blx	r3
 80038ea:	e000      	b.n	80038ee <HAL_DMA_IRQHandler+0x30e>
        return;
 80038ec:	bf00      	nop
    }
  }
}
 80038ee:	3718      	adds	r7, #24
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b085      	sub	sp, #20
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	60b9      	str	r1, [r7, #8]
 80038fe:	607a      	str	r2, [r7, #4]
 8003900:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003910:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	683a      	ldr	r2, [r7, #0]
 8003918:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	2b40      	cmp	r3, #64	; 0x40
 8003920:	d108      	bne.n	8003934 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68ba      	ldr	r2, [r7, #8]
 8003930:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003932:	e007      	b.n	8003944 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68ba      	ldr	r2, [r7, #8]
 800393a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	60da      	str	r2, [r3, #12]
}
 8003944:	bf00      	nop
 8003946:	3714      	adds	r7, #20
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003950:	b480      	push	{r7}
 8003952:	b085      	sub	sp, #20
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	b2db      	uxtb	r3, r3
 800395e:	3b10      	subs	r3, #16
 8003960:	4a14      	ldr	r2, [pc, #80]	; (80039b4 <DMA_CalcBaseAndBitshift+0x64>)
 8003962:	fba2 2303 	umull	r2, r3, r2, r3
 8003966:	091b      	lsrs	r3, r3, #4
 8003968:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800396a:	4a13      	ldr	r2, [pc, #76]	; (80039b8 <DMA_CalcBaseAndBitshift+0x68>)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	4413      	add	r3, r2
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	461a      	mov	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2b03      	cmp	r3, #3
 800397c:	d909      	bls.n	8003992 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003986:	f023 0303 	bic.w	r3, r3, #3
 800398a:	1d1a      	adds	r2, r3, #4
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	659a      	str	r2, [r3, #88]	; 0x58
 8003990:	e007      	b.n	80039a2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800399a:	f023 0303 	bic.w	r3, r3, #3
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3714      	adds	r7, #20
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop
 80039b4:	aaaaaaab 	.word	0xaaaaaaab
 80039b8:	08004d08 	.word	0x08004d08

080039bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80039bc:	b480      	push	{r7}
 80039be:	b085      	sub	sp, #20
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039c4:	2300      	movs	r3, #0
 80039c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d11f      	bne.n	8003a16 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	2b03      	cmp	r3, #3
 80039da:	d856      	bhi.n	8003a8a <DMA_CheckFifoParam+0xce>
 80039dc:	a201      	add	r2, pc, #4	; (adr r2, 80039e4 <DMA_CheckFifoParam+0x28>)
 80039de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e2:	bf00      	nop
 80039e4:	080039f5 	.word	0x080039f5
 80039e8:	08003a07 	.word	0x08003a07
 80039ec:	080039f5 	.word	0x080039f5
 80039f0:	08003a8b 	.word	0x08003a8b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d046      	beq.n	8003a8e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a04:	e043      	b.n	8003a8e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a0a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a0e:	d140      	bne.n	8003a92 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a14:	e03d      	b.n	8003a92 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	699b      	ldr	r3, [r3, #24]
 8003a1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a1e:	d121      	bne.n	8003a64 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	2b03      	cmp	r3, #3
 8003a24:	d837      	bhi.n	8003a96 <DMA_CheckFifoParam+0xda>
 8003a26:	a201      	add	r2, pc, #4	; (adr r2, 8003a2c <DMA_CheckFifoParam+0x70>)
 8003a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a2c:	08003a3d 	.word	0x08003a3d
 8003a30:	08003a43 	.word	0x08003a43
 8003a34:	08003a3d 	.word	0x08003a3d
 8003a38:	08003a55 	.word	0x08003a55
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	73fb      	strb	r3, [r7, #15]
      break;
 8003a40:	e030      	b.n	8003aa4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d025      	beq.n	8003a9a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a52:	e022      	b.n	8003a9a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a58:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a5c:	d11f      	bne.n	8003a9e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003a62:	e01c      	b.n	8003a9e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d903      	bls.n	8003a72 <DMA_CheckFifoParam+0xb6>
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	2b03      	cmp	r3, #3
 8003a6e:	d003      	beq.n	8003a78 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003a70:	e018      	b.n	8003aa4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	73fb      	strb	r3, [r7, #15]
      break;
 8003a76:	e015      	b.n	8003aa4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d00e      	beq.n	8003aa2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	73fb      	strb	r3, [r7, #15]
      break;
 8003a88:	e00b      	b.n	8003aa2 <DMA_CheckFifoParam+0xe6>
      break;
 8003a8a:	bf00      	nop
 8003a8c:	e00a      	b.n	8003aa4 <DMA_CheckFifoParam+0xe8>
      break;
 8003a8e:	bf00      	nop
 8003a90:	e008      	b.n	8003aa4 <DMA_CheckFifoParam+0xe8>
      break;
 8003a92:	bf00      	nop
 8003a94:	e006      	b.n	8003aa4 <DMA_CheckFifoParam+0xe8>
      break;
 8003a96:	bf00      	nop
 8003a98:	e004      	b.n	8003aa4 <DMA_CheckFifoParam+0xe8>
      break;
 8003a9a:	bf00      	nop
 8003a9c:	e002      	b.n	8003aa4 <DMA_CheckFifoParam+0xe8>
      break;   
 8003a9e:	bf00      	nop
 8003aa0:	e000      	b.n	8003aa4 <DMA_CheckFifoParam+0xe8>
      break;
 8003aa2:	bf00      	nop
    }
  } 
  
  return status; 
 8003aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3714      	adds	r7, #20
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop

08003ab4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b089      	sub	sp, #36	; 0x24
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003aca:	2300      	movs	r3, #0
 8003acc:	61fb      	str	r3, [r7, #28]
 8003ace:	e16b      	b.n	8003da8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	697a      	ldr	r2, [r7, #20]
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ae4:	693a      	ldr	r2, [r7, #16]
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	f040 815a 	bne.w	8003da2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f003 0303 	and.w	r3, r3, #3
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d005      	beq.n	8003b06 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d130      	bne.n	8003b68 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	005b      	lsls	r3, r3, #1
 8003b10:	2203      	movs	r2, #3
 8003b12:	fa02 f303 	lsl.w	r3, r2, r3
 8003b16:	43db      	mvns	r3, r3
 8003b18:	69ba      	ldr	r2, [r7, #24]
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	68da      	ldr	r2, [r3, #12]
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	005b      	lsls	r3, r3, #1
 8003b26:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2a:	69ba      	ldr	r2, [r7, #24]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	69ba      	ldr	r2, [r7, #24]
 8003b34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	fa02 f303 	lsl.w	r3, r2, r3
 8003b44:	43db      	mvns	r3, r3
 8003b46:	69ba      	ldr	r2, [r7, #24]
 8003b48:	4013      	ands	r3, r2
 8003b4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	091b      	lsrs	r3, r3, #4
 8003b52:	f003 0201 	and.w	r2, r3, #1
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5c:	69ba      	ldr	r2, [r7, #24]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	69ba      	ldr	r2, [r7, #24]
 8003b66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f003 0303 	and.w	r3, r3, #3
 8003b70:	2b03      	cmp	r3, #3
 8003b72:	d017      	beq.n	8003ba4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	005b      	lsls	r3, r3, #1
 8003b7e:	2203      	movs	r2, #3
 8003b80:	fa02 f303 	lsl.w	r3, r2, r3
 8003b84:	43db      	mvns	r3, r3
 8003b86:	69ba      	ldr	r2, [r7, #24]
 8003b88:	4013      	ands	r3, r2
 8003b8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	689a      	ldr	r2, [r3, #8]
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	005b      	lsls	r3, r3, #1
 8003b94:	fa02 f303 	lsl.w	r3, r2, r3
 8003b98:	69ba      	ldr	r2, [r7, #24]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	69ba      	ldr	r2, [r7, #24]
 8003ba2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f003 0303 	and.w	r3, r3, #3
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d123      	bne.n	8003bf8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	08da      	lsrs	r2, r3, #3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	3208      	adds	r2, #8
 8003bb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	f003 0307 	and.w	r3, r3, #7
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	220f      	movs	r2, #15
 8003bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bcc:	43db      	mvns	r3, r3
 8003bce:	69ba      	ldr	r2, [r7, #24]
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	691a      	ldr	r2, [r3, #16]
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	f003 0307 	and.w	r3, r3, #7
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	fa02 f303 	lsl.w	r3, r2, r3
 8003be4:	69ba      	ldr	r2, [r7, #24]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	08da      	lsrs	r2, r3, #3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	3208      	adds	r2, #8
 8003bf2:	69b9      	ldr	r1, [r7, #24]
 8003bf4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	005b      	lsls	r3, r3, #1
 8003c02:	2203      	movs	r2, #3
 8003c04:	fa02 f303 	lsl.w	r3, r2, r3
 8003c08:	43db      	mvns	r3, r3
 8003c0a:	69ba      	ldr	r2, [r7, #24]
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f003 0203 	and.w	r2, r3, #3
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	005b      	lsls	r3, r3, #1
 8003c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c20:	69ba      	ldr	r2, [r7, #24]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	69ba      	ldr	r2, [r7, #24]
 8003c2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	f000 80b4 	beq.w	8003da2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	60fb      	str	r3, [r7, #12]
 8003c3e:	4b60      	ldr	r3, [pc, #384]	; (8003dc0 <HAL_GPIO_Init+0x30c>)
 8003c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c42:	4a5f      	ldr	r2, [pc, #380]	; (8003dc0 <HAL_GPIO_Init+0x30c>)
 8003c44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c48:	6453      	str	r3, [r2, #68]	; 0x44
 8003c4a:	4b5d      	ldr	r3, [pc, #372]	; (8003dc0 <HAL_GPIO_Init+0x30c>)
 8003c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c52:	60fb      	str	r3, [r7, #12]
 8003c54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c56:	4a5b      	ldr	r2, [pc, #364]	; (8003dc4 <HAL_GPIO_Init+0x310>)
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	089b      	lsrs	r3, r3, #2
 8003c5c:	3302      	adds	r3, #2
 8003c5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	f003 0303 	and.w	r3, r3, #3
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	220f      	movs	r2, #15
 8003c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c72:	43db      	mvns	r3, r3
 8003c74:	69ba      	ldr	r2, [r7, #24]
 8003c76:	4013      	ands	r3, r2
 8003c78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a52      	ldr	r2, [pc, #328]	; (8003dc8 <HAL_GPIO_Init+0x314>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d02b      	beq.n	8003cda <HAL_GPIO_Init+0x226>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a51      	ldr	r2, [pc, #324]	; (8003dcc <HAL_GPIO_Init+0x318>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d025      	beq.n	8003cd6 <HAL_GPIO_Init+0x222>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a50      	ldr	r2, [pc, #320]	; (8003dd0 <HAL_GPIO_Init+0x31c>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d01f      	beq.n	8003cd2 <HAL_GPIO_Init+0x21e>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a4f      	ldr	r2, [pc, #316]	; (8003dd4 <HAL_GPIO_Init+0x320>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d019      	beq.n	8003cce <HAL_GPIO_Init+0x21a>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a4e      	ldr	r2, [pc, #312]	; (8003dd8 <HAL_GPIO_Init+0x324>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d013      	beq.n	8003cca <HAL_GPIO_Init+0x216>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a4d      	ldr	r2, [pc, #308]	; (8003ddc <HAL_GPIO_Init+0x328>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d00d      	beq.n	8003cc6 <HAL_GPIO_Init+0x212>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a4c      	ldr	r2, [pc, #304]	; (8003de0 <HAL_GPIO_Init+0x32c>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d007      	beq.n	8003cc2 <HAL_GPIO_Init+0x20e>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a4b      	ldr	r2, [pc, #300]	; (8003de4 <HAL_GPIO_Init+0x330>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d101      	bne.n	8003cbe <HAL_GPIO_Init+0x20a>
 8003cba:	2307      	movs	r3, #7
 8003cbc:	e00e      	b.n	8003cdc <HAL_GPIO_Init+0x228>
 8003cbe:	2308      	movs	r3, #8
 8003cc0:	e00c      	b.n	8003cdc <HAL_GPIO_Init+0x228>
 8003cc2:	2306      	movs	r3, #6
 8003cc4:	e00a      	b.n	8003cdc <HAL_GPIO_Init+0x228>
 8003cc6:	2305      	movs	r3, #5
 8003cc8:	e008      	b.n	8003cdc <HAL_GPIO_Init+0x228>
 8003cca:	2304      	movs	r3, #4
 8003ccc:	e006      	b.n	8003cdc <HAL_GPIO_Init+0x228>
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e004      	b.n	8003cdc <HAL_GPIO_Init+0x228>
 8003cd2:	2302      	movs	r3, #2
 8003cd4:	e002      	b.n	8003cdc <HAL_GPIO_Init+0x228>
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e000      	b.n	8003cdc <HAL_GPIO_Init+0x228>
 8003cda:	2300      	movs	r3, #0
 8003cdc:	69fa      	ldr	r2, [r7, #28]
 8003cde:	f002 0203 	and.w	r2, r2, #3
 8003ce2:	0092      	lsls	r2, r2, #2
 8003ce4:	4093      	lsls	r3, r2
 8003ce6:	69ba      	ldr	r2, [r7, #24]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003cec:	4935      	ldr	r1, [pc, #212]	; (8003dc4 <HAL_GPIO_Init+0x310>)
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	089b      	lsrs	r3, r3, #2
 8003cf2:	3302      	adds	r3, #2
 8003cf4:	69ba      	ldr	r2, [r7, #24]
 8003cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003cfa:	4b3b      	ldr	r3, [pc, #236]	; (8003de8 <HAL_GPIO_Init+0x334>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	43db      	mvns	r3, r3
 8003d04:	69ba      	ldr	r2, [r7, #24]
 8003d06:	4013      	ands	r3, r2
 8003d08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d003      	beq.n	8003d1e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003d16:	69ba      	ldr	r2, [r7, #24]
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d1e:	4a32      	ldr	r2, [pc, #200]	; (8003de8 <HAL_GPIO_Init+0x334>)
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d24:	4b30      	ldr	r3, [pc, #192]	; (8003de8 <HAL_GPIO_Init+0x334>)
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	43db      	mvns	r3, r3
 8003d2e:	69ba      	ldr	r2, [r7, #24]
 8003d30:	4013      	ands	r3, r2
 8003d32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d003      	beq.n	8003d48 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003d40:	69ba      	ldr	r2, [r7, #24]
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d48:	4a27      	ldr	r2, [pc, #156]	; (8003de8 <HAL_GPIO_Init+0x334>)
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d4e:	4b26      	ldr	r3, [pc, #152]	; (8003de8 <HAL_GPIO_Init+0x334>)
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	43db      	mvns	r3, r3
 8003d58:	69ba      	ldr	r2, [r7, #24]
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d003      	beq.n	8003d72 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003d6a:	69ba      	ldr	r2, [r7, #24]
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d72:	4a1d      	ldr	r2, [pc, #116]	; (8003de8 <HAL_GPIO_Init+0x334>)
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d78:	4b1b      	ldr	r3, [pc, #108]	; (8003de8 <HAL_GPIO_Init+0x334>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	43db      	mvns	r3, r3
 8003d82:	69ba      	ldr	r2, [r7, #24]
 8003d84:	4013      	ands	r3, r2
 8003d86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d003      	beq.n	8003d9c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003d94:	69ba      	ldr	r2, [r7, #24]
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d9c:	4a12      	ldr	r2, [pc, #72]	; (8003de8 <HAL_GPIO_Init+0x334>)
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	3301      	adds	r3, #1
 8003da6:	61fb      	str	r3, [r7, #28]
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	2b0f      	cmp	r3, #15
 8003dac:	f67f ae90 	bls.w	8003ad0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003db0:	bf00      	nop
 8003db2:	bf00      	nop
 8003db4:	3724      	adds	r7, #36	; 0x24
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	40023800 	.word	0x40023800
 8003dc4:	40013800 	.word	0x40013800
 8003dc8:	40020000 	.word	0x40020000
 8003dcc:	40020400 	.word	0x40020400
 8003dd0:	40020800 	.word	0x40020800
 8003dd4:	40020c00 	.word	0x40020c00
 8003dd8:	40021000 	.word	0x40021000
 8003ddc:	40021400 	.word	0x40021400
 8003de0:	40021800 	.word	0x40021800
 8003de4:	40021c00 	.word	0x40021c00
 8003de8:	40013c00 	.word	0x40013c00

08003dec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b085      	sub	sp, #20
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	460b      	mov	r3, r1
 8003df6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	691a      	ldr	r2, [r3, #16]
 8003dfc:	887b      	ldrh	r3, [r7, #2]
 8003dfe:	4013      	ands	r3, r2
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d002      	beq.n	8003e0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003e04:	2301      	movs	r3, #1
 8003e06:	73fb      	strb	r3, [r7, #15]
 8003e08:	e001      	b.n	8003e0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3714      	adds	r7, #20
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	460b      	mov	r3, r1
 8003e26:	807b      	strh	r3, [r7, #2]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e2c:	787b      	ldrb	r3, [r7, #1]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d003      	beq.n	8003e3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e32:	887a      	ldrh	r2, [r7, #2]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e38:	e003      	b.n	8003e42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e3a:	887b      	ldrh	r3, [r7, #2]
 8003e3c:	041a      	lsls	r2, r3, #16
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	619a      	str	r2, [r3, #24]
}
 8003e42:	bf00      	nop
 8003e44:	370c      	adds	r7, #12
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
	...

08003e50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b086      	sub	sp, #24
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d101      	bne.n	8003e62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e267      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0301 	and.w	r3, r3, #1
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d075      	beq.n	8003f5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e6e:	4b88      	ldr	r3, [pc, #544]	; (8004090 <HAL_RCC_OscConfig+0x240>)
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f003 030c 	and.w	r3, r3, #12
 8003e76:	2b04      	cmp	r3, #4
 8003e78:	d00c      	beq.n	8003e94 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e7a:	4b85      	ldr	r3, [pc, #532]	; (8004090 <HAL_RCC_OscConfig+0x240>)
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e82:	2b08      	cmp	r3, #8
 8003e84:	d112      	bne.n	8003eac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e86:	4b82      	ldr	r3, [pc, #520]	; (8004090 <HAL_RCC_OscConfig+0x240>)
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e92:	d10b      	bne.n	8003eac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e94:	4b7e      	ldr	r3, [pc, #504]	; (8004090 <HAL_RCC_OscConfig+0x240>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d05b      	beq.n	8003f58 <HAL_RCC_OscConfig+0x108>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d157      	bne.n	8003f58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e242      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eb4:	d106      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x74>
 8003eb6:	4b76      	ldr	r3, [pc, #472]	; (8004090 <HAL_RCC_OscConfig+0x240>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a75      	ldr	r2, [pc, #468]	; (8004090 <HAL_RCC_OscConfig+0x240>)
 8003ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ec0:	6013      	str	r3, [r2, #0]
 8003ec2:	e01d      	b.n	8003f00 <HAL_RCC_OscConfig+0xb0>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ecc:	d10c      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x98>
 8003ece:	4b70      	ldr	r3, [pc, #448]	; (8004090 <HAL_RCC_OscConfig+0x240>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a6f      	ldr	r2, [pc, #444]	; (8004090 <HAL_RCC_OscConfig+0x240>)
 8003ed4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ed8:	6013      	str	r3, [r2, #0]
 8003eda:	4b6d      	ldr	r3, [pc, #436]	; (8004090 <HAL_RCC_OscConfig+0x240>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a6c      	ldr	r2, [pc, #432]	; (8004090 <HAL_RCC_OscConfig+0x240>)
 8003ee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ee4:	6013      	str	r3, [r2, #0]
 8003ee6:	e00b      	b.n	8003f00 <HAL_RCC_OscConfig+0xb0>
 8003ee8:	4b69      	ldr	r3, [pc, #420]	; (8004090 <HAL_RCC_OscConfig+0x240>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a68      	ldr	r2, [pc, #416]	; (8004090 <HAL_RCC_OscConfig+0x240>)
 8003eee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ef2:	6013      	str	r3, [r2, #0]
 8003ef4:	4b66      	ldr	r3, [pc, #408]	; (8004090 <HAL_RCC_OscConfig+0x240>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a65      	ldr	r2, [pc, #404]	; (8004090 <HAL_RCC_OscConfig+0x240>)
 8003efa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003efe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d013      	beq.n	8003f30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f08:	f7ff f922 	bl	8003150 <HAL_GetTick>
 8003f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f0e:	e008      	b.n	8003f22 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f10:	f7ff f91e 	bl	8003150 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	2b64      	cmp	r3, #100	; 0x64
 8003f1c:	d901      	bls.n	8003f22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e207      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f22:	4b5b      	ldr	r3, [pc, #364]	; (8004090 <HAL_RCC_OscConfig+0x240>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d0f0      	beq.n	8003f10 <HAL_RCC_OscConfig+0xc0>
 8003f2e:	e014      	b.n	8003f5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f30:	f7ff f90e 	bl	8003150 <HAL_GetTick>
 8003f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f36:	e008      	b.n	8003f4a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f38:	f7ff f90a 	bl	8003150 <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	2b64      	cmp	r3, #100	; 0x64
 8003f44:	d901      	bls.n	8003f4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e1f3      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f4a:	4b51      	ldr	r3, [pc, #324]	; (8004090 <HAL_RCC_OscConfig+0x240>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1f0      	bne.n	8003f38 <HAL_RCC_OscConfig+0xe8>
 8003f56:	e000      	b.n	8003f5a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0302 	and.w	r3, r3, #2
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d063      	beq.n	800402e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f66:	4b4a      	ldr	r3, [pc, #296]	; (8004090 <HAL_RCC_OscConfig+0x240>)
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f003 030c 	and.w	r3, r3, #12
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00b      	beq.n	8003f8a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f72:	4b47      	ldr	r3, [pc, #284]	; (8004090 <HAL_RCC_OscConfig+0x240>)
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f7a:	2b08      	cmp	r3, #8
 8003f7c:	d11c      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f7e:	4b44      	ldr	r3, [pc, #272]	; (8004090 <HAL_RCC_OscConfig+0x240>)
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d116      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f8a:	4b41      	ldr	r3, [pc, #260]	; (8004090 <HAL_RCC_OscConfig+0x240>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0302 	and.w	r3, r3, #2
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d005      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x152>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d001      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e1c7      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fa2:	4b3b      	ldr	r3, [pc, #236]	; (8004090 <HAL_RCC_OscConfig+0x240>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	00db      	lsls	r3, r3, #3
 8003fb0:	4937      	ldr	r1, [pc, #220]	; (8004090 <HAL_RCC_OscConfig+0x240>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fb6:	e03a      	b.n	800402e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d020      	beq.n	8004002 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fc0:	4b34      	ldr	r3, [pc, #208]	; (8004094 <HAL_RCC_OscConfig+0x244>)
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fc6:	f7ff f8c3 	bl	8003150 <HAL_GetTick>
 8003fca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fcc:	e008      	b.n	8003fe0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fce:	f7ff f8bf 	bl	8003150 <HAL_GetTick>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d901      	bls.n	8003fe0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e1a8      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fe0:	4b2b      	ldr	r3, [pc, #172]	; (8004090 <HAL_RCC_OscConfig+0x240>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0302 	and.w	r3, r3, #2
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d0f0      	beq.n	8003fce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fec:	4b28      	ldr	r3, [pc, #160]	; (8004090 <HAL_RCC_OscConfig+0x240>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	691b      	ldr	r3, [r3, #16]
 8003ff8:	00db      	lsls	r3, r3, #3
 8003ffa:	4925      	ldr	r1, [pc, #148]	; (8004090 <HAL_RCC_OscConfig+0x240>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	600b      	str	r3, [r1, #0]
 8004000:	e015      	b.n	800402e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004002:	4b24      	ldr	r3, [pc, #144]	; (8004094 <HAL_RCC_OscConfig+0x244>)
 8004004:	2200      	movs	r2, #0
 8004006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004008:	f7ff f8a2 	bl	8003150 <HAL_GetTick>
 800400c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800400e:	e008      	b.n	8004022 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004010:	f7ff f89e 	bl	8003150 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b02      	cmp	r3, #2
 800401c:	d901      	bls.n	8004022 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e187      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004022:	4b1b      	ldr	r3, [pc, #108]	; (8004090 <HAL_RCC_OscConfig+0x240>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0302 	and.w	r3, r3, #2
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1f0      	bne.n	8004010 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0308 	and.w	r3, r3, #8
 8004036:	2b00      	cmp	r3, #0
 8004038:	d036      	beq.n	80040a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d016      	beq.n	8004070 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004042:	4b15      	ldr	r3, [pc, #84]	; (8004098 <HAL_RCC_OscConfig+0x248>)
 8004044:	2201      	movs	r2, #1
 8004046:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004048:	f7ff f882 	bl	8003150 <HAL_GetTick>
 800404c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800404e:	e008      	b.n	8004062 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004050:	f7ff f87e 	bl	8003150 <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	2b02      	cmp	r3, #2
 800405c:	d901      	bls.n	8004062 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e167      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004062:	4b0b      	ldr	r3, [pc, #44]	; (8004090 <HAL_RCC_OscConfig+0x240>)
 8004064:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	2b00      	cmp	r3, #0
 800406c:	d0f0      	beq.n	8004050 <HAL_RCC_OscConfig+0x200>
 800406e:	e01b      	b.n	80040a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004070:	4b09      	ldr	r3, [pc, #36]	; (8004098 <HAL_RCC_OscConfig+0x248>)
 8004072:	2200      	movs	r2, #0
 8004074:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004076:	f7ff f86b 	bl	8003150 <HAL_GetTick>
 800407a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800407c:	e00e      	b.n	800409c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800407e:	f7ff f867 	bl	8003150 <HAL_GetTick>
 8004082:	4602      	mov	r2, r0
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	2b02      	cmp	r3, #2
 800408a:	d907      	bls.n	800409c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	e150      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
 8004090:	40023800 	.word	0x40023800
 8004094:	42470000 	.word	0x42470000
 8004098:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800409c:	4b88      	ldr	r3, [pc, #544]	; (80042c0 <HAL_RCC_OscConfig+0x470>)
 800409e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040a0:	f003 0302 	and.w	r3, r3, #2
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d1ea      	bne.n	800407e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0304 	and.w	r3, r3, #4
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	f000 8097 	beq.w	80041e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040b6:	2300      	movs	r3, #0
 80040b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040ba:	4b81      	ldr	r3, [pc, #516]	; (80042c0 <HAL_RCC_OscConfig+0x470>)
 80040bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d10f      	bne.n	80040e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040c6:	2300      	movs	r3, #0
 80040c8:	60bb      	str	r3, [r7, #8]
 80040ca:	4b7d      	ldr	r3, [pc, #500]	; (80042c0 <HAL_RCC_OscConfig+0x470>)
 80040cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ce:	4a7c      	ldr	r2, [pc, #496]	; (80042c0 <HAL_RCC_OscConfig+0x470>)
 80040d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040d4:	6413      	str	r3, [r2, #64]	; 0x40
 80040d6:	4b7a      	ldr	r3, [pc, #488]	; (80042c0 <HAL_RCC_OscConfig+0x470>)
 80040d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040de:	60bb      	str	r3, [r7, #8]
 80040e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040e2:	2301      	movs	r3, #1
 80040e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040e6:	4b77      	ldr	r3, [pc, #476]	; (80042c4 <HAL_RCC_OscConfig+0x474>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d118      	bne.n	8004124 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040f2:	4b74      	ldr	r3, [pc, #464]	; (80042c4 <HAL_RCC_OscConfig+0x474>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a73      	ldr	r2, [pc, #460]	; (80042c4 <HAL_RCC_OscConfig+0x474>)
 80040f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040fe:	f7ff f827 	bl	8003150 <HAL_GetTick>
 8004102:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004104:	e008      	b.n	8004118 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004106:	f7ff f823 	bl	8003150 <HAL_GetTick>
 800410a:	4602      	mov	r2, r0
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	2b02      	cmp	r3, #2
 8004112:	d901      	bls.n	8004118 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e10c      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004118:	4b6a      	ldr	r3, [pc, #424]	; (80042c4 <HAL_RCC_OscConfig+0x474>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004120:	2b00      	cmp	r3, #0
 8004122:	d0f0      	beq.n	8004106 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	2b01      	cmp	r3, #1
 800412a:	d106      	bne.n	800413a <HAL_RCC_OscConfig+0x2ea>
 800412c:	4b64      	ldr	r3, [pc, #400]	; (80042c0 <HAL_RCC_OscConfig+0x470>)
 800412e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004130:	4a63      	ldr	r2, [pc, #396]	; (80042c0 <HAL_RCC_OscConfig+0x470>)
 8004132:	f043 0301 	orr.w	r3, r3, #1
 8004136:	6713      	str	r3, [r2, #112]	; 0x70
 8004138:	e01c      	b.n	8004174 <HAL_RCC_OscConfig+0x324>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	2b05      	cmp	r3, #5
 8004140:	d10c      	bne.n	800415c <HAL_RCC_OscConfig+0x30c>
 8004142:	4b5f      	ldr	r3, [pc, #380]	; (80042c0 <HAL_RCC_OscConfig+0x470>)
 8004144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004146:	4a5e      	ldr	r2, [pc, #376]	; (80042c0 <HAL_RCC_OscConfig+0x470>)
 8004148:	f043 0304 	orr.w	r3, r3, #4
 800414c:	6713      	str	r3, [r2, #112]	; 0x70
 800414e:	4b5c      	ldr	r3, [pc, #368]	; (80042c0 <HAL_RCC_OscConfig+0x470>)
 8004150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004152:	4a5b      	ldr	r2, [pc, #364]	; (80042c0 <HAL_RCC_OscConfig+0x470>)
 8004154:	f043 0301 	orr.w	r3, r3, #1
 8004158:	6713      	str	r3, [r2, #112]	; 0x70
 800415a:	e00b      	b.n	8004174 <HAL_RCC_OscConfig+0x324>
 800415c:	4b58      	ldr	r3, [pc, #352]	; (80042c0 <HAL_RCC_OscConfig+0x470>)
 800415e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004160:	4a57      	ldr	r2, [pc, #348]	; (80042c0 <HAL_RCC_OscConfig+0x470>)
 8004162:	f023 0301 	bic.w	r3, r3, #1
 8004166:	6713      	str	r3, [r2, #112]	; 0x70
 8004168:	4b55      	ldr	r3, [pc, #340]	; (80042c0 <HAL_RCC_OscConfig+0x470>)
 800416a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800416c:	4a54      	ldr	r2, [pc, #336]	; (80042c0 <HAL_RCC_OscConfig+0x470>)
 800416e:	f023 0304 	bic.w	r3, r3, #4
 8004172:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d015      	beq.n	80041a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800417c:	f7fe ffe8 	bl	8003150 <HAL_GetTick>
 8004180:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004182:	e00a      	b.n	800419a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004184:	f7fe ffe4 	bl	8003150 <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004192:	4293      	cmp	r3, r2
 8004194:	d901      	bls.n	800419a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e0cb      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800419a:	4b49      	ldr	r3, [pc, #292]	; (80042c0 <HAL_RCC_OscConfig+0x470>)
 800419c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800419e:	f003 0302 	and.w	r3, r3, #2
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d0ee      	beq.n	8004184 <HAL_RCC_OscConfig+0x334>
 80041a6:	e014      	b.n	80041d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041a8:	f7fe ffd2 	bl	8003150 <HAL_GetTick>
 80041ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041ae:	e00a      	b.n	80041c6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041b0:	f7fe ffce 	bl	8003150 <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80041be:	4293      	cmp	r3, r2
 80041c0:	d901      	bls.n	80041c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e0b5      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041c6:	4b3e      	ldr	r3, [pc, #248]	; (80042c0 <HAL_RCC_OscConfig+0x470>)
 80041c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ca:	f003 0302 	and.w	r3, r3, #2
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d1ee      	bne.n	80041b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041d2:	7dfb      	ldrb	r3, [r7, #23]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d105      	bne.n	80041e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041d8:	4b39      	ldr	r3, [pc, #228]	; (80042c0 <HAL_RCC_OscConfig+0x470>)
 80041da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041dc:	4a38      	ldr	r2, [pc, #224]	; (80042c0 <HAL_RCC_OscConfig+0x470>)
 80041de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041e2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	699b      	ldr	r3, [r3, #24]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	f000 80a1 	beq.w	8004330 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041ee:	4b34      	ldr	r3, [pc, #208]	; (80042c0 <HAL_RCC_OscConfig+0x470>)
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f003 030c 	and.w	r3, r3, #12
 80041f6:	2b08      	cmp	r3, #8
 80041f8:	d05c      	beq.n	80042b4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d141      	bne.n	8004286 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004202:	4b31      	ldr	r3, [pc, #196]	; (80042c8 <HAL_RCC_OscConfig+0x478>)
 8004204:	2200      	movs	r2, #0
 8004206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004208:	f7fe ffa2 	bl	8003150 <HAL_GetTick>
 800420c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800420e:	e008      	b.n	8004222 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004210:	f7fe ff9e 	bl	8003150 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	2b02      	cmp	r3, #2
 800421c:	d901      	bls.n	8004222 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e087      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004222:	4b27      	ldr	r3, [pc, #156]	; (80042c0 <HAL_RCC_OscConfig+0x470>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d1f0      	bne.n	8004210 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	69da      	ldr	r2, [r3, #28]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a1b      	ldr	r3, [r3, #32]
 8004236:	431a      	orrs	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423c:	019b      	lsls	r3, r3, #6
 800423e:	431a      	orrs	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004244:	085b      	lsrs	r3, r3, #1
 8004246:	3b01      	subs	r3, #1
 8004248:	041b      	lsls	r3, r3, #16
 800424a:	431a      	orrs	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004250:	061b      	lsls	r3, r3, #24
 8004252:	491b      	ldr	r1, [pc, #108]	; (80042c0 <HAL_RCC_OscConfig+0x470>)
 8004254:	4313      	orrs	r3, r2
 8004256:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004258:	4b1b      	ldr	r3, [pc, #108]	; (80042c8 <HAL_RCC_OscConfig+0x478>)
 800425a:	2201      	movs	r2, #1
 800425c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800425e:	f7fe ff77 	bl	8003150 <HAL_GetTick>
 8004262:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004264:	e008      	b.n	8004278 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004266:	f7fe ff73 	bl	8003150 <HAL_GetTick>
 800426a:	4602      	mov	r2, r0
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	2b02      	cmp	r3, #2
 8004272:	d901      	bls.n	8004278 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e05c      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004278:	4b11      	ldr	r3, [pc, #68]	; (80042c0 <HAL_RCC_OscConfig+0x470>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d0f0      	beq.n	8004266 <HAL_RCC_OscConfig+0x416>
 8004284:	e054      	b.n	8004330 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004286:	4b10      	ldr	r3, [pc, #64]	; (80042c8 <HAL_RCC_OscConfig+0x478>)
 8004288:	2200      	movs	r2, #0
 800428a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800428c:	f7fe ff60 	bl	8003150 <HAL_GetTick>
 8004290:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004292:	e008      	b.n	80042a6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004294:	f7fe ff5c 	bl	8003150 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d901      	bls.n	80042a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e045      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042a6:	4b06      	ldr	r3, [pc, #24]	; (80042c0 <HAL_RCC_OscConfig+0x470>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d1f0      	bne.n	8004294 <HAL_RCC_OscConfig+0x444>
 80042b2:	e03d      	b.n	8004330 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	699b      	ldr	r3, [r3, #24]
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d107      	bne.n	80042cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e038      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
 80042c0:	40023800 	.word	0x40023800
 80042c4:	40007000 	.word	0x40007000
 80042c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80042cc:	4b1b      	ldr	r3, [pc, #108]	; (800433c <HAL_RCC_OscConfig+0x4ec>)
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d028      	beq.n	800432c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d121      	bne.n	800432c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d11a      	bne.n	800432c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80042fc:	4013      	ands	r3, r2
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004302:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004304:	4293      	cmp	r3, r2
 8004306:	d111      	bne.n	800432c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004312:	085b      	lsrs	r3, r3, #1
 8004314:	3b01      	subs	r3, #1
 8004316:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004318:	429a      	cmp	r2, r3
 800431a:	d107      	bne.n	800432c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004326:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004328:	429a      	cmp	r2, r3
 800432a:	d001      	beq.n	8004330 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e000      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3718      	adds	r7, #24
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	40023800 	.word	0x40023800

08004340 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d101      	bne.n	8004354 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e0cc      	b.n	80044ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004354:	4b68      	ldr	r3, [pc, #416]	; (80044f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0307 	and.w	r3, r3, #7
 800435c:	683a      	ldr	r2, [r7, #0]
 800435e:	429a      	cmp	r2, r3
 8004360:	d90c      	bls.n	800437c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004362:	4b65      	ldr	r3, [pc, #404]	; (80044f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004364:	683a      	ldr	r2, [r7, #0]
 8004366:	b2d2      	uxtb	r2, r2
 8004368:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800436a:	4b63      	ldr	r3, [pc, #396]	; (80044f8 <HAL_RCC_ClockConfig+0x1b8>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0307 	and.w	r3, r3, #7
 8004372:	683a      	ldr	r2, [r7, #0]
 8004374:	429a      	cmp	r2, r3
 8004376:	d001      	beq.n	800437c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e0b8      	b.n	80044ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0302 	and.w	r3, r3, #2
 8004384:	2b00      	cmp	r3, #0
 8004386:	d020      	beq.n	80043ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0304 	and.w	r3, r3, #4
 8004390:	2b00      	cmp	r3, #0
 8004392:	d005      	beq.n	80043a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004394:	4b59      	ldr	r3, [pc, #356]	; (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	4a58      	ldr	r2, [pc, #352]	; (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 800439a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800439e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0308 	and.w	r3, r3, #8
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d005      	beq.n	80043b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043ac:	4b53      	ldr	r3, [pc, #332]	; (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	4a52      	ldr	r2, [pc, #328]	; (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 80043b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80043b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043b8:	4b50      	ldr	r3, [pc, #320]	; (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	494d      	ldr	r1, [pc, #308]	; (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d044      	beq.n	8004460 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d107      	bne.n	80043ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043de:	4b47      	ldr	r3, [pc, #284]	; (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d119      	bne.n	800441e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e07f      	b.n	80044ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d003      	beq.n	80043fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043fa:	2b03      	cmp	r3, #3
 80043fc:	d107      	bne.n	800440e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043fe:	4b3f      	ldr	r3, [pc, #252]	; (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d109      	bne.n	800441e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e06f      	b.n	80044ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800440e:	4b3b      	ldr	r3, [pc, #236]	; (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0302 	and.w	r3, r3, #2
 8004416:	2b00      	cmp	r3, #0
 8004418:	d101      	bne.n	800441e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e067      	b.n	80044ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800441e:	4b37      	ldr	r3, [pc, #220]	; (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f023 0203 	bic.w	r2, r3, #3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	4934      	ldr	r1, [pc, #208]	; (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 800442c:	4313      	orrs	r3, r2
 800442e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004430:	f7fe fe8e 	bl	8003150 <HAL_GetTick>
 8004434:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004436:	e00a      	b.n	800444e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004438:	f7fe fe8a 	bl	8003150 <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	f241 3288 	movw	r2, #5000	; 0x1388
 8004446:	4293      	cmp	r3, r2
 8004448:	d901      	bls.n	800444e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e04f      	b.n	80044ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800444e:	4b2b      	ldr	r3, [pc, #172]	; (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	f003 020c 	and.w	r2, r3, #12
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	429a      	cmp	r2, r3
 800445e:	d1eb      	bne.n	8004438 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004460:	4b25      	ldr	r3, [pc, #148]	; (80044f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0307 	and.w	r3, r3, #7
 8004468:	683a      	ldr	r2, [r7, #0]
 800446a:	429a      	cmp	r2, r3
 800446c:	d20c      	bcs.n	8004488 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800446e:	4b22      	ldr	r3, [pc, #136]	; (80044f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004470:	683a      	ldr	r2, [r7, #0]
 8004472:	b2d2      	uxtb	r2, r2
 8004474:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004476:	4b20      	ldr	r3, [pc, #128]	; (80044f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0307 	and.w	r3, r3, #7
 800447e:	683a      	ldr	r2, [r7, #0]
 8004480:	429a      	cmp	r2, r3
 8004482:	d001      	beq.n	8004488 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e032      	b.n	80044ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0304 	and.w	r3, r3, #4
 8004490:	2b00      	cmp	r3, #0
 8004492:	d008      	beq.n	80044a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004494:	4b19      	ldr	r3, [pc, #100]	; (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	4916      	ldr	r1, [pc, #88]	; (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0308 	and.w	r3, r3, #8
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d009      	beq.n	80044c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044b2:	4b12      	ldr	r3, [pc, #72]	; (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	00db      	lsls	r3, r3, #3
 80044c0:	490e      	ldr	r1, [pc, #56]	; (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80044c6:	f000 f821 	bl	800450c <HAL_RCC_GetSysClockFreq>
 80044ca:	4602      	mov	r2, r0
 80044cc:	4b0b      	ldr	r3, [pc, #44]	; (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	091b      	lsrs	r3, r3, #4
 80044d2:	f003 030f 	and.w	r3, r3, #15
 80044d6:	490a      	ldr	r1, [pc, #40]	; (8004500 <HAL_RCC_ClockConfig+0x1c0>)
 80044d8:	5ccb      	ldrb	r3, [r1, r3]
 80044da:	fa22 f303 	lsr.w	r3, r2, r3
 80044de:	4a09      	ldr	r2, [pc, #36]	; (8004504 <HAL_RCC_ClockConfig+0x1c4>)
 80044e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80044e2:	4b09      	ldr	r3, [pc, #36]	; (8004508 <HAL_RCC_ClockConfig+0x1c8>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4618      	mov	r0, r3
 80044e8:	f7fe fdee 	bl	80030c8 <HAL_InitTick>

  return HAL_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3710      	adds	r7, #16
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	40023c00 	.word	0x40023c00
 80044fc:	40023800 	.word	0x40023800
 8004500:	08004cf8 	.word	0x08004cf8
 8004504:	20000000 	.word	0x20000000
 8004508:	20000004 	.word	0x20000004

0800450c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800450c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004510:	b094      	sub	sp, #80	; 0x50
 8004512:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004514:	2300      	movs	r3, #0
 8004516:	647b      	str	r3, [r7, #68]	; 0x44
 8004518:	2300      	movs	r3, #0
 800451a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800451c:	2300      	movs	r3, #0
 800451e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004520:	2300      	movs	r3, #0
 8004522:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004524:	4b79      	ldr	r3, [pc, #484]	; (800470c <HAL_RCC_GetSysClockFreq+0x200>)
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	f003 030c 	and.w	r3, r3, #12
 800452c:	2b08      	cmp	r3, #8
 800452e:	d00d      	beq.n	800454c <HAL_RCC_GetSysClockFreq+0x40>
 8004530:	2b08      	cmp	r3, #8
 8004532:	f200 80e1 	bhi.w	80046f8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004536:	2b00      	cmp	r3, #0
 8004538:	d002      	beq.n	8004540 <HAL_RCC_GetSysClockFreq+0x34>
 800453a:	2b04      	cmp	r3, #4
 800453c:	d003      	beq.n	8004546 <HAL_RCC_GetSysClockFreq+0x3a>
 800453e:	e0db      	b.n	80046f8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004540:	4b73      	ldr	r3, [pc, #460]	; (8004710 <HAL_RCC_GetSysClockFreq+0x204>)
 8004542:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004544:	e0db      	b.n	80046fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004546:	4b73      	ldr	r3, [pc, #460]	; (8004714 <HAL_RCC_GetSysClockFreq+0x208>)
 8004548:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800454a:	e0d8      	b.n	80046fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800454c:	4b6f      	ldr	r3, [pc, #444]	; (800470c <HAL_RCC_GetSysClockFreq+0x200>)
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004554:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004556:	4b6d      	ldr	r3, [pc, #436]	; (800470c <HAL_RCC_GetSysClockFreq+0x200>)
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d063      	beq.n	800462a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004562:	4b6a      	ldr	r3, [pc, #424]	; (800470c <HAL_RCC_GetSysClockFreq+0x200>)
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	099b      	lsrs	r3, r3, #6
 8004568:	2200      	movs	r2, #0
 800456a:	63bb      	str	r3, [r7, #56]	; 0x38
 800456c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800456e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004570:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004574:	633b      	str	r3, [r7, #48]	; 0x30
 8004576:	2300      	movs	r3, #0
 8004578:	637b      	str	r3, [r7, #52]	; 0x34
 800457a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800457e:	4622      	mov	r2, r4
 8004580:	462b      	mov	r3, r5
 8004582:	f04f 0000 	mov.w	r0, #0
 8004586:	f04f 0100 	mov.w	r1, #0
 800458a:	0159      	lsls	r1, r3, #5
 800458c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004590:	0150      	lsls	r0, r2, #5
 8004592:	4602      	mov	r2, r0
 8004594:	460b      	mov	r3, r1
 8004596:	4621      	mov	r1, r4
 8004598:	1a51      	subs	r1, r2, r1
 800459a:	6139      	str	r1, [r7, #16]
 800459c:	4629      	mov	r1, r5
 800459e:	eb63 0301 	sbc.w	r3, r3, r1
 80045a2:	617b      	str	r3, [r7, #20]
 80045a4:	f04f 0200 	mov.w	r2, #0
 80045a8:	f04f 0300 	mov.w	r3, #0
 80045ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80045b0:	4659      	mov	r1, fp
 80045b2:	018b      	lsls	r3, r1, #6
 80045b4:	4651      	mov	r1, sl
 80045b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80045ba:	4651      	mov	r1, sl
 80045bc:	018a      	lsls	r2, r1, #6
 80045be:	4651      	mov	r1, sl
 80045c0:	ebb2 0801 	subs.w	r8, r2, r1
 80045c4:	4659      	mov	r1, fp
 80045c6:	eb63 0901 	sbc.w	r9, r3, r1
 80045ca:	f04f 0200 	mov.w	r2, #0
 80045ce:	f04f 0300 	mov.w	r3, #0
 80045d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80045d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80045da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045de:	4690      	mov	r8, r2
 80045e0:	4699      	mov	r9, r3
 80045e2:	4623      	mov	r3, r4
 80045e4:	eb18 0303 	adds.w	r3, r8, r3
 80045e8:	60bb      	str	r3, [r7, #8]
 80045ea:	462b      	mov	r3, r5
 80045ec:	eb49 0303 	adc.w	r3, r9, r3
 80045f0:	60fb      	str	r3, [r7, #12]
 80045f2:	f04f 0200 	mov.w	r2, #0
 80045f6:	f04f 0300 	mov.w	r3, #0
 80045fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80045fe:	4629      	mov	r1, r5
 8004600:	024b      	lsls	r3, r1, #9
 8004602:	4621      	mov	r1, r4
 8004604:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004608:	4621      	mov	r1, r4
 800460a:	024a      	lsls	r2, r1, #9
 800460c:	4610      	mov	r0, r2
 800460e:	4619      	mov	r1, r3
 8004610:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004612:	2200      	movs	r2, #0
 8004614:	62bb      	str	r3, [r7, #40]	; 0x28
 8004616:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004618:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800461c:	f7fb fddc 	bl	80001d8 <__aeabi_uldivmod>
 8004620:	4602      	mov	r2, r0
 8004622:	460b      	mov	r3, r1
 8004624:	4613      	mov	r3, r2
 8004626:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004628:	e058      	b.n	80046dc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800462a:	4b38      	ldr	r3, [pc, #224]	; (800470c <HAL_RCC_GetSysClockFreq+0x200>)
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	099b      	lsrs	r3, r3, #6
 8004630:	2200      	movs	r2, #0
 8004632:	4618      	mov	r0, r3
 8004634:	4611      	mov	r1, r2
 8004636:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800463a:	623b      	str	r3, [r7, #32]
 800463c:	2300      	movs	r3, #0
 800463e:	627b      	str	r3, [r7, #36]	; 0x24
 8004640:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004644:	4642      	mov	r2, r8
 8004646:	464b      	mov	r3, r9
 8004648:	f04f 0000 	mov.w	r0, #0
 800464c:	f04f 0100 	mov.w	r1, #0
 8004650:	0159      	lsls	r1, r3, #5
 8004652:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004656:	0150      	lsls	r0, r2, #5
 8004658:	4602      	mov	r2, r0
 800465a:	460b      	mov	r3, r1
 800465c:	4641      	mov	r1, r8
 800465e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004662:	4649      	mov	r1, r9
 8004664:	eb63 0b01 	sbc.w	fp, r3, r1
 8004668:	f04f 0200 	mov.w	r2, #0
 800466c:	f04f 0300 	mov.w	r3, #0
 8004670:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004674:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004678:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800467c:	ebb2 040a 	subs.w	r4, r2, sl
 8004680:	eb63 050b 	sbc.w	r5, r3, fp
 8004684:	f04f 0200 	mov.w	r2, #0
 8004688:	f04f 0300 	mov.w	r3, #0
 800468c:	00eb      	lsls	r3, r5, #3
 800468e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004692:	00e2      	lsls	r2, r4, #3
 8004694:	4614      	mov	r4, r2
 8004696:	461d      	mov	r5, r3
 8004698:	4643      	mov	r3, r8
 800469a:	18e3      	adds	r3, r4, r3
 800469c:	603b      	str	r3, [r7, #0]
 800469e:	464b      	mov	r3, r9
 80046a0:	eb45 0303 	adc.w	r3, r5, r3
 80046a4:	607b      	str	r3, [r7, #4]
 80046a6:	f04f 0200 	mov.w	r2, #0
 80046aa:	f04f 0300 	mov.w	r3, #0
 80046ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80046b2:	4629      	mov	r1, r5
 80046b4:	028b      	lsls	r3, r1, #10
 80046b6:	4621      	mov	r1, r4
 80046b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80046bc:	4621      	mov	r1, r4
 80046be:	028a      	lsls	r2, r1, #10
 80046c0:	4610      	mov	r0, r2
 80046c2:	4619      	mov	r1, r3
 80046c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046c6:	2200      	movs	r2, #0
 80046c8:	61bb      	str	r3, [r7, #24]
 80046ca:	61fa      	str	r2, [r7, #28]
 80046cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046d0:	f7fb fd82 	bl	80001d8 <__aeabi_uldivmod>
 80046d4:	4602      	mov	r2, r0
 80046d6:	460b      	mov	r3, r1
 80046d8:	4613      	mov	r3, r2
 80046da:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80046dc:	4b0b      	ldr	r3, [pc, #44]	; (800470c <HAL_RCC_GetSysClockFreq+0x200>)
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	0c1b      	lsrs	r3, r3, #16
 80046e2:	f003 0303 	and.w	r3, r3, #3
 80046e6:	3301      	adds	r3, #1
 80046e8:	005b      	lsls	r3, r3, #1
 80046ea:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80046ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80046ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80046f6:	e002      	b.n	80046fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046f8:	4b05      	ldr	r3, [pc, #20]	; (8004710 <HAL_RCC_GetSysClockFreq+0x204>)
 80046fa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80046fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004700:	4618      	mov	r0, r3
 8004702:	3750      	adds	r7, #80	; 0x50
 8004704:	46bd      	mov	sp, r7
 8004706:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800470a:	bf00      	nop
 800470c:	40023800 	.word	0x40023800
 8004710:	00f42400 	.word	0x00f42400
 8004714:	007a1200 	.word	0x007a1200

08004718 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d101      	bne.n	800472a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e07b      	b.n	8004822 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472e:	2b00      	cmp	r3, #0
 8004730:	d108      	bne.n	8004744 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800473a:	d009      	beq.n	8004750 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	61da      	str	r2, [r3, #28]
 8004742:	e005      	b.n	8004750 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800475c:	b2db      	uxtb	r3, r3
 800475e:	2b00      	cmp	r3, #0
 8004760:	d106      	bne.n	8004770 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f7fe fba0 	bl	8002eb0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2202      	movs	r2, #2
 8004774:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004786:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004798:	431a      	orrs	r2, r3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047a2:	431a      	orrs	r2, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	691b      	ldr	r3, [r3, #16]
 80047a8:	f003 0302 	and.w	r3, r3, #2
 80047ac:	431a      	orrs	r2, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	695b      	ldr	r3, [r3, #20]
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	431a      	orrs	r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	699b      	ldr	r3, [r3, #24]
 80047bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047c0:	431a      	orrs	r2, r3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	69db      	ldr	r3, [r3, #28]
 80047c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047ca:	431a      	orrs	r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6a1b      	ldr	r3, [r3, #32]
 80047d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047d4:	ea42 0103 	orr.w	r1, r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047dc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	430a      	orrs	r2, r1
 80047e6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	699b      	ldr	r3, [r3, #24]
 80047ec:	0c1b      	lsrs	r3, r3, #16
 80047ee:	f003 0104 	and.w	r1, r3, #4
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f6:	f003 0210 	and.w	r2, r3, #16
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	430a      	orrs	r2, r1
 8004800:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	69da      	ldr	r2, [r3, #28]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004810:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004820:	2300      	movs	r3, #0
}
 8004822:	4618      	mov	r0, r3
 8004824:	3708      	adds	r7, #8
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
	...

0800482c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b086      	sub	sp, #24
 8004830:	af00      	add	r7, sp, #0
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	4613      	mov	r3, r2
 8004838:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800483a:	2300      	movs	r3, #0
 800483c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004844:	2b01      	cmp	r3, #1
 8004846:	d101      	bne.n	800484c <HAL_SPI_Transmit_DMA+0x20>
 8004848:	2302      	movs	r3, #2
 800484a:	e09b      	b.n	8004984 <HAL_SPI_Transmit_DMA+0x158>
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800485a:	b2db      	uxtb	r3, r3
 800485c:	2b01      	cmp	r3, #1
 800485e:	d002      	beq.n	8004866 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8004860:	2302      	movs	r3, #2
 8004862:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004864:	e089      	b.n	800497a <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d002      	beq.n	8004872 <HAL_SPI_Transmit_DMA+0x46>
 800486c:	88fb      	ldrh	r3, [r7, #6]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d102      	bne.n	8004878 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004876:	e080      	b.n	800497a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2203      	movs	r2, #3
 800487c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2200      	movs	r2, #0
 8004884:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	68ba      	ldr	r2, [r7, #8]
 800488a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	88fa      	ldrh	r2, [r7, #6]
 8004890:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	88fa      	ldrh	r2, [r7, #6]
 8004896:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2200      	movs	r2, #0
 800489c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2200      	movs	r2, #0
 80048a2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2200      	movs	r2, #0
 80048a8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2200      	movs	r2, #0
 80048ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2200      	movs	r2, #0
 80048b4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048be:	d10f      	bne.n	80048e0 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048ce:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048de:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048e4:	4a29      	ldr	r2, [pc, #164]	; (800498c <HAL_SPI_Transmit_DMA+0x160>)
 80048e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048ec:	4a28      	ldr	r2, [pc, #160]	; (8004990 <HAL_SPI_Transmit_DMA+0x164>)
 80048ee:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048f4:	4a27      	ldr	r2, [pc, #156]	; (8004994 <HAL_SPI_Transmit_DMA+0x168>)
 80048f6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048fc:	2200      	movs	r2, #0
 80048fe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004908:	4619      	mov	r1, r3
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	330c      	adds	r3, #12
 8004910:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004916:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004918:	f7fe fe0a 	bl	8003530 <HAL_DMA_Start_IT>
 800491c:	4603      	mov	r3, r0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00c      	beq.n	800493c <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004926:	f043 0210 	orr.w	r2, r3, #16
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2201      	movs	r2, #1
 8004936:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800493a:	e01e      	b.n	800497a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004946:	2b40      	cmp	r3, #64	; 0x40
 8004948:	d007      	beq.n	800495a <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004958:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	685a      	ldr	r2, [r3, #4]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f042 0220 	orr.w	r2, r2, #32
 8004968:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	685a      	ldr	r2, [r3, #4]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f042 0202 	orr.w	r2, r2, #2
 8004978:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2200      	movs	r2, #0
 800497e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004982:	7dfb      	ldrb	r3, [r7, #23]
}
 8004984:	4618      	mov	r0, r3
 8004986:	3718      	adds	r7, #24
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}
 800498c:	08004a7d 	.word	0x08004a7d
 8004990:	080049d5 	.word	0x080049d5
 8004994:	08004a99 	.word	0x08004a99

08004998 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80049a0:	bf00      	nop
 80049a2:	370c      	adds	r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80049b4:	bf00      	nop
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80049c8:	bf00      	nop
 80049ca:	370c      	adds	r7, #12
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b086      	sub	sp, #24
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049e2:	f7fe fbb5 	bl	8003150 <HAL_GetTick>
 80049e6:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049f6:	d03b      	beq.n	8004a70 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	685a      	ldr	r2, [r3, #4]
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f022 0220 	bic.w	r2, r2, #32
 8004a06:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	685a      	ldr	r2, [r3, #4]
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f022 0202 	bic.w	r2, r2, #2
 8004a16:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004a18:	693a      	ldr	r2, [r7, #16]
 8004a1a:	2164      	movs	r1, #100	; 0x64
 8004a1c:	6978      	ldr	r0, [r7, #20]
 8004a1e:	f000 f8e3 	bl	8004be8 <SPI_EndRxTxTransaction>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d005      	beq.n	8004a34 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a2c:	f043 0220 	orr.w	r2, r3, #32
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d10a      	bne.n	8004a52 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	60fb      	str	r3, [r7, #12]
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	60fb      	str	r3, [r7, #12]
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	60fb      	str	r3, [r7, #12]
 8004a50:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	2200      	movs	r2, #0
 8004a56:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d003      	beq.n	8004a70 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004a68:	6978      	ldr	r0, [r7, #20]
 8004a6a:	f7ff ffa9 	bl	80049c0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004a6e:	e002      	b.n	8004a76 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004a70:	6978      	ldr	r0, [r7, #20]
 8004a72:	f7ff ff91 	bl	8004998 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004a76:	3718      	adds	r7, #24
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a88:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8004a8a:	68f8      	ldr	r0, [r7, #12]
 8004a8c:	f7ff ff8e 	bl	80049ac <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004a90:	bf00      	nop
 8004a92:	3710      	adds	r7, #16
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa4:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	685a      	ldr	r2, [r3, #4]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f022 0203 	bic.w	r2, r2, #3
 8004ab4:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aba:	f043 0210 	orr.w	r2, r3, #16
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004aca:	68f8      	ldr	r0, [r7, #12]
 8004acc:	f7ff ff78 	bl	80049c0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004ad0:	bf00      	nop
 8004ad2:	3710      	adds	r7, #16
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b088      	sub	sp, #32
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	603b      	str	r3, [r7, #0]
 8004ae4:	4613      	mov	r3, r2
 8004ae6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ae8:	f7fe fb32 	bl	8003150 <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af0:	1a9b      	subs	r3, r3, r2
 8004af2:	683a      	ldr	r2, [r7, #0]
 8004af4:	4413      	add	r3, r2
 8004af6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004af8:	f7fe fb2a 	bl	8003150 <HAL_GetTick>
 8004afc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004afe:	4b39      	ldr	r3, [pc, #228]	; (8004be4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	015b      	lsls	r3, r3, #5
 8004b04:	0d1b      	lsrs	r3, r3, #20
 8004b06:	69fa      	ldr	r2, [r7, #28]
 8004b08:	fb02 f303 	mul.w	r3, r2, r3
 8004b0c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b0e:	e054      	b.n	8004bba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b16:	d050      	beq.n	8004bba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b18:	f7fe fb1a 	bl	8003150 <HAL_GetTick>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	69fa      	ldr	r2, [r7, #28]
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d902      	bls.n	8004b2e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d13d      	bne.n	8004baa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	685a      	ldr	r2, [r3, #4]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004b3c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b46:	d111      	bne.n	8004b6c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b50:	d004      	beq.n	8004b5c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b5a:	d107      	bne.n	8004b6c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b6a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b74:	d10f      	bne.n	8004b96 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b84:	601a      	str	r2, [r3, #0]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b94:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2201      	movs	r2, #1
 8004b9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e017      	b.n	8004bda <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d101      	bne.n	8004bb4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	3b01      	subs	r3, #1
 8004bb8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	689a      	ldr	r2, [r3, #8]
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	68ba      	ldr	r2, [r7, #8]
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	bf0c      	ite	eq
 8004bca:	2301      	moveq	r3, #1
 8004bcc:	2300      	movne	r3, #0
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	79fb      	ldrb	r3, [r7, #7]
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d19b      	bne.n	8004b10 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3720      	adds	r7, #32
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	20000000 	.word	0x20000000

08004be8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b088      	sub	sp, #32
 8004bec:	af02      	add	r7, sp, #8
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004bf4:	4b1b      	ldr	r3, [pc, #108]	; (8004c64 <SPI_EndRxTxTransaction+0x7c>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a1b      	ldr	r2, [pc, #108]	; (8004c68 <SPI_EndRxTxTransaction+0x80>)
 8004bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8004bfe:	0d5b      	lsrs	r3, r3, #21
 8004c00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004c04:	fb02 f303 	mul.w	r3, r2, r3
 8004c08:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c12:	d112      	bne.n	8004c3a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	9300      	str	r3, [sp, #0]
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	2180      	movs	r1, #128	; 0x80
 8004c1e:	68f8      	ldr	r0, [r7, #12]
 8004c20:	f7ff ff5a 	bl	8004ad8 <SPI_WaitFlagStateUntilTimeout>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d016      	beq.n	8004c58 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c2e:	f043 0220 	orr.w	r2, r3, #32
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	e00f      	b.n	8004c5a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d00a      	beq.n	8004c56 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	3b01      	subs	r3, #1
 8004c44:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c50:	2b80      	cmp	r3, #128	; 0x80
 8004c52:	d0f2      	beq.n	8004c3a <SPI_EndRxTxTransaction+0x52>
 8004c54:	e000      	b.n	8004c58 <SPI_EndRxTxTransaction+0x70>
        break;
 8004c56:	bf00      	nop
  }

  return HAL_OK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3718      	adds	r7, #24
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop
 8004c64:	20000000 	.word	0x20000000
 8004c68:	165e9f81 	.word	0x165e9f81

08004c6c <__libc_init_array>:
 8004c6c:	b570      	push	{r4, r5, r6, lr}
 8004c6e:	4d0d      	ldr	r5, [pc, #52]	; (8004ca4 <__libc_init_array+0x38>)
 8004c70:	4c0d      	ldr	r4, [pc, #52]	; (8004ca8 <__libc_init_array+0x3c>)
 8004c72:	1b64      	subs	r4, r4, r5
 8004c74:	10a4      	asrs	r4, r4, #2
 8004c76:	2600      	movs	r6, #0
 8004c78:	42a6      	cmp	r6, r4
 8004c7a:	d109      	bne.n	8004c90 <__libc_init_array+0x24>
 8004c7c:	4d0b      	ldr	r5, [pc, #44]	; (8004cac <__libc_init_array+0x40>)
 8004c7e:	4c0c      	ldr	r4, [pc, #48]	; (8004cb0 <__libc_init_array+0x44>)
 8004c80:	f000 f820 	bl	8004cc4 <_init>
 8004c84:	1b64      	subs	r4, r4, r5
 8004c86:	10a4      	asrs	r4, r4, #2
 8004c88:	2600      	movs	r6, #0
 8004c8a:	42a6      	cmp	r6, r4
 8004c8c:	d105      	bne.n	8004c9a <__libc_init_array+0x2e>
 8004c8e:	bd70      	pop	{r4, r5, r6, pc}
 8004c90:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c94:	4798      	blx	r3
 8004c96:	3601      	adds	r6, #1
 8004c98:	e7ee      	b.n	8004c78 <__libc_init_array+0xc>
 8004c9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c9e:	4798      	blx	r3
 8004ca0:	3601      	adds	r6, #1
 8004ca2:	e7f2      	b.n	8004c8a <__libc_init_array+0x1e>
 8004ca4:	08004e1c 	.word	0x08004e1c
 8004ca8:	08004e1c 	.word	0x08004e1c
 8004cac:	08004e1c 	.word	0x08004e1c
 8004cb0:	08004e20 	.word	0x08004e20

08004cb4 <memset>:
 8004cb4:	4402      	add	r2, r0
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d100      	bne.n	8004cbe <memset+0xa>
 8004cbc:	4770      	bx	lr
 8004cbe:	f803 1b01 	strb.w	r1, [r3], #1
 8004cc2:	e7f9      	b.n	8004cb8 <memset+0x4>

08004cc4 <_init>:
 8004cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cc6:	bf00      	nop
 8004cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cca:	bc08      	pop	{r3}
 8004ccc:	469e      	mov	lr, r3
 8004cce:	4770      	bx	lr

08004cd0 <_fini>:
 8004cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cd2:	bf00      	nop
 8004cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cd6:	bc08      	pop	{r3}
 8004cd8:	469e      	mov	lr, r3
 8004cda:	4770      	bx	lr
