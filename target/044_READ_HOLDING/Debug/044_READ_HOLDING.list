
044_READ_HOLDING.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003290  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b4  08003348  08003348  00013348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035fc  080035fc  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080035fc  080035fc  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080035fc  080035fc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035fc  080035fc  000135fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003600  08003600  00013600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003604  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000378  20000010  08003614  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000388  08003614  00020388  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b0bd  00000000  00000000  0002007b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001dbe  00000000  00000000  0002b138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000870  00000000  00000000  0002cef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000067f  00000000  00000000  0002d768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015011  00000000  00000000  0002dde7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bc65  00000000  00000000  00042df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000838bf  00000000  00000000  0004ea5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001c94  00000000  00000000  000d231c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000d3fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000010 	.word	0x20000010
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08003330 	.word	0x08003330

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000014 	.word	0x20000014
 80000fc:	08003330 	.word	0x08003330

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <HAL_UARTEx_RxEventCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
 80003f4:	000a      	movs	r2, r1
 80003f6:	1cbb      	adds	r3, r7, #2
 80003f8:	801a      	strh	r2, [r3, #0]
    if (huart->Instance == USART1) {
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	4a0c      	ldr	r2, [pc, #48]	; (8000430 <HAL_UARTEx_RxEventCallback+0x44>)
 8000400:	4293      	cmp	r3, r2
 8000402:	d109      	bne.n	8000418 <HAL_UARTEx_RxEventCallback+0x2c>
        received_data_length = BUFFER_SIZE - hdma_usart1_rx.Instance->CNDTR;
 8000404:	4b0b      	ldr	r3, [pc, #44]	; (8000434 <HAL_UARTEx_RxEventCallback+0x48>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	685b      	ldr	r3, [r3, #4]
 800040a:	b29b      	uxth	r3, r3
 800040c:	2280      	movs	r2, #128	; 0x80
 800040e:	0052      	lsls	r2, r2, #1
 8000410:	1ad3      	subs	r3, r2, r3
 8000412:	b29a      	uxth	r2, r3
 8000414:	4b08      	ldr	r3, [pc, #32]	; (8000438 <HAL_UARTEx_RxEventCallback+0x4c>)
 8000416:	801a      	strh	r2, [r3, #0]

    }
    HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t*)rx_buffer, BUFFER_SIZE);
 8000418:	2380      	movs	r3, #128	; 0x80
 800041a:	005a      	lsls	r2, r3, #1
 800041c:	4907      	ldr	r1, [pc, #28]	; (800043c <HAL_UARTEx_RxEventCallback+0x50>)
 800041e:	4b08      	ldr	r3, [pc, #32]	; (8000440 <HAL_UARTEx_RxEventCallback+0x54>)
 8000420:	0018      	movs	r0, r3
 8000422:	f002 fe93 	bl	800314c <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	46bd      	mov	sp, r7
 800042a:	b002      	add	sp, #8
 800042c:	bd80      	pop	{r7, pc}
 800042e:	46c0      	nop			; (mov r8, r8)
 8000430:	40013800 	.word	0x40013800
 8000434:	200000c0 	.word	0x200000c0
 8000438:	20000378 	.word	0x20000378
 800043c:	20000178 	.word	0x20000178
 8000440:	2000002c 	.word	0x2000002c

08000444 <sendData>:

void sendData(uint8_t *data) {
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, data, 8, 1000);
 800044c:	23fa      	movs	r3, #250	; 0xfa
 800044e:	009b      	lsls	r3, r3, #2
 8000450:	6879      	ldr	r1, [r7, #4]
 8000452:	4804      	ldr	r0, [pc, #16]	; (8000464 <sendData+0x20>)
 8000454:	2208      	movs	r2, #8
 8000456:	f001 ff53 	bl	8002300 <HAL_UART_Transmit>
}
 800045a:	46c0      	nop			; (mov r8, r8)
 800045c:	46bd      	mov	sp, r7
 800045e:	b002      	add	sp, #8
 8000460:	bd80      	pop	{r7, pc}
 8000462:	46c0      	nop			; (mov r8, r8)
 8000464:	2000002c 	.word	0x2000002c

08000468 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t*) rx_buffer, BUFFER_SIZE);
 800046c:	2380      	movs	r3, #128	; 0x80
 800046e:	005a      	lsls	r2, r3, #1
 8000470:	4973      	ldr	r1, [pc, #460]	; (8000640 <main+0x1d8>)
 8000472:	4b74      	ldr	r3, [pc, #464]	; (8000644 <main+0x1dc>)
 8000474:	0018      	movs	r0, r3
 8000476:	f002 fe69 	bl	800314c <HAL_UARTEx_ReceiveToIdle_DMA>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800047a:	f000 fb73 	bl	8000b64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800047e:	f000 f8f9 	bl	8000674 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000482:	f000 f9bf 	bl	8000804 <MX_GPIO_Init>
  MX_DMA_Init();
 8000486:	f000 f997 	bl	80007b8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800048a:	f000 f947 	bl	800071c <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	switch (SM_state) {
 800048e:	4b6e      	ldr	r3, [pc, #440]	; (8000648 <main+0x1e0>)
 8000490:	781b      	ldrb	r3, [r3, #0]
 8000492:	2b0a      	cmp	r3, #10
 8000494:	d900      	bls.n	8000498 <main+0x30>
 8000496:	e0ca      	b.n	800062e <main+0x1c6>
 8000498:	009a      	lsls	r2, r3, #2
 800049a:	4b6c      	ldr	r3, [pc, #432]	; (800064c <main+0x1e4>)
 800049c:	18d3      	adds	r3, r2, r3
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	469f      	mov	pc, r3

    	case SM_Idle:
    	{


    		tx_buffer[0] = SlaveAddress;
 80004a2:	4b6b      	ldr	r3, [pc, #428]	; (8000650 <main+0x1e8>)
 80004a4:	781a      	ldrb	r2, [r3, #0]
 80004a6:	4b6b      	ldr	r3, [pc, #428]	; (8000654 <main+0x1ec>)
 80004a8:	701a      	strb	r2, [r3, #0]
    		SM_state				= 	SM_FunctionCode;
 80004aa:	4b67      	ldr	r3, [pc, #412]	; (8000648 <main+0x1e0>)
 80004ac:	2203      	movs	r2, #3
 80004ae:	701a      	strb	r2, [r3, #0]
    		break;
 80004b0:	e0c4      	b.n	800063c <main+0x1d4>
    	}
    	case SM_CRC:
    	{
    		crc						=	crc16(rx_buffer, 8);
 80004b2:	4b63      	ldr	r3, [pc, #396]	; (8000640 <main+0x1d8>)
 80004b4:	2108      	movs	r1, #8
 80004b6:	0018      	movs	r0, r3
 80004b8:	f000 f9cc 	bl	8000854 <crc16>
 80004bc:	0003      	movs	r3, r0
 80004be:	001a      	movs	r2, r3
 80004c0:	4b65      	ldr	r3, [pc, #404]	; (8000658 <main+0x1f0>)
 80004c2:	801a      	strh	r2, [r3, #0]
    		if(crc != 0){
 80004c4:	4b64      	ldr	r3, [pc, #400]	; (8000658 <main+0x1f0>)
 80004c6:	881b      	ldrh	r3, [r3, #0]
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d003      	beq.n	80004d4 <main+0x6c>
    			SM_state 			= 	SM_Idle;
 80004cc:	4b5e      	ldr	r3, [pc, #376]	; (8000648 <main+0x1e0>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	701a      	strb	r2, [r3, #0]
    		}
    		else {
    			SM_state 			= 	SM_SlaveAddress;
    			SM_next_state 		=	SM_FunctionCode;
    		}
    		break;
 80004d2:	e0b3      	b.n	800063c <main+0x1d4>
    			SM_state 			= 	SM_SlaveAddress;
 80004d4:	4b5c      	ldr	r3, [pc, #368]	; (8000648 <main+0x1e0>)
 80004d6:	2202      	movs	r2, #2
 80004d8:	701a      	strb	r2, [r3, #0]
    			SM_next_state 		=	SM_FunctionCode;
 80004da:	4b60      	ldr	r3, [pc, #384]	; (800065c <main+0x1f4>)
 80004dc:	2203      	movs	r2, #3
 80004de:	701a      	strb	r2, [r3, #0]
    		break;
 80004e0:	e0ac      	b.n	800063c <main+0x1d4>
    	}
    	case SM_SlaveAddress:
    	{
    		if(SlaveAddress != BROADCAST_ADDRESS || SlaveAddress != MySlaveAddress) {
 80004e2:	4b5b      	ldr	r3, [pc, #364]	; (8000650 <main+0x1e8>)
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d103      	bne.n	80004f2 <main+0x8a>
 80004ea:	4b59      	ldr	r3, [pc, #356]	; (8000650 <main+0x1e8>)
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	2b05      	cmp	r3, #5
 80004f0:	d003      	beq.n	80004fa <main+0x92>
    			SM_state 			= 	SM_Idle;
 80004f2:	4b55      	ldr	r3, [pc, #340]	; (8000648 <main+0x1e0>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	701a      	strb	r2, [r3, #0]

    		}
    		else {
    			SM_state 			=	SM_next_state;
    		}
        	  break;
 80004f8:	e09f      	b.n	800063a <main+0x1d2>
    		else if(SlaveAddress == BROADCAST_ADDRESS){
 80004fa:	4b55      	ldr	r3, [pc, #340]	; (8000650 <main+0x1e8>)
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d100      	bne.n	8000504 <main+0x9c>
 8000502:	e09a      	b.n	800063a <main+0x1d2>
    			SM_state 			=	SM_next_state;
 8000504:	4b55      	ldr	r3, [pc, #340]	; (800065c <main+0x1f4>)
 8000506:	781a      	ldrb	r2, [r3, #0]
 8000508:	4b4f      	ldr	r3, [pc, #316]	; (8000648 <main+0x1e0>)
 800050a:	701a      	strb	r2, [r3, #0]
        	  break;
 800050c:	e095      	b.n	800063a <main+0x1d2>
    	}
    	case SM_FunctionCode:
    	{
    		switch(FunctionCode)
 800050e:	4b54      	ldr	r3, [pc, #336]	; (8000660 <main+0x1f8>)
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	2b03      	cmp	r3, #3
 8000514:	d105      	bne.n	8000522 <main+0xba>
    		{
    			case ReadHoldingRegisters:
    			{
        			tx_buffer[1] 		= 	ReadHoldingRegisters;
 8000516:	4b4f      	ldr	r3, [pc, #316]	; (8000654 <main+0x1ec>)
 8000518:	2203      	movs	r2, #3
 800051a:	705a      	strb	r2, [r3, #1]
                    SM_state 			= 	SM_Length;
 800051c:	4b4a      	ldr	r3, [pc, #296]	; (8000648 <main+0x1e0>)
 800051e:	2205      	movs	r2, #5
 8000520:	701a      	strb	r2, [r3, #0]
    			}
    			default:
    			{
              		exceptionCode		= 	EC_IllegalFunction;
 8000522:	4b50      	ldr	r3, [pc, #320]	; (8000664 <main+0x1fc>)
 8000524:	2201      	movs	r2, #1
 8000526:	701a      	strb	r2, [r3, #0]
              		SM_state 			= 	SM_Exception;
 8000528:	4b47      	ldr	r3, [pc, #284]	; (8000648 <main+0x1e0>)
 800052a:	2209      	movs	r2, #9
 800052c:	701a      	strb	r2, [r3, #0]
    			}
    		}

    		break;
 800052e:	e085      	b.n	800063c <main+0x1d4>
    	}
    	case SM_Length:
    	{
    		InitialDataAddress 		= 	((rx_buffer[2]<<8)|rx_buffer[3]);
 8000530:	4b43      	ldr	r3, [pc, #268]	; (8000640 <main+0x1d8>)
 8000532:	789b      	ldrb	r3, [r3, #2]
 8000534:	021b      	lsls	r3, r3, #8
 8000536:	b21a      	sxth	r2, r3
 8000538:	4b41      	ldr	r3, [pc, #260]	; (8000640 <main+0x1d8>)
 800053a:	78db      	ldrb	r3, [r3, #3]
 800053c:	b21b      	sxth	r3, r3
 800053e:	4313      	orrs	r3, r2
 8000540:	b21b      	sxth	r3, r3
 8000542:	b29a      	uxth	r2, r3
 8000544:	4b48      	ldr	r3, [pc, #288]	; (8000668 <main+0x200>)
 8000546:	801a      	strh	r2, [r3, #0]
    		NumberOfData 			=	((rx_buffer[4]<<8)|rx_buffer[5]);
 8000548:	4b3d      	ldr	r3, [pc, #244]	; (8000640 <main+0x1d8>)
 800054a:	791b      	ldrb	r3, [r3, #4]
 800054c:	021b      	lsls	r3, r3, #8
 800054e:	b21a      	sxth	r2, r3
 8000550:	4b3b      	ldr	r3, [pc, #236]	; (8000640 <main+0x1d8>)
 8000552:	795b      	ldrb	r3, [r3, #5]
 8000554:	b21b      	sxth	r3, r3
 8000556:	4313      	orrs	r3, r2
 8000558:	b21b      	sxth	r3, r3
 800055a:	b29a      	uxth	r2, r3
 800055c:	4b43      	ldr	r3, [pc, #268]	; (800066c <main+0x204>)
 800055e:	801a      	strh	r2, [r3, #0]

    		if((InitialDataAddress + NumberOfData * 2) >= 65535){
 8000560:	4b41      	ldr	r3, [pc, #260]	; (8000668 <main+0x200>)
 8000562:	881b      	ldrh	r3, [r3, #0]
 8000564:	001a      	movs	r2, r3
 8000566:	4b41      	ldr	r3, [pc, #260]	; (800066c <main+0x204>)
 8000568:	881b      	ldrh	r3, [r3, #0]
 800056a:	005b      	lsls	r3, r3, #1
 800056c:	18d3      	adds	r3, r2, r3
 800056e:	4a40      	ldr	r2, [pc, #256]	; (8000670 <main+0x208>)
 8000570:	4293      	cmp	r3, r2
 8000572:	dd06      	ble.n	8000582 <main+0x11a>
                exceptionCode 	= 	EC_IllegalDataValue;
 8000574:	4b3b      	ldr	r3, [pc, #236]	; (8000664 <main+0x1fc>)
 8000576:	2203      	movs	r2, #3
 8000578:	701a      	strb	r2, [r3, #0]
                SM_state 		= 	SM_Exception;
 800057a:	4b33      	ldr	r3, [pc, #204]	; (8000648 <main+0x1e0>)
 800057c:	2209      	movs	r2, #9
 800057e:	701a      	strb	r2, [r3, #0]
    		}
    		else {
                SM_state = SM_ReadRegisterAdressing;
    		}

    		break;
 8000580:	e05c      	b.n	800063c <main+0x1d4>
                SM_state = SM_ReadRegisterAdressing;
 8000582:	4b31      	ldr	r3, [pc, #196]	; (8000648 <main+0x1e0>)
 8000584:	2204      	movs	r2, #4
 8000586:	701a      	strb	r2, [r3, #0]
    		break;
 8000588:	e058      	b.n	800063c <main+0x1d4>

      		break;
      	}
      	case SM_Data:
      	{
    		if((NumberOfData < 1) || (NumberOfData > 123)){
 800058a:	4b38      	ldr	r3, [pc, #224]	; (800066c <main+0x204>)
 800058c:	881b      	ldrh	r3, [r3, #0]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d003      	beq.n	800059a <main+0x132>
 8000592:	4b36      	ldr	r3, [pc, #216]	; (800066c <main+0x204>)
 8000594:	881b      	ldrh	r3, [r3, #0]
 8000596:	2b7b      	cmp	r3, #123	; 0x7b
 8000598:	d906      	bls.n	80005a8 <main+0x140>
    			exceptionCode 	= 	EC_IllegalDataValue;
 800059a:	4b32      	ldr	r3, [pc, #200]	; (8000664 <main+0x1fc>)
 800059c:	2203      	movs	r2, #3
 800059e:	701a      	strb	r2, [r3, #0]
    			SM_state 		= 	SM_Exception;
 80005a0:	4b29      	ldr	r3, [pc, #164]	; (8000648 <main+0x1e0>)
 80005a2:	2209      	movs	r2, #9
 80005a4:	701a      	strb	r2, [r3, #0]
    		}
    		else{
    			SM_state		= 	SM_Ready;
    		}
      		break;
 80005a6:	e049      	b.n	800063c <main+0x1d4>
    			SM_state		= 	SM_Ready;
 80005a8:	4b27      	ldr	r3, [pc, #156]	; (8000648 <main+0x1e0>)
 80005aa:	2207      	movs	r2, #7
 80005ac:	701a      	strb	r2, [r3, #0]
      		break;
 80005ae:	e045      	b.n	800063c <main+0x1d4>
      	}
      	case SM_Ready:
      	{
        	  HAL_Delay(4);
 80005b0:	2004      	movs	r0, #4
 80005b2:	f000 fb5d 	bl	8000c70 <HAL_Delay>
              sendData(tx_buffer);
 80005b6:	4b27      	ldr	r3, [pc, #156]	; (8000654 <main+0x1ec>)
 80005b8:	0018      	movs	r0, r3
 80005ba:	f7ff ff43 	bl	8000444 <sendData>
              SM_state 				= 	SM_next_state;
 80005be:	4b27      	ldr	r3, [pc, #156]	; (800065c <main+0x1f4>)
 80005c0:	781a      	ldrb	r2, [r3, #0]
 80005c2:	4b21      	ldr	r3, [pc, #132]	; (8000648 <main+0x1e0>)
 80005c4:	701a      	strb	r2, [r3, #0]
              break;
 80005c6:	e039      	b.n	800063c <main+0x1d4>
      	}


          case SM_Exception:
          {
          	HAL_Delay(4);
 80005c8:	2004      	movs	r0, #4
 80005ca:	f000 fb51 	bl	8000c70 <HAL_Delay>
          	tx_buffer[0]				=   SlaveAddress;
 80005ce:	4b20      	ldr	r3, [pc, #128]	; (8000650 <main+0x1e8>)
 80005d0:	781a      	ldrb	r2, [r3, #0]
 80005d2:	4b20      	ldr	r3, [pc, #128]	; (8000654 <main+0x1ec>)
 80005d4:	701a      	strb	r2, [r3, #0]
          	tx_buffer[1]				=	FunctionCode ;
 80005d6:	4b22      	ldr	r3, [pc, #136]	; (8000660 <main+0x1f8>)
 80005d8:	781a      	ldrb	r2, [r3, #0]
 80005da:	4b1e      	ldr	r3, [pc, #120]	; (8000654 <main+0x1ec>)
 80005dc:	705a      	strb	r2, [r3, #1]
          	tx_buffer[2]				=	exceptionCode;
 80005de:	4b21      	ldr	r3, [pc, #132]	; (8000664 <main+0x1fc>)
 80005e0:	781a      	ldrb	r2, [r3, #0]
 80005e2:	4b1c      	ldr	r3, [pc, #112]	; (8000654 <main+0x1ec>)
 80005e4:	709a      	strb	r2, [r3, #2]
          	crc							=	crc16(tx_buffer, 3);
 80005e6:	4b1b      	ldr	r3, [pc, #108]	; (8000654 <main+0x1ec>)
 80005e8:	2103      	movs	r1, #3
 80005ea:	0018      	movs	r0, r3
 80005ec:	f000 f932 	bl	8000854 <crc16>
 80005f0:	0003      	movs	r3, r0
 80005f2:	001a      	movs	r2, r3
 80005f4:	4b18      	ldr	r3, [pc, #96]	; (8000658 <main+0x1f0>)
 80005f6:	801a      	strh	r2, [r3, #0]
          	tx_buffer[3] 				= 	crc & 0xFF;
 80005f8:	4b17      	ldr	r3, [pc, #92]	; (8000658 <main+0x1f0>)
 80005fa:	881b      	ldrh	r3, [r3, #0]
 80005fc:	b2da      	uxtb	r2, r3
 80005fe:	4b15      	ldr	r3, [pc, #84]	; (8000654 <main+0x1ec>)
 8000600:	70da      	strb	r2, [r3, #3]
          	tx_buffer[4] 				= 	(crc >> 8)&0xFF;
 8000602:	4b15      	ldr	r3, [pc, #84]	; (8000658 <main+0x1f0>)
 8000604:	881b      	ldrh	r3, [r3, #0]
 8000606:	0a1b      	lsrs	r3, r3, #8
 8000608:	b29b      	uxth	r3, r3
 800060a:	b2da      	uxtb	r2, r3
 800060c:	4b11      	ldr	r3, [pc, #68]	; (8000654 <main+0x1ec>)
 800060e:	711a      	strb	r2, [r3, #4]
          	sendData(tx_buffer);
 8000610:	4b10      	ldr	r3, [pc, #64]	; (8000654 <main+0x1ec>)
 8000612:	0018      	movs	r0, r3
 8000614:	f7ff ff16 	bl	8000444 <sendData>
          	exceptionCode 			= 	EC_NotException;
 8000618:	4b12      	ldr	r3, [pc, #72]	; (8000664 <main+0x1fc>)
 800061a:	2200      	movs	r2, #0
 800061c:	701a      	strb	r2, [r3, #0]
          	SM_state 				= 	SM_Idle;
 800061e:	4b0a      	ldr	r3, [pc, #40]	; (8000648 <main+0x1e0>)
 8000620:	2200      	movs	r2, #0
 8000622:	701a      	strb	r2, [r3, #0]
          	break;
 8000624:	e00a      	b.n	800063c <main+0x1d4>
          }
          case SM_Error:
          {
          	SM_state 				= 	SM_Idle;
 8000626:	4b08      	ldr	r3, [pc, #32]	; (8000648 <main+0x1e0>)
 8000628:	2200      	movs	r2, #0
 800062a:	701a      	strb	r2, [r3, #0]
              break;
 800062c:	e006      	b.n	800063c <main+0x1d4>
          }
          default:
          {
              SM_state 				= 	SM_Error;
 800062e:	4b06      	ldr	r3, [pc, #24]	; (8000648 <main+0x1e0>)
 8000630:	220a      	movs	r2, #10
 8000632:	701a      	strb	r2, [r3, #0]
              break;
 8000634:	e002      	b.n	800063c <main+0x1d4>
      		break;
 8000636:	46c0      	nop			; (mov r8, r8)
 8000638:	e729      	b.n	800048e <main+0x26>
        	  break;
 800063a:	46c0      	nop			; (mov r8, r8)
  	switch (SM_state) {
 800063c:	e727      	b.n	800048e <main+0x26>
 800063e:	46c0      	nop			; (mov r8, r8)
 8000640:	20000178 	.word	0x20000178
 8000644:	2000002c 	.word	0x2000002c
 8000648:	2000037a 	.word	0x2000037a
 800064c:	08003348 	.word	0x08003348
 8000650:	2000037d 	.word	0x2000037d
 8000654:	20000278 	.word	0x20000278
 8000658:	20000000 	.word	0x20000000
 800065c:	2000037b 	.word	0x2000037b
 8000660:	2000037e 	.word	0x2000037e
 8000664:	2000037c 	.word	0x2000037c
 8000668:	20000380 	.word	0x20000380
 800066c:	20000382 	.word	0x20000382
 8000670:	0000fffe 	.word	0x0000fffe

08000674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000674:	b590      	push	{r4, r7, lr}
 8000676:	b093      	sub	sp, #76	; 0x4c
 8000678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067a:	2414      	movs	r4, #20
 800067c:	193b      	adds	r3, r7, r4
 800067e:	0018      	movs	r0, r3
 8000680:	2334      	movs	r3, #52	; 0x34
 8000682:	001a      	movs	r2, r3
 8000684:	2100      	movs	r1, #0
 8000686:	f002 fe27 	bl	80032d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068a:	1d3b      	adds	r3, r7, #4
 800068c:	0018      	movs	r0, r3
 800068e:	2310      	movs	r3, #16
 8000690:	001a      	movs	r2, r3
 8000692:	2100      	movs	r1, #0
 8000694:	f002 fe20 	bl	80032d8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000698:	2380      	movs	r3, #128	; 0x80
 800069a:	009b      	lsls	r3, r3, #2
 800069c:	0018      	movs	r0, r3
 800069e:	f000 ff9f 	bl	80015e0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006a2:	193b      	adds	r3, r7, r4
 80006a4:	2201      	movs	r2, #1
 80006a6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006a8:	193b      	adds	r3, r7, r4
 80006aa:	2280      	movs	r2, #128	; 0x80
 80006ac:	0252      	lsls	r2, r2, #9
 80006ae:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b0:	0021      	movs	r1, r4
 80006b2:	187b      	adds	r3, r7, r1
 80006b4:	2202      	movs	r2, #2
 80006b6:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006b8:	187b      	adds	r3, r7, r1
 80006ba:	2203      	movs	r2, #3
 80006bc:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80006be:	187b      	adds	r3, r7, r1
 80006c0:	2200      	movs	r2, #0
 80006c2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 16;
 80006c4:	187b      	adds	r3, r7, r1
 80006c6:	2210      	movs	r2, #16
 80006c8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ca:	187b      	adds	r3, r7, r1
 80006cc:	2280      	movs	r2, #128	; 0x80
 80006ce:	0292      	lsls	r2, r2, #10
 80006d0:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006d2:	187b      	adds	r3, r7, r1
 80006d4:	2280      	movs	r2, #128	; 0x80
 80006d6:	0592      	lsls	r2, r2, #22
 80006d8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006da:	187b      	adds	r3, r7, r1
 80006dc:	0018      	movs	r0, r3
 80006de:	f000 ffcb 	bl	8001678 <HAL_RCC_OscConfig>
 80006e2:	1e03      	subs	r3, r0, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0x76>
  {
    Error_Handler();
 80006e6:	f000 f8af 	bl	8000848 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ea:	1d3b      	adds	r3, r7, #4
 80006ec:	2207      	movs	r2, #7
 80006ee:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f0:	1d3b      	adds	r3, r7, #4
 80006f2:	2202      	movs	r2, #2
 80006f4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f6:	1d3b      	adds	r3, r7, #4
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006fc:	1d3b      	adds	r3, r7, #4
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	2102      	movs	r1, #2
 8000706:	0018      	movs	r0, r3
 8000708:	f001 fac6 	bl	8001c98 <HAL_RCC_ClockConfig>
 800070c:	1e03      	subs	r3, r0, #0
 800070e:	d001      	beq.n	8000714 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000710:	f000 f89a 	bl	8000848 <Error_Handler>
  }
}
 8000714:	46c0      	nop			; (mov r8, r8)
 8000716:	46bd      	mov	sp, r7
 8000718:	b013      	add	sp, #76	; 0x4c
 800071a:	bd90      	pop	{r4, r7, pc}

0800071c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000720:	4b23      	ldr	r3, [pc, #140]	; (80007b0 <MX_USART1_UART_Init+0x94>)
 8000722:	4a24      	ldr	r2, [pc, #144]	; (80007b4 <MX_USART1_UART_Init+0x98>)
 8000724:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000726:	4b22      	ldr	r3, [pc, #136]	; (80007b0 <MX_USART1_UART_Init+0x94>)
 8000728:	2296      	movs	r2, #150	; 0x96
 800072a:	0192      	lsls	r2, r2, #6
 800072c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800072e:	4b20      	ldr	r3, [pc, #128]	; (80007b0 <MX_USART1_UART_Init+0x94>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000734:	4b1e      	ldr	r3, [pc, #120]	; (80007b0 <MX_USART1_UART_Init+0x94>)
 8000736:	2200      	movs	r2, #0
 8000738:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800073a:	4b1d      	ldr	r3, [pc, #116]	; (80007b0 <MX_USART1_UART_Init+0x94>)
 800073c:	2200      	movs	r2, #0
 800073e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000740:	4b1b      	ldr	r3, [pc, #108]	; (80007b0 <MX_USART1_UART_Init+0x94>)
 8000742:	220c      	movs	r2, #12
 8000744:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000746:	4b1a      	ldr	r3, [pc, #104]	; (80007b0 <MX_USART1_UART_Init+0x94>)
 8000748:	2200      	movs	r2, #0
 800074a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800074c:	4b18      	ldr	r3, [pc, #96]	; (80007b0 <MX_USART1_UART_Init+0x94>)
 800074e:	2200      	movs	r2, #0
 8000750:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000752:	4b17      	ldr	r3, [pc, #92]	; (80007b0 <MX_USART1_UART_Init+0x94>)
 8000754:	2200      	movs	r2, #0
 8000756:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000758:	4b15      	ldr	r3, [pc, #84]	; (80007b0 <MX_USART1_UART_Init+0x94>)
 800075a:	2200      	movs	r2, #0
 800075c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800075e:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <MX_USART1_UART_Init+0x94>)
 8000760:	2200      	movs	r2, #0
 8000762:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000764:	4b12      	ldr	r3, [pc, #72]	; (80007b0 <MX_USART1_UART_Init+0x94>)
 8000766:	0018      	movs	r0, r3
 8000768:	f001 fd74 	bl	8002254 <HAL_UART_Init>
 800076c:	1e03      	subs	r3, r0, #0
 800076e:	d001      	beq.n	8000774 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000770:	f000 f86a 	bl	8000848 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000774:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <MX_USART1_UART_Init+0x94>)
 8000776:	2100      	movs	r1, #0
 8000778:	0018      	movs	r0, r3
 800077a:	f002 fc65 	bl	8003048 <HAL_UARTEx_SetTxFifoThreshold>
 800077e:	1e03      	subs	r3, r0, #0
 8000780:	d001      	beq.n	8000786 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000782:	f000 f861 	bl	8000848 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000786:	4b0a      	ldr	r3, [pc, #40]	; (80007b0 <MX_USART1_UART_Init+0x94>)
 8000788:	2100      	movs	r1, #0
 800078a:	0018      	movs	r0, r3
 800078c:	f002 fc9c 	bl	80030c8 <HAL_UARTEx_SetRxFifoThreshold>
 8000790:	1e03      	subs	r3, r0, #0
 8000792:	d001      	beq.n	8000798 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000794:	f000 f858 	bl	8000848 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000798:	4b05      	ldr	r3, [pc, #20]	; (80007b0 <MX_USART1_UART_Init+0x94>)
 800079a:	0018      	movs	r0, r3
 800079c:	f002 fc1a 	bl	8002fd4 <HAL_UARTEx_DisableFifoMode>
 80007a0:	1e03      	subs	r3, r0, #0
 80007a2:	d001      	beq.n	80007a8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80007a4:	f000 f850 	bl	8000848 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007a8:	46c0      	nop			; (mov r8, r8)
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	46c0      	nop			; (mov r8, r8)
 80007b0:	2000002c 	.word	0x2000002c
 80007b4:	40013800 	.word	0x40013800

080007b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007be:	4b10      	ldr	r3, [pc, #64]	; (8000800 <MX_DMA_Init+0x48>)
 80007c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80007c2:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <MX_DMA_Init+0x48>)
 80007c4:	2101      	movs	r1, #1
 80007c6:	430a      	orrs	r2, r1
 80007c8:	639a      	str	r2, [r3, #56]	; 0x38
 80007ca:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <MX_DMA_Init+0x48>)
 80007cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007ce:	2201      	movs	r2, #1
 80007d0:	4013      	ands	r3, r2
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2100      	movs	r1, #0
 80007da:	2009      	movs	r0, #9
 80007dc:	f000 fb18 	bl	8000e10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80007e0:	2009      	movs	r0, #9
 80007e2:	f000 fb2a 	bl	8000e3a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2100      	movs	r1, #0
 80007ea:	200a      	movs	r0, #10
 80007ec:	f000 fb10 	bl	8000e10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80007f0:	200a      	movs	r0, #10
 80007f2:	f000 fb22 	bl	8000e3a <HAL_NVIC_EnableIRQ>

}
 80007f6:	46c0      	nop			; (mov r8, r8)
 80007f8:	46bd      	mov	sp, r7
 80007fa:	b002      	add	sp, #8
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	46c0      	nop			; (mov r8, r8)
 8000800:	40021000 	.word	0x40021000

08000804 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800080a:	4b0e      	ldr	r3, [pc, #56]	; (8000844 <MX_GPIO_Init+0x40>)
 800080c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800080e:	4b0d      	ldr	r3, [pc, #52]	; (8000844 <MX_GPIO_Init+0x40>)
 8000810:	2120      	movs	r1, #32
 8000812:	430a      	orrs	r2, r1
 8000814:	635a      	str	r2, [r3, #52]	; 0x34
 8000816:	4b0b      	ldr	r3, [pc, #44]	; (8000844 <MX_GPIO_Init+0x40>)
 8000818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800081a:	2220      	movs	r2, #32
 800081c:	4013      	ands	r3, r2
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000822:	4b08      	ldr	r3, [pc, #32]	; (8000844 <MX_GPIO_Init+0x40>)
 8000824:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000826:	4b07      	ldr	r3, [pc, #28]	; (8000844 <MX_GPIO_Init+0x40>)
 8000828:	2101      	movs	r1, #1
 800082a:	430a      	orrs	r2, r1
 800082c:	635a      	str	r2, [r3, #52]	; 0x34
 800082e:	4b05      	ldr	r3, [pc, #20]	; (8000844 <MX_GPIO_Init+0x40>)
 8000830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000832:	2201      	movs	r2, #1
 8000834:	4013      	ands	r3, r2
 8000836:	603b      	str	r3, [r7, #0]
 8000838:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800083a:	46c0      	nop			; (mov r8, r8)
 800083c:	46bd      	mov	sp, r7
 800083e:	b002      	add	sp, #8
 8000840:	bd80      	pop	{r7, pc}
 8000842:	46c0      	nop			; (mov r8, r8)
 8000844:	40021000 	.word	0x40021000

08000848 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800084c:	b672      	cpsid	i
}
 800084e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000850:	e7fe      	b.n	8000850 <Error_Handler+0x8>
	...

08000854 <crc16>:
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
    0x43, 0x83, 0x41, 0x81, 0x80, 0x40
};

uint16_t crc16(uint8_t *buffer, uint16_t buffer_length)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	000a      	movs	r2, r1
 800085e:	1cbb      	adds	r3, r7, #2
 8000860:	801a      	strh	r2, [r3, #0]
    uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
 8000862:	230f      	movs	r3, #15
 8000864:	18fb      	adds	r3, r7, r3
 8000866:	22ff      	movs	r2, #255	; 0xff
 8000868:	701a      	strb	r2, [r3, #0]
    uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
 800086a:	230e      	movs	r3, #14
 800086c:	18fb      	adds	r3, r7, r3
 800086e:	22ff      	movs	r2, #255	; 0xff
 8000870:	701a      	strb	r2, [r3, #0]
    unsigned int i; /* will index into CRC lookup */

    /* pass through message buffer */
    while (buffer_length--) {
 8000872:	e019      	b.n	80008a8 <crc16+0x54>
        i = crc_lo ^ *buffer++; /* calculate the CRC  */
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	1c5a      	adds	r2, r3, #1
 8000878:	607a      	str	r2, [r7, #4]
 800087a:	781a      	ldrb	r2, [r3, #0]
 800087c:	200e      	movs	r0, #14
 800087e:	183b      	adds	r3, r7, r0
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	4053      	eors	r3, r2
 8000884:	b2db      	uxtb	r3, r3
 8000886:	60bb      	str	r3, [r7, #8]
        crc_lo = crc_hi ^ table_crc_hi[i];
 8000888:	4a13      	ldr	r2, [pc, #76]	; (80008d8 <crc16+0x84>)
 800088a:	68bb      	ldr	r3, [r7, #8]
 800088c:	18d3      	adds	r3, r2, r3
 800088e:	7819      	ldrb	r1, [r3, #0]
 8000890:	183b      	adds	r3, r7, r0
 8000892:	200f      	movs	r0, #15
 8000894:	183a      	adds	r2, r7, r0
 8000896:	7812      	ldrb	r2, [r2, #0]
 8000898:	404a      	eors	r2, r1
 800089a:	701a      	strb	r2, [r3, #0]
        crc_hi = table_crc_lo[i];
 800089c:	183b      	adds	r3, r7, r0
 800089e:	490f      	ldr	r1, [pc, #60]	; (80008dc <crc16+0x88>)
 80008a0:	68ba      	ldr	r2, [r7, #8]
 80008a2:	188a      	adds	r2, r1, r2
 80008a4:	7812      	ldrb	r2, [r2, #0]
 80008a6:	701a      	strb	r2, [r3, #0]
    while (buffer_length--) {
 80008a8:	1cbb      	adds	r3, r7, #2
 80008aa:	881b      	ldrh	r3, [r3, #0]
 80008ac:	1cba      	adds	r2, r7, #2
 80008ae:	1e59      	subs	r1, r3, #1
 80008b0:	8011      	strh	r1, [r2, #0]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d1de      	bne.n	8000874 <crc16+0x20>
    }

    return (crc_hi << 8 | crc_lo);
 80008b6:	230f      	movs	r3, #15
 80008b8:	18fb      	adds	r3, r7, r3
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	021b      	lsls	r3, r3, #8
 80008be:	b21a      	sxth	r2, r3
 80008c0:	230e      	movs	r3, #14
 80008c2:	18fb      	adds	r3, r7, r3
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	b21b      	sxth	r3, r3
 80008c8:	4313      	orrs	r3, r2
 80008ca:	b21b      	sxth	r3, r3
 80008cc:	b29b      	uxth	r3, r3
}
 80008ce:	0018      	movs	r0, r3
 80008d0:	46bd      	mov	sp, r7
 80008d2:	b004      	add	sp, #16
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	46c0      	nop			; (mov r8, r8)
 80008d8:	08003374 	.word	0x08003374
 80008dc:	08003474 	.word	0x08003474

080008e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e6:	4b0f      	ldr	r3, [pc, #60]	; (8000924 <HAL_MspInit+0x44>)
 80008e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008ea:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <HAL_MspInit+0x44>)
 80008ec:	2101      	movs	r1, #1
 80008ee:	430a      	orrs	r2, r1
 80008f0:	641a      	str	r2, [r3, #64]	; 0x40
 80008f2:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <HAL_MspInit+0x44>)
 80008f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f6:	2201      	movs	r2, #1
 80008f8:	4013      	ands	r3, r2
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fe:	4b09      	ldr	r3, [pc, #36]	; (8000924 <HAL_MspInit+0x44>)
 8000900:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000902:	4b08      	ldr	r3, [pc, #32]	; (8000924 <HAL_MspInit+0x44>)
 8000904:	2180      	movs	r1, #128	; 0x80
 8000906:	0549      	lsls	r1, r1, #21
 8000908:	430a      	orrs	r2, r1
 800090a:	63da      	str	r2, [r3, #60]	; 0x3c
 800090c:	4b05      	ldr	r3, [pc, #20]	; (8000924 <HAL_MspInit+0x44>)
 800090e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000910:	2380      	movs	r3, #128	; 0x80
 8000912:	055b      	lsls	r3, r3, #21
 8000914:	4013      	ands	r3, r2
 8000916:	603b      	str	r3, [r7, #0]
 8000918:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800091a:	46c0      	nop			; (mov r8, r8)
 800091c:	46bd      	mov	sp, r7
 800091e:	b002      	add	sp, #8
 8000920:	bd80      	pop	{r7, pc}
 8000922:	46c0      	nop			; (mov r8, r8)
 8000924:	40021000 	.word	0x40021000

08000928 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000928:	b590      	push	{r4, r7, lr}
 800092a:	b091      	sub	sp, #68	; 0x44
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000930:	232c      	movs	r3, #44	; 0x2c
 8000932:	18fb      	adds	r3, r7, r3
 8000934:	0018      	movs	r0, r3
 8000936:	2314      	movs	r3, #20
 8000938:	001a      	movs	r2, r3
 800093a:	2100      	movs	r1, #0
 800093c:	f002 fccc 	bl	80032d8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000940:	2410      	movs	r4, #16
 8000942:	193b      	adds	r3, r7, r4
 8000944:	0018      	movs	r0, r3
 8000946:	231c      	movs	r3, #28
 8000948:	001a      	movs	r2, r3
 800094a:	2100      	movs	r1, #0
 800094c:	f002 fcc4 	bl	80032d8 <memset>
  if(huart->Instance==USART1)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a4d      	ldr	r2, [pc, #308]	; (8000a8c <HAL_UART_MspInit+0x164>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d000      	beq.n	800095c <HAL_UART_MspInit+0x34>
 800095a:	e092      	b.n	8000a82 <HAL_UART_MspInit+0x15a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800095c:	193b      	adds	r3, r7, r4
 800095e:	2201      	movs	r2, #1
 8000960:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000962:	193b      	adds	r3, r7, r4
 8000964:	2200      	movs	r2, #0
 8000966:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000968:	193b      	adds	r3, r7, r4
 800096a:	0018      	movs	r0, r3
 800096c:	f001 fb3e 	bl	8001fec <HAL_RCCEx_PeriphCLKConfig>
 8000970:	1e03      	subs	r3, r0, #0
 8000972:	d001      	beq.n	8000978 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8000974:	f7ff ff68 	bl	8000848 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000978:	4b45      	ldr	r3, [pc, #276]	; (8000a90 <HAL_UART_MspInit+0x168>)
 800097a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800097c:	4b44      	ldr	r3, [pc, #272]	; (8000a90 <HAL_UART_MspInit+0x168>)
 800097e:	2180      	movs	r1, #128	; 0x80
 8000980:	01c9      	lsls	r1, r1, #7
 8000982:	430a      	orrs	r2, r1
 8000984:	641a      	str	r2, [r3, #64]	; 0x40
 8000986:	4b42      	ldr	r3, [pc, #264]	; (8000a90 <HAL_UART_MspInit+0x168>)
 8000988:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800098a:	2380      	movs	r3, #128	; 0x80
 800098c:	01db      	lsls	r3, r3, #7
 800098e:	4013      	ands	r3, r2
 8000990:	60fb      	str	r3, [r7, #12]
 8000992:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000994:	4b3e      	ldr	r3, [pc, #248]	; (8000a90 <HAL_UART_MspInit+0x168>)
 8000996:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000998:	4b3d      	ldr	r3, [pc, #244]	; (8000a90 <HAL_UART_MspInit+0x168>)
 800099a:	2101      	movs	r1, #1
 800099c:	430a      	orrs	r2, r1
 800099e:	635a      	str	r2, [r3, #52]	; 0x34
 80009a0:	4b3b      	ldr	r3, [pc, #236]	; (8000a90 <HAL_UART_MspInit+0x168>)
 80009a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009a4:	2201      	movs	r2, #1
 80009a6:	4013      	ands	r3, r2
 80009a8:	60bb      	str	r3, [r7, #8]
 80009aa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80009ac:	212c      	movs	r1, #44	; 0x2c
 80009ae:	187b      	adds	r3, r7, r1
 80009b0:	22c0      	movs	r2, #192	; 0xc0
 80009b2:	00d2      	lsls	r2, r2, #3
 80009b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b6:	187b      	adds	r3, r7, r1
 80009b8:	2202      	movs	r2, #2
 80009ba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	187b      	adds	r3, r7, r1
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c2:	187b      	adds	r3, r7, r1
 80009c4:	2200      	movs	r2, #0
 80009c6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80009c8:	187b      	adds	r3, r7, r1
 80009ca:	2201      	movs	r2, #1
 80009cc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ce:	187a      	adds	r2, r7, r1
 80009d0:	23a0      	movs	r3, #160	; 0xa0
 80009d2:	05db      	lsls	r3, r3, #23
 80009d4:	0011      	movs	r1, r2
 80009d6:	0018      	movs	r0, r3
 80009d8:	f000 fc9e 	bl	8001318 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 80009dc:	4b2d      	ldr	r3, [pc, #180]	; (8000a94 <HAL_UART_MspInit+0x16c>)
 80009de:	4a2e      	ldr	r2, [pc, #184]	; (8000a98 <HAL_UART_MspInit+0x170>)
 80009e0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80009e2:	4b2c      	ldr	r3, [pc, #176]	; (8000a94 <HAL_UART_MspInit+0x16c>)
 80009e4:	2232      	movs	r2, #50	; 0x32
 80009e6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009e8:	4b2a      	ldr	r3, [pc, #168]	; (8000a94 <HAL_UART_MspInit+0x16c>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009ee:	4b29      	ldr	r3, [pc, #164]	; (8000a94 <HAL_UART_MspInit+0x16c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80009f4:	4b27      	ldr	r3, [pc, #156]	; (8000a94 <HAL_UART_MspInit+0x16c>)
 80009f6:	2280      	movs	r2, #128	; 0x80
 80009f8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009fa:	4b26      	ldr	r3, [pc, #152]	; (8000a94 <HAL_UART_MspInit+0x16c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a00:	4b24      	ldr	r3, [pc, #144]	; (8000a94 <HAL_UART_MspInit+0x16c>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000a06:	4b23      	ldr	r3, [pc, #140]	; (8000a94 <HAL_UART_MspInit+0x16c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a0c:	4b21      	ldr	r3, [pc, #132]	; (8000a94 <HAL_UART_MspInit+0x16c>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000a12:	4b20      	ldr	r3, [pc, #128]	; (8000a94 <HAL_UART_MspInit+0x16c>)
 8000a14:	0018      	movs	r0, r3
 8000a16:	f000 fa2d 	bl	8000e74 <HAL_DMA_Init>
 8000a1a:	1e03      	subs	r3, r0, #0
 8000a1c:	d001      	beq.n	8000a22 <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 8000a1e:	f7ff ff13 	bl	8000848 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	2180      	movs	r1, #128	; 0x80
 8000a26:	4a1b      	ldr	r2, [pc, #108]	; (8000a94 <HAL_UART_MspInit+0x16c>)
 8000a28:	505a      	str	r2, [r3, r1]
 8000a2a:	4b1a      	ldr	r3, [pc, #104]	; (8000a94 <HAL_UART_MspInit+0x16c>)
 8000a2c:	687a      	ldr	r2, [r7, #4]
 8000a2e:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8000a30:	4b1a      	ldr	r3, [pc, #104]	; (8000a9c <HAL_UART_MspInit+0x174>)
 8000a32:	4a1b      	ldr	r2, [pc, #108]	; (8000aa0 <HAL_UART_MspInit+0x178>)
 8000a34:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8000a36:	4b19      	ldr	r3, [pc, #100]	; (8000a9c <HAL_UART_MspInit+0x174>)
 8000a38:	2233      	movs	r2, #51	; 0x33
 8000a3a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a3c:	4b17      	ldr	r3, [pc, #92]	; (8000a9c <HAL_UART_MspInit+0x174>)
 8000a3e:	2210      	movs	r2, #16
 8000a40:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a42:	4b16      	ldr	r3, [pc, #88]	; (8000a9c <HAL_UART_MspInit+0x174>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a48:	4b14      	ldr	r3, [pc, #80]	; (8000a9c <HAL_UART_MspInit+0x174>)
 8000a4a:	2280      	movs	r2, #128	; 0x80
 8000a4c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a4e:	4b13      	ldr	r3, [pc, #76]	; (8000a9c <HAL_UART_MspInit+0x174>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a54:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <HAL_UART_MspInit+0x174>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000a5a:	4b10      	ldr	r3, [pc, #64]	; (8000a9c <HAL_UART_MspInit+0x174>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a60:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <HAL_UART_MspInit+0x174>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000a66:	4b0d      	ldr	r3, [pc, #52]	; (8000a9c <HAL_UART_MspInit+0x174>)
 8000a68:	0018      	movs	r0, r3
 8000a6a:	f000 fa03 	bl	8000e74 <HAL_DMA_Init>
 8000a6e:	1e03      	subs	r3, r0, #0
 8000a70:	d001      	beq.n	8000a76 <HAL_UART_MspInit+0x14e>
    {
      Error_Handler();
 8000a72:	f7ff fee9 	bl	8000848 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	4a08      	ldr	r2, [pc, #32]	; (8000a9c <HAL_UART_MspInit+0x174>)
 8000a7a:	67da      	str	r2, [r3, #124]	; 0x7c
 8000a7c:	4b07      	ldr	r3, [pc, #28]	; (8000a9c <HAL_UART_MspInit+0x174>)
 8000a7e:	687a      	ldr	r2, [r7, #4]
 8000a80:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a82:	46c0      	nop			; (mov r8, r8)
 8000a84:	46bd      	mov	sp, r7
 8000a86:	b011      	add	sp, #68	; 0x44
 8000a88:	bd90      	pop	{r4, r7, pc}
 8000a8a:	46c0      	nop			; (mov r8, r8)
 8000a8c:	40013800 	.word	0x40013800
 8000a90:	40021000 	.word	0x40021000
 8000a94:	200000c0 	.word	0x200000c0
 8000a98:	40020008 	.word	0x40020008
 8000a9c:	2000011c 	.word	0x2000011c
 8000aa0:	4002001c 	.word	0x4002001c

08000aa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <NMI_Handler+0x4>

08000aaa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aae:	e7fe      	b.n	8000aae <HardFault_Handler+0x4>

08000ab0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ab4:	46c0      	nop			; (mov r8, r8)
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aba:	b580      	push	{r7, lr}
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ac8:	f000 f8b6 	bl	8000c38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000acc:	46c0      	nop			; (mov r8, r8)
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
	...

08000ad4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000ad8:	4b03      	ldr	r3, [pc, #12]	; (8000ae8 <DMA1_Channel1_IRQHandler+0x14>)
 8000ada:	0018      	movs	r0, r3
 8000adc:	f000 fada 	bl	8001094 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000ae0:	46c0      	nop			; (mov r8, r8)
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	46c0      	nop			; (mov r8, r8)
 8000ae8:	200000c0 	.word	0x200000c0

08000aec <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000af0:	4b03      	ldr	r3, [pc, #12]	; (8000b00 <DMA1_Channel2_3_IRQHandler+0x14>)
 8000af2:	0018      	movs	r0, r3
 8000af4:	f000 face 	bl	8001094 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000af8:	46c0      	nop			; (mov r8, r8)
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	46c0      	nop			; (mov r8, r8)
 8000b00:	2000011c 	.word	0x2000011c

08000b04 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b08:	46c0      	nop			; (mov r8, r8)
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
	...

08000b10 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b10:	480d      	ldr	r0, [pc, #52]	; (8000b48 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b12:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b14:	f7ff fff6 	bl	8000b04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b18:	480c      	ldr	r0, [pc, #48]	; (8000b4c <LoopForever+0x6>)
  ldr r1, =_edata
 8000b1a:	490d      	ldr	r1, [pc, #52]	; (8000b50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b1c:	4a0d      	ldr	r2, [pc, #52]	; (8000b54 <LoopForever+0xe>)
  movs r3, #0
 8000b1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b20:	e002      	b.n	8000b28 <LoopCopyDataInit>

08000b22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b26:	3304      	adds	r3, #4

08000b28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b2c:	d3f9      	bcc.n	8000b22 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b2e:	4a0a      	ldr	r2, [pc, #40]	; (8000b58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b30:	4c0a      	ldr	r4, [pc, #40]	; (8000b5c <LoopForever+0x16>)
  movs r3, #0
 8000b32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b34:	e001      	b.n	8000b3a <LoopFillZerobss>

08000b36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b38:	3204      	adds	r2, #4

08000b3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b3c:	d3fb      	bcc.n	8000b36 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b3e:	f002 fbd3 	bl	80032e8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000b42:	f7ff fc91 	bl	8000468 <main>

08000b46 <LoopForever>:

LoopForever:
  b LoopForever
 8000b46:	e7fe      	b.n	8000b46 <LoopForever>
  ldr   r0, =_estack
 8000b48:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000b4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b50:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000b54:	08003604 	.word	0x08003604
  ldr r2, =_sbss
 8000b58:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000b5c:	20000388 	.word	0x20000388

08000b60 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b60:	e7fe      	b.n	8000b60 <ADC1_IRQHandler>
	...

08000b64 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b6a:	1dfb      	adds	r3, r7, #7
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b70:	4b0b      	ldr	r3, [pc, #44]	; (8000ba0 <HAL_Init+0x3c>)
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	4b0a      	ldr	r3, [pc, #40]	; (8000ba0 <HAL_Init+0x3c>)
 8000b76:	2180      	movs	r1, #128	; 0x80
 8000b78:	0049      	lsls	r1, r1, #1
 8000b7a:	430a      	orrs	r2, r1
 8000b7c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b7e:	2003      	movs	r0, #3
 8000b80:	f000 f810 	bl	8000ba4 <HAL_InitTick>
 8000b84:	1e03      	subs	r3, r0, #0
 8000b86:	d003      	beq.n	8000b90 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000b88:	1dfb      	adds	r3, r7, #7
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	701a      	strb	r2, [r3, #0]
 8000b8e:	e001      	b.n	8000b94 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000b90:	f7ff fea6 	bl	80008e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b94:	1dfb      	adds	r3, r7, #7
 8000b96:	781b      	ldrb	r3, [r3, #0]
}
 8000b98:	0018      	movs	r0, r3
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	b002      	add	sp, #8
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	40022000 	.word	0x40022000

08000ba4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ba4:	b590      	push	{r4, r7, lr}
 8000ba6:	b085      	sub	sp, #20
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bac:	230f      	movs	r3, #15
 8000bae:	18fb      	adds	r3, r7, r3
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000bb4:	4b1d      	ldr	r3, [pc, #116]	; (8000c2c <HAL_InitTick+0x88>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d02b      	beq.n	8000c14 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000bbc:	4b1c      	ldr	r3, [pc, #112]	; (8000c30 <HAL_InitTick+0x8c>)
 8000bbe:	681c      	ldr	r4, [r3, #0]
 8000bc0:	4b1a      	ldr	r3, [pc, #104]	; (8000c2c <HAL_InitTick+0x88>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	0019      	movs	r1, r3
 8000bc6:	23fa      	movs	r3, #250	; 0xfa
 8000bc8:	0098      	lsls	r0, r3, #2
 8000bca:	f7ff fa99 	bl	8000100 <__udivsi3>
 8000bce:	0003      	movs	r3, r0
 8000bd0:	0019      	movs	r1, r3
 8000bd2:	0020      	movs	r0, r4
 8000bd4:	f7ff fa94 	bl	8000100 <__udivsi3>
 8000bd8:	0003      	movs	r3, r0
 8000bda:	0018      	movs	r0, r3
 8000bdc:	f000 f93d 	bl	8000e5a <HAL_SYSTICK_Config>
 8000be0:	1e03      	subs	r3, r0, #0
 8000be2:	d112      	bne.n	8000c0a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2b03      	cmp	r3, #3
 8000be8:	d80a      	bhi.n	8000c00 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bea:	6879      	ldr	r1, [r7, #4]
 8000bec:	2301      	movs	r3, #1
 8000bee:	425b      	negs	r3, r3
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	f000 f90c 	bl	8000e10 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bf8:	4b0e      	ldr	r3, [pc, #56]	; (8000c34 <HAL_InitTick+0x90>)
 8000bfa:	687a      	ldr	r2, [r7, #4]
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	e00d      	b.n	8000c1c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000c00:	230f      	movs	r3, #15
 8000c02:	18fb      	adds	r3, r7, r3
 8000c04:	2201      	movs	r2, #1
 8000c06:	701a      	strb	r2, [r3, #0]
 8000c08:	e008      	b.n	8000c1c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c0a:	230f      	movs	r3, #15
 8000c0c:	18fb      	adds	r3, r7, r3
 8000c0e:	2201      	movs	r2, #1
 8000c10:	701a      	strb	r2, [r3, #0]
 8000c12:	e003      	b.n	8000c1c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c14:	230f      	movs	r3, #15
 8000c16:	18fb      	adds	r3, r7, r3
 8000c18:	2201      	movs	r2, #1
 8000c1a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000c1c:	230f      	movs	r3, #15
 8000c1e:	18fb      	adds	r3, r7, r3
 8000c20:	781b      	ldrb	r3, [r3, #0]
}
 8000c22:	0018      	movs	r0, r3
 8000c24:	46bd      	mov	sp, r7
 8000c26:	b005      	add	sp, #20
 8000c28:	bd90      	pop	{r4, r7, pc}
 8000c2a:	46c0      	nop			; (mov r8, r8)
 8000c2c:	2000000c 	.word	0x2000000c
 8000c30:	20000004 	.word	0x20000004
 8000c34:	20000008 	.word	0x20000008

08000c38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c3c:	4b05      	ldr	r3, [pc, #20]	; (8000c54 <HAL_IncTick+0x1c>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	001a      	movs	r2, r3
 8000c42:	4b05      	ldr	r3, [pc, #20]	; (8000c58 <HAL_IncTick+0x20>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	18d2      	adds	r2, r2, r3
 8000c48:	4b03      	ldr	r3, [pc, #12]	; (8000c58 <HAL_IncTick+0x20>)
 8000c4a:	601a      	str	r2, [r3, #0]
}
 8000c4c:	46c0      	nop			; (mov r8, r8)
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	46c0      	nop			; (mov r8, r8)
 8000c54:	2000000c 	.word	0x2000000c
 8000c58:	20000384 	.word	0x20000384

08000c5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c60:	4b02      	ldr	r3, [pc, #8]	; (8000c6c <HAL_GetTick+0x10>)
 8000c62:	681b      	ldr	r3, [r3, #0]
}
 8000c64:	0018      	movs	r0, r3
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	46c0      	nop			; (mov r8, r8)
 8000c6c:	20000384 	.word	0x20000384

08000c70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c78:	f7ff fff0 	bl	8000c5c <HAL_GetTick>
 8000c7c:	0003      	movs	r3, r0
 8000c7e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	3301      	adds	r3, #1
 8000c88:	d005      	beq.n	8000c96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c8a:	4b0a      	ldr	r3, [pc, #40]	; (8000cb4 <HAL_Delay+0x44>)
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	001a      	movs	r2, r3
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	189b      	adds	r3, r3, r2
 8000c94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c96:	46c0      	nop			; (mov r8, r8)
 8000c98:	f7ff ffe0 	bl	8000c5c <HAL_GetTick>
 8000c9c:	0002      	movs	r2, r0
 8000c9e:	68bb      	ldr	r3, [r7, #8]
 8000ca0:	1ad3      	subs	r3, r2, r3
 8000ca2:	68fa      	ldr	r2, [r7, #12]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d8f7      	bhi.n	8000c98 <HAL_Delay+0x28>
  {
  }
}
 8000ca8:	46c0      	nop			; (mov r8, r8)
 8000caa:	46c0      	nop			; (mov r8, r8)
 8000cac:	46bd      	mov	sp, r7
 8000cae:	b004      	add	sp, #16
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	46c0      	nop			; (mov r8, r8)
 8000cb4:	2000000c 	.word	0x2000000c

08000cb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	0002      	movs	r2, r0
 8000cc0:	1dfb      	adds	r3, r7, #7
 8000cc2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000cc4:	1dfb      	adds	r3, r7, #7
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	2b7f      	cmp	r3, #127	; 0x7f
 8000cca:	d809      	bhi.n	8000ce0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ccc:	1dfb      	adds	r3, r7, #7
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	001a      	movs	r2, r3
 8000cd2:	231f      	movs	r3, #31
 8000cd4:	401a      	ands	r2, r3
 8000cd6:	4b04      	ldr	r3, [pc, #16]	; (8000ce8 <__NVIC_EnableIRQ+0x30>)
 8000cd8:	2101      	movs	r1, #1
 8000cda:	4091      	lsls	r1, r2
 8000cdc:	000a      	movs	r2, r1
 8000cde:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000ce0:	46c0      	nop			; (mov r8, r8)
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	b002      	add	sp, #8
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	e000e100 	.word	0xe000e100

08000cec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cec:	b590      	push	{r4, r7, lr}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	0002      	movs	r2, r0
 8000cf4:	6039      	str	r1, [r7, #0]
 8000cf6:	1dfb      	adds	r3, r7, #7
 8000cf8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000cfa:	1dfb      	adds	r3, r7, #7
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	2b7f      	cmp	r3, #127	; 0x7f
 8000d00:	d828      	bhi.n	8000d54 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d02:	4a2f      	ldr	r2, [pc, #188]	; (8000dc0 <__NVIC_SetPriority+0xd4>)
 8000d04:	1dfb      	adds	r3, r7, #7
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	b25b      	sxtb	r3, r3
 8000d0a:	089b      	lsrs	r3, r3, #2
 8000d0c:	33c0      	adds	r3, #192	; 0xc0
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	589b      	ldr	r3, [r3, r2]
 8000d12:	1dfa      	adds	r2, r7, #7
 8000d14:	7812      	ldrb	r2, [r2, #0]
 8000d16:	0011      	movs	r1, r2
 8000d18:	2203      	movs	r2, #3
 8000d1a:	400a      	ands	r2, r1
 8000d1c:	00d2      	lsls	r2, r2, #3
 8000d1e:	21ff      	movs	r1, #255	; 0xff
 8000d20:	4091      	lsls	r1, r2
 8000d22:	000a      	movs	r2, r1
 8000d24:	43d2      	mvns	r2, r2
 8000d26:	401a      	ands	r2, r3
 8000d28:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	019b      	lsls	r3, r3, #6
 8000d2e:	22ff      	movs	r2, #255	; 0xff
 8000d30:	401a      	ands	r2, r3
 8000d32:	1dfb      	adds	r3, r7, #7
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	0018      	movs	r0, r3
 8000d38:	2303      	movs	r3, #3
 8000d3a:	4003      	ands	r3, r0
 8000d3c:	00db      	lsls	r3, r3, #3
 8000d3e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d40:	481f      	ldr	r0, [pc, #124]	; (8000dc0 <__NVIC_SetPriority+0xd4>)
 8000d42:	1dfb      	adds	r3, r7, #7
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	b25b      	sxtb	r3, r3
 8000d48:	089b      	lsrs	r3, r3, #2
 8000d4a:	430a      	orrs	r2, r1
 8000d4c:	33c0      	adds	r3, #192	; 0xc0
 8000d4e:	009b      	lsls	r3, r3, #2
 8000d50:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d52:	e031      	b.n	8000db8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d54:	4a1b      	ldr	r2, [pc, #108]	; (8000dc4 <__NVIC_SetPriority+0xd8>)
 8000d56:	1dfb      	adds	r3, r7, #7
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	0019      	movs	r1, r3
 8000d5c:	230f      	movs	r3, #15
 8000d5e:	400b      	ands	r3, r1
 8000d60:	3b08      	subs	r3, #8
 8000d62:	089b      	lsrs	r3, r3, #2
 8000d64:	3306      	adds	r3, #6
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	18d3      	adds	r3, r2, r3
 8000d6a:	3304      	adds	r3, #4
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	1dfa      	adds	r2, r7, #7
 8000d70:	7812      	ldrb	r2, [r2, #0]
 8000d72:	0011      	movs	r1, r2
 8000d74:	2203      	movs	r2, #3
 8000d76:	400a      	ands	r2, r1
 8000d78:	00d2      	lsls	r2, r2, #3
 8000d7a:	21ff      	movs	r1, #255	; 0xff
 8000d7c:	4091      	lsls	r1, r2
 8000d7e:	000a      	movs	r2, r1
 8000d80:	43d2      	mvns	r2, r2
 8000d82:	401a      	ands	r2, r3
 8000d84:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	019b      	lsls	r3, r3, #6
 8000d8a:	22ff      	movs	r2, #255	; 0xff
 8000d8c:	401a      	ands	r2, r3
 8000d8e:	1dfb      	adds	r3, r7, #7
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	0018      	movs	r0, r3
 8000d94:	2303      	movs	r3, #3
 8000d96:	4003      	ands	r3, r0
 8000d98:	00db      	lsls	r3, r3, #3
 8000d9a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d9c:	4809      	ldr	r0, [pc, #36]	; (8000dc4 <__NVIC_SetPriority+0xd8>)
 8000d9e:	1dfb      	adds	r3, r7, #7
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	001c      	movs	r4, r3
 8000da4:	230f      	movs	r3, #15
 8000da6:	4023      	ands	r3, r4
 8000da8:	3b08      	subs	r3, #8
 8000daa:	089b      	lsrs	r3, r3, #2
 8000dac:	430a      	orrs	r2, r1
 8000dae:	3306      	adds	r3, #6
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	18c3      	adds	r3, r0, r3
 8000db4:	3304      	adds	r3, #4
 8000db6:	601a      	str	r2, [r3, #0]
}
 8000db8:	46c0      	nop			; (mov r8, r8)
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	b003      	add	sp, #12
 8000dbe:	bd90      	pop	{r4, r7, pc}
 8000dc0:	e000e100 	.word	0xe000e100
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	1e5a      	subs	r2, r3, #1
 8000dd4:	2380      	movs	r3, #128	; 0x80
 8000dd6:	045b      	lsls	r3, r3, #17
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d301      	bcc.n	8000de0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ddc:	2301      	movs	r3, #1
 8000dde:	e010      	b.n	8000e02 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000de0:	4b0a      	ldr	r3, [pc, #40]	; (8000e0c <SysTick_Config+0x44>)
 8000de2:	687a      	ldr	r2, [r7, #4]
 8000de4:	3a01      	subs	r2, #1
 8000de6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000de8:	2301      	movs	r3, #1
 8000dea:	425b      	negs	r3, r3
 8000dec:	2103      	movs	r1, #3
 8000dee:	0018      	movs	r0, r3
 8000df0:	f7ff ff7c 	bl	8000cec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000df4:	4b05      	ldr	r3, [pc, #20]	; (8000e0c <SysTick_Config+0x44>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dfa:	4b04      	ldr	r3, [pc, #16]	; (8000e0c <SysTick_Config+0x44>)
 8000dfc:	2207      	movs	r2, #7
 8000dfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e00:	2300      	movs	r3, #0
}
 8000e02:	0018      	movs	r0, r3
 8000e04:	46bd      	mov	sp, r7
 8000e06:	b002      	add	sp, #8
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	46c0      	nop			; (mov r8, r8)
 8000e0c:	e000e010 	.word	0xe000e010

08000e10 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60b9      	str	r1, [r7, #8]
 8000e18:	607a      	str	r2, [r7, #4]
 8000e1a:	210f      	movs	r1, #15
 8000e1c:	187b      	adds	r3, r7, r1
 8000e1e:	1c02      	adds	r2, r0, #0
 8000e20:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000e22:	68ba      	ldr	r2, [r7, #8]
 8000e24:	187b      	adds	r3, r7, r1
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	b25b      	sxtb	r3, r3
 8000e2a:	0011      	movs	r1, r2
 8000e2c:	0018      	movs	r0, r3
 8000e2e:	f7ff ff5d 	bl	8000cec <__NVIC_SetPriority>
}
 8000e32:	46c0      	nop			; (mov r8, r8)
 8000e34:	46bd      	mov	sp, r7
 8000e36:	b004      	add	sp, #16
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b082      	sub	sp, #8
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	0002      	movs	r2, r0
 8000e42:	1dfb      	adds	r3, r7, #7
 8000e44:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e46:	1dfb      	adds	r3, r7, #7
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	b25b      	sxtb	r3, r3
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	f7ff ff33 	bl	8000cb8 <__NVIC_EnableIRQ>
}
 8000e52:	46c0      	nop			; (mov r8, r8)
 8000e54:	46bd      	mov	sp, r7
 8000e56:	b002      	add	sp, #8
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b082      	sub	sp, #8
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	0018      	movs	r0, r3
 8000e66:	f7ff ffaf 	bl	8000dc8 <SysTick_Config>
 8000e6a:	0003      	movs	r3, r0
}
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	b002      	add	sp, #8
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d101      	bne.n	8000e86 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
 8000e84:	e077      	b.n	8000f76 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a3d      	ldr	r2, [pc, #244]	; (8000f80 <HAL_DMA_Init+0x10c>)
 8000e8c:	4694      	mov	ip, r2
 8000e8e:	4463      	add	r3, ip
 8000e90:	2114      	movs	r1, #20
 8000e92:	0018      	movs	r0, r3
 8000e94:	f7ff f934 	bl	8000100 <__udivsi3>
 8000e98:	0003      	movs	r3, r0
 8000e9a:	009a      	lsls	r2, r3, #2
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2225      	movs	r2, #37	; 0x25
 8000ea4:	2102      	movs	r1, #2
 8000ea6:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4934      	ldr	r1, [pc, #208]	; (8000f84 <HAL_DMA_Init+0x110>)
 8000eb4:	400a      	ands	r2, r1
 8000eb6:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	6819      	ldr	r1, [r3, #0]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	689a      	ldr	r2, [r3, #8]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	68db      	ldr	r3, [r3, #12]
 8000ec6:	431a      	orrs	r2, r3
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	691b      	ldr	r3, [r3, #16]
 8000ecc:	431a      	orrs	r2, r3
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	695b      	ldr	r3, [r3, #20]
 8000ed2:	431a      	orrs	r2, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	699b      	ldr	r3, [r3, #24]
 8000ed8:	431a      	orrs	r2, r3
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	69db      	ldr	r3, [r3, #28]
 8000ede:	431a      	orrs	r2, r3
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6a1b      	ldr	r3, [r3, #32]
 8000ee4:	431a      	orrs	r2, r3
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	430a      	orrs	r2, r1
 8000eec:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	0018      	movs	r0, r3
 8000ef2:	f000 f9c1 	bl	8001278 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	689a      	ldr	r2, [r3, #8]
 8000efa:	2380      	movs	r3, #128	; 0x80
 8000efc:	01db      	lsls	r3, r3, #7
 8000efe:	429a      	cmp	r2, r3
 8000f00:	d102      	bne.n	8000f08 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2200      	movs	r2, #0
 8000f06:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	685a      	ldr	r2, [r3, #4]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f10:	213f      	movs	r1, #63	; 0x3f
 8000f12:	400a      	ands	r2, r1
 8000f14:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000f1e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d011      	beq.n	8000f4c <HAL_DMA_Init+0xd8>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	2b04      	cmp	r3, #4
 8000f2e:	d80d      	bhi.n	8000f4c <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	0018      	movs	r0, r3
 8000f34:	f000 f9cc 	bl	80012d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f44:	687a      	ldr	r2, [r7, #4]
 8000f46:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	e008      	b.n	8000f5e <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2200      	movs	r2, #0
 8000f50:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2200      	movs	r2, #0
 8000f56:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2200      	movs	r2, #0
 8000f62:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2225      	movs	r2, #37	; 0x25
 8000f68:	2101      	movs	r1, #1
 8000f6a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2224      	movs	r2, #36	; 0x24
 8000f70:	2100      	movs	r1, #0
 8000f72:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000f74:	2300      	movs	r3, #0
}
 8000f76:	0018      	movs	r0, r3
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	b002      	add	sp, #8
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	46c0      	nop			; (mov r8, r8)
 8000f80:	bffdfff8 	.word	0xbffdfff8
 8000f84:	ffff800f 	.word	0xffff800f

08000f88 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	607a      	str	r2, [r7, #4]
 8000f94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f96:	2317      	movs	r3, #23
 8000f98:	18fb      	adds	r3, r7, r3
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	2224      	movs	r2, #36	; 0x24
 8000fa2:	5c9b      	ldrb	r3, [r3, r2]
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d101      	bne.n	8000fac <HAL_DMA_Start_IT+0x24>
 8000fa8:	2302      	movs	r3, #2
 8000faa:	e06f      	b.n	800108c <HAL_DMA_Start_IT+0x104>
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	2224      	movs	r2, #36	; 0x24
 8000fb0:	2101      	movs	r1, #1
 8000fb2:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	2225      	movs	r2, #37	; 0x25
 8000fb8:	5c9b      	ldrb	r3, [r3, r2]
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d157      	bne.n	8001070 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	2225      	movs	r2, #37	; 0x25
 8000fc4:	2102      	movs	r1, #2
 8000fc6:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	2200      	movs	r2, #0
 8000fcc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2101      	movs	r1, #1
 8000fda:	438a      	bics	r2, r1
 8000fdc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	687a      	ldr	r2, [r7, #4]
 8000fe2:	68b9      	ldr	r1, [r7, #8]
 8000fe4:	68f8      	ldr	r0, [r7, #12]
 8000fe6:	f000 f907 	bl	80011f8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d008      	beq.n	8001004 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	210e      	movs	r1, #14
 8000ffe:	430a      	orrs	r2, r1
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	e00f      	b.n	8001024 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	2104      	movs	r1, #4
 8001010:	438a      	bics	r2, r1
 8001012:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	210a      	movs	r1, #10
 8001020:	430a      	orrs	r2, r1
 8001022:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	2380      	movs	r3, #128	; 0x80
 800102c:	025b      	lsls	r3, r3, #9
 800102e:	4013      	ands	r3, r2
 8001030:	d008      	beq.n	8001044 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103c:	2180      	movs	r1, #128	; 0x80
 800103e:	0049      	lsls	r1, r1, #1
 8001040:	430a      	orrs	r2, r1
 8001042:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001048:	2b00      	cmp	r3, #0
 800104a:	d008      	beq.n	800105e <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001056:	2180      	movs	r1, #128	; 0x80
 8001058:	0049      	lsls	r1, r1, #1
 800105a:	430a      	orrs	r2, r1
 800105c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2101      	movs	r1, #1
 800106a:	430a      	orrs	r2, r1
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	e00a      	b.n	8001086 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	2280      	movs	r2, #128	; 0x80
 8001074:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	2224      	movs	r2, #36	; 0x24
 800107a:	2100      	movs	r1, #0
 800107c:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 800107e:	2317      	movs	r3, #23
 8001080:	18fb      	adds	r3, r7, r3
 8001082:	2201      	movs	r2, #1
 8001084:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8001086:	2317      	movs	r3, #23
 8001088:	18fb      	adds	r3, r7, r3
 800108a:	781b      	ldrb	r3, [r3, #0]
}
 800108c:	0018      	movs	r0, r3
 800108e:	46bd      	mov	sp, r7
 8001090:	b006      	add	sp, #24
 8001092:	bd80      	pop	{r7, pc}

08001094 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 800109c:	4b55      	ldr	r3, [pc, #340]	; (80011f4 <HAL_DMA_IRQHandler+0x160>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ae:	221c      	movs	r2, #28
 80010b0:	4013      	ands	r3, r2
 80010b2:	2204      	movs	r2, #4
 80010b4:	409a      	lsls	r2, r3
 80010b6:	0013      	movs	r3, r2
 80010b8:	68fa      	ldr	r2, [r7, #12]
 80010ba:	4013      	ands	r3, r2
 80010bc:	d027      	beq.n	800110e <HAL_DMA_IRQHandler+0x7a>
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	2204      	movs	r2, #4
 80010c2:	4013      	ands	r3, r2
 80010c4:	d023      	beq.n	800110e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2220      	movs	r2, #32
 80010ce:	4013      	ands	r3, r2
 80010d0:	d107      	bne.n	80010e2 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2104      	movs	r1, #4
 80010de:	438a      	bics	r2, r1
 80010e0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80010e2:	4b44      	ldr	r3, [pc, #272]	; (80011f4 <HAL_DMA_IRQHandler+0x160>)
 80010e4:	6859      	ldr	r1, [r3, #4]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ea:	221c      	movs	r2, #28
 80010ec:	4013      	ands	r3, r2
 80010ee:	2204      	movs	r2, #4
 80010f0:	409a      	lsls	r2, r3
 80010f2:	4b40      	ldr	r3, [pc, #256]	; (80011f4 <HAL_DMA_IRQHandler+0x160>)
 80010f4:	430a      	orrs	r2, r1
 80010f6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d100      	bne.n	8001102 <HAL_DMA_IRQHandler+0x6e>
 8001100:	e073      	b.n	80011ea <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	687a      	ldr	r2, [r7, #4]
 8001108:	0010      	movs	r0, r2
 800110a:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 800110c:	e06d      	b.n	80011ea <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001112:	221c      	movs	r2, #28
 8001114:	4013      	ands	r3, r2
 8001116:	2202      	movs	r2, #2
 8001118:	409a      	lsls	r2, r3
 800111a:	0013      	movs	r3, r2
 800111c:	68fa      	ldr	r2, [r7, #12]
 800111e:	4013      	ands	r3, r2
 8001120:	d02e      	beq.n	8001180 <HAL_DMA_IRQHandler+0xec>
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	2202      	movs	r2, #2
 8001126:	4013      	ands	r3, r2
 8001128:	d02a      	beq.n	8001180 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2220      	movs	r2, #32
 8001132:	4013      	ands	r3, r2
 8001134:	d10b      	bne.n	800114e <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	210a      	movs	r1, #10
 8001142:	438a      	bics	r2, r1
 8001144:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2225      	movs	r2, #37	; 0x25
 800114a:	2101      	movs	r1, #1
 800114c:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800114e:	4b29      	ldr	r3, [pc, #164]	; (80011f4 <HAL_DMA_IRQHandler+0x160>)
 8001150:	6859      	ldr	r1, [r3, #4]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001156:	221c      	movs	r2, #28
 8001158:	4013      	ands	r3, r2
 800115a:	2202      	movs	r2, #2
 800115c:	409a      	lsls	r2, r3
 800115e:	4b25      	ldr	r3, [pc, #148]	; (80011f4 <HAL_DMA_IRQHandler+0x160>)
 8001160:	430a      	orrs	r2, r1
 8001162:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2224      	movs	r2, #36	; 0x24
 8001168:	2100      	movs	r1, #0
 800116a:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001170:	2b00      	cmp	r3, #0
 8001172:	d03a      	beq.n	80011ea <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001178:	687a      	ldr	r2, [r7, #4]
 800117a:	0010      	movs	r0, r2
 800117c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800117e:	e034      	b.n	80011ea <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001184:	221c      	movs	r2, #28
 8001186:	4013      	ands	r3, r2
 8001188:	2208      	movs	r2, #8
 800118a:	409a      	lsls	r2, r3
 800118c:	0013      	movs	r3, r2
 800118e:	68fa      	ldr	r2, [r7, #12]
 8001190:	4013      	ands	r3, r2
 8001192:	d02b      	beq.n	80011ec <HAL_DMA_IRQHandler+0x158>
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	2208      	movs	r2, #8
 8001198:	4013      	ands	r3, r2
 800119a:	d027      	beq.n	80011ec <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	210e      	movs	r1, #14
 80011a8:	438a      	bics	r2, r1
 80011aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80011ac:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <HAL_DMA_IRQHandler+0x160>)
 80011ae:	6859      	ldr	r1, [r3, #4]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b4:	221c      	movs	r2, #28
 80011b6:	4013      	ands	r3, r2
 80011b8:	2201      	movs	r2, #1
 80011ba:	409a      	lsls	r2, r3
 80011bc:	4b0d      	ldr	r3, [pc, #52]	; (80011f4 <HAL_DMA_IRQHandler+0x160>)
 80011be:	430a      	orrs	r2, r1
 80011c0:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2201      	movs	r2, #1
 80011c6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2225      	movs	r2, #37	; 0x25
 80011cc:	2101      	movs	r1, #1
 80011ce:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2224      	movs	r2, #36	; 0x24
 80011d4:	2100      	movs	r1, #0
 80011d6:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d005      	beq.n	80011ec <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	0010      	movs	r0, r2
 80011e8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80011ea:	46c0      	nop			; (mov r8, r8)
 80011ec:	46c0      	nop			; (mov r8, r8)
}
 80011ee:	46bd      	mov	sp, r7
 80011f0:	b004      	add	sp, #16
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40020000 	.word	0x40020000

080011f8 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	60b9      	str	r1, [r7, #8]
 8001202:	607a      	str	r2, [r7, #4]
 8001204:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800120a:	68fa      	ldr	r2, [r7, #12]
 800120c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800120e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001214:	2b00      	cmp	r3, #0
 8001216:	d004      	beq.n	8001222 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800121c:	68fa      	ldr	r2, [r7, #12]
 800121e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001220:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001222:	4b14      	ldr	r3, [pc, #80]	; (8001274 <DMA_SetConfig+0x7c>)
 8001224:	6859      	ldr	r1, [r3, #4]
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	221c      	movs	r2, #28
 800122c:	4013      	ands	r3, r2
 800122e:	2201      	movs	r2, #1
 8001230:	409a      	lsls	r2, r3
 8001232:	4b10      	ldr	r3, [pc, #64]	; (8001274 <DMA_SetConfig+0x7c>)
 8001234:	430a      	orrs	r2, r1
 8001236:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	683a      	ldr	r2, [r7, #0]
 800123e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	2b10      	cmp	r3, #16
 8001246:	d108      	bne.n	800125a <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	687a      	ldr	r2, [r7, #4]
 800124e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	68ba      	ldr	r2, [r7, #8]
 8001256:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001258:	e007      	b.n	800126a <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	68ba      	ldr	r2, [r7, #8]
 8001260:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	687a      	ldr	r2, [r7, #4]
 8001268:	60da      	str	r2, [r3, #12]
}
 800126a:	46c0      	nop			; (mov r8, r8)
 800126c:	46bd      	mov	sp, r7
 800126e:	b004      	add	sp, #16
 8001270:	bd80      	pop	{r7, pc}
 8001272:	46c0      	nop			; (mov r8, r8)
 8001274:	40020000 	.word	0x40020000

08001278 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001284:	089b      	lsrs	r3, r3, #2
 8001286:	4a10      	ldr	r2, [pc, #64]	; (80012c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8001288:	4694      	mov	ip, r2
 800128a:	4463      	add	r3, ip
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	001a      	movs	r2, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	001a      	movs	r2, r3
 800129a:	23ff      	movs	r3, #255	; 0xff
 800129c:	4013      	ands	r3, r2
 800129e:	3b08      	subs	r3, #8
 80012a0:	2114      	movs	r1, #20
 80012a2:	0018      	movs	r0, r3
 80012a4:	f7fe ff2c 	bl	8000100 <__udivsi3>
 80012a8:	0003      	movs	r3, r0
 80012aa:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	4a07      	ldr	r2, [pc, #28]	; (80012cc <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80012b0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	221f      	movs	r2, #31
 80012b6:	4013      	ands	r3, r2
 80012b8:	2201      	movs	r2, #1
 80012ba:	409a      	lsls	r2, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80012c0:	46c0      	nop			; (mov r8, r8)
 80012c2:	46bd      	mov	sp, r7
 80012c4:	b004      	add	sp, #16
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	10008200 	.word	0x10008200
 80012cc:	40020880 	.word	0x40020880

080012d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	223f      	movs	r2, #63	; 0x3f
 80012de:	4013      	ands	r3, r2
 80012e0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	4a0a      	ldr	r2, [pc, #40]	; (8001310 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80012e6:	4694      	mov	ip, r2
 80012e8:	4463      	add	r3, ip
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	001a      	movs	r2, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a07      	ldr	r2, [pc, #28]	; (8001314 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80012f6:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	3b01      	subs	r3, #1
 80012fc:	2203      	movs	r2, #3
 80012fe:	4013      	ands	r3, r2
 8001300:	2201      	movs	r2, #1
 8001302:	409a      	lsls	r2, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001308:	46c0      	nop			; (mov r8, r8)
 800130a:	46bd      	mov	sp, r7
 800130c:	b004      	add	sp, #16
 800130e:	bd80      	pop	{r7, pc}
 8001310:	1000823f 	.word	0x1000823f
 8001314:	40020940 	.word	0x40020940

08001318 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001322:	2300      	movs	r3, #0
 8001324:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001326:	e147      	b.n	80015b8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2101      	movs	r1, #1
 800132e:	697a      	ldr	r2, [r7, #20]
 8001330:	4091      	lsls	r1, r2
 8001332:	000a      	movs	r2, r1
 8001334:	4013      	ands	r3, r2
 8001336:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d100      	bne.n	8001340 <HAL_GPIO_Init+0x28>
 800133e:	e138      	b.n	80015b2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	2203      	movs	r2, #3
 8001346:	4013      	ands	r3, r2
 8001348:	2b01      	cmp	r3, #1
 800134a:	d005      	beq.n	8001358 <HAL_GPIO_Init+0x40>
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	2203      	movs	r2, #3
 8001352:	4013      	ands	r3, r2
 8001354:	2b02      	cmp	r3, #2
 8001356:	d130      	bne.n	80013ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	2203      	movs	r2, #3
 8001364:	409a      	lsls	r2, r3
 8001366:	0013      	movs	r3, r2
 8001368:	43da      	mvns	r2, r3
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	4013      	ands	r3, r2
 800136e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	68da      	ldr	r2, [r3, #12]
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	409a      	lsls	r2, r3
 800137a:	0013      	movs	r3, r2
 800137c:	693a      	ldr	r2, [r7, #16]
 800137e:	4313      	orrs	r3, r2
 8001380:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	693a      	ldr	r2, [r7, #16]
 8001386:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800138e:	2201      	movs	r2, #1
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	409a      	lsls	r2, r3
 8001394:	0013      	movs	r3, r2
 8001396:	43da      	mvns	r2, r3
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	4013      	ands	r3, r2
 800139c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	091b      	lsrs	r3, r3, #4
 80013a4:	2201      	movs	r2, #1
 80013a6:	401a      	ands	r2, r3
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	409a      	lsls	r2, r3
 80013ac:	0013      	movs	r3, r2
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	2203      	movs	r2, #3
 80013c0:	4013      	ands	r3, r2
 80013c2:	2b03      	cmp	r3, #3
 80013c4:	d017      	beq.n	80013f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	68db      	ldr	r3, [r3, #12]
 80013ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	2203      	movs	r2, #3
 80013d2:	409a      	lsls	r2, r3
 80013d4:	0013      	movs	r3, r2
 80013d6:	43da      	mvns	r2, r3
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	4013      	ands	r3, r2
 80013dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	689a      	ldr	r2, [r3, #8]
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	409a      	lsls	r2, r3
 80013e8:	0013      	movs	r3, r2
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	2203      	movs	r2, #3
 80013fc:	4013      	ands	r3, r2
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d123      	bne.n	800144a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	08da      	lsrs	r2, r3, #3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	3208      	adds	r2, #8
 800140a:	0092      	lsls	r2, r2, #2
 800140c:	58d3      	ldr	r3, [r2, r3]
 800140e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	2207      	movs	r2, #7
 8001414:	4013      	ands	r3, r2
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	220f      	movs	r2, #15
 800141a:	409a      	lsls	r2, r3
 800141c:	0013      	movs	r3, r2
 800141e:	43da      	mvns	r2, r3
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	4013      	ands	r3, r2
 8001424:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	691a      	ldr	r2, [r3, #16]
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	2107      	movs	r1, #7
 800142e:	400b      	ands	r3, r1
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	409a      	lsls	r2, r3
 8001434:	0013      	movs	r3, r2
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	4313      	orrs	r3, r2
 800143a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	08da      	lsrs	r2, r3, #3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	3208      	adds	r2, #8
 8001444:	0092      	lsls	r2, r2, #2
 8001446:	6939      	ldr	r1, [r7, #16]
 8001448:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	2203      	movs	r2, #3
 8001456:	409a      	lsls	r2, r3
 8001458:	0013      	movs	r3, r2
 800145a:	43da      	mvns	r2, r3
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	4013      	ands	r3, r2
 8001460:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	2203      	movs	r2, #3
 8001468:	401a      	ands	r2, r3
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	409a      	lsls	r2, r3
 8001470:	0013      	movs	r3, r2
 8001472:	693a      	ldr	r2, [r7, #16]
 8001474:	4313      	orrs	r3, r2
 8001476:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685a      	ldr	r2, [r3, #4]
 8001482:	23c0      	movs	r3, #192	; 0xc0
 8001484:	029b      	lsls	r3, r3, #10
 8001486:	4013      	ands	r3, r2
 8001488:	d100      	bne.n	800148c <HAL_GPIO_Init+0x174>
 800148a:	e092      	b.n	80015b2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800148c:	4a50      	ldr	r2, [pc, #320]	; (80015d0 <HAL_GPIO_Init+0x2b8>)
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	089b      	lsrs	r3, r3, #2
 8001492:	3318      	adds	r3, #24
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	589b      	ldr	r3, [r3, r2]
 8001498:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	2203      	movs	r2, #3
 800149e:	4013      	ands	r3, r2
 80014a0:	00db      	lsls	r3, r3, #3
 80014a2:	220f      	movs	r2, #15
 80014a4:	409a      	lsls	r2, r3
 80014a6:	0013      	movs	r3, r2
 80014a8:	43da      	mvns	r2, r3
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	4013      	ands	r3, r2
 80014ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	23a0      	movs	r3, #160	; 0xa0
 80014b4:	05db      	lsls	r3, r3, #23
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d013      	beq.n	80014e2 <HAL_GPIO_Init+0x1ca>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a45      	ldr	r2, [pc, #276]	; (80015d4 <HAL_GPIO_Init+0x2bc>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d00d      	beq.n	80014de <HAL_GPIO_Init+0x1c6>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a44      	ldr	r2, [pc, #272]	; (80015d8 <HAL_GPIO_Init+0x2c0>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d007      	beq.n	80014da <HAL_GPIO_Init+0x1c2>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a43      	ldr	r2, [pc, #268]	; (80015dc <HAL_GPIO_Init+0x2c4>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d101      	bne.n	80014d6 <HAL_GPIO_Init+0x1be>
 80014d2:	2303      	movs	r3, #3
 80014d4:	e006      	b.n	80014e4 <HAL_GPIO_Init+0x1cc>
 80014d6:	2305      	movs	r3, #5
 80014d8:	e004      	b.n	80014e4 <HAL_GPIO_Init+0x1cc>
 80014da:	2302      	movs	r3, #2
 80014dc:	e002      	b.n	80014e4 <HAL_GPIO_Init+0x1cc>
 80014de:	2301      	movs	r3, #1
 80014e0:	e000      	b.n	80014e4 <HAL_GPIO_Init+0x1cc>
 80014e2:	2300      	movs	r3, #0
 80014e4:	697a      	ldr	r2, [r7, #20]
 80014e6:	2103      	movs	r1, #3
 80014e8:	400a      	ands	r2, r1
 80014ea:	00d2      	lsls	r2, r2, #3
 80014ec:	4093      	lsls	r3, r2
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80014f4:	4936      	ldr	r1, [pc, #216]	; (80015d0 <HAL_GPIO_Init+0x2b8>)
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	089b      	lsrs	r3, r3, #2
 80014fa:	3318      	adds	r3, #24
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001502:	4b33      	ldr	r3, [pc, #204]	; (80015d0 <HAL_GPIO_Init+0x2b8>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	43da      	mvns	r2, r3
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	4013      	ands	r3, r2
 8001510:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685a      	ldr	r2, [r3, #4]
 8001516:	2380      	movs	r3, #128	; 0x80
 8001518:	035b      	lsls	r3, r3, #13
 800151a:	4013      	ands	r3, r2
 800151c:	d003      	beq.n	8001526 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	4313      	orrs	r3, r2
 8001524:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001526:	4b2a      	ldr	r3, [pc, #168]	; (80015d0 <HAL_GPIO_Init+0x2b8>)
 8001528:	693a      	ldr	r2, [r7, #16]
 800152a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800152c:	4b28      	ldr	r3, [pc, #160]	; (80015d0 <HAL_GPIO_Init+0x2b8>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	43da      	mvns	r2, r3
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	4013      	ands	r3, r2
 800153a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685a      	ldr	r2, [r3, #4]
 8001540:	2380      	movs	r3, #128	; 0x80
 8001542:	039b      	lsls	r3, r3, #14
 8001544:	4013      	ands	r3, r2
 8001546:	d003      	beq.n	8001550 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001548:	693a      	ldr	r2, [r7, #16]
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	4313      	orrs	r3, r2
 800154e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001550:	4b1f      	ldr	r3, [pc, #124]	; (80015d0 <HAL_GPIO_Init+0x2b8>)
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001556:	4a1e      	ldr	r2, [pc, #120]	; (80015d0 <HAL_GPIO_Init+0x2b8>)
 8001558:	2384      	movs	r3, #132	; 0x84
 800155a:	58d3      	ldr	r3, [r2, r3]
 800155c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	43da      	mvns	r2, r3
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	4013      	ands	r3, r2
 8001566:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685a      	ldr	r2, [r3, #4]
 800156c:	2380      	movs	r3, #128	; 0x80
 800156e:	029b      	lsls	r3, r3, #10
 8001570:	4013      	ands	r3, r2
 8001572:	d003      	beq.n	800157c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001574:	693a      	ldr	r2, [r7, #16]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	4313      	orrs	r3, r2
 800157a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800157c:	4914      	ldr	r1, [pc, #80]	; (80015d0 <HAL_GPIO_Init+0x2b8>)
 800157e:	2284      	movs	r2, #132	; 0x84
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001584:	4a12      	ldr	r2, [pc, #72]	; (80015d0 <HAL_GPIO_Init+0x2b8>)
 8001586:	2380      	movs	r3, #128	; 0x80
 8001588:	58d3      	ldr	r3, [r2, r3]
 800158a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	43da      	mvns	r2, r3
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	4013      	ands	r3, r2
 8001594:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685a      	ldr	r2, [r3, #4]
 800159a:	2380      	movs	r3, #128	; 0x80
 800159c:	025b      	lsls	r3, r3, #9
 800159e:	4013      	ands	r3, r2
 80015a0:	d003      	beq.n	80015aa <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80015aa:	4909      	ldr	r1, [pc, #36]	; (80015d0 <HAL_GPIO_Init+0x2b8>)
 80015ac:	2280      	movs	r2, #128	; 0x80
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	3301      	adds	r3, #1
 80015b6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	40da      	lsrs	r2, r3
 80015c0:	1e13      	subs	r3, r2, #0
 80015c2:	d000      	beq.n	80015c6 <HAL_GPIO_Init+0x2ae>
 80015c4:	e6b0      	b.n	8001328 <HAL_GPIO_Init+0x10>
  }
}
 80015c6:	46c0      	nop			; (mov r8, r8)
 80015c8:	46c0      	nop			; (mov r8, r8)
 80015ca:	46bd      	mov	sp, r7
 80015cc:	b006      	add	sp, #24
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40021800 	.word	0x40021800
 80015d4:	50000400 	.word	0x50000400
 80015d8:	50000800 	.word	0x50000800
 80015dc:	50000c00 	.word	0x50000c00

080015e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80015e8:	4b19      	ldr	r3, [pc, #100]	; (8001650 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a19      	ldr	r2, [pc, #100]	; (8001654 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80015ee:	4013      	ands	r3, r2
 80015f0:	0019      	movs	r1, r3
 80015f2:	4b17      	ldr	r3, [pc, #92]	; (8001650 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	430a      	orrs	r2, r1
 80015f8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	2380      	movs	r3, #128	; 0x80
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	429a      	cmp	r2, r3
 8001602:	d11f      	bne.n	8001644 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001604:	4b14      	ldr	r3, [pc, #80]	; (8001658 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	0013      	movs	r3, r2
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	189b      	adds	r3, r3, r2
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	4912      	ldr	r1, [pc, #72]	; (800165c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001612:	0018      	movs	r0, r3
 8001614:	f7fe fd74 	bl	8000100 <__udivsi3>
 8001618:	0003      	movs	r3, r0
 800161a:	3301      	adds	r3, #1
 800161c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800161e:	e008      	b.n	8001632 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d003      	beq.n	800162e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	3b01      	subs	r3, #1
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	e001      	b.n	8001632 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e009      	b.n	8001646 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001632:	4b07      	ldr	r3, [pc, #28]	; (8001650 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001634:	695a      	ldr	r2, [r3, #20]
 8001636:	2380      	movs	r3, #128	; 0x80
 8001638:	00db      	lsls	r3, r3, #3
 800163a:	401a      	ands	r2, r3
 800163c:	2380      	movs	r3, #128	; 0x80
 800163e:	00db      	lsls	r3, r3, #3
 8001640:	429a      	cmp	r2, r3
 8001642:	d0ed      	beq.n	8001620 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001644:	2300      	movs	r3, #0
}
 8001646:	0018      	movs	r0, r3
 8001648:	46bd      	mov	sp, r7
 800164a:	b004      	add	sp, #16
 800164c:	bd80      	pop	{r7, pc}
 800164e:	46c0      	nop			; (mov r8, r8)
 8001650:	40007000 	.word	0x40007000
 8001654:	fffff9ff 	.word	0xfffff9ff
 8001658:	20000004 	.word	0x20000004
 800165c:	000f4240 	.word	0x000f4240

08001660 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001664:	4b03      	ldr	r3, [pc, #12]	; (8001674 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001666:	689a      	ldr	r2, [r3, #8]
 8001668:	23e0      	movs	r3, #224	; 0xe0
 800166a:	01db      	lsls	r3, r3, #7
 800166c:	4013      	ands	r3, r2
}
 800166e:	0018      	movs	r0, r3
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	40021000 	.word	0x40021000

08001678 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b088      	sub	sp, #32
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d101      	bne.n	800168a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e2f3      	b.n	8001c72 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2201      	movs	r2, #1
 8001690:	4013      	ands	r3, r2
 8001692:	d100      	bne.n	8001696 <HAL_RCC_OscConfig+0x1e>
 8001694:	e07c      	b.n	8001790 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001696:	4bc3      	ldr	r3, [pc, #780]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	2238      	movs	r2, #56	; 0x38
 800169c:	4013      	ands	r3, r2
 800169e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016a0:	4bc0      	ldr	r3, [pc, #768]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	2203      	movs	r2, #3
 80016a6:	4013      	ands	r3, r2
 80016a8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	2b10      	cmp	r3, #16
 80016ae:	d102      	bne.n	80016b6 <HAL_RCC_OscConfig+0x3e>
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	2b03      	cmp	r3, #3
 80016b4:	d002      	beq.n	80016bc <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	2b08      	cmp	r3, #8
 80016ba:	d10b      	bne.n	80016d4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016bc:	4bb9      	ldr	r3, [pc, #740]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	2380      	movs	r3, #128	; 0x80
 80016c2:	029b      	lsls	r3, r3, #10
 80016c4:	4013      	ands	r3, r2
 80016c6:	d062      	beq.n	800178e <HAL_RCC_OscConfig+0x116>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d15e      	bne.n	800178e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e2ce      	b.n	8001c72 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685a      	ldr	r2, [r3, #4]
 80016d8:	2380      	movs	r3, #128	; 0x80
 80016da:	025b      	lsls	r3, r3, #9
 80016dc:	429a      	cmp	r2, r3
 80016de:	d107      	bne.n	80016f0 <HAL_RCC_OscConfig+0x78>
 80016e0:	4bb0      	ldr	r3, [pc, #704]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	4baf      	ldr	r3, [pc, #700]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 80016e6:	2180      	movs	r1, #128	; 0x80
 80016e8:	0249      	lsls	r1, r1, #9
 80016ea:	430a      	orrs	r2, r1
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	e020      	b.n	8001732 <HAL_RCC_OscConfig+0xba>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	685a      	ldr	r2, [r3, #4]
 80016f4:	23a0      	movs	r3, #160	; 0xa0
 80016f6:	02db      	lsls	r3, r3, #11
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d10e      	bne.n	800171a <HAL_RCC_OscConfig+0xa2>
 80016fc:	4ba9      	ldr	r3, [pc, #676]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	4ba8      	ldr	r3, [pc, #672]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 8001702:	2180      	movs	r1, #128	; 0x80
 8001704:	02c9      	lsls	r1, r1, #11
 8001706:	430a      	orrs	r2, r1
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	4ba6      	ldr	r3, [pc, #664]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	4ba5      	ldr	r3, [pc, #660]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 8001710:	2180      	movs	r1, #128	; 0x80
 8001712:	0249      	lsls	r1, r1, #9
 8001714:	430a      	orrs	r2, r1
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	e00b      	b.n	8001732 <HAL_RCC_OscConfig+0xba>
 800171a:	4ba2      	ldr	r3, [pc, #648]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	4ba1      	ldr	r3, [pc, #644]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 8001720:	49a1      	ldr	r1, [pc, #644]	; (80019a8 <HAL_RCC_OscConfig+0x330>)
 8001722:	400a      	ands	r2, r1
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	4b9f      	ldr	r3, [pc, #636]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	4b9e      	ldr	r3, [pc, #632]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 800172c:	499f      	ldr	r1, [pc, #636]	; (80019ac <HAL_RCC_OscConfig+0x334>)
 800172e:	400a      	ands	r2, r1
 8001730:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d014      	beq.n	8001764 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800173a:	f7ff fa8f 	bl	8000c5c <HAL_GetTick>
 800173e:	0003      	movs	r3, r0
 8001740:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001742:	e008      	b.n	8001756 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001744:	f7ff fa8a 	bl	8000c5c <HAL_GetTick>
 8001748:	0002      	movs	r2, r0
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	2b64      	cmp	r3, #100	; 0x64
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e28d      	b.n	8001c72 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001756:	4b93      	ldr	r3, [pc, #588]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	2380      	movs	r3, #128	; 0x80
 800175c:	029b      	lsls	r3, r3, #10
 800175e:	4013      	ands	r3, r2
 8001760:	d0f0      	beq.n	8001744 <HAL_RCC_OscConfig+0xcc>
 8001762:	e015      	b.n	8001790 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001764:	f7ff fa7a 	bl	8000c5c <HAL_GetTick>
 8001768:	0003      	movs	r3, r0
 800176a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800176c:	e008      	b.n	8001780 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800176e:	f7ff fa75 	bl	8000c5c <HAL_GetTick>
 8001772:	0002      	movs	r2, r0
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	2b64      	cmp	r3, #100	; 0x64
 800177a:	d901      	bls.n	8001780 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e278      	b.n	8001c72 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001780:	4b88      	ldr	r3, [pc, #544]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	2380      	movs	r3, #128	; 0x80
 8001786:	029b      	lsls	r3, r3, #10
 8001788:	4013      	ands	r3, r2
 800178a:	d1f0      	bne.n	800176e <HAL_RCC_OscConfig+0xf6>
 800178c:	e000      	b.n	8001790 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800178e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2202      	movs	r2, #2
 8001796:	4013      	ands	r3, r2
 8001798:	d100      	bne.n	800179c <HAL_RCC_OscConfig+0x124>
 800179a:	e099      	b.n	80018d0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800179c:	4b81      	ldr	r3, [pc, #516]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	2238      	movs	r2, #56	; 0x38
 80017a2:	4013      	ands	r3, r2
 80017a4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017a6:	4b7f      	ldr	r3, [pc, #508]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	2203      	movs	r2, #3
 80017ac:	4013      	ands	r3, r2
 80017ae:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	2b10      	cmp	r3, #16
 80017b4:	d102      	bne.n	80017bc <HAL_RCC_OscConfig+0x144>
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d002      	beq.n	80017c2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80017bc:	69bb      	ldr	r3, [r7, #24]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d135      	bne.n	800182e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017c2:	4b78      	ldr	r3, [pc, #480]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	2380      	movs	r3, #128	; 0x80
 80017c8:	00db      	lsls	r3, r3, #3
 80017ca:	4013      	ands	r3, r2
 80017cc:	d005      	beq.n	80017da <HAL_RCC_OscConfig+0x162>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d101      	bne.n	80017da <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e24b      	b.n	8001c72 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017da:	4b72      	ldr	r3, [pc, #456]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	4a74      	ldr	r2, [pc, #464]	; (80019b0 <HAL_RCC_OscConfig+0x338>)
 80017e0:	4013      	ands	r3, r2
 80017e2:	0019      	movs	r1, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	695b      	ldr	r3, [r3, #20]
 80017e8:	021a      	lsls	r2, r3, #8
 80017ea:	4b6e      	ldr	r3, [pc, #440]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 80017ec:	430a      	orrs	r2, r1
 80017ee:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d112      	bne.n	800181c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80017f6:	4b6b      	ldr	r3, [pc, #428]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a6e      	ldr	r2, [pc, #440]	; (80019b4 <HAL_RCC_OscConfig+0x33c>)
 80017fc:	4013      	ands	r3, r2
 80017fe:	0019      	movs	r1, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	691a      	ldr	r2, [r3, #16]
 8001804:	4b67      	ldr	r3, [pc, #412]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 8001806:	430a      	orrs	r2, r1
 8001808:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800180a:	4b66      	ldr	r3, [pc, #408]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	0adb      	lsrs	r3, r3, #11
 8001810:	2207      	movs	r2, #7
 8001812:	4013      	ands	r3, r2
 8001814:	4a68      	ldr	r2, [pc, #416]	; (80019b8 <HAL_RCC_OscConfig+0x340>)
 8001816:	40da      	lsrs	r2, r3
 8001818:	4b68      	ldr	r3, [pc, #416]	; (80019bc <HAL_RCC_OscConfig+0x344>)
 800181a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800181c:	4b68      	ldr	r3, [pc, #416]	; (80019c0 <HAL_RCC_OscConfig+0x348>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	0018      	movs	r0, r3
 8001822:	f7ff f9bf 	bl	8000ba4 <HAL_InitTick>
 8001826:	1e03      	subs	r3, r0, #0
 8001828:	d051      	beq.n	80018ce <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e221      	b.n	8001c72 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	68db      	ldr	r3, [r3, #12]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d030      	beq.n	8001898 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001836:	4b5b      	ldr	r3, [pc, #364]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a5e      	ldr	r2, [pc, #376]	; (80019b4 <HAL_RCC_OscConfig+0x33c>)
 800183c:	4013      	ands	r3, r2
 800183e:	0019      	movs	r1, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	691a      	ldr	r2, [r3, #16]
 8001844:	4b57      	ldr	r3, [pc, #348]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 8001846:	430a      	orrs	r2, r1
 8001848:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800184a:	4b56      	ldr	r3, [pc, #344]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	4b55      	ldr	r3, [pc, #340]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 8001850:	2180      	movs	r1, #128	; 0x80
 8001852:	0049      	lsls	r1, r1, #1
 8001854:	430a      	orrs	r2, r1
 8001856:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001858:	f7ff fa00 	bl	8000c5c <HAL_GetTick>
 800185c:	0003      	movs	r3, r0
 800185e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001860:	e008      	b.n	8001874 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001862:	f7ff f9fb 	bl	8000c5c <HAL_GetTick>
 8001866:	0002      	movs	r2, r0
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	2b02      	cmp	r3, #2
 800186e:	d901      	bls.n	8001874 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001870:	2303      	movs	r3, #3
 8001872:	e1fe      	b.n	8001c72 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001874:	4b4b      	ldr	r3, [pc, #300]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	2380      	movs	r3, #128	; 0x80
 800187a:	00db      	lsls	r3, r3, #3
 800187c:	4013      	ands	r3, r2
 800187e:	d0f0      	beq.n	8001862 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001880:	4b48      	ldr	r3, [pc, #288]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	4a4a      	ldr	r2, [pc, #296]	; (80019b0 <HAL_RCC_OscConfig+0x338>)
 8001886:	4013      	ands	r3, r2
 8001888:	0019      	movs	r1, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	695b      	ldr	r3, [r3, #20]
 800188e:	021a      	lsls	r2, r3, #8
 8001890:	4b44      	ldr	r3, [pc, #272]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 8001892:	430a      	orrs	r2, r1
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	e01b      	b.n	80018d0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001898:	4b42      	ldr	r3, [pc, #264]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	4b41      	ldr	r3, [pc, #260]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 800189e:	4949      	ldr	r1, [pc, #292]	; (80019c4 <HAL_RCC_OscConfig+0x34c>)
 80018a0:	400a      	ands	r2, r1
 80018a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a4:	f7ff f9da 	bl	8000c5c <HAL_GetTick>
 80018a8:	0003      	movs	r3, r0
 80018aa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018ac:	e008      	b.n	80018c0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018ae:	f7ff f9d5 	bl	8000c5c <HAL_GetTick>
 80018b2:	0002      	movs	r2, r0
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d901      	bls.n	80018c0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e1d8      	b.n	8001c72 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018c0:	4b38      	ldr	r3, [pc, #224]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	2380      	movs	r3, #128	; 0x80
 80018c6:	00db      	lsls	r3, r3, #3
 80018c8:	4013      	ands	r3, r2
 80018ca:	d1f0      	bne.n	80018ae <HAL_RCC_OscConfig+0x236>
 80018cc:	e000      	b.n	80018d0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018ce:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2208      	movs	r2, #8
 80018d6:	4013      	ands	r3, r2
 80018d8:	d047      	beq.n	800196a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80018da:	4b32      	ldr	r3, [pc, #200]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	2238      	movs	r2, #56	; 0x38
 80018e0:	4013      	ands	r3, r2
 80018e2:	2b18      	cmp	r3, #24
 80018e4:	d10a      	bne.n	80018fc <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80018e6:	4b2f      	ldr	r3, [pc, #188]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 80018e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ea:	2202      	movs	r2, #2
 80018ec:	4013      	ands	r3, r2
 80018ee:	d03c      	beq.n	800196a <HAL_RCC_OscConfig+0x2f2>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d138      	bne.n	800196a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e1ba      	b.n	8001c72 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d019      	beq.n	8001938 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001904:	4b27      	ldr	r3, [pc, #156]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 8001906:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001908:	4b26      	ldr	r3, [pc, #152]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 800190a:	2101      	movs	r1, #1
 800190c:	430a      	orrs	r2, r1
 800190e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001910:	f7ff f9a4 	bl	8000c5c <HAL_GetTick>
 8001914:	0003      	movs	r3, r0
 8001916:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001918:	e008      	b.n	800192c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800191a:	f7ff f99f 	bl	8000c5c <HAL_GetTick>
 800191e:	0002      	movs	r2, r0
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	2b02      	cmp	r3, #2
 8001926:	d901      	bls.n	800192c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001928:	2303      	movs	r3, #3
 800192a:	e1a2      	b.n	8001c72 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800192c:	4b1d      	ldr	r3, [pc, #116]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 800192e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001930:	2202      	movs	r2, #2
 8001932:	4013      	ands	r3, r2
 8001934:	d0f1      	beq.n	800191a <HAL_RCC_OscConfig+0x2a2>
 8001936:	e018      	b.n	800196a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001938:	4b1a      	ldr	r3, [pc, #104]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 800193a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800193c:	4b19      	ldr	r3, [pc, #100]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 800193e:	2101      	movs	r1, #1
 8001940:	438a      	bics	r2, r1
 8001942:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001944:	f7ff f98a 	bl	8000c5c <HAL_GetTick>
 8001948:	0003      	movs	r3, r0
 800194a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800194c:	e008      	b.n	8001960 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800194e:	f7ff f985 	bl	8000c5c <HAL_GetTick>
 8001952:	0002      	movs	r2, r0
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b02      	cmp	r3, #2
 800195a:	d901      	bls.n	8001960 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e188      	b.n	8001c72 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001960:	4b10      	ldr	r3, [pc, #64]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 8001962:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001964:	2202      	movs	r2, #2
 8001966:	4013      	ands	r3, r2
 8001968:	d1f1      	bne.n	800194e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2204      	movs	r2, #4
 8001970:	4013      	ands	r3, r2
 8001972:	d100      	bne.n	8001976 <HAL_RCC_OscConfig+0x2fe>
 8001974:	e0c6      	b.n	8001b04 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001976:	231f      	movs	r3, #31
 8001978:	18fb      	adds	r3, r7, r3
 800197a:	2200      	movs	r2, #0
 800197c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800197e:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	2238      	movs	r2, #56	; 0x38
 8001984:	4013      	ands	r3, r2
 8001986:	2b20      	cmp	r3, #32
 8001988:	d11e      	bne.n	80019c8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800198a:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <HAL_RCC_OscConfig+0x32c>)
 800198c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800198e:	2202      	movs	r2, #2
 8001990:	4013      	ands	r3, r2
 8001992:	d100      	bne.n	8001996 <HAL_RCC_OscConfig+0x31e>
 8001994:	e0b6      	b.n	8001b04 <HAL_RCC_OscConfig+0x48c>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d000      	beq.n	80019a0 <HAL_RCC_OscConfig+0x328>
 800199e:	e0b1      	b.n	8001b04 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e166      	b.n	8001c72 <HAL_RCC_OscConfig+0x5fa>
 80019a4:	40021000 	.word	0x40021000
 80019a8:	fffeffff 	.word	0xfffeffff
 80019ac:	fffbffff 	.word	0xfffbffff
 80019b0:	ffff80ff 	.word	0xffff80ff
 80019b4:	ffffc7ff 	.word	0xffffc7ff
 80019b8:	00f42400 	.word	0x00f42400
 80019bc:	20000004 	.word	0x20000004
 80019c0:	20000008 	.word	0x20000008
 80019c4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80019c8:	4bac      	ldr	r3, [pc, #688]	; (8001c7c <HAL_RCC_OscConfig+0x604>)
 80019ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80019cc:	2380      	movs	r3, #128	; 0x80
 80019ce:	055b      	lsls	r3, r3, #21
 80019d0:	4013      	ands	r3, r2
 80019d2:	d101      	bne.n	80019d8 <HAL_RCC_OscConfig+0x360>
 80019d4:	2301      	movs	r3, #1
 80019d6:	e000      	b.n	80019da <HAL_RCC_OscConfig+0x362>
 80019d8:	2300      	movs	r3, #0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d011      	beq.n	8001a02 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80019de:	4ba7      	ldr	r3, [pc, #668]	; (8001c7c <HAL_RCC_OscConfig+0x604>)
 80019e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80019e2:	4ba6      	ldr	r3, [pc, #664]	; (8001c7c <HAL_RCC_OscConfig+0x604>)
 80019e4:	2180      	movs	r1, #128	; 0x80
 80019e6:	0549      	lsls	r1, r1, #21
 80019e8:	430a      	orrs	r2, r1
 80019ea:	63da      	str	r2, [r3, #60]	; 0x3c
 80019ec:	4ba3      	ldr	r3, [pc, #652]	; (8001c7c <HAL_RCC_OscConfig+0x604>)
 80019ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80019f0:	2380      	movs	r3, #128	; 0x80
 80019f2:	055b      	lsls	r3, r3, #21
 80019f4:	4013      	ands	r3, r2
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80019fa:	231f      	movs	r3, #31
 80019fc:	18fb      	adds	r3, r7, r3
 80019fe:	2201      	movs	r2, #1
 8001a00:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a02:	4b9f      	ldr	r3, [pc, #636]	; (8001c80 <HAL_RCC_OscConfig+0x608>)
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	2380      	movs	r3, #128	; 0x80
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	d11a      	bne.n	8001a44 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a0e:	4b9c      	ldr	r3, [pc, #624]	; (8001c80 <HAL_RCC_OscConfig+0x608>)
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	4b9b      	ldr	r3, [pc, #620]	; (8001c80 <HAL_RCC_OscConfig+0x608>)
 8001a14:	2180      	movs	r1, #128	; 0x80
 8001a16:	0049      	lsls	r1, r1, #1
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001a1c:	f7ff f91e 	bl	8000c5c <HAL_GetTick>
 8001a20:	0003      	movs	r3, r0
 8001a22:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a24:	e008      	b.n	8001a38 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a26:	f7ff f919 	bl	8000c5c <HAL_GetTick>
 8001a2a:	0002      	movs	r2, r0
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d901      	bls.n	8001a38 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e11c      	b.n	8001c72 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a38:	4b91      	ldr	r3, [pc, #580]	; (8001c80 <HAL_RCC_OscConfig+0x608>)
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	2380      	movs	r3, #128	; 0x80
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	4013      	ands	r3, r2
 8001a42:	d0f0      	beq.n	8001a26 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d106      	bne.n	8001a5a <HAL_RCC_OscConfig+0x3e2>
 8001a4c:	4b8b      	ldr	r3, [pc, #556]	; (8001c7c <HAL_RCC_OscConfig+0x604>)
 8001a4e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a50:	4b8a      	ldr	r3, [pc, #552]	; (8001c7c <HAL_RCC_OscConfig+0x604>)
 8001a52:	2101      	movs	r1, #1
 8001a54:	430a      	orrs	r2, r1
 8001a56:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a58:	e01c      	b.n	8001a94 <HAL_RCC_OscConfig+0x41c>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	2b05      	cmp	r3, #5
 8001a60:	d10c      	bne.n	8001a7c <HAL_RCC_OscConfig+0x404>
 8001a62:	4b86      	ldr	r3, [pc, #536]	; (8001c7c <HAL_RCC_OscConfig+0x604>)
 8001a64:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a66:	4b85      	ldr	r3, [pc, #532]	; (8001c7c <HAL_RCC_OscConfig+0x604>)
 8001a68:	2104      	movs	r1, #4
 8001a6a:	430a      	orrs	r2, r1
 8001a6c:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a6e:	4b83      	ldr	r3, [pc, #524]	; (8001c7c <HAL_RCC_OscConfig+0x604>)
 8001a70:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a72:	4b82      	ldr	r3, [pc, #520]	; (8001c7c <HAL_RCC_OscConfig+0x604>)
 8001a74:	2101      	movs	r1, #1
 8001a76:	430a      	orrs	r2, r1
 8001a78:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a7a:	e00b      	b.n	8001a94 <HAL_RCC_OscConfig+0x41c>
 8001a7c:	4b7f      	ldr	r3, [pc, #508]	; (8001c7c <HAL_RCC_OscConfig+0x604>)
 8001a7e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a80:	4b7e      	ldr	r3, [pc, #504]	; (8001c7c <HAL_RCC_OscConfig+0x604>)
 8001a82:	2101      	movs	r1, #1
 8001a84:	438a      	bics	r2, r1
 8001a86:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a88:	4b7c      	ldr	r3, [pc, #496]	; (8001c7c <HAL_RCC_OscConfig+0x604>)
 8001a8a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a8c:	4b7b      	ldr	r3, [pc, #492]	; (8001c7c <HAL_RCC_OscConfig+0x604>)
 8001a8e:	2104      	movs	r1, #4
 8001a90:	438a      	bics	r2, r1
 8001a92:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d014      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a9c:	f7ff f8de 	bl	8000c5c <HAL_GetTick>
 8001aa0:	0003      	movs	r3, r0
 8001aa2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001aa4:	e009      	b.n	8001aba <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aa6:	f7ff f8d9 	bl	8000c5c <HAL_GetTick>
 8001aaa:	0002      	movs	r2, r0
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	4a74      	ldr	r2, [pc, #464]	; (8001c84 <HAL_RCC_OscConfig+0x60c>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e0db      	b.n	8001c72 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001aba:	4b70      	ldr	r3, [pc, #448]	; (8001c7c <HAL_RCC_OscConfig+0x604>)
 8001abc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001abe:	2202      	movs	r2, #2
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	d0f0      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x42e>
 8001ac4:	e013      	b.n	8001aee <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac6:	f7ff f8c9 	bl	8000c5c <HAL_GetTick>
 8001aca:	0003      	movs	r3, r0
 8001acc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ace:	e009      	b.n	8001ae4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ad0:	f7ff f8c4 	bl	8000c5c <HAL_GetTick>
 8001ad4:	0002      	movs	r2, r0
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	4a6a      	ldr	r2, [pc, #424]	; (8001c84 <HAL_RCC_OscConfig+0x60c>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d901      	bls.n	8001ae4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e0c6      	b.n	8001c72 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ae4:	4b65      	ldr	r3, [pc, #404]	; (8001c7c <HAL_RCC_OscConfig+0x604>)
 8001ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ae8:	2202      	movs	r2, #2
 8001aea:	4013      	ands	r3, r2
 8001aec:	d1f0      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001aee:	231f      	movs	r3, #31
 8001af0:	18fb      	adds	r3, r7, r3
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d105      	bne.n	8001b04 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001af8:	4b60      	ldr	r3, [pc, #384]	; (8001c7c <HAL_RCC_OscConfig+0x604>)
 8001afa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001afc:	4b5f      	ldr	r3, [pc, #380]	; (8001c7c <HAL_RCC_OscConfig+0x604>)
 8001afe:	4962      	ldr	r1, [pc, #392]	; (8001c88 <HAL_RCC_OscConfig+0x610>)
 8001b00:	400a      	ands	r2, r1
 8001b02:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	69db      	ldr	r3, [r3, #28]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d100      	bne.n	8001b0e <HAL_RCC_OscConfig+0x496>
 8001b0c:	e0b0      	b.n	8001c70 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b0e:	4b5b      	ldr	r3, [pc, #364]	; (8001c7c <HAL_RCC_OscConfig+0x604>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	2238      	movs	r2, #56	; 0x38
 8001b14:	4013      	ands	r3, r2
 8001b16:	2b10      	cmp	r3, #16
 8001b18:	d100      	bne.n	8001b1c <HAL_RCC_OscConfig+0x4a4>
 8001b1a:	e078      	b.n	8001c0e <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	69db      	ldr	r3, [r3, #28]
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d153      	bne.n	8001bcc <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b24:	4b55      	ldr	r3, [pc, #340]	; (8001c7c <HAL_RCC_OscConfig+0x604>)
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	4b54      	ldr	r3, [pc, #336]	; (8001c7c <HAL_RCC_OscConfig+0x604>)
 8001b2a:	4958      	ldr	r1, [pc, #352]	; (8001c8c <HAL_RCC_OscConfig+0x614>)
 8001b2c:	400a      	ands	r2, r1
 8001b2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b30:	f7ff f894 	bl	8000c5c <HAL_GetTick>
 8001b34:	0003      	movs	r3, r0
 8001b36:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b38:	e008      	b.n	8001b4c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b3a:	f7ff f88f 	bl	8000c5c <HAL_GetTick>
 8001b3e:	0002      	movs	r2, r0
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d901      	bls.n	8001b4c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e092      	b.n	8001c72 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b4c:	4b4b      	ldr	r3, [pc, #300]	; (8001c7c <HAL_RCC_OscConfig+0x604>)
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	2380      	movs	r3, #128	; 0x80
 8001b52:	049b      	lsls	r3, r3, #18
 8001b54:	4013      	ands	r3, r2
 8001b56:	d1f0      	bne.n	8001b3a <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b58:	4b48      	ldr	r3, [pc, #288]	; (8001c7c <HAL_RCC_OscConfig+0x604>)
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	4a4c      	ldr	r2, [pc, #304]	; (8001c90 <HAL_RCC_OscConfig+0x618>)
 8001b5e:	4013      	ands	r3, r2
 8001b60:	0019      	movs	r1, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6a1a      	ldr	r2, [r3, #32]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6a:	431a      	orrs	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b70:	021b      	lsls	r3, r3, #8
 8001b72:	431a      	orrs	r2, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b78:	431a      	orrs	r2, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	431a      	orrs	r2, r3
 8001b80:	4b3e      	ldr	r3, [pc, #248]	; (8001c7c <HAL_RCC_OscConfig+0x604>)
 8001b82:	430a      	orrs	r2, r1
 8001b84:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b86:	4b3d      	ldr	r3, [pc, #244]	; (8001c7c <HAL_RCC_OscConfig+0x604>)
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	4b3c      	ldr	r3, [pc, #240]	; (8001c7c <HAL_RCC_OscConfig+0x604>)
 8001b8c:	2180      	movs	r1, #128	; 0x80
 8001b8e:	0449      	lsls	r1, r1, #17
 8001b90:	430a      	orrs	r2, r1
 8001b92:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001b94:	4b39      	ldr	r3, [pc, #228]	; (8001c7c <HAL_RCC_OscConfig+0x604>)
 8001b96:	68da      	ldr	r2, [r3, #12]
 8001b98:	4b38      	ldr	r3, [pc, #224]	; (8001c7c <HAL_RCC_OscConfig+0x604>)
 8001b9a:	2180      	movs	r1, #128	; 0x80
 8001b9c:	0549      	lsls	r1, r1, #21
 8001b9e:	430a      	orrs	r2, r1
 8001ba0:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba2:	f7ff f85b 	bl	8000c5c <HAL_GetTick>
 8001ba6:	0003      	movs	r3, r0
 8001ba8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001baa:	e008      	b.n	8001bbe <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bac:	f7ff f856 	bl	8000c5c <HAL_GetTick>
 8001bb0:	0002      	movs	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e059      	b.n	8001c72 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bbe:	4b2f      	ldr	r3, [pc, #188]	; (8001c7c <HAL_RCC_OscConfig+0x604>)
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	2380      	movs	r3, #128	; 0x80
 8001bc4:	049b      	lsls	r3, r3, #18
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	d0f0      	beq.n	8001bac <HAL_RCC_OscConfig+0x534>
 8001bca:	e051      	b.n	8001c70 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bcc:	4b2b      	ldr	r3, [pc, #172]	; (8001c7c <HAL_RCC_OscConfig+0x604>)
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	4b2a      	ldr	r3, [pc, #168]	; (8001c7c <HAL_RCC_OscConfig+0x604>)
 8001bd2:	492e      	ldr	r1, [pc, #184]	; (8001c8c <HAL_RCC_OscConfig+0x614>)
 8001bd4:	400a      	ands	r2, r1
 8001bd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd8:	f7ff f840 	bl	8000c5c <HAL_GetTick>
 8001bdc:	0003      	movs	r3, r0
 8001bde:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001be0:	e008      	b.n	8001bf4 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001be2:	f7ff f83b 	bl	8000c5c <HAL_GetTick>
 8001be6:	0002      	movs	r2, r0
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d901      	bls.n	8001bf4 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e03e      	b.n	8001c72 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bf4:	4b21      	ldr	r3, [pc, #132]	; (8001c7c <HAL_RCC_OscConfig+0x604>)
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	2380      	movs	r3, #128	; 0x80
 8001bfa:	049b      	lsls	r3, r3, #18
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	d1f0      	bne.n	8001be2 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001c00:	4b1e      	ldr	r3, [pc, #120]	; (8001c7c <HAL_RCC_OscConfig+0x604>)
 8001c02:	68da      	ldr	r2, [r3, #12]
 8001c04:	4b1d      	ldr	r3, [pc, #116]	; (8001c7c <HAL_RCC_OscConfig+0x604>)
 8001c06:	4923      	ldr	r1, [pc, #140]	; (8001c94 <HAL_RCC_OscConfig+0x61c>)
 8001c08:	400a      	ands	r2, r1
 8001c0a:	60da      	str	r2, [r3, #12]
 8001c0c:	e030      	b.n	8001c70 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	69db      	ldr	r3, [r3, #28]
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d101      	bne.n	8001c1a <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e02b      	b.n	8001c72 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001c1a:	4b18      	ldr	r3, [pc, #96]	; (8001c7c <HAL_RCC_OscConfig+0x604>)
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	2203      	movs	r2, #3
 8001c24:	401a      	ands	r2, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a1b      	ldr	r3, [r3, #32]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d11e      	bne.n	8001c6c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	2270      	movs	r2, #112	; 0x70
 8001c32:	401a      	ands	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d117      	bne.n	8001c6c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c3c:	697a      	ldr	r2, [r7, #20]
 8001c3e:	23fe      	movs	r3, #254	; 0xfe
 8001c40:	01db      	lsls	r3, r3, #7
 8001c42:	401a      	ands	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c48:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d10e      	bne.n	8001c6c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c4e:	697a      	ldr	r2, [r7, #20]
 8001c50:	23f8      	movs	r3, #248	; 0xf8
 8001c52:	039b      	lsls	r3, r3, #14
 8001c54:	401a      	ands	r2, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d106      	bne.n	8001c6c <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	0f5b      	lsrs	r3, r3, #29
 8001c62:	075a      	lsls	r2, r3, #29
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d001      	beq.n	8001c70 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e000      	b.n	8001c72 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	0018      	movs	r0, r3
 8001c74:	46bd      	mov	sp, r7
 8001c76:	b008      	add	sp, #32
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	46c0      	nop			; (mov r8, r8)
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	40007000 	.word	0x40007000
 8001c84:	00001388 	.word	0x00001388
 8001c88:	efffffff 	.word	0xefffffff
 8001c8c:	feffffff 	.word	0xfeffffff
 8001c90:	1fc1808c 	.word	0x1fc1808c
 8001c94:	effefffc 	.word	0xeffefffc

08001c98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d101      	bne.n	8001cac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e0e9      	b.n	8001e80 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cac:	4b76      	ldr	r3, [pc, #472]	; (8001e88 <HAL_RCC_ClockConfig+0x1f0>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2207      	movs	r2, #7
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	683a      	ldr	r2, [r7, #0]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d91e      	bls.n	8001cf8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cba:	4b73      	ldr	r3, [pc, #460]	; (8001e88 <HAL_RCC_ClockConfig+0x1f0>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2207      	movs	r2, #7
 8001cc0:	4393      	bics	r3, r2
 8001cc2:	0019      	movs	r1, r3
 8001cc4:	4b70      	ldr	r3, [pc, #448]	; (8001e88 <HAL_RCC_ClockConfig+0x1f0>)
 8001cc6:	683a      	ldr	r2, [r7, #0]
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ccc:	f7fe ffc6 	bl	8000c5c <HAL_GetTick>
 8001cd0:	0003      	movs	r3, r0
 8001cd2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001cd4:	e009      	b.n	8001cea <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cd6:	f7fe ffc1 	bl	8000c5c <HAL_GetTick>
 8001cda:	0002      	movs	r2, r0
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	4a6a      	ldr	r2, [pc, #424]	; (8001e8c <HAL_RCC_ClockConfig+0x1f4>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e0ca      	b.n	8001e80 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001cea:	4b67      	ldr	r3, [pc, #412]	; (8001e88 <HAL_RCC_ClockConfig+0x1f0>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2207      	movs	r2, #7
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	683a      	ldr	r2, [r7, #0]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d1ee      	bne.n	8001cd6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2202      	movs	r2, #2
 8001cfe:	4013      	ands	r3, r2
 8001d00:	d015      	beq.n	8001d2e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2204      	movs	r2, #4
 8001d08:	4013      	ands	r3, r2
 8001d0a:	d006      	beq.n	8001d1a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001d0c:	4b60      	ldr	r3, [pc, #384]	; (8001e90 <HAL_RCC_ClockConfig+0x1f8>)
 8001d0e:	689a      	ldr	r2, [r3, #8]
 8001d10:	4b5f      	ldr	r3, [pc, #380]	; (8001e90 <HAL_RCC_ClockConfig+0x1f8>)
 8001d12:	21e0      	movs	r1, #224	; 0xe0
 8001d14:	01c9      	lsls	r1, r1, #7
 8001d16:	430a      	orrs	r2, r1
 8001d18:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d1a:	4b5d      	ldr	r3, [pc, #372]	; (8001e90 <HAL_RCC_ClockConfig+0x1f8>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	4a5d      	ldr	r2, [pc, #372]	; (8001e94 <HAL_RCC_ClockConfig+0x1fc>)
 8001d20:	4013      	ands	r3, r2
 8001d22:	0019      	movs	r1, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689a      	ldr	r2, [r3, #8]
 8001d28:	4b59      	ldr	r3, [pc, #356]	; (8001e90 <HAL_RCC_ClockConfig+0x1f8>)
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2201      	movs	r2, #1
 8001d34:	4013      	ands	r3, r2
 8001d36:	d057      	beq.n	8001de8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d107      	bne.n	8001d50 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d40:	4b53      	ldr	r3, [pc, #332]	; (8001e90 <HAL_RCC_ClockConfig+0x1f8>)
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	2380      	movs	r3, #128	; 0x80
 8001d46:	029b      	lsls	r3, r3, #10
 8001d48:	4013      	ands	r3, r2
 8001d4a:	d12b      	bne.n	8001da4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e097      	b.n	8001e80 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d107      	bne.n	8001d68 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d58:	4b4d      	ldr	r3, [pc, #308]	; (8001e90 <HAL_RCC_ClockConfig+0x1f8>)
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	2380      	movs	r3, #128	; 0x80
 8001d5e:	049b      	lsls	r3, r3, #18
 8001d60:	4013      	ands	r3, r2
 8001d62:	d11f      	bne.n	8001da4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e08b      	b.n	8001e80 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d107      	bne.n	8001d80 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d70:	4b47      	ldr	r3, [pc, #284]	; (8001e90 <HAL_RCC_ClockConfig+0x1f8>)
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	2380      	movs	r3, #128	; 0x80
 8001d76:	00db      	lsls	r3, r3, #3
 8001d78:	4013      	ands	r3, r2
 8001d7a:	d113      	bne.n	8001da4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e07f      	b.n	8001e80 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	2b03      	cmp	r3, #3
 8001d86:	d106      	bne.n	8001d96 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d88:	4b41      	ldr	r3, [pc, #260]	; (8001e90 <HAL_RCC_ClockConfig+0x1f8>)
 8001d8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d8c:	2202      	movs	r2, #2
 8001d8e:	4013      	ands	r3, r2
 8001d90:	d108      	bne.n	8001da4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e074      	b.n	8001e80 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d96:	4b3e      	ldr	r3, [pc, #248]	; (8001e90 <HAL_RCC_ClockConfig+0x1f8>)
 8001d98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d9a:	2202      	movs	r2, #2
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	d101      	bne.n	8001da4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e06d      	b.n	8001e80 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001da4:	4b3a      	ldr	r3, [pc, #232]	; (8001e90 <HAL_RCC_ClockConfig+0x1f8>)
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	2207      	movs	r2, #7
 8001daa:	4393      	bics	r3, r2
 8001dac:	0019      	movs	r1, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685a      	ldr	r2, [r3, #4]
 8001db2:	4b37      	ldr	r3, [pc, #220]	; (8001e90 <HAL_RCC_ClockConfig+0x1f8>)
 8001db4:	430a      	orrs	r2, r1
 8001db6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001db8:	f7fe ff50 	bl	8000c5c <HAL_GetTick>
 8001dbc:	0003      	movs	r3, r0
 8001dbe:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dc0:	e009      	b.n	8001dd6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dc2:	f7fe ff4b 	bl	8000c5c <HAL_GetTick>
 8001dc6:	0002      	movs	r2, r0
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	4a2f      	ldr	r2, [pc, #188]	; (8001e8c <HAL_RCC_ClockConfig+0x1f4>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e054      	b.n	8001e80 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dd6:	4b2e      	ldr	r3, [pc, #184]	; (8001e90 <HAL_RCC_ClockConfig+0x1f8>)
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	2238      	movs	r2, #56	; 0x38
 8001ddc:	401a      	ands	r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	00db      	lsls	r3, r3, #3
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d1ec      	bne.n	8001dc2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001de8:	4b27      	ldr	r3, [pc, #156]	; (8001e88 <HAL_RCC_ClockConfig+0x1f0>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2207      	movs	r2, #7
 8001dee:	4013      	ands	r3, r2
 8001df0:	683a      	ldr	r2, [r7, #0]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d21e      	bcs.n	8001e34 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001df6:	4b24      	ldr	r3, [pc, #144]	; (8001e88 <HAL_RCC_ClockConfig+0x1f0>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	2207      	movs	r2, #7
 8001dfc:	4393      	bics	r3, r2
 8001dfe:	0019      	movs	r1, r3
 8001e00:	4b21      	ldr	r3, [pc, #132]	; (8001e88 <HAL_RCC_ClockConfig+0x1f0>)
 8001e02:	683a      	ldr	r2, [r7, #0]
 8001e04:	430a      	orrs	r2, r1
 8001e06:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e08:	f7fe ff28 	bl	8000c5c <HAL_GetTick>
 8001e0c:	0003      	movs	r3, r0
 8001e0e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e10:	e009      	b.n	8001e26 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e12:	f7fe ff23 	bl	8000c5c <HAL_GetTick>
 8001e16:	0002      	movs	r2, r0
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	4a1b      	ldr	r2, [pc, #108]	; (8001e8c <HAL_RCC_ClockConfig+0x1f4>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e02c      	b.n	8001e80 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e26:	4b18      	ldr	r3, [pc, #96]	; (8001e88 <HAL_RCC_ClockConfig+0x1f0>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2207      	movs	r2, #7
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	683a      	ldr	r2, [r7, #0]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d1ee      	bne.n	8001e12 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2204      	movs	r2, #4
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	d009      	beq.n	8001e52 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001e3e:	4b14      	ldr	r3, [pc, #80]	; (8001e90 <HAL_RCC_ClockConfig+0x1f8>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	4a15      	ldr	r2, [pc, #84]	; (8001e98 <HAL_RCC_ClockConfig+0x200>)
 8001e44:	4013      	ands	r3, r2
 8001e46:	0019      	movs	r1, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	68da      	ldr	r2, [r3, #12]
 8001e4c:	4b10      	ldr	r3, [pc, #64]	; (8001e90 <HAL_RCC_ClockConfig+0x1f8>)
 8001e4e:	430a      	orrs	r2, r1
 8001e50:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001e52:	f000 f829 	bl	8001ea8 <HAL_RCC_GetSysClockFreq>
 8001e56:	0001      	movs	r1, r0
 8001e58:	4b0d      	ldr	r3, [pc, #52]	; (8001e90 <HAL_RCC_ClockConfig+0x1f8>)
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	0a1b      	lsrs	r3, r3, #8
 8001e5e:	220f      	movs	r2, #15
 8001e60:	401a      	ands	r2, r3
 8001e62:	4b0e      	ldr	r3, [pc, #56]	; (8001e9c <HAL_RCC_ClockConfig+0x204>)
 8001e64:	0092      	lsls	r2, r2, #2
 8001e66:	58d3      	ldr	r3, [r2, r3]
 8001e68:	221f      	movs	r2, #31
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	000a      	movs	r2, r1
 8001e6e:	40da      	lsrs	r2, r3
 8001e70:	4b0b      	ldr	r3, [pc, #44]	; (8001ea0 <HAL_RCC_ClockConfig+0x208>)
 8001e72:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001e74:	4b0b      	ldr	r3, [pc, #44]	; (8001ea4 <HAL_RCC_ClockConfig+0x20c>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	0018      	movs	r0, r3
 8001e7a:	f7fe fe93 	bl	8000ba4 <HAL_InitTick>
 8001e7e:	0003      	movs	r3, r0
}
 8001e80:	0018      	movs	r0, r3
 8001e82:	46bd      	mov	sp, r7
 8001e84:	b004      	add	sp, #16
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	40022000 	.word	0x40022000
 8001e8c:	00001388 	.word	0x00001388
 8001e90:	40021000 	.word	0x40021000
 8001e94:	fffff0ff 	.word	0xfffff0ff
 8001e98:	ffff8fff 	.word	0xffff8fff
 8001e9c:	08003574 	.word	0x08003574
 8001ea0:	20000004 	.word	0x20000004
 8001ea4:	20000008 	.word	0x20000008

08001ea8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b086      	sub	sp, #24
 8001eac:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001eae:	4b3c      	ldr	r3, [pc, #240]	; (8001fa0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	2238      	movs	r2, #56	; 0x38
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	d10f      	bne.n	8001ed8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001eb8:	4b39      	ldr	r3, [pc, #228]	; (8001fa0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	0adb      	lsrs	r3, r3, #11
 8001ebe:	2207      	movs	r2, #7
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	409a      	lsls	r2, r3
 8001ec6:	0013      	movs	r3, r2
 8001ec8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001eca:	6839      	ldr	r1, [r7, #0]
 8001ecc:	4835      	ldr	r0, [pc, #212]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001ece:	f7fe f917 	bl	8000100 <__udivsi3>
 8001ed2:	0003      	movs	r3, r0
 8001ed4:	613b      	str	r3, [r7, #16]
 8001ed6:	e05d      	b.n	8001f94 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ed8:	4b31      	ldr	r3, [pc, #196]	; (8001fa0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	2238      	movs	r2, #56	; 0x38
 8001ede:	4013      	ands	r3, r2
 8001ee0:	2b08      	cmp	r3, #8
 8001ee2:	d102      	bne.n	8001eea <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ee4:	4b30      	ldr	r3, [pc, #192]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0x100>)
 8001ee6:	613b      	str	r3, [r7, #16]
 8001ee8:	e054      	b.n	8001f94 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001eea:	4b2d      	ldr	r3, [pc, #180]	; (8001fa0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	2238      	movs	r2, #56	; 0x38
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	2b10      	cmp	r3, #16
 8001ef4:	d138      	bne.n	8001f68 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001ef6:	4b2a      	ldr	r3, [pc, #168]	; (8001fa0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	2203      	movs	r2, #3
 8001efc:	4013      	ands	r3, r2
 8001efe:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f00:	4b27      	ldr	r3, [pc, #156]	; (8001fa0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	091b      	lsrs	r3, r3, #4
 8001f06:	2207      	movs	r2, #7
 8001f08:	4013      	ands	r3, r2
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2b03      	cmp	r3, #3
 8001f12:	d10d      	bne.n	8001f30 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f14:	68b9      	ldr	r1, [r7, #8]
 8001f16:	4824      	ldr	r0, [pc, #144]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0x100>)
 8001f18:	f7fe f8f2 	bl	8000100 <__udivsi3>
 8001f1c:	0003      	movs	r3, r0
 8001f1e:	0019      	movs	r1, r3
 8001f20:	4b1f      	ldr	r3, [pc, #124]	; (8001fa0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	0a1b      	lsrs	r3, r3, #8
 8001f26:	227f      	movs	r2, #127	; 0x7f
 8001f28:	4013      	ands	r3, r2
 8001f2a:	434b      	muls	r3, r1
 8001f2c:	617b      	str	r3, [r7, #20]
        break;
 8001f2e:	e00d      	b.n	8001f4c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001f30:	68b9      	ldr	r1, [r7, #8]
 8001f32:	481c      	ldr	r0, [pc, #112]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001f34:	f7fe f8e4 	bl	8000100 <__udivsi3>
 8001f38:	0003      	movs	r3, r0
 8001f3a:	0019      	movs	r1, r3
 8001f3c:	4b18      	ldr	r3, [pc, #96]	; (8001fa0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	0a1b      	lsrs	r3, r3, #8
 8001f42:	227f      	movs	r2, #127	; 0x7f
 8001f44:	4013      	ands	r3, r2
 8001f46:	434b      	muls	r3, r1
 8001f48:	617b      	str	r3, [r7, #20]
        break;
 8001f4a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001f4c:	4b14      	ldr	r3, [pc, #80]	; (8001fa0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	0f5b      	lsrs	r3, r3, #29
 8001f52:	2207      	movs	r2, #7
 8001f54:	4013      	ands	r3, r2
 8001f56:	3301      	adds	r3, #1
 8001f58:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001f5a:	6879      	ldr	r1, [r7, #4]
 8001f5c:	6978      	ldr	r0, [r7, #20]
 8001f5e:	f7fe f8cf 	bl	8000100 <__udivsi3>
 8001f62:	0003      	movs	r3, r0
 8001f64:	613b      	str	r3, [r7, #16]
 8001f66:	e015      	b.n	8001f94 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001f68:	4b0d      	ldr	r3, [pc, #52]	; (8001fa0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	2238      	movs	r2, #56	; 0x38
 8001f6e:	4013      	ands	r3, r2
 8001f70:	2b20      	cmp	r3, #32
 8001f72:	d103      	bne.n	8001f7c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001f74:	2380      	movs	r3, #128	; 0x80
 8001f76:	021b      	lsls	r3, r3, #8
 8001f78:	613b      	str	r3, [r7, #16]
 8001f7a:	e00b      	b.n	8001f94 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001f7c:	4b08      	ldr	r3, [pc, #32]	; (8001fa0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	2238      	movs	r2, #56	; 0x38
 8001f82:	4013      	ands	r3, r2
 8001f84:	2b18      	cmp	r3, #24
 8001f86:	d103      	bne.n	8001f90 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001f88:	23fa      	movs	r3, #250	; 0xfa
 8001f8a:	01db      	lsls	r3, r3, #7
 8001f8c:	613b      	str	r3, [r7, #16]
 8001f8e:	e001      	b.n	8001f94 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001f90:	2300      	movs	r3, #0
 8001f92:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001f94:	693b      	ldr	r3, [r7, #16]
}
 8001f96:	0018      	movs	r0, r3
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	b006      	add	sp, #24
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	46c0      	nop			; (mov r8, r8)
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	00f42400 	.word	0x00f42400
 8001fa8:	007a1200 	.word	0x007a1200

08001fac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fb0:	4b02      	ldr	r3, [pc, #8]	; (8001fbc <HAL_RCC_GetHCLKFreq+0x10>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
}
 8001fb4:	0018      	movs	r0, r3
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	46c0      	nop			; (mov r8, r8)
 8001fbc:	20000004 	.word	0x20000004

08001fc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fc0:	b5b0      	push	{r4, r5, r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001fc4:	f7ff fff2 	bl	8001fac <HAL_RCC_GetHCLKFreq>
 8001fc8:	0004      	movs	r4, r0
 8001fca:	f7ff fb49 	bl	8001660 <LL_RCC_GetAPB1Prescaler>
 8001fce:	0003      	movs	r3, r0
 8001fd0:	0b1a      	lsrs	r2, r3, #12
 8001fd2:	4b05      	ldr	r3, [pc, #20]	; (8001fe8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001fd4:	0092      	lsls	r2, r2, #2
 8001fd6:	58d3      	ldr	r3, [r2, r3]
 8001fd8:	221f      	movs	r2, #31
 8001fda:	4013      	ands	r3, r2
 8001fdc:	40dc      	lsrs	r4, r3
 8001fde:	0023      	movs	r3, r4
}
 8001fe0:	0018      	movs	r0, r3
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bdb0      	pop	{r4, r5, r7, pc}
 8001fe6:	46c0      	nop			; (mov r8, r8)
 8001fe8:	080035b4 	.word	0x080035b4

08001fec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b086      	sub	sp, #24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001ff4:	2313      	movs	r3, #19
 8001ff6:	18fb      	adds	r3, r7, r3
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001ffc:	2312      	movs	r3, #18
 8001ffe:	18fb      	adds	r3, r7, r3
 8002000:	2200      	movs	r2, #0
 8002002:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	2380      	movs	r3, #128	; 0x80
 800200a:	029b      	lsls	r3, r3, #10
 800200c:	4013      	ands	r3, r2
 800200e:	d100      	bne.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002010:	e0a3      	b.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002012:	2011      	movs	r0, #17
 8002014:	183b      	adds	r3, r7, r0
 8002016:	2200      	movs	r2, #0
 8002018:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800201a:	4b86      	ldr	r3, [pc, #536]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800201c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800201e:	2380      	movs	r3, #128	; 0x80
 8002020:	055b      	lsls	r3, r3, #21
 8002022:	4013      	ands	r3, r2
 8002024:	d110      	bne.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002026:	4b83      	ldr	r3, [pc, #524]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002028:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800202a:	4b82      	ldr	r3, [pc, #520]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800202c:	2180      	movs	r1, #128	; 0x80
 800202e:	0549      	lsls	r1, r1, #21
 8002030:	430a      	orrs	r2, r1
 8002032:	63da      	str	r2, [r3, #60]	; 0x3c
 8002034:	4b7f      	ldr	r3, [pc, #508]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002036:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002038:	2380      	movs	r3, #128	; 0x80
 800203a:	055b      	lsls	r3, r3, #21
 800203c:	4013      	ands	r3, r2
 800203e:	60bb      	str	r3, [r7, #8]
 8002040:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002042:	183b      	adds	r3, r7, r0
 8002044:	2201      	movs	r2, #1
 8002046:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002048:	4b7b      	ldr	r3, [pc, #492]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	4b7a      	ldr	r3, [pc, #488]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800204e:	2180      	movs	r1, #128	; 0x80
 8002050:	0049      	lsls	r1, r1, #1
 8002052:	430a      	orrs	r2, r1
 8002054:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002056:	f7fe fe01 	bl	8000c5c <HAL_GetTick>
 800205a:	0003      	movs	r3, r0
 800205c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800205e:	e00b      	b.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002060:	f7fe fdfc 	bl	8000c5c <HAL_GetTick>
 8002064:	0002      	movs	r2, r0
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b02      	cmp	r3, #2
 800206c:	d904      	bls.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800206e:	2313      	movs	r3, #19
 8002070:	18fb      	adds	r3, r7, r3
 8002072:	2203      	movs	r2, #3
 8002074:	701a      	strb	r2, [r3, #0]
        break;
 8002076:	e005      	b.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002078:	4b6f      	ldr	r3, [pc, #444]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	2380      	movs	r3, #128	; 0x80
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	4013      	ands	r3, r2
 8002082:	d0ed      	beq.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002084:	2313      	movs	r3, #19
 8002086:	18fb      	adds	r3, r7, r3
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d154      	bne.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800208e:	4b69      	ldr	r3, [pc, #420]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002090:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002092:	23c0      	movs	r3, #192	; 0xc0
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4013      	ands	r3, r2
 8002098:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d019      	beq.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	699b      	ldr	r3, [r3, #24]
 80020a4:	697a      	ldr	r2, [r7, #20]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d014      	beq.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80020aa:	4b62      	ldr	r3, [pc, #392]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80020ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ae:	4a63      	ldr	r2, [pc, #396]	; (800223c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80020b0:	4013      	ands	r3, r2
 80020b2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80020b4:	4b5f      	ldr	r3, [pc, #380]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80020b6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80020b8:	4b5e      	ldr	r3, [pc, #376]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80020ba:	2180      	movs	r1, #128	; 0x80
 80020bc:	0249      	lsls	r1, r1, #9
 80020be:	430a      	orrs	r2, r1
 80020c0:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80020c2:	4b5c      	ldr	r3, [pc, #368]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80020c4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80020c6:	4b5b      	ldr	r3, [pc, #364]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80020c8:	495d      	ldr	r1, [pc, #372]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80020ca:	400a      	ands	r2, r1
 80020cc:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80020ce:	4b59      	ldr	r3, [pc, #356]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80020d0:	697a      	ldr	r2, [r7, #20]
 80020d2:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	2201      	movs	r2, #1
 80020d8:	4013      	ands	r3, r2
 80020da:	d016      	beq.n	800210a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020dc:	f7fe fdbe 	bl	8000c5c <HAL_GetTick>
 80020e0:	0003      	movs	r3, r0
 80020e2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020e4:	e00c      	b.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020e6:	f7fe fdb9 	bl	8000c5c <HAL_GetTick>
 80020ea:	0002      	movs	r2, r0
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	4a54      	ldr	r2, [pc, #336]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d904      	bls.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80020f6:	2313      	movs	r3, #19
 80020f8:	18fb      	adds	r3, r7, r3
 80020fa:	2203      	movs	r2, #3
 80020fc:	701a      	strb	r2, [r3, #0]
            break;
 80020fe:	e004      	b.n	800210a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002100:	4b4c      	ldr	r3, [pc, #304]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002104:	2202      	movs	r2, #2
 8002106:	4013      	ands	r3, r2
 8002108:	d0ed      	beq.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800210a:	2313      	movs	r3, #19
 800210c:	18fb      	adds	r3, r7, r3
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d10a      	bne.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002114:	4b47      	ldr	r3, [pc, #284]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002116:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002118:	4a48      	ldr	r2, [pc, #288]	; (800223c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800211a:	4013      	ands	r3, r2
 800211c:	0019      	movs	r1, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	699a      	ldr	r2, [r3, #24]
 8002122:	4b44      	ldr	r3, [pc, #272]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002124:	430a      	orrs	r2, r1
 8002126:	65da      	str	r2, [r3, #92]	; 0x5c
 8002128:	e00c      	b.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800212a:	2312      	movs	r3, #18
 800212c:	18fb      	adds	r3, r7, r3
 800212e:	2213      	movs	r2, #19
 8002130:	18ba      	adds	r2, r7, r2
 8002132:	7812      	ldrb	r2, [r2, #0]
 8002134:	701a      	strb	r2, [r3, #0]
 8002136:	e005      	b.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002138:	2312      	movs	r3, #18
 800213a:	18fb      	adds	r3, r7, r3
 800213c:	2213      	movs	r2, #19
 800213e:	18ba      	adds	r2, r7, r2
 8002140:	7812      	ldrb	r2, [r2, #0]
 8002142:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002144:	2311      	movs	r3, #17
 8002146:	18fb      	adds	r3, r7, r3
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d105      	bne.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800214e:	4b39      	ldr	r3, [pc, #228]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002150:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002152:	4b38      	ldr	r3, [pc, #224]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002154:	493c      	ldr	r1, [pc, #240]	; (8002248 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002156:	400a      	ands	r2, r1
 8002158:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	2201      	movs	r2, #1
 8002160:	4013      	ands	r3, r2
 8002162:	d009      	beq.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002164:	4b33      	ldr	r3, [pc, #204]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002168:	2203      	movs	r2, #3
 800216a:	4393      	bics	r3, r2
 800216c:	0019      	movs	r1, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685a      	ldr	r2, [r3, #4]
 8002172:	4b30      	ldr	r3, [pc, #192]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002174:	430a      	orrs	r2, r1
 8002176:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2202      	movs	r2, #2
 800217e:	4013      	ands	r3, r2
 8002180:	d009      	beq.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002182:	4b2c      	ldr	r3, [pc, #176]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002186:	220c      	movs	r2, #12
 8002188:	4393      	bics	r3, r2
 800218a:	0019      	movs	r1, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689a      	ldr	r2, [r3, #8]
 8002190:	4b28      	ldr	r3, [pc, #160]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002192:	430a      	orrs	r2, r1
 8002194:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2220      	movs	r2, #32
 800219c:	4013      	ands	r3, r2
 800219e:	d009      	beq.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021a0:	4b24      	ldr	r3, [pc, #144]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80021a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021a4:	4a29      	ldr	r2, [pc, #164]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021a6:	4013      	ands	r3, r2
 80021a8:	0019      	movs	r1, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	68da      	ldr	r2, [r3, #12]
 80021ae:	4b21      	ldr	r3, [pc, #132]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80021b0:	430a      	orrs	r2, r1
 80021b2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	2380      	movs	r3, #128	; 0x80
 80021ba:	01db      	lsls	r3, r3, #7
 80021bc:	4013      	ands	r3, r2
 80021be:	d015      	beq.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80021c0:	4b1c      	ldr	r3, [pc, #112]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80021c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	0899      	lsrs	r1, r3, #2
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	695a      	ldr	r2, [r3, #20]
 80021cc:	4b19      	ldr	r3, [pc, #100]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80021ce:	430a      	orrs	r2, r1
 80021d0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	695a      	ldr	r2, [r3, #20]
 80021d6:	2380      	movs	r3, #128	; 0x80
 80021d8:	05db      	lsls	r3, r3, #23
 80021da:	429a      	cmp	r2, r3
 80021dc:	d106      	bne.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80021de:	4b15      	ldr	r3, [pc, #84]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80021e0:	68da      	ldr	r2, [r3, #12]
 80021e2:	4b14      	ldr	r3, [pc, #80]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80021e4:	2180      	movs	r1, #128	; 0x80
 80021e6:	0249      	lsls	r1, r1, #9
 80021e8:	430a      	orrs	r2, r1
 80021ea:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	2380      	movs	r3, #128	; 0x80
 80021f2:	011b      	lsls	r3, r3, #4
 80021f4:	4013      	ands	r3, r2
 80021f6:	d016      	beq.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80021f8:	4b0e      	ldr	r3, [pc, #56]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80021fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021fc:	4a14      	ldr	r2, [pc, #80]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80021fe:	4013      	ands	r3, r2
 8002200:	0019      	movs	r1, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	691a      	ldr	r2, [r3, #16]
 8002206:	4b0b      	ldr	r3, [pc, #44]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002208:	430a      	orrs	r2, r1
 800220a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	691a      	ldr	r2, [r3, #16]
 8002210:	2380      	movs	r3, #128	; 0x80
 8002212:	01db      	lsls	r3, r3, #7
 8002214:	429a      	cmp	r2, r3
 8002216:	d106      	bne.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002218:	4b06      	ldr	r3, [pc, #24]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800221a:	68da      	ldr	r2, [r3, #12]
 800221c:	4b05      	ldr	r3, [pc, #20]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800221e:	2180      	movs	r1, #128	; 0x80
 8002220:	0249      	lsls	r1, r1, #9
 8002222:	430a      	orrs	r2, r1
 8002224:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002226:	2312      	movs	r3, #18
 8002228:	18fb      	adds	r3, r7, r3
 800222a:	781b      	ldrb	r3, [r3, #0]
}
 800222c:	0018      	movs	r0, r3
 800222e:	46bd      	mov	sp, r7
 8002230:	b006      	add	sp, #24
 8002232:	bd80      	pop	{r7, pc}
 8002234:	40021000 	.word	0x40021000
 8002238:	40007000 	.word	0x40007000
 800223c:	fffffcff 	.word	0xfffffcff
 8002240:	fffeffff 	.word	0xfffeffff
 8002244:	00001388 	.word	0x00001388
 8002248:	efffffff 	.word	0xefffffff
 800224c:	ffffcfff 	.word	0xffffcfff
 8002250:	ffff3fff 	.word	0xffff3fff

08002254 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d101      	bne.n	8002266 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e046      	b.n	80022f4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2288      	movs	r2, #136	; 0x88
 800226a:	589b      	ldr	r3, [r3, r2]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d107      	bne.n	8002280 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2284      	movs	r2, #132	; 0x84
 8002274:	2100      	movs	r1, #0
 8002276:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	0018      	movs	r0, r3
 800227c:	f7fe fb54 	bl	8000928 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2288      	movs	r2, #136	; 0x88
 8002284:	2124      	movs	r1, #36	; 0x24
 8002286:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2101      	movs	r1, #1
 8002294:	438a      	bics	r2, r1
 8002296:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	0018      	movs	r0, r3
 800229c:	f000 f8e4 	bl	8002468 <UART_SetConfig>
 80022a0:	0003      	movs	r3, r0
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d101      	bne.n	80022aa <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e024      	b.n	80022f4 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d003      	beq.n	80022ba <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	0018      	movs	r0, r3
 80022b6:	f000 fa7b 	bl	80027b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	685a      	ldr	r2, [r3, #4]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	490d      	ldr	r1, [pc, #52]	; (80022fc <HAL_UART_Init+0xa8>)
 80022c6:	400a      	ands	r2, r1
 80022c8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	689a      	ldr	r2, [r3, #8]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	212a      	movs	r1, #42	; 0x2a
 80022d6:	438a      	bics	r2, r1
 80022d8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2101      	movs	r1, #1
 80022e6:	430a      	orrs	r2, r1
 80022e8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	0018      	movs	r0, r3
 80022ee:	f000 fb13 	bl	8002918 <UART_CheckIdleState>
 80022f2:	0003      	movs	r3, r0
}
 80022f4:	0018      	movs	r0, r3
 80022f6:	46bd      	mov	sp, r7
 80022f8:	b002      	add	sp, #8
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	ffffb7ff 	.word	0xffffb7ff

08002300 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b08a      	sub	sp, #40	; 0x28
 8002304:	af02      	add	r7, sp, #8
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	60b9      	str	r1, [r7, #8]
 800230a:	603b      	str	r3, [r7, #0]
 800230c:	1dbb      	adds	r3, r7, #6
 800230e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2288      	movs	r2, #136	; 0x88
 8002314:	589b      	ldr	r3, [r3, r2]
 8002316:	2b20      	cmp	r3, #32
 8002318:	d000      	beq.n	800231c <HAL_UART_Transmit+0x1c>
 800231a:	e088      	b.n	800242e <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d003      	beq.n	800232a <HAL_UART_Transmit+0x2a>
 8002322:	1dbb      	adds	r3, r7, #6
 8002324:	881b      	ldrh	r3, [r3, #0]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e080      	b.n	8002430 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	689a      	ldr	r2, [r3, #8]
 8002332:	2380      	movs	r3, #128	; 0x80
 8002334:	015b      	lsls	r3, r3, #5
 8002336:	429a      	cmp	r2, r3
 8002338:	d109      	bne.n	800234e <HAL_UART_Transmit+0x4e>
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d105      	bne.n	800234e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	2201      	movs	r2, #1
 8002346:	4013      	ands	r3, r2
 8002348:	d001      	beq.n	800234e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e070      	b.n	8002430 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2290      	movs	r2, #144	; 0x90
 8002352:	2100      	movs	r1, #0
 8002354:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2288      	movs	r2, #136	; 0x88
 800235a:	2121      	movs	r1, #33	; 0x21
 800235c:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800235e:	f7fe fc7d 	bl	8000c5c <HAL_GetTick>
 8002362:	0003      	movs	r3, r0
 8002364:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	1dba      	adds	r2, r7, #6
 800236a:	2154      	movs	r1, #84	; 0x54
 800236c:	8812      	ldrh	r2, [r2, #0]
 800236e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	1dba      	adds	r2, r7, #6
 8002374:	2156      	movs	r1, #86	; 0x56
 8002376:	8812      	ldrh	r2, [r2, #0]
 8002378:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	689a      	ldr	r2, [r3, #8]
 800237e:	2380      	movs	r3, #128	; 0x80
 8002380:	015b      	lsls	r3, r3, #5
 8002382:	429a      	cmp	r2, r3
 8002384:	d108      	bne.n	8002398 <HAL_UART_Transmit+0x98>
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	691b      	ldr	r3, [r3, #16]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d104      	bne.n	8002398 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800238e:	2300      	movs	r3, #0
 8002390:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	61bb      	str	r3, [r7, #24]
 8002396:	e003      	b.n	80023a0 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800239c:	2300      	movs	r3, #0
 800239e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80023a0:	e02c      	b.n	80023fc <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023a2:	697a      	ldr	r2, [r7, #20]
 80023a4:	68f8      	ldr	r0, [r7, #12]
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	9300      	str	r3, [sp, #0]
 80023aa:	0013      	movs	r3, r2
 80023ac:	2200      	movs	r2, #0
 80023ae:	2180      	movs	r1, #128	; 0x80
 80023b0:	f000 fb00 	bl	80029b4 <UART_WaitOnFlagUntilTimeout>
 80023b4:	1e03      	subs	r3, r0, #0
 80023b6:	d001      	beq.n	80023bc <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e039      	b.n	8002430 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d10b      	bne.n	80023da <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	881b      	ldrh	r3, [r3, #0]
 80023c6:	001a      	movs	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	05d2      	lsls	r2, r2, #23
 80023ce:	0dd2      	lsrs	r2, r2, #23
 80023d0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	3302      	adds	r3, #2
 80023d6:	61bb      	str	r3, [r7, #24]
 80023d8:	e007      	b.n	80023ea <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	781a      	ldrb	r2, [r3, #0]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	3301      	adds	r3, #1
 80023e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2256      	movs	r2, #86	; 0x56
 80023ee:	5a9b      	ldrh	r3, [r3, r2]
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	3b01      	subs	r3, #1
 80023f4:	b299      	uxth	r1, r3
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2256      	movs	r2, #86	; 0x56
 80023fa:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2256      	movs	r2, #86	; 0x56
 8002400:	5a9b      	ldrh	r3, [r3, r2]
 8002402:	b29b      	uxth	r3, r3
 8002404:	2b00      	cmp	r3, #0
 8002406:	d1cc      	bne.n	80023a2 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002408:	697a      	ldr	r2, [r7, #20]
 800240a:	68f8      	ldr	r0, [r7, #12]
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	9300      	str	r3, [sp, #0]
 8002410:	0013      	movs	r3, r2
 8002412:	2200      	movs	r2, #0
 8002414:	2140      	movs	r1, #64	; 0x40
 8002416:	f000 facd 	bl	80029b4 <UART_WaitOnFlagUntilTimeout>
 800241a:	1e03      	subs	r3, r0, #0
 800241c:	d001      	beq.n	8002422 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e006      	b.n	8002430 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2288      	movs	r2, #136	; 0x88
 8002426:	2120      	movs	r1, #32
 8002428:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800242a:	2300      	movs	r3, #0
 800242c:	e000      	b.n	8002430 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 800242e:	2302      	movs	r3, #2
  }
}
 8002430:	0018      	movs	r0, r3
 8002432:	46bd      	mov	sp, r7
 8002434:	b008      	add	sp, #32
 8002436:	bd80      	pop	{r7, pc}

08002438 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8002440:	46c0      	nop			; (mov r8, r8)
 8002442:	46bd      	mov	sp, r7
 8002444:	b002      	add	sp, #8
 8002446:	bd80      	pop	{r7, pc}

08002448 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8002450:	46c0      	nop			; (mov r8, r8)
 8002452:	46bd      	mov	sp, r7
 8002454:	b002      	add	sp, #8
 8002456:	bd80      	pop	{r7, pc}

08002458 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002460:	46c0      	nop			; (mov r8, r8)
 8002462:	46bd      	mov	sp, r7
 8002464:	b002      	add	sp, #8
 8002466:	bd80      	pop	{r7, pc}

08002468 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b088      	sub	sp, #32
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002470:	231a      	movs	r3, #26
 8002472:	18fb      	adds	r3, r7, r3
 8002474:	2200      	movs	r2, #0
 8002476:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	689a      	ldr	r2, [r3, #8]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	691b      	ldr	r3, [r3, #16]
 8002480:	431a      	orrs	r2, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	695b      	ldr	r3, [r3, #20]
 8002486:	431a      	orrs	r2, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	69db      	ldr	r3, [r3, #28]
 800248c:	4313      	orrs	r3, r2
 800248e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4abc      	ldr	r2, [pc, #752]	; (8002788 <UART_SetConfig+0x320>)
 8002498:	4013      	ands	r3, r2
 800249a:	0019      	movs	r1, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	69fa      	ldr	r2, [r7, #28]
 80024a2:	430a      	orrs	r2, r1
 80024a4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	4ab7      	ldr	r2, [pc, #732]	; (800278c <UART_SetConfig+0x324>)
 80024ae:	4013      	ands	r3, r2
 80024b0:	0019      	movs	r1, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	68da      	ldr	r2, [r3, #12]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	430a      	orrs	r2, r1
 80024bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	699b      	ldr	r3, [r3, #24]
 80024c2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6a1b      	ldr	r3, [r3, #32]
 80024c8:	69fa      	ldr	r2, [r7, #28]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	4aae      	ldr	r2, [pc, #696]	; (8002790 <UART_SetConfig+0x328>)
 80024d6:	4013      	ands	r3, r2
 80024d8:	0019      	movs	r1, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	69fa      	ldr	r2, [r7, #28]
 80024e0:	430a      	orrs	r2, r1
 80024e2:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ea:	220f      	movs	r2, #15
 80024ec:	4393      	bics	r3, r2
 80024ee:	0019      	movs	r1, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	430a      	orrs	r2, r1
 80024fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4aa4      	ldr	r2, [pc, #656]	; (8002794 <UART_SetConfig+0x32c>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d127      	bne.n	8002556 <UART_SetConfig+0xee>
 8002506:	4ba4      	ldr	r3, [pc, #656]	; (8002798 <UART_SetConfig+0x330>)
 8002508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800250a:	2203      	movs	r2, #3
 800250c:	4013      	ands	r3, r2
 800250e:	2b03      	cmp	r3, #3
 8002510:	d017      	beq.n	8002542 <UART_SetConfig+0xda>
 8002512:	d81b      	bhi.n	800254c <UART_SetConfig+0xe4>
 8002514:	2b02      	cmp	r3, #2
 8002516:	d00a      	beq.n	800252e <UART_SetConfig+0xc6>
 8002518:	d818      	bhi.n	800254c <UART_SetConfig+0xe4>
 800251a:	2b00      	cmp	r3, #0
 800251c:	d002      	beq.n	8002524 <UART_SetConfig+0xbc>
 800251e:	2b01      	cmp	r3, #1
 8002520:	d00a      	beq.n	8002538 <UART_SetConfig+0xd0>
 8002522:	e013      	b.n	800254c <UART_SetConfig+0xe4>
 8002524:	231b      	movs	r3, #27
 8002526:	18fb      	adds	r3, r7, r3
 8002528:	2200      	movs	r2, #0
 800252a:	701a      	strb	r2, [r3, #0]
 800252c:	e058      	b.n	80025e0 <UART_SetConfig+0x178>
 800252e:	231b      	movs	r3, #27
 8002530:	18fb      	adds	r3, r7, r3
 8002532:	2202      	movs	r2, #2
 8002534:	701a      	strb	r2, [r3, #0]
 8002536:	e053      	b.n	80025e0 <UART_SetConfig+0x178>
 8002538:	231b      	movs	r3, #27
 800253a:	18fb      	adds	r3, r7, r3
 800253c:	2204      	movs	r2, #4
 800253e:	701a      	strb	r2, [r3, #0]
 8002540:	e04e      	b.n	80025e0 <UART_SetConfig+0x178>
 8002542:	231b      	movs	r3, #27
 8002544:	18fb      	adds	r3, r7, r3
 8002546:	2208      	movs	r2, #8
 8002548:	701a      	strb	r2, [r3, #0]
 800254a:	e049      	b.n	80025e0 <UART_SetConfig+0x178>
 800254c:	231b      	movs	r3, #27
 800254e:	18fb      	adds	r3, r7, r3
 8002550:	2210      	movs	r2, #16
 8002552:	701a      	strb	r2, [r3, #0]
 8002554:	e044      	b.n	80025e0 <UART_SetConfig+0x178>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a90      	ldr	r2, [pc, #576]	; (800279c <UART_SetConfig+0x334>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d127      	bne.n	80025b0 <UART_SetConfig+0x148>
 8002560:	4b8d      	ldr	r3, [pc, #564]	; (8002798 <UART_SetConfig+0x330>)
 8002562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002564:	220c      	movs	r2, #12
 8002566:	4013      	ands	r3, r2
 8002568:	2b0c      	cmp	r3, #12
 800256a:	d017      	beq.n	800259c <UART_SetConfig+0x134>
 800256c:	d81b      	bhi.n	80025a6 <UART_SetConfig+0x13e>
 800256e:	2b08      	cmp	r3, #8
 8002570:	d00a      	beq.n	8002588 <UART_SetConfig+0x120>
 8002572:	d818      	bhi.n	80025a6 <UART_SetConfig+0x13e>
 8002574:	2b00      	cmp	r3, #0
 8002576:	d002      	beq.n	800257e <UART_SetConfig+0x116>
 8002578:	2b04      	cmp	r3, #4
 800257a:	d00a      	beq.n	8002592 <UART_SetConfig+0x12a>
 800257c:	e013      	b.n	80025a6 <UART_SetConfig+0x13e>
 800257e:	231b      	movs	r3, #27
 8002580:	18fb      	adds	r3, r7, r3
 8002582:	2200      	movs	r2, #0
 8002584:	701a      	strb	r2, [r3, #0]
 8002586:	e02b      	b.n	80025e0 <UART_SetConfig+0x178>
 8002588:	231b      	movs	r3, #27
 800258a:	18fb      	adds	r3, r7, r3
 800258c:	2202      	movs	r2, #2
 800258e:	701a      	strb	r2, [r3, #0]
 8002590:	e026      	b.n	80025e0 <UART_SetConfig+0x178>
 8002592:	231b      	movs	r3, #27
 8002594:	18fb      	adds	r3, r7, r3
 8002596:	2204      	movs	r2, #4
 8002598:	701a      	strb	r2, [r3, #0]
 800259a:	e021      	b.n	80025e0 <UART_SetConfig+0x178>
 800259c:	231b      	movs	r3, #27
 800259e:	18fb      	adds	r3, r7, r3
 80025a0:	2208      	movs	r2, #8
 80025a2:	701a      	strb	r2, [r3, #0]
 80025a4:	e01c      	b.n	80025e0 <UART_SetConfig+0x178>
 80025a6:	231b      	movs	r3, #27
 80025a8:	18fb      	adds	r3, r7, r3
 80025aa:	2210      	movs	r2, #16
 80025ac:	701a      	strb	r2, [r3, #0]
 80025ae:	e017      	b.n	80025e0 <UART_SetConfig+0x178>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a7a      	ldr	r2, [pc, #488]	; (80027a0 <UART_SetConfig+0x338>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d104      	bne.n	80025c4 <UART_SetConfig+0x15c>
 80025ba:	231b      	movs	r3, #27
 80025bc:	18fb      	adds	r3, r7, r3
 80025be:	2200      	movs	r2, #0
 80025c0:	701a      	strb	r2, [r3, #0]
 80025c2:	e00d      	b.n	80025e0 <UART_SetConfig+0x178>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a76      	ldr	r2, [pc, #472]	; (80027a4 <UART_SetConfig+0x33c>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d104      	bne.n	80025d8 <UART_SetConfig+0x170>
 80025ce:	231b      	movs	r3, #27
 80025d0:	18fb      	adds	r3, r7, r3
 80025d2:	2200      	movs	r2, #0
 80025d4:	701a      	strb	r2, [r3, #0]
 80025d6:	e003      	b.n	80025e0 <UART_SetConfig+0x178>
 80025d8:	231b      	movs	r3, #27
 80025da:	18fb      	adds	r3, r7, r3
 80025dc:	2210      	movs	r2, #16
 80025de:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	69da      	ldr	r2, [r3, #28]
 80025e4:	2380      	movs	r3, #128	; 0x80
 80025e6:	021b      	lsls	r3, r3, #8
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d000      	beq.n	80025ee <UART_SetConfig+0x186>
 80025ec:	e065      	b.n	80026ba <UART_SetConfig+0x252>
  {
    switch (clocksource)
 80025ee:	231b      	movs	r3, #27
 80025f0:	18fb      	adds	r3, r7, r3
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	2b08      	cmp	r3, #8
 80025f6:	d015      	beq.n	8002624 <UART_SetConfig+0x1bc>
 80025f8:	dc18      	bgt.n	800262c <UART_SetConfig+0x1c4>
 80025fa:	2b04      	cmp	r3, #4
 80025fc:	d00d      	beq.n	800261a <UART_SetConfig+0x1b2>
 80025fe:	dc15      	bgt.n	800262c <UART_SetConfig+0x1c4>
 8002600:	2b00      	cmp	r3, #0
 8002602:	d002      	beq.n	800260a <UART_SetConfig+0x1a2>
 8002604:	2b02      	cmp	r3, #2
 8002606:	d005      	beq.n	8002614 <UART_SetConfig+0x1ac>
 8002608:	e010      	b.n	800262c <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800260a:	f7ff fcd9 	bl	8001fc0 <HAL_RCC_GetPCLK1Freq>
 800260e:	0003      	movs	r3, r0
 8002610:	617b      	str	r3, [r7, #20]
        break;
 8002612:	e012      	b.n	800263a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002614:	4b64      	ldr	r3, [pc, #400]	; (80027a8 <UART_SetConfig+0x340>)
 8002616:	617b      	str	r3, [r7, #20]
        break;
 8002618:	e00f      	b.n	800263a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800261a:	f7ff fc45 	bl	8001ea8 <HAL_RCC_GetSysClockFreq>
 800261e:	0003      	movs	r3, r0
 8002620:	617b      	str	r3, [r7, #20]
        break;
 8002622:	e00a      	b.n	800263a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002624:	2380      	movs	r3, #128	; 0x80
 8002626:	021b      	lsls	r3, r3, #8
 8002628:	617b      	str	r3, [r7, #20]
        break;
 800262a:	e006      	b.n	800263a <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 800262c:	2300      	movs	r3, #0
 800262e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002630:	231a      	movs	r3, #26
 8002632:	18fb      	adds	r3, r7, r3
 8002634:	2201      	movs	r2, #1
 8002636:	701a      	strb	r2, [r3, #0]
        break;
 8002638:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d100      	bne.n	8002642 <UART_SetConfig+0x1da>
 8002640:	e08d      	b.n	800275e <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002646:	4b59      	ldr	r3, [pc, #356]	; (80027ac <UART_SetConfig+0x344>)
 8002648:	0052      	lsls	r2, r2, #1
 800264a:	5ad3      	ldrh	r3, [r2, r3]
 800264c:	0019      	movs	r1, r3
 800264e:	6978      	ldr	r0, [r7, #20]
 8002650:	f7fd fd56 	bl	8000100 <__udivsi3>
 8002654:	0003      	movs	r3, r0
 8002656:	005a      	lsls	r2, r3, #1
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	085b      	lsrs	r3, r3, #1
 800265e:	18d2      	adds	r2, r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	0019      	movs	r1, r3
 8002666:	0010      	movs	r0, r2
 8002668:	f7fd fd4a 	bl	8000100 <__udivsi3>
 800266c:	0003      	movs	r3, r0
 800266e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	2b0f      	cmp	r3, #15
 8002674:	d91c      	bls.n	80026b0 <UART_SetConfig+0x248>
 8002676:	693a      	ldr	r2, [r7, #16]
 8002678:	2380      	movs	r3, #128	; 0x80
 800267a:	025b      	lsls	r3, r3, #9
 800267c:	429a      	cmp	r2, r3
 800267e:	d217      	bcs.n	80026b0 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	b29a      	uxth	r2, r3
 8002684:	200e      	movs	r0, #14
 8002686:	183b      	adds	r3, r7, r0
 8002688:	210f      	movs	r1, #15
 800268a:	438a      	bics	r2, r1
 800268c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	085b      	lsrs	r3, r3, #1
 8002692:	b29b      	uxth	r3, r3
 8002694:	2207      	movs	r2, #7
 8002696:	4013      	ands	r3, r2
 8002698:	b299      	uxth	r1, r3
 800269a:	183b      	adds	r3, r7, r0
 800269c:	183a      	adds	r2, r7, r0
 800269e:	8812      	ldrh	r2, [r2, #0]
 80026a0:	430a      	orrs	r2, r1
 80026a2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	183a      	adds	r2, r7, r0
 80026aa:	8812      	ldrh	r2, [r2, #0]
 80026ac:	60da      	str	r2, [r3, #12]
 80026ae:	e056      	b.n	800275e <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 80026b0:	231a      	movs	r3, #26
 80026b2:	18fb      	adds	r3, r7, r3
 80026b4:	2201      	movs	r2, #1
 80026b6:	701a      	strb	r2, [r3, #0]
 80026b8:	e051      	b.n	800275e <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80026ba:	231b      	movs	r3, #27
 80026bc:	18fb      	adds	r3, r7, r3
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	2b08      	cmp	r3, #8
 80026c2:	d015      	beq.n	80026f0 <UART_SetConfig+0x288>
 80026c4:	dc18      	bgt.n	80026f8 <UART_SetConfig+0x290>
 80026c6:	2b04      	cmp	r3, #4
 80026c8:	d00d      	beq.n	80026e6 <UART_SetConfig+0x27e>
 80026ca:	dc15      	bgt.n	80026f8 <UART_SetConfig+0x290>
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d002      	beq.n	80026d6 <UART_SetConfig+0x26e>
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d005      	beq.n	80026e0 <UART_SetConfig+0x278>
 80026d4:	e010      	b.n	80026f8 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80026d6:	f7ff fc73 	bl	8001fc0 <HAL_RCC_GetPCLK1Freq>
 80026da:	0003      	movs	r3, r0
 80026dc:	617b      	str	r3, [r7, #20]
        break;
 80026de:	e012      	b.n	8002706 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80026e0:	4b31      	ldr	r3, [pc, #196]	; (80027a8 <UART_SetConfig+0x340>)
 80026e2:	617b      	str	r3, [r7, #20]
        break;
 80026e4:	e00f      	b.n	8002706 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80026e6:	f7ff fbdf 	bl	8001ea8 <HAL_RCC_GetSysClockFreq>
 80026ea:	0003      	movs	r3, r0
 80026ec:	617b      	str	r3, [r7, #20]
        break;
 80026ee:	e00a      	b.n	8002706 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80026f0:	2380      	movs	r3, #128	; 0x80
 80026f2:	021b      	lsls	r3, r3, #8
 80026f4:	617b      	str	r3, [r7, #20]
        break;
 80026f6:	e006      	b.n	8002706 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 80026f8:	2300      	movs	r3, #0
 80026fa:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80026fc:	231a      	movs	r3, #26
 80026fe:	18fb      	adds	r3, r7, r3
 8002700:	2201      	movs	r2, #1
 8002702:	701a      	strb	r2, [r3, #0]
        break;
 8002704:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d028      	beq.n	800275e <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002710:	4b26      	ldr	r3, [pc, #152]	; (80027ac <UART_SetConfig+0x344>)
 8002712:	0052      	lsls	r2, r2, #1
 8002714:	5ad3      	ldrh	r3, [r2, r3]
 8002716:	0019      	movs	r1, r3
 8002718:	6978      	ldr	r0, [r7, #20]
 800271a:	f7fd fcf1 	bl	8000100 <__udivsi3>
 800271e:	0003      	movs	r3, r0
 8002720:	001a      	movs	r2, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	085b      	lsrs	r3, r3, #1
 8002728:	18d2      	adds	r2, r2, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	0019      	movs	r1, r3
 8002730:	0010      	movs	r0, r2
 8002732:	f7fd fce5 	bl	8000100 <__udivsi3>
 8002736:	0003      	movs	r3, r0
 8002738:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	2b0f      	cmp	r3, #15
 800273e:	d90a      	bls.n	8002756 <UART_SetConfig+0x2ee>
 8002740:	693a      	ldr	r2, [r7, #16]
 8002742:	2380      	movs	r3, #128	; 0x80
 8002744:	025b      	lsls	r3, r3, #9
 8002746:	429a      	cmp	r2, r3
 8002748:	d205      	bcs.n	8002756 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	b29a      	uxth	r2, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	60da      	str	r2, [r3, #12]
 8002754:	e003      	b.n	800275e <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8002756:	231a      	movs	r3, #26
 8002758:	18fb      	adds	r3, r7, r3
 800275a:	2201      	movs	r2, #1
 800275c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	226a      	movs	r2, #106	; 0x6a
 8002762:	2101      	movs	r1, #1
 8002764:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2268      	movs	r2, #104	; 0x68
 800276a:	2101      	movs	r1, #1
 800276c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800277a:	231a      	movs	r3, #26
 800277c:	18fb      	adds	r3, r7, r3
 800277e:	781b      	ldrb	r3, [r3, #0]
}
 8002780:	0018      	movs	r0, r3
 8002782:	46bd      	mov	sp, r7
 8002784:	b008      	add	sp, #32
 8002786:	bd80      	pop	{r7, pc}
 8002788:	cfff69f3 	.word	0xcfff69f3
 800278c:	ffffcfff 	.word	0xffffcfff
 8002790:	11fff4ff 	.word	0x11fff4ff
 8002794:	40013800 	.word	0x40013800
 8002798:	40021000 	.word	0x40021000
 800279c:	40004400 	.word	0x40004400
 80027a0:	40004800 	.word	0x40004800
 80027a4:	40004c00 	.word	0x40004c00
 80027a8:	00f42400 	.word	0x00f42400
 80027ac:	080035d4 	.word	0x080035d4

080027b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027bc:	2201      	movs	r2, #1
 80027be:	4013      	ands	r3, r2
 80027c0:	d00b      	beq.n	80027da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	4a4a      	ldr	r2, [pc, #296]	; (80028f4 <UART_AdvFeatureConfig+0x144>)
 80027ca:	4013      	ands	r3, r2
 80027cc:	0019      	movs	r1, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	430a      	orrs	r2, r1
 80027d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027de:	2202      	movs	r2, #2
 80027e0:	4013      	ands	r3, r2
 80027e2:	d00b      	beq.n	80027fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	4a43      	ldr	r2, [pc, #268]	; (80028f8 <UART_AdvFeatureConfig+0x148>)
 80027ec:	4013      	ands	r3, r2
 80027ee:	0019      	movs	r1, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	430a      	orrs	r2, r1
 80027fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002800:	2204      	movs	r2, #4
 8002802:	4013      	ands	r3, r2
 8002804:	d00b      	beq.n	800281e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	4a3b      	ldr	r2, [pc, #236]	; (80028fc <UART_AdvFeatureConfig+0x14c>)
 800280e:	4013      	ands	r3, r2
 8002810:	0019      	movs	r1, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	430a      	orrs	r2, r1
 800281c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002822:	2208      	movs	r2, #8
 8002824:	4013      	ands	r3, r2
 8002826:	d00b      	beq.n	8002840 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	4a34      	ldr	r2, [pc, #208]	; (8002900 <UART_AdvFeatureConfig+0x150>)
 8002830:	4013      	ands	r3, r2
 8002832:	0019      	movs	r1, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	430a      	orrs	r2, r1
 800283e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002844:	2210      	movs	r2, #16
 8002846:	4013      	ands	r3, r2
 8002848:	d00b      	beq.n	8002862 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	4a2c      	ldr	r2, [pc, #176]	; (8002904 <UART_AdvFeatureConfig+0x154>)
 8002852:	4013      	ands	r3, r2
 8002854:	0019      	movs	r1, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	430a      	orrs	r2, r1
 8002860:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002866:	2220      	movs	r2, #32
 8002868:	4013      	ands	r3, r2
 800286a:	d00b      	beq.n	8002884 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	4a25      	ldr	r2, [pc, #148]	; (8002908 <UART_AdvFeatureConfig+0x158>)
 8002874:	4013      	ands	r3, r2
 8002876:	0019      	movs	r1, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	430a      	orrs	r2, r1
 8002882:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002888:	2240      	movs	r2, #64	; 0x40
 800288a:	4013      	ands	r3, r2
 800288c:	d01d      	beq.n	80028ca <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	4a1d      	ldr	r2, [pc, #116]	; (800290c <UART_AdvFeatureConfig+0x15c>)
 8002896:	4013      	ands	r3, r2
 8002898:	0019      	movs	r1, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	430a      	orrs	r2, r1
 80028a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028aa:	2380      	movs	r3, #128	; 0x80
 80028ac:	035b      	lsls	r3, r3, #13
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d10b      	bne.n	80028ca <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	4a15      	ldr	r2, [pc, #84]	; (8002910 <UART_AdvFeatureConfig+0x160>)
 80028ba:	4013      	ands	r3, r2
 80028bc:	0019      	movs	r1, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	430a      	orrs	r2, r1
 80028c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ce:	2280      	movs	r2, #128	; 0x80
 80028d0:	4013      	ands	r3, r2
 80028d2:	d00b      	beq.n	80028ec <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	4a0e      	ldr	r2, [pc, #56]	; (8002914 <UART_AdvFeatureConfig+0x164>)
 80028dc:	4013      	ands	r3, r2
 80028de:	0019      	movs	r1, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	430a      	orrs	r2, r1
 80028ea:	605a      	str	r2, [r3, #4]
  }
}
 80028ec:	46c0      	nop			; (mov r8, r8)
 80028ee:	46bd      	mov	sp, r7
 80028f0:	b002      	add	sp, #8
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	fffdffff 	.word	0xfffdffff
 80028f8:	fffeffff 	.word	0xfffeffff
 80028fc:	fffbffff 	.word	0xfffbffff
 8002900:	ffff7fff 	.word	0xffff7fff
 8002904:	ffffefff 	.word	0xffffefff
 8002908:	ffffdfff 	.word	0xffffdfff
 800290c:	ffefffff 	.word	0xffefffff
 8002910:	ff9fffff 	.word	0xff9fffff
 8002914:	fff7ffff 	.word	0xfff7ffff

08002918 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b086      	sub	sp, #24
 800291c:	af02      	add	r7, sp, #8
 800291e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2290      	movs	r2, #144	; 0x90
 8002924:	2100      	movs	r1, #0
 8002926:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002928:	f7fe f998 	bl	8000c5c <HAL_GetTick>
 800292c:	0003      	movs	r3, r0
 800292e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2208      	movs	r2, #8
 8002938:	4013      	ands	r3, r2
 800293a:	2b08      	cmp	r3, #8
 800293c:	d10c      	bne.n	8002958 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2280      	movs	r2, #128	; 0x80
 8002942:	0391      	lsls	r1, r2, #14
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	4a1a      	ldr	r2, [pc, #104]	; (80029b0 <UART_CheckIdleState+0x98>)
 8002948:	9200      	str	r2, [sp, #0]
 800294a:	2200      	movs	r2, #0
 800294c:	f000 f832 	bl	80029b4 <UART_WaitOnFlagUntilTimeout>
 8002950:	1e03      	subs	r3, r0, #0
 8002952:	d001      	beq.n	8002958 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e026      	b.n	80029a6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2204      	movs	r2, #4
 8002960:	4013      	ands	r3, r2
 8002962:	2b04      	cmp	r3, #4
 8002964:	d10c      	bne.n	8002980 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2280      	movs	r2, #128	; 0x80
 800296a:	03d1      	lsls	r1, r2, #15
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	4a10      	ldr	r2, [pc, #64]	; (80029b0 <UART_CheckIdleState+0x98>)
 8002970:	9200      	str	r2, [sp, #0]
 8002972:	2200      	movs	r2, #0
 8002974:	f000 f81e 	bl	80029b4 <UART_WaitOnFlagUntilTimeout>
 8002978:	1e03      	subs	r3, r0, #0
 800297a:	d001      	beq.n	8002980 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e012      	b.n	80029a6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2288      	movs	r2, #136	; 0x88
 8002984:	2120      	movs	r1, #32
 8002986:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	228c      	movs	r2, #140	; 0x8c
 800298c:	2120      	movs	r1, #32
 800298e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2284      	movs	r2, #132	; 0x84
 80029a0:	2100      	movs	r1, #0
 80029a2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	0018      	movs	r0, r3
 80029a8:	46bd      	mov	sp, r7
 80029aa:	b004      	add	sp, #16
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	46c0      	nop			; (mov r8, r8)
 80029b0:	01ffffff 	.word	0x01ffffff

080029b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b094      	sub	sp, #80	; 0x50
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	603b      	str	r3, [r7, #0]
 80029c0:	1dfb      	adds	r3, r7, #7
 80029c2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029c4:	e0a7      	b.n	8002b16 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029c8:	3301      	adds	r3, #1
 80029ca:	d100      	bne.n	80029ce <UART_WaitOnFlagUntilTimeout+0x1a>
 80029cc:	e0a3      	b.n	8002b16 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029ce:	f7fe f945 	bl	8000c5c <HAL_GetTick>
 80029d2:	0002      	movs	r2, r0
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80029da:	429a      	cmp	r2, r3
 80029dc:	d302      	bcc.n	80029e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80029de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d13f      	bne.n	8002a64 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029e4:	f3ef 8310 	mrs	r3, PRIMASK
 80029e8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80029ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80029ec:	647b      	str	r3, [r7, #68]	; 0x44
 80029ee:	2301      	movs	r3, #1
 80029f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f4:	f383 8810 	msr	PRIMASK, r3
}
 80029f8:	46c0      	nop			; (mov r8, r8)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	494e      	ldr	r1, [pc, #312]	; (8002b40 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8002a06:	400a      	ands	r2, r1
 8002a08:	601a      	str	r2, [r3, #0]
 8002a0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a0c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a10:	f383 8810 	msr	PRIMASK, r3
}
 8002a14:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a16:	f3ef 8310 	mrs	r3, PRIMASK
 8002a1a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a1e:	643b      	str	r3, [r7, #64]	; 0x40
 8002a20:	2301      	movs	r3, #1
 8002a22:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a26:	f383 8810 	msr	PRIMASK, r3
}
 8002a2a:	46c0      	nop			; (mov r8, r8)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	689a      	ldr	r2, [r3, #8]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2101      	movs	r1, #1
 8002a38:	438a      	bics	r2, r1
 8002a3a:	609a      	str	r2, [r3, #8]
 8002a3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a42:	f383 8810 	msr	PRIMASK, r3
}
 8002a46:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2288      	movs	r2, #136	; 0x88
 8002a4c:	2120      	movs	r1, #32
 8002a4e:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	228c      	movs	r2, #140	; 0x8c
 8002a54:	2120      	movs	r1, #32
 8002a56:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2284      	movs	r2, #132	; 0x84
 8002a5c:	2100      	movs	r1, #0
 8002a5e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e069      	b.n	8002b38 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2204      	movs	r2, #4
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	d052      	beq.n	8002b16 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	69da      	ldr	r2, [r3, #28]
 8002a76:	2380      	movs	r3, #128	; 0x80
 8002a78:	011b      	lsls	r3, r3, #4
 8002a7a:	401a      	ands	r2, r3
 8002a7c:	2380      	movs	r3, #128	; 0x80
 8002a7e:	011b      	lsls	r3, r3, #4
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d148      	bne.n	8002b16 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2280      	movs	r2, #128	; 0x80
 8002a8a:	0112      	lsls	r2, r2, #4
 8002a8c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a8e:	f3ef 8310 	mrs	r3, PRIMASK
 8002a92:	613b      	str	r3, [r7, #16]
  return(result);
 8002a94:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002a96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a98:	2301      	movs	r3, #1
 8002a9a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	f383 8810 	msr	PRIMASK, r3
}
 8002aa2:	46c0      	nop			; (mov r8, r8)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4924      	ldr	r1, [pc, #144]	; (8002b40 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8002ab0:	400a      	ands	r2, r1
 8002ab2:	601a      	str	r2, [r3, #0]
 8002ab4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ab6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	f383 8810 	msr	PRIMASK, r3
}
 8002abe:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ac0:	f3ef 8310 	mrs	r3, PRIMASK
 8002ac4:	61fb      	str	r3, [r7, #28]
  return(result);
 8002ac6:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ac8:	64bb      	str	r3, [r7, #72]	; 0x48
 8002aca:	2301      	movs	r3, #1
 8002acc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ace:	6a3b      	ldr	r3, [r7, #32]
 8002ad0:	f383 8810 	msr	PRIMASK, r3
}
 8002ad4:	46c0      	nop			; (mov r8, r8)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	689a      	ldr	r2, [r3, #8]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2101      	movs	r1, #1
 8002ae2:	438a      	bics	r2, r1
 8002ae4:	609a      	str	r2, [r3, #8]
 8002ae6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ae8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aec:	f383 8810 	msr	PRIMASK, r3
}
 8002af0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2288      	movs	r2, #136	; 0x88
 8002af6:	2120      	movs	r1, #32
 8002af8:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	228c      	movs	r2, #140	; 0x8c
 8002afe:	2120      	movs	r1, #32
 8002b00:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2290      	movs	r2, #144	; 0x90
 8002b06:	2120      	movs	r1, #32
 8002b08:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2284      	movs	r2, #132	; 0x84
 8002b0e:	2100      	movs	r1, #0
 8002b10:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e010      	b.n	8002b38 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	69db      	ldr	r3, [r3, #28]
 8002b1c:	68ba      	ldr	r2, [r7, #8]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	68ba      	ldr	r2, [r7, #8]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	425a      	negs	r2, r3
 8002b26:	4153      	adcs	r3, r2
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	001a      	movs	r2, r3
 8002b2c:	1dfb      	adds	r3, r7, #7
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d100      	bne.n	8002b36 <UART_WaitOnFlagUntilTimeout+0x182>
 8002b34:	e747      	b.n	80029c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b36:	2300      	movs	r3, #0
}
 8002b38:	0018      	movs	r0, r3
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	b014      	add	sp, #80	; 0x50
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	fffffe5f 	.word	0xfffffe5f

08002b44 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b090      	sub	sp, #64	; 0x40
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	60b9      	str	r1, [r7, #8]
 8002b4e:	1dbb      	adds	r3, r7, #6
 8002b50:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	68ba      	ldr	r2, [r7, #8]
 8002b56:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	1dba      	adds	r2, r7, #6
 8002b5c:	215c      	movs	r1, #92	; 0x5c
 8002b5e:	8812      	ldrh	r2, [r2, #0]
 8002b60:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2290      	movs	r2, #144	; 0x90
 8002b66:	2100      	movs	r1, #0
 8002b68:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	228c      	movs	r2, #140	; 0x8c
 8002b6e:	2122      	movs	r1, #34	; 0x22
 8002b70:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2280      	movs	r2, #128	; 0x80
 8002b76:	589b      	ldr	r3, [r3, r2]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d02d      	beq.n	8002bd8 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2280      	movs	r2, #128	; 0x80
 8002b80:	589b      	ldr	r3, [r3, r2]
 8002b82:	4a40      	ldr	r2, [pc, #256]	; (8002c84 <UART_Start_Receive_DMA+0x140>)
 8002b84:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2280      	movs	r2, #128	; 0x80
 8002b8a:	589b      	ldr	r3, [r3, r2]
 8002b8c:	4a3e      	ldr	r2, [pc, #248]	; (8002c88 <UART_Start_Receive_DMA+0x144>)
 8002b8e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2280      	movs	r2, #128	; 0x80
 8002b94:	589b      	ldr	r3, [r3, r2]
 8002b96:	4a3d      	ldr	r2, [pc, #244]	; (8002c8c <UART_Start_Receive_DMA+0x148>)
 8002b98:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2280      	movs	r2, #128	; 0x80
 8002b9e:	589b      	ldr	r3, [r3, r2]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2280      	movs	r2, #128	; 0x80
 8002ba8:	5898      	ldr	r0, [r3, r2]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	3324      	adds	r3, #36	; 0x24
 8002bb0:	0019      	movs	r1, r3
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb6:	001a      	movs	r2, r3
 8002bb8:	1dbb      	adds	r3, r7, #6
 8002bba:	881b      	ldrh	r3, [r3, #0]
 8002bbc:	f7fe f9e4 	bl	8000f88 <HAL_DMA_Start_IT>
 8002bc0:	1e03      	subs	r3, r0, #0
 8002bc2:	d009      	beq.n	8002bd8 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2290      	movs	r2, #144	; 0x90
 8002bc8:	2110      	movs	r1, #16
 8002bca:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	228c      	movs	r2, #140	; 0x8c
 8002bd0:	2120      	movs	r1, #32
 8002bd2:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e050      	b.n	8002c7a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d019      	beq.n	8002c14 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002be0:	f3ef 8310 	mrs	r3, PRIMASK
 8002be4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002be8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bea:	2301      	movs	r3, #1
 8002bec:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf0:	f383 8810 	msr	PRIMASK, r3
}
 8002bf4:	46c0      	nop			; (mov r8, r8)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2180      	movs	r1, #128	; 0x80
 8002c02:	0049      	lsls	r1, r1, #1
 8002c04:	430a      	orrs	r2, r1
 8002c06:	601a      	str	r2, [r3, #0]
 8002c08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c0a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c0e:	f383 8810 	msr	PRIMASK, r3
}
 8002c12:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c14:	f3ef 8310 	mrs	r3, PRIMASK
 8002c18:	613b      	str	r3, [r7, #16]
  return(result);
 8002c1a:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c1c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c1e:	2301      	movs	r3, #1
 8002c20:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	f383 8810 	msr	PRIMASK, r3
}
 8002c28:	46c0      	nop			; (mov r8, r8)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	689a      	ldr	r2, [r3, #8]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2101      	movs	r1, #1
 8002c36:	430a      	orrs	r2, r1
 8002c38:	609a      	str	r2, [r3, #8]
 8002c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c3c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	f383 8810 	msr	PRIMASK, r3
}
 8002c44:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c46:	f3ef 8310 	mrs	r3, PRIMASK
 8002c4a:	61fb      	str	r3, [r7, #28]
  return(result);
 8002c4c:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c4e:	637b      	str	r3, [r7, #52]	; 0x34
 8002c50:	2301      	movs	r3, #1
 8002c52:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c54:	6a3b      	ldr	r3, [r7, #32]
 8002c56:	f383 8810 	msr	PRIMASK, r3
}
 8002c5a:	46c0      	nop			; (mov r8, r8)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	689a      	ldr	r2, [r3, #8]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2140      	movs	r1, #64	; 0x40
 8002c68:	430a      	orrs	r2, r1
 8002c6a:	609a      	str	r2, [r3, #8]
 8002c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c6e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c72:	f383 8810 	msr	PRIMASK, r3
}
 8002c76:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	0018      	movs	r0, r3
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	b010      	add	sp, #64	; 0x40
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	46c0      	nop			; (mov r8, r8)
 8002c84:	08002ddd 	.word	0x08002ddd
 8002c88:	08002f0d 	.word	0x08002f0d
 8002c8c:	08002f4f 	.word	0x08002f4f

08002c90 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b08a      	sub	sp, #40	; 0x28
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c98:	f3ef 8310 	mrs	r3, PRIMASK
 8002c9c:	60bb      	str	r3, [r7, #8]
  return(result);
 8002c9e:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8002ca0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f383 8810 	msr	PRIMASK, r3
}
 8002cac:	46c0      	nop			; (mov r8, r8)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	21c0      	movs	r1, #192	; 0xc0
 8002cba:	438a      	bics	r2, r1
 8002cbc:	601a      	str	r2, [r3, #0]
 8002cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	f383 8810 	msr	PRIMASK, r3
}
 8002cc8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cca:	f3ef 8310 	mrs	r3, PRIMASK
 8002cce:	617b      	str	r3, [r7, #20]
  return(result);
 8002cd0:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8002cd2:	623b      	str	r3, [r7, #32]
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	f383 8810 	msr	PRIMASK, r3
}
 8002cde:	46c0      	nop			; (mov r8, r8)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	689a      	ldr	r2, [r3, #8]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4908      	ldr	r1, [pc, #32]	; (8002d0c <UART_EndTxTransfer+0x7c>)
 8002cec:	400a      	ands	r2, r1
 8002cee:	609a      	str	r2, [r3, #8]
 8002cf0:	6a3b      	ldr	r3, [r7, #32]
 8002cf2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	f383 8810 	msr	PRIMASK, r3
}
 8002cfa:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2288      	movs	r2, #136	; 0x88
 8002d00:	2120      	movs	r1, #32
 8002d02:	5099      	str	r1, [r3, r2]
}
 8002d04:	46c0      	nop			; (mov r8, r8)
 8002d06:	46bd      	mov	sp, r7
 8002d08:	b00a      	add	sp, #40	; 0x28
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	ff7fffff 	.word	0xff7fffff

08002d10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b08e      	sub	sp, #56	; 0x38
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d18:	f3ef 8310 	mrs	r3, PRIMASK
 8002d1c:	617b      	str	r3, [r7, #20]
  return(result);
 8002d1e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002d20:	637b      	str	r3, [r7, #52]	; 0x34
 8002d22:	2301      	movs	r3, #1
 8002d24:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	f383 8810 	msr	PRIMASK, r3
}
 8002d2c:	46c0      	nop			; (mov r8, r8)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4926      	ldr	r1, [pc, #152]	; (8002dd4 <UART_EndRxTransfer+0xc4>)
 8002d3a:	400a      	ands	r2, r1
 8002d3c:	601a      	str	r2, [r3, #0]
 8002d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d40:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	f383 8810 	msr	PRIMASK, r3
}
 8002d48:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d4a:	f3ef 8310 	mrs	r3, PRIMASK
 8002d4e:	623b      	str	r3, [r7, #32]
  return(result);
 8002d50:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002d52:	633b      	str	r3, [r7, #48]	; 0x30
 8002d54:	2301      	movs	r3, #1
 8002d56:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5a:	f383 8810 	msr	PRIMASK, r3
}
 8002d5e:	46c0      	nop			; (mov r8, r8)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	689a      	ldr	r2, [r3, #8]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	491b      	ldr	r1, [pc, #108]	; (8002dd8 <UART_EndRxTransfer+0xc8>)
 8002d6c:	400a      	ands	r2, r1
 8002d6e:	609a      	str	r2, [r3, #8]
 8002d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d72:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d76:	f383 8810 	msr	PRIMASK, r3
}
 8002d7a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d118      	bne.n	8002db6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d84:	f3ef 8310 	mrs	r3, PRIMASK
 8002d88:	60bb      	str	r3, [r7, #8]
  return(result);
 8002d8a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d8e:	2301      	movs	r3, #1
 8002d90:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f383 8810 	msr	PRIMASK, r3
}
 8002d98:	46c0      	nop			; (mov r8, r8)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2110      	movs	r1, #16
 8002da6:	438a      	bics	r2, r1
 8002da8:	601a      	str	r2, [r3, #0]
 8002daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	f383 8810 	msr	PRIMASK, r3
}
 8002db4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	228c      	movs	r2, #140	; 0x8c
 8002dba:	2120      	movs	r1, #32
 8002dbc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	675a      	str	r2, [r3, #116]	; 0x74
}
 8002dca:	46c0      	nop			; (mov r8, r8)
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	b00e      	add	sp, #56	; 0x38
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	46c0      	nop			; (mov r8, r8)
 8002dd4:	fffffedf 	.word	0xfffffedf
 8002dd8:	effffffe 	.word	0xeffffffe

08002ddc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b094      	sub	sp, #80	; 0x50
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de8:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2220      	movs	r2, #32
 8002df2:	4013      	ands	r3, r2
 8002df4:	d16f      	bne.n	8002ed6 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8002df6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002df8:	225e      	movs	r2, #94	; 0x5e
 8002dfa:	2100      	movs	r1, #0
 8002dfc:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dfe:	f3ef 8310 	mrs	r3, PRIMASK
 8002e02:	61bb      	str	r3, [r7, #24]
  return(result);
 8002e04:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e06:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e08:	2301      	movs	r3, #1
 8002e0a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	f383 8810 	msr	PRIMASK, r3
}
 8002e12:	46c0      	nop			; (mov r8, r8)
 8002e14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	493a      	ldr	r1, [pc, #232]	; (8002f08 <UART_DMAReceiveCplt+0x12c>)
 8002e20:	400a      	ands	r2, r1
 8002e22:	601a      	str	r2, [r3, #0]
 8002e24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e26:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e28:	6a3b      	ldr	r3, [r7, #32]
 8002e2a:	f383 8810 	msr	PRIMASK, r3
}
 8002e2e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e30:	f3ef 8310 	mrs	r3, PRIMASK
 8002e34:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e38:	647b      	str	r3, [r7, #68]	; 0x44
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e40:	f383 8810 	msr	PRIMASK, r3
}
 8002e44:	46c0      	nop			; (mov r8, r8)
 8002e46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	689a      	ldr	r2, [r3, #8]
 8002e4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2101      	movs	r1, #1
 8002e52:	438a      	bics	r2, r1
 8002e54:	609a      	str	r2, [r3, #8]
 8002e56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e58:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e5c:	f383 8810 	msr	PRIMASK, r3
}
 8002e60:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e62:	f3ef 8310 	mrs	r3, PRIMASK
 8002e66:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e6a:	643b      	str	r3, [r7, #64]	; 0x40
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e72:	f383 8810 	msr	PRIMASK, r3
}
 8002e76:	46c0      	nop			; (mov r8, r8)
 8002e78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	689a      	ldr	r2, [r3, #8]
 8002e7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2140      	movs	r1, #64	; 0x40
 8002e84:	438a      	bics	r2, r1
 8002e86:	609a      	str	r2, [r3, #8]
 8002e88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e8a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e8e:	f383 8810 	msr	PRIMASK, r3
}
 8002e92:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002e94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e96:	228c      	movs	r2, #140	; 0x8c
 8002e98:	2120      	movs	r1, #32
 8002e9a:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d118      	bne.n	8002ed6 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ea4:	f3ef 8310 	mrs	r3, PRIMASK
 8002ea8:	60fb      	str	r3, [r7, #12]
  return(result);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002eac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002eae:	2301      	movs	r3, #1
 8002eb0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	f383 8810 	msr	PRIMASK, r3
}
 8002eb8:	46c0      	nop			; (mov r8, r8)
 8002eba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2110      	movs	r1, #16
 8002ec6:	438a      	bics	r2, r1
 8002ec8:	601a      	str	r2, [r3, #0]
 8002eca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ecc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	f383 8810 	msr	PRIMASK, r3
}
 8002ed4:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ed6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ed8:	2200      	movs	r2, #0
 8002eda:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002edc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ede:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d108      	bne.n	8002ef6 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002ee4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ee6:	225c      	movs	r2, #92	; 0x5c
 8002ee8:	5a9a      	ldrh	r2, [r3, r2]
 8002eea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002eec:	0011      	movs	r1, r2
 8002eee:	0018      	movs	r0, r3
 8002ef0:	f7fd fa7c 	bl	80003ec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002ef4:	e003      	b.n	8002efe <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 8002ef6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ef8:	0018      	movs	r0, r3
 8002efa:	f7ff fa9d 	bl	8002438 <HAL_UART_RxCpltCallback>
}
 8002efe:	46c0      	nop			; (mov r8, r8)
 8002f00:	46bd      	mov	sp, r7
 8002f02:	b014      	add	sp, #80	; 0x50
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	46c0      	nop			; (mov r8, r8)
 8002f08:	fffffeff 	.word	0xfffffeff

08002f0c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f18:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d10a      	bne.n	8002f3e <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	225c      	movs	r2, #92	; 0x5c
 8002f2c:	5a9b      	ldrh	r3, [r3, r2]
 8002f2e:	085b      	lsrs	r3, r3, #1
 8002f30:	b29a      	uxth	r2, r3
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	0011      	movs	r1, r2
 8002f36:	0018      	movs	r0, r3
 8002f38:	f7fd fa58 	bl	80003ec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002f3c:	e003      	b.n	8002f46 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	0018      	movs	r0, r3
 8002f42:	f7ff fa81 	bl	8002448 <HAL_UART_RxHalfCpltCallback>
}
 8002f46:	46c0      	nop			; (mov r8, r8)
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	b004      	add	sp, #16
 8002f4c:	bd80      	pop	{r7, pc}

08002f4e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002f4e:	b580      	push	{r7, lr}
 8002f50:	b086      	sub	sp, #24
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f5a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	2288      	movs	r2, #136	; 0x88
 8002f60:	589b      	ldr	r3, [r3, r2]
 8002f62:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	228c      	movs	r2, #140	; 0x8c
 8002f68:	589b      	ldr	r3, [r3, r2]
 8002f6a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	2280      	movs	r2, #128	; 0x80
 8002f74:	4013      	ands	r3, r2
 8002f76:	2b80      	cmp	r3, #128	; 0x80
 8002f78:	d10a      	bne.n	8002f90 <UART_DMAError+0x42>
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	2b21      	cmp	r3, #33	; 0x21
 8002f7e:	d107      	bne.n	8002f90 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	2256      	movs	r2, #86	; 0x56
 8002f84:	2100      	movs	r1, #0
 8002f86:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	0018      	movs	r0, r3
 8002f8c:	f7ff fe80 	bl	8002c90 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	2240      	movs	r2, #64	; 0x40
 8002f98:	4013      	ands	r3, r2
 8002f9a:	2b40      	cmp	r3, #64	; 0x40
 8002f9c:	d10a      	bne.n	8002fb4 <UART_DMAError+0x66>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2b22      	cmp	r3, #34	; 0x22
 8002fa2:	d107      	bne.n	8002fb4 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	225e      	movs	r2, #94	; 0x5e
 8002fa8:	2100      	movs	r1, #0
 8002faa:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	0018      	movs	r0, r3
 8002fb0:	f7ff feae 	bl	8002d10 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	2290      	movs	r2, #144	; 0x90
 8002fb8:	589b      	ldr	r3, [r3, r2]
 8002fba:	2210      	movs	r2, #16
 8002fbc:	431a      	orrs	r2, r3
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	2190      	movs	r1, #144	; 0x90
 8002fc2:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	0018      	movs	r0, r3
 8002fc8:	f7ff fa46 	bl	8002458 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002fcc:	46c0      	nop			; (mov r8, r8)
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	b006      	add	sp, #24
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2284      	movs	r2, #132	; 0x84
 8002fe0:	5c9b      	ldrb	r3, [r3, r2]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d101      	bne.n	8002fea <HAL_UARTEx_DisableFifoMode+0x16>
 8002fe6:	2302      	movs	r3, #2
 8002fe8:	e027      	b.n	800303a <HAL_UARTEx_DisableFifoMode+0x66>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2284      	movs	r2, #132	; 0x84
 8002fee:	2101      	movs	r1, #1
 8002ff0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2288      	movs	r2, #136	; 0x88
 8002ff6:	2124      	movs	r1, #36	; 0x24
 8002ff8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2101      	movs	r1, #1
 800300e:	438a      	bics	r2, r1
 8003010:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	4a0b      	ldr	r2, [pc, #44]	; (8003044 <HAL_UARTEx_DisableFifoMode+0x70>)
 8003016:	4013      	ands	r3, r2
 8003018:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	68fa      	ldr	r2, [r7, #12]
 8003026:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2288      	movs	r2, #136	; 0x88
 800302c:	2120      	movs	r1, #32
 800302e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2284      	movs	r2, #132	; 0x84
 8003034:	2100      	movs	r1, #0
 8003036:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	0018      	movs	r0, r3
 800303c:	46bd      	mov	sp, r7
 800303e:	b004      	add	sp, #16
 8003040:	bd80      	pop	{r7, pc}
 8003042:	46c0      	nop			; (mov r8, r8)
 8003044:	dfffffff 	.word	0xdfffffff

08003048 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2284      	movs	r2, #132	; 0x84
 8003056:	5c9b      	ldrb	r3, [r3, r2]
 8003058:	2b01      	cmp	r3, #1
 800305a:	d101      	bne.n	8003060 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800305c:	2302      	movs	r3, #2
 800305e:	e02e      	b.n	80030be <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2284      	movs	r2, #132	; 0x84
 8003064:	2101      	movs	r1, #1
 8003066:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2288      	movs	r2, #136	; 0x88
 800306c:	2124      	movs	r1, #36	; 0x24
 800306e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2101      	movs	r1, #1
 8003084:	438a      	bics	r2, r1
 8003086:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	00db      	lsls	r3, r3, #3
 8003090:	08d9      	lsrs	r1, r3, #3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	683a      	ldr	r2, [r7, #0]
 8003098:	430a      	orrs	r2, r1
 800309a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	0018      	movs	r0, r3
 80030a0:	f000 f8bc 	bl	800321c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68fa      	ldr	r2, [r7, #12]
 80030aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2288      	movs	r2, #136	; 0x88
 80030b0:	2120      	movs	r1, #32
 80030b2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2284      	movs	r2, #132	; 0x84
 80030b8:	2100      	movs	r1, #0
 80030ba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	0018      	movs	r0, r3
 80030c0:	46bd      	mov	sp, r7
 80030c2:	b004      	add	sp, #16
 80030c4:	bd80      	pop	{r7, pc}
	...

080030c8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2284      	movs	r2, #132	; 0x84
 80030d6:	5c9b      	ldrb	r3, [r3, r2]
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d101      	bne.n	80030e0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80030dc:	2302      	movs	r3, #2
 80030de:	e02f      	b.n	8003140 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2284      	movs	r2, #132	; 0x84
 80030e4:	2101      	movs	r1, #1
 80030e6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2288      	movs	r2, #136	; 0x88
 80030ec:	2124      	movs	r1, #36	; 0x24
 80030ee:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2101      	movs	r1, #1
 8003104:	438a      	bics	r2, r1
 8003106:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	4a0e      	ldr	r2, [pc, #56]	; (8003148 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003110:	4013      	ands	r3, r2
 8003112:	0019      	movs	r1, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	683a      	ldr	r2, [r7, #0]
 800311a:	430a      	orrs	r2, r1
 800311c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	0018      	movs	r0, r3
 8003122:	f000 f87b 	bl	800321c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2288      	movs	r2, #136	; 0x88
 8003132:	2120      	movs	r1, #32
 8003134:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2284      	movs	r2, #132	; 0x84
 800313a:	2100      	movs	r1, #0
 800313c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800313e:	2300      	movs	r3, #0
}
 8003140:	0018      	movs	r0, r3
 8003142:	46bd      	mov	sp, r7
 8003144:	b004      	add	sp, #16
 8003146:	bd80      	pop	{r7, pc}
 8003148:	f1ffffff 	.word	0xf1ffffff

0800314c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800314c:	b5b0      	push	{r4, r5, r7, lr}
 800314e:	b08a      	sub	sp, #40	; 0x28
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	1dbb      	adds	r3, r7, #6
 8003158:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	228c      	movs	r2, #140	; 0x8c
 800315e:	589b      	ldr	r3, [r3, r2]
 8003160:	2b20      	cmp	r3, #32
 8003162:	d156      	bne.n	8003212 <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d003      	beq.n	8003172 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800316a:	1dbb      	adds	r3, r7, #6
 800316c:	881b      	ldrh	r3, [r3, #0]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d101      	bne.n	8003176 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e04e      	b.n	8003214 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	689a      	ldr	r2, [r3, #8]
 800317a:	2380      	movs	r3, #128	; 0x80
 800317c:	015b      	lsls	r3, r3, #5
 800317e:	429a      	cmp	r2, r3
 8003180:	d109      	bne.n	8003196 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d105      	bne.n	8003196 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	2201      	movs	r2, #1
 800318e:	4013      	ands	r3, r2
 8003190:	d001      	beq.n	8003196 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e03e      	b.n	8003214 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2201      	movs	r2, #1
 800319a:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2200      	movs	r2, #0
 80031a0:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80031a2:	2527      	movs	r5, #39	; 0x27
 80031a4:	197c      	adds	r4, r7, r5
 80031a6:	1dbb      	adds	r3, r7, #6
 80031a8:	881a      	ldrh	r2, [r3, #0]
 80031aa:	68b9      	ldr	r1, [r7, #8]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	0018      	movs	r0, r3
 80031b0:	f7ff fcc8 	bl	8002b44 <UART_Start_Receive_DMA>
 80031b4:	0003      	movs	r3, r0
 80031b6:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80031b8:	197b      	adds	r3, r7, r5
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d124      	bne.n	800320a <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d11c      	bne.n	8003202 <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2210      	movs	r2, #16
 80031ce:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031d0:	f3ef 8310 	mrs	r3, PRIMASK
 80031d4:	617b      	str	r3, [r7, #20]
  return(result);
 80031d6:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031d8:	623b      	str	r3, [r7, #32]
 80031da:	2301      	movs	r3, #1
 80031dc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	f383 8810 	msr	PRIMASK, r3
}
 80031e4:	46c0      	nop			; (mov r8, r8)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2110      	movs	r1, #16
 80031f2:	430a      	orrs	r2, r1
 80031f4:	601a      	str	r2, [r3, #0]
 80031f6:	6a3b      	ldr	r3, [r7, #32]
 80031f8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	f383 8810 	msr	PRIMASK, r3
}
 8003200:	e003      	b.n	800320a <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8003202:	2327      	movs	r3, #39	; 0x27
 8003204:	18fb      	adds	r3, r7, r3
 8003206:	2201      	movs	r2, #1
 8003208:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 800320a:	2327      	movs	r3, #39	; 0x27
 800320c:	18fb      	adds	r3, r7, r3
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	e000      	b.n	8003214 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 8003212:	2302      	movs	r3, #2
  }
}
 8003214:	0018      	movs	r0, r3
 8003216:	46bd      	mov	sp, r7
 8003218:	b00a      	add	sp, #40	; 0x28
 800321a:	bdb0      	pop	{r4, r5, r7, pc}

0800321c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800321c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003228:	2b00      	cmp	r3, #0
 800322a:	d108      	bne.n	800323e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	226a      	movs	r2, #106	; 0x6a
 8003230:	2101      	movs	r1, #1
 8003232:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2268      	movs	r2, #104	; 0x68
 8003238:	2101      	movs	r1, #1
 800323a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800323c:	e043      	b.n	80032c6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800323e:	260f      	movs	r6, #15
 8003240:	19bb      	adds	r3, r7, r6
 8003242:	2208      	movs	r2, #8
 8003244:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003246:	200e      	movs	r0, #14
 8003248:	183b      	adds	r3, r7, r0
 800324a:	2208      	movs	r2, #8
 800324c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	0e5b      	lsrs	r3, r3, #25
 8003256:	b2da      	uxtb	r2, r3
 8003258:	240d      	movs	r4, #13
 800325a:	193b      	adds	r3, r7, r4
 800325c:	2107      	movs	r1, #7
 800325e:	400a      	ands	r2, r1
 8003260:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	0f5b      	lsrs	r3, r3, #29
 800326a:	b2da      	uxtb	r2, r3
 800326c:	250c      	movs	r5, #12
 800326e:	197b      	adds	r3, r7, r5
 8003270:	2107      	movs	r1, #7
 8003272:	400a      	ands	r2, r1
 8003274:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003276:	183b      	adds	r3, r7, r0
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	197a      	adds	r2, r7, r5
 800327c:	7812      	ldrb	r2, [r2, #0]
 800327e:	4914      	ldr	r1, [pc, #80]	; (80032d0 <UARTEx_SetNbDataToProcess+0xb4>)
 8003280:	5c8a      	ldrb	r2, [r1, r2]
 8003282:	435a      	muls	r2, r3
 8003284:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003286:	197b      	adds	r3, r7, r5
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	4a12      	ldr	r2, [pc, #72]	; (80032d4 <UARTEx_SetNbDataToProcess+0xb8>)
 800328c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800328e:	0019      	movs	r1, r3
 8003290:	f7fc ffc0 	bl	8000214 <__divsi3>
 8003294:	0003      	movs	r3, r0
 8003296:	b299      	uxth	r1, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	226a      	movs	r2, #106	; 0x6a
 800329c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800329e:	19bb      	adds	r3, r7, r6
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	193a      	adds	r2, r7, r4
 80032a4:	7812      	ldrb	r2, [r2, #0]
 80032a6:	490a      	ldr	r1, [pc, #40]	; (80032d0 <UARTEx_SetNbDataToProcess+0xb4>)
 80032a8:	5c8a      	ldrb	r2, [r1, r2]
 80032aa:	435a      	muls	r2, r3
 80032ac:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80032ae:	193b      	adds	r3, r7, r4
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	4a08      	ldr	r2, [pc, #32]	; (80032d4 <UARTEx_SetNbDataToProcess+0xb8>)
 80032b4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80032b6:	0019      	movs	r1, r3
 80032b8:	f7fc ffac 	bl	8000214 <__divsi3>
 80032bc:	0003      	movs	r3, r0
 80032be:	b299      	uxth	r1, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2268      	movs	r2, #104	; 0x68
 80032c4:	5299      	strh	r1, [r3, r2]
}
 80032c6:	46c0      	nop			; (mov r8, r8)
 80032c8:	46bd      	mov	sp, r7
 80032ca:	b005      	add	sp, #20
 80032cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032ce:	46c0      	nop			; (mov r8, r8)
 80032d0:	080035ec 	.word	0x080035ec
 80032d4:	080035f4 	.word	0x080035f4

080032d8 <memset>:
 80032d8:	0003      	movs	r3, r0
 80032da:	1882      	adds	r2, r0, r2
 80032dc:	4293      	cmp	r3, r2
 80032de:	d100      	bne.n	80032e2 <memset+0xa>
 80032e0:	4770      	bx	lr
 80032e2:	7019      	strb	r1, [r3, #0]
 80032e4:	3301      	adds	r3, #1
 80032e6:	e7f9      	b.n	80032dc <memset+0x4>

080032e8 <__libc_init_array>:
 80032e8:	b570      	push	{r4, r5, r6, lr}
 80032ea:	2600      	movs	r6, #0
 80032ec:	4c0c      	ldr	r4, [pc, #48]	; (8003320 <__libc_init_array+0x38>)
 80032ee:	4d0d      	ldr	r5, [pc, #52]	; (8003324 <__libc_init_array+0x3c>)
 80032f0:	1b64      	subs	r4, r4, r5
 80032f2:	10a4      	asrs	r4, r4, #2
 80032f4:	42a6      	cmp	r6, r4
 80032f6:	d109      	bne.n	800330c <__libc_init_array+0x24>
 80032f8:	2600      	movs	r6, #0
 80032fa:	f000 f819 	bl	8003330 <_init>
 80032fe:	4c0a      	ldr	r4, [pc, #40]	; (8003328 <__libc_init_array+0x40>)
 8003300:	4d0a      	ldr	r5, [pc, #40]	; (800332c <__libc_init_array+0x44>)
 8003302:	1b64      	subs	r4, r4, r5
 8003304:	10a4      	asrs	r4, r4, #2
 8003306:	42a6      	cmp	r6, r4
 8003308:	d105      	bne.n	8003316 <__libc_init_array+0x2e>
 800330a:	bd70      	pop	{r4, r5, r6, pc}
 800330c:	00b3      	lsls	r3, r6, #2
 800330e:	58eb      	ldr	r3, [r5, r3]
 8003310:	4798      	blx	r3
 8003312:	3601      	adds	r6, #1
 8003314:	e7ee      	b.n	80032f4 <__libc_init_array+0xc>
 8003316:	00b3      	lsls	r3, r6, #2
 8003318:	58eb      	ldr	r3, [r5, r3]
 800331a:	4798      	blx	r3
 800331c:	3601      	adds	r6, #1
 800331e:	e7f2      	b.n	8003306 <__libc_init_array+0x1e>
 8003320:	080035fc 	.word	0x080035fc
 8003324:	080035fc 	.word	0x080035fc
 8003328:	08003600 	.word	0x08003600
 800332c:	080035fc 	.word	0x080035fc

08003330 <_init>:
 8003330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003332:	46c0      	nop			; (mov r8, r8)
 8003334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003336:	bc08      	pop	{r3}
 8003338:	469e      	mov	lr, r3
 800333a:	4770      	bx	lr

0800333c <_fini>:
 800333c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800333e:	46c0      	nop			; (mov r8, r8)
 8003340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003342:	bc08      	pop	{r3}
 8003344:	469e      	mov	lr, r3
 8003346:	4770      	bx	lr
