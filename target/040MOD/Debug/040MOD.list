
040MOD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fb4  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  0800306c  0800306c  0001306c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030f4  080030f4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080030f4  080030f4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030f4  080030f4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030f4  080030f4  000130f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030f8  080030f8  000130f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080030fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000974  2000000c  08003108  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000980  08003108  00020980  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000af97  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d05  00000000  00000000  0002b00e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000850  00000000  00000000  0002cd18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000066c  00000000  00000000  0002d568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014fb1  00000000  00000000  0002dbd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b74e  00000000  00000000  00042b85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008373d  00000000  00000000  0004e2d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001c64  00000000  00000000  000d1a10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000d3674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08003054 	.word	0x08003054

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08003054 	.word	0x08003054

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <HAL_UARTEx_RxEventCallback>:
	// RS485 TTL pinleri aktif olacak
	HAL_UART_Transmit_DMA(&huart1, (const uint8_t *)data, BUFFER_SIZE);
}

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
 80003f4:	000a      	movs	r2, r1
 80003f6:	1cbb      	adds	r3, r7, #2
 80003f8:	801a      	strh	r2, [r3, #0]
    if (huart->Instance == USART1)
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	4a1a      	ldr	r2, [pc, #104]	; (8000468 <HAL_UARTEx_RxEventCallback+0x7c>)
 8000400:	4293      	cmp	r3, r2
 8000402:	d12d      	bne.n	8000460 <HAL_UARTEx_RxEventCallback+0x74>
    {
        received_data_length = BUFFER_SIZE - hdma_usart1_rx.Instance->CNDTR;
 8000404:	4b19      	ldr	r3, [pc, #100]	; (800046c <HAL_UARTEx_RxEventCallback+0x80>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	685b      	ldr	r3, [r3, #4]
 800040a:	b29b      	uxth	r3, r3
 800040c:	2280      	movs	r2, #128	; 0x80
 800040e:	00d2      	lsls	r2, r2, #3
 8000410:	1ad3      	subs	r3, r2, r3
 8000412:	b29a      	uxth	r2, r3
 8000414:	4b16      	ldr	r3, [pc, #88]	; (8000470 <HAL_UARTEx_RxEventCallback+0x84>)
 8000416:	801a      	strh	r2, [r3, #0]

        if(rx_buffer[0] == LED_ON)
 8000418:	4b16      	ldr	r3, [pc, #88]	; (8000474 <HAL_UARTEx_RxEventCallback+0x88>)
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	2b4e      	cmp	r3, #78	; 0x4e
 800041e:	d106      	bne.n	800042e <HAL_UARTEx_RxEventCallback+0x42>
        {
        	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000420:	4b15      	ldr	r3, [pc, #84]	; (8000478 <HAL_UARTEx_RxEventCallback+0x8c>)
 8000422:	2200      	movs	r2, #0
 8000424:	2180      	movs	r1, #128	; 0x80
 8000426:	0018      	movs	r0, r3
 8000428:	f000 ffea 	bl	8001400 <HAL_GPIO_WritePin>
 800042c:	e011      	b.n	8000452 <HAL_UARTEx_RxEventCallback+0x66>
        }
        else if(rx_buffer[0] == LED_OFF)
 800042e:	4b11      	ldr	r3, [pc, #68]	; (8000474 <HAL_UARTEx_RxEventCallback+0x88>)
 8000430:	781b      	ldrb	r3, [r3, #0]
 8000432:	2b46      	cmp	r3, #70	; 0x46
 8000434:	d106      	bne.n	8000444 <HAL_UARTEx_RxEventCallback+0x58>
        {
        	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8000436:	4b10      	ldr	r3, [pc, #64]	; (8000478 <HAL_UARTEx_RxEventCallback+0x8c>)
 8000438:	2201      	movs	r2, #1
 800043a:	2180      	movs	r1, #128	; 0x80
 800043c:	0018      	movs	r0, r3
 800043e:	f000 ffdf 	bl	8001400 <HAL_GPIO_WritePin>
 8000442:	e006      	b.n	8000452 <HAL_UARTEx_RxEventCallback+0x66>
        }
        else if(rx_buffer[0] == LED_TOGGLE)
 8000444:	4b0b      	ldr	r3, [pc, #44]	; (8000474 <HAL_UARTEx_RxEventCallback+0x88>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b54      	cmp	r3, #84	; 0x54
 800044a:	d102      	bne.n	8000452 <HAL_UARTEx_RxEventCallback+0x66>
        {
        	toggle_flag = 1;
 800044c:	4b0b      	ldr	r3, [pc, #44]	; (800047c <HAL_UARTEx_RxEventCallback+0x90>)
 800044e:	2201      	movs	r2, #1
 8000450:	701a      	strb	r2, [r3, #0]
        }
        HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t*)rx_buffer, BUFFER_SIZE);
 8000452:	2380      	movs	r3, #128	; 0x80
 8000454:	00da      	lsls	r2, r3, #3
 8000456:	4907      	ldr	r1, [pc, #28]	; (8000474 <HAL_UARTEx_RxEventCallback+0x88>)
 8000458:	4b09      	ldr	r3, [pc, #36]	; (8000480 <HAL_UARTEx_RxEventCallback+0x94>)
 800045a:	0018      	movs	r0, r3
 800045c:	f002 fd08 	bl	8002e70 <HAL_UARTEx_ReceiveToIdle_DMA>

    }
}
 8000460:	46c0      	nop			; (mov r8, r8)
 8000462:	46bd      	mov	sp, r7
 8000464:	b002      	add	sp, #8
 8000466:	bd80      	pop	{r7, pc}
 8000468:	40013800 	.word	0x40013800
 800046c:	200000bc 	.word	0x200000bc
 8000470:	20000976 	.word	0x20000976
 8000474:	20000174 	.word	0x20000174
 8000478:	50000800 	.word	0x50000800
 800047c:	20000974 	.word	0x20000974
 8000480:	20000028 	.word	0x20000028

08000484 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000488:	f000 fa7c 	bl	8000984 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800048c:	f000 f848 	bl	8000520 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000490:	f000 f90e 	bl	80006b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000494:	f000 f8e6 	bl	8000664 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000498:	f000 f896 	bl	80005c8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t*)rx_buffer, BUFFER_SIZE);
 800049c:	2380      	movs	r3, #128	; 0x80
 800049e:	00da      	lsls	r2, r3, #3
 80004a0:	4919      	ldr	r1, [pc, #100]	; (8000508 <main+0x84>)
 80004a2:	4b1a      	ldr	r3, [pc, #104]	; (800050c <main+0x88>)
 80004a4:	0018      	movs	r0, r3
 80004a6:	f002 fce3 	bl	8002e70 <HAL_UARTEx_ReceiveToIdle_DMA>

  TxData[0] = 0x05;
 80004aa:	4b19      	ldr	r3, [pc, #100]	; (8000510 <main+0x8c>)
 80004ac:	2205      	movs	r2, #5
 80004ae:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(toggle_flag)
 80004b0:	4b18      	ldr	r3, [pc, #96]	; (8000514 <main+0x90>)
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	b2db      	uxtb	r3, r3
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d0fa      	beq.n	80004b0 <main+0x2c>
	  {
		  while(i <= 10)
 80004ba:	e01a      	b.n	80004f2 <main+0x6e>
		  {
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80004bc:	4b16      	ldr	r3, [pc, #88]	; (8000518 <main+0x94>)
 80004be:	2200      	movs	r2, #0
 80004c0:	2180      	movs	r1, #128	; 0x80
 80004c2:	0018      	movs	r0, r3
 80004c4:	f000 ff9c 	bl	8001400 <HAL_GPIO_WritePin>
			  HAL_Delay(1000);
 80004c8:	23fa      	movs	r3, #250	; 0xfa
 80004ca:	009b      	lsls	r3, r3, #2
 80004cc:	0018      	movs	r0, r3
 80004ce:	f000 fadf 	bl	8000a90 <HAL_Delay>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 80004d2:	4b11      	ldr	r3, [pc, #68]	; (8000518 <main+0x94>)
 80004d4:	2201      	movs	r2, #1
 80004d6:	2180      	movs	r1, #128	; 0x80
 80004d8:	0018      	movs	r0, r3
 80004da:	f000 ff91 	bl	8001400 <HAL_GPIO_WritePin>
			  HAL_Delay(1000);
 80004de:	23fa      	movs	r3, #250	; 0xfa
 80004e0:	009b      	lsls	r3, r3, #2
 80004e2:	0018      	movs	r0, r3
 80004e4:	f000 fad4 	bl	8000a90 <HAL_Delay>
			  i++;
 80004e8:	4b0c      	ldr	r3, [pc, #48]	; (800051c <main+0x98>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	1c5a      	adds	r2, r3, #1
 80004ee:	4b0b      	ldr	r3, [pc, #44]	; (800051c <main+0x98>)
 80004f0:	601a      	str	r2, [r3, #0]
		  while(i <= 10)
 80004f2:	4b0a      	ldr	r3, [pc, #40]	; (800051c <main+0x98>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	2b0a      	cmp	r3, #10
 80004f8:	dde0      	ble.n	80004bc <main+0x38>
		  }
		  toggle_flag = 0;
 80004fa:	4b06      	ldr	r3, [pc, #24]	; (8000514 <main+0x90>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	701a      	strb	r2, [r3, #0]
		  i = 0;
 8000500:	4b06      	ldr	r3, [pc, #24]	; (800051c <main+0x98>)
 8000502:	2200      	movs	r2, #0
 8000504:	601a      	str	r2, [r3, #0]
	  if(toggle_flag)
 8000506:	e7d3      	b.n	80004b0 <main+0x2c>
 8000508:	20000174 	.word	0x20000174
 800050c:	20000028 	.word	0x20000028
 8000510:	20000574 	.word	0x20000574
 8000514:	20000974 	.word	0x20000974
 8000518:	50000800 	.word	0x50000800
 800051c:	20000978 	.word	0x20000978

08000520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000520:	b590      	push	{r4, r7, lr}
 8000522:	b093      	sub	sp, #76	; 0x4c
 8000524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000526:	2414      	movs	r4, #20
 8000528:	193b      	adds	r3, r7, r4
 800052a:	0018      	movs	r0, r3
 800052c:	2334      	movs	r3, #52	; 0x34
 800052e:	001a      	movs	r2, r3
 8000530:	2100      	movs	r1, #0
 8000532:	f002 fd63 	bl	8002ffc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000536:	1d3b      	adds	r3, r7, #4
 8000538:	0018      	movs	r0, r3
 800053a:	2310      	movs	r3, #16
 800053c:	001a      	movs	r2, r3
 800053e:	2100      	movs	r1, #0
 8000540:	f002 fd5c 	bl	8002ffc <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000544:	2380      	movs	r3, #128	; 0x80
 8000546:	009b      	lsls	r3, r3, #2
 8000548:	0018      	movs	r0, r3
 800054a:	f000 ff77 	bl	800143c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800054e:	193b      	adds	r3, r7, r4
 8000550:	2201      	movs	r2, #1
 8000552:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000554:	193b      	adds	r3, r7, r4
 8000556:	2280      	movs	r2, #128	; 0x80
 8000558:	0252      	lsls	r2, r2, #9
 800055a:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800055c:	0021      	movs	r1, r4
 800055e:	187b      	adds	r3, r7, r1
 8000560:	2202      	movs	r2, #2
 8000562:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000564:	187b      	adds	r3, r7, r1
 8000566:	2203      	movs	r2, #3
 8000568:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800056a:	187b      	adds	r3, r7, r1
 800056c:	2200      	movs	r2, #0
 800056e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000570:	187b      	adds	r3, r7, r1
 8000572:	2210      	movs	r2, #16
 8000574:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000576:	187b      	adds	r3, r7, r1
 8000578:	2280      	movs	r2, #128	; 0x80
 800057a:	0292      	lsls	r2, r2, #10
 800057c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800057e:	187b      	adds	r3, r7, r1
 8000580:	2280      	movs	r2, #128	; 0x80
 8000582:	0592      	lsls	r2, r2, #22
 8000584:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000586:	187b      	adds	r3, r7, r1
 8000588:	0018      	movs	r0, r3
 800058a:	f000 ffa3 	bl	80014d4 <HAL_RCC_OscConfig>
 800058e:	1e03      	subs	r3, r0, #0
 8000590:	d001      	beq.n	8000596 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000592:	f000 f8af 	bl	80006f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000596:	1d3b      	adds	r3, r7, #4
 8000598:	2207      	movs	r2, #7
 800059a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800059c:	1d3b      	adds	r3, r7, #4
 800059e:	2202      	movs	r2, #2
 80005a0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a2:	1d3b      	adds	r3, r7, #4
 80005a4:	2200      	movs	r2, #0
 80005a6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a8:	1d3b      	adds	r3, r7, #4
 80005aa:	2200      	movs	r2, #0
 80005ac:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005ae:	1d3b      	adds	r3, r7, #4
 80005b0:	2102      	movs	r1, #2
 80005b2:	0018      	movs	r0, r3
 80005b4:	f001 fa9e 	bl	8001af4 <HAL_RCC_ClockConfig>
 80005b8:	1e03      	subs	r3, r0, #0
 80005ba:	d001      	beq.n	80005c0 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80005bc:	f000 f89a 	bl	80006f4 <Error_Handler>
  }
}
 80005c0:	46c0      	nop			; (mov r8, r8)
 80005c2:	46bd      	mov	sp, r7
 80005c4:	b013      	add	sp, #76	; 0x4c
 80005c6:	bd90      	pop	{r4, r7, pc}

080005c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005cc:	4b23      	ldr	r3, [pc, #140]	; (800065c <MX_USART1_UART_Init+0x94>)
 80005ce:	4a24      	ldr	r2, [pc, #144]	; (8000660 <MX_USART1_UART_Init+0x98>)
 80005d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80005d2:	4b22      	ldr	r3, [pc, #136]	; (800065c <MX_USART1_UART_Init+0x94>)
 80005d4:	2296      	movs	r2, #150	; 0x96
 80005d6:	0192      	lsls	r2, r2, #6
 80005d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005da:	4b20      	ldr	r3, [pc, #128]	; (800065c <MX_USART1_UART_Init+0x94>)
 80005dc:	2200      	movs	r2, #0
 80005de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005e0:	4b1e      	ldr	r3, [pc, #120]	; (800065c <MX_USART1_UART_Init+0x94>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005e6:	4b1d      	ldr	r3, [pc, #116]	; (800065c <MX_USART1_UART_Init+0x94>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005ec:	4b1b      	ldr	r3, [pc, #108]	; (800065c <MX_USART1_UART_Init+0x94>)
 80005ee:	220c      	movs	r2, #12
 80005f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005f2:	4b1a      	ldr	r3, [pc, #104]	; (800065c <MX_USART1_UART_Init+0x94>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005f8:	4b18      	ldr	r3, [pc, #96]	; (800065c <MX_USART1_UART_Init+0x94>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005fe:	4b17      	ldr	r3, [pc, #92]	; (800065c <MX_USART1_UART_Init+0x94>)
 8000600:	2200      	movs	r2, #0
 8000602:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000604:	4b15      	ldr	r3, [pc, #84]	; (800065c <MX_USART1_UART_Init+0x94>)
 8000606:	2200      	movs	r2, #0
 8000608:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800060a:	4b14      	ldr	r3, [pc, #80]	; (800065c <MX_USART1_UART_Init+0x94>)
 800060c:	2200      	movs	r2, #0
 800060e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000610:	4b12      	ldr	r3, [pc, #72]	; (800065c <MX_USART1_UART_Init+0x94>)
 8000612:	0018      	movs	r0, r3
 8000614:	f001 fd4c 	bl	80020b0 <HAL_UART_Init>
 8000618:	1e03      	subs	r3, r0, #0
 800061a:	d001      	beq.n	8000620 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800061c:	f000 f86a 	bl	80006f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000620:	4b0e      	ldr	r3, [pc, #56]	; (800065c <MX_USART1_UART_Init+0x94>)
 8000622:	2100      	movs	r1, #0
 8000624:	0018      	movs	r0, r3
 8000626:	f002 fba1 	bl	8002d6c <HAL_UARTEx_SetTxFifoThreshold>
 800062a:	1e03      	subs	r3, r0, #0
 800062c:	d001      	beq.n	8000632 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800062e:	f000 f861 	bl	80006f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000632:	4b0a      	ldr	r3, [pc, #40]	; (800065c <MX_USART1_UART_Init+0x94>)
 8000634:	2100      	movs	r1, #0
 8000636:	0018      	movs	r0, r3
 8000638:	f002 fbd8 	bl	8002dec <HAL_UARTEx_SetRxFifoThreshold>
 800063c:	1e03      	subs	r3, r0, #0
 800063e:	d001      	beq.n	8000644 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000640:	f000 f858 	bl	80006f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000644:	4b05      	ldr	r3, [pc, #20]	; (800065c <MX_USART1_UART_Init+0x94>)
 8000646:	0018      	movs	r0, r3
 8000648:	f002 fb56 	bl	8002cf8 <HAL_UARTEx_DisableFifoMode>
 800064c:	1e03      	subs	r3, r0, #0
 800064e:	d001      	beq.n	8000654 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000650:	f000 f850 	bl	80006f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000654:	46c0      	nop			; (mov r8, r8)
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	46c0      	nop			; (mov r8, r8)
 800065c:	20000028 	.word	0x20000028
 8000660:	40013800 	.word	0x40013800

08000664 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800066a:	4b10      	ldr	r3, [pc, #64]	; (80006ac <MX_DMA_Init+0x48>)
 800066c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800066e:	4b0f      	ldr	r3, [pc, #60]	; (80006ac <MX_DMA_Init+0x48>)
 8000670:	2101      	movs	r1, #1
 8000672:	430a      	orrs	r2, r1
 8000674:	639a      	str	r2, [r3, #56]	; 0x38
 8000676:	4b0d      	ldr	r3, [pc, #52]	; (80006ac <MX_DMA_Init+0x48>)
 8000678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800067a:	2201      	movs	r2, #1
 800067c:	4013      	ands	r3, r2
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000682:	2200      	movs	r2, #0
 8000684:	2100      	movs	r1, #0
 8000686:	2009      	movs	r0, #9
 8000688:	f000 fad2 	bl	8000c30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800068c:	2009      	movs	r0, #9
 800068e:	f000 fae4 	bl	8000c5a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000692:	2200      	movs	r2, #0
 8000694:	2100      	movs	r1, #0
 8000696:	200a      	movs	r0, #10
 8000698:	f000 faca 	bl	8000c30 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800069c:	200a      	movs	r0, #10
 800069e:	f000 fadc 	bl	8000c5a <HAL_NVIC_EnableIRQ>

}
 80006a2:	46c0      	nop			; (mov r8, r8)
 80006a4:	46bd      	mov	sp, r7
 80006a6:	b002      	add	sp, #8
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	46c0      	nop			; (mov r8, r8)
 80006ac:	40021000 	.word	0x40021000

080006b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006b6:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <MX_GPIO_Init+0x40>)
 80006b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006ba:	4b0d      	ldr	r3, [pc, #52]	; (80006f0 <MX_GPIO_Init+0x40>)
 80006bc:	2120      	movs	r1, #32
 80006be:	430a      	orrs	r2, r1
 80006c0:	635a      	str	r2, [r3, #52]	; 0x34
 80006c2:	4b0b      	ldr	r3, [pc, #44]	; (80006f0 <MX_GPIO_Init+0x40>)
 80006c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006c6:	2220      	movs	r2, #32
 80006c8:	4013      	ands	r3, r2
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ce:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <MX_GPIO_Init+0x40>)
 80006d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006d2:	4b07      	ldr	r3, [pc, #28]	; (80006f0 <MX_GPIO_Init+0x40>)
 80006d4:	2101      	movs	r1, #1
 80006d6:	430a      	orrs	r2, r1
 80006d8:	635a      	str	r2, [r3, #52]	; 0x34
 80006da:	4b05      	ldr	r3, [pc, #20]	; (80006f0 <MX_GPIO_Init+0x40>)
 80006dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006de:	2201      	movs	r2, #1
 80006e0:	4013      	ands	r3, r2
 80006e2:	603b      	str	r3, [r7, #0]
 80006e4:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006e6:	46c0      	nop			; (mov r8, r8)
 80006e8:	46bd      	mov	sp, r7
 80006ea:	b002      	add	sp, #8
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	46c0      	nop			; (mov r8, r8)
 80006f0:	40021000 	.word	0x40021000

080006f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f8:	b672      	cpsid	i
}
 80006fa:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006fc:	e7fe      	b.n	80006fc <Error_Handler+0x8>
	...

08000700 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000706:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <HAL_MspInit+0x44>)
 8000708:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800070a:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <HAL_MspInit+0x44>)
 800070c:	2101      	movs	r1, #1
 800070e:	430a      	orrs	r2, r1
 8000710:	641a      	str	r2, [r3, #64]	; 0x40
 8000712:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <HAL_MspInit+0x44>)
 8000714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000716:	2201      	movs	r2, #1
 8000718:	4013      	ands	r3, r2
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800071e:	4b09      	ldr	r3, [pc, #36]	; (8000744 <HAL_MspInit+0x44>)
 8000720:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000722:	4b08      	ldr	r3, [pc, #32]	; (8000744 <HAL_MspInit+0x44>)
 8000724:	2180      	movs	r1, #128	; 0x80
 8000726:	0549      	lsls	r1, r1, #21
 8000728:	430a      	orrs	r2, r1
 800072a:	63da      	str	r2, [r3, #60]	; 0x3c
 800072c:	4b05      	ldr	r3, [pc, #20]	; (8000744 <HAL_MspInit+0x44>)
 800072e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000730:	2380      	movs	r3, #128	; 0x80
 8000732:	055b      	lsls	r3, r3, #21
 8000734:	4013      	ands	r3, r2
 8000736:	603b      	str	r3, [r7, #0]
 8000738:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800073a:	46c0      	nop			; (mov r8, r8)
 800073c:	46bd      	mov	sp, r7
 800073e:	b002      	add	sp, #8
 8000740:	bd80      	pop	{r7, pc}
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	40021000 	.word	0x40021000

08000748 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000748:	b590      	push	{r4, r7, lr}
 800074a:	b091      	sub	sp, #68	; 0x44
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000750:	232c      	movs	r3, #44	; 0x2c
 8000752:	18fb      	adds	r3, r7, r3
 8000754:	0018      	movs	r0, r3
 8000756:	2314      	movs	r3, #20
 8000758:	001a      	movs	r2, r3
 800075a:	2100      	movs	r1, #0
 800075c:	f002 fc4e 	bl	8002ffc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000760:	2410      	movs	r4, #16
 8000762:	193b      	adds	r3, r7, r4
 8000764:	0018      	movs	r0, r3
 8000766:	231c      	movs	r3, #28
 8000768:	001a      	movs	r2, r3
 800076a:	2100      	movs	r1, #0
 800076c:	f002 fc46 	bl	8002ffc <memset>
  if(huart->Instance==USART1)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a4d      	ldr	r2, [pc, #308]	; (80008ac <HAL_UART_MspInit+0x164>)
 8000776:	4293      	cmp	r3, r2
 8000778:	d000      	beq.n	800077c <HAL_UART_MspInit+0x34>
 800077a:	e092      	b.n	80008a2 <HAL_UART_MspInit+0x15a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800077c:	193b      	adds	r3, r7, r4
 800077e:	2201      	movs	r2, #1
 8000780:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000782:	193b      	adds	r3, r7, r4
 8000784:	2200      	movs	r2, #0
 8000786:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000788:	193b      	adds	r3, r7, r4
 800078a:	0018      	movs	r0, r3
 800078c:	f001 fb5c 	bl	8001e48 <HAL_RCCEx_PeriphCLKConfig>
 8000790:	1e03      	subs	r3, r0, #0
 8000792:	d001      	beq.n	8000798 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8000794:	f7ff ffae 	bl	80006f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000798:	4b45      	ldr	r3, [pc, #276]	; (80008b0 <HAL_UART_MspInit+0x168>)
 800079a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800079c:	4b44      	ldr	r3, [pc, #272]	; (80008b0 <HAL_UART_MspInit+0x168>)
 800079e:	2180      	movs	r1, #128	; 0x80
 80007a0:	01c9      	lsls	r1, r1, #7
 80007a2:	430a      	orrs	r2, r1
 80007a4:	641a      	str	r2, [r3, #64]	; 0x40
 80007a6:	4b42      	ldr	r3, [pc, #264]	; (80008b0 <HAL_UART_MspInit+0x168>)
 80007a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007aa:	2380      	movs	r3, #128	; 0x80
 80007ac:	01db      	lsls	r3, r3, #7
 80007ae:	4013      	ands	r3, r2
 80007b0:	60fb      	str	r3, [r7, #12]
 80007b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b4:	4b3e      	ldr	r3, [pc, #248]	; (80008b0 <HAL_UART_MspInit+0x168>)
 80007b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007b8:	4b3d      	ldr	r3, [pc, #244]	; (80008b0 <HAL_UART_MspInit+0x168>)
 80007ba:	2101      	movs	r1, #1
 80007bc:	430a      	orrs	r2, r1
 80007be:	635a      	str	r2, [r3, #52]	; 0x34
 80007c0:	4b3b      	ldr	r3, [pc, #236]	; (80008b0 <HAL_UART_MspInit+0x168>)
 80007c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007c4:	2201      	movs	r2, #1
 80007c6:	4013      	ands	r3, r2
 80007c8:	60bb      	str	r3, [r7, #8]
 80007ca:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80007cc:	212c      	movs	r1, #44	; 0x2c
 80007ce:	187b      	adds	r3, r7, r1
 80007d0:	22c0      	movs	r2, #192	; 0xc0
 80007d2:	00d2      	lsls	r2, r2, #3
 80007d4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d6:	187b      	adds	r3, r7, r1
 80007d8:	2202      	movs	r2, #2
 80007da:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	187b      	adds	r3, r7, r1
 80007de:	2200      	movs	r2, #0
 80007e0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e2:	187b      	adds	r3, r7, r1
 80007e4:	2200      	movs	r2, #0
 80007e6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80007e8:	187b      	adds	r3, r7, r1
 80007ea:	2201      	movs	r2, #1
 80007ec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ee:	187a      	adds	r2, r7, r1
 80007f0:	23a0      	movs	r3, #160	; 0xa0
 80007f2:	05db      	lsls	r3, r3, #23
 80007f4:	0011      	movs	r1, r2
 80007f6:	0018      	movs	r0, r3
 80007f8:	f000 fc9e 	bl	8001138 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 80007fc:	4b2d      	ldr	r3, [pc, #180]	; (80008b4 <HAL_UART_MspInit+0x16c>)
 80007fe:	4a2e      	ldr	r2, [pc, #184]	; (80008b8 <HAL_UART_MspInit+0x170>)
 8000800:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8000802:	4b2c      	ldr	r3, [pc, #176]	; (80008b4 <HAL_UART_MspInit+0x16c>)
 8000804:	2232      	movs	r2, #50	; 0x32
 8000806:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000808:	4b2a      	ldr	r3, [pc, #168]	; (80008b4 <HAL_UART_MspInit+0x16c>)
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800080e:	4b29      	ldr	r3, [pc, #164]	; (80008b4 <HAL_UART_MspInit+0x16c>)
 8000810:	2200      	movs	r2, #0
 8000812:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000814:	4b27      	ldr	r3, [pc, #156]	; (80008b4 <HAL_UART_MspInit+0x16c>)
 8000816:	2280      	movs	r2, #128	; 0x80
 8000818:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800081a:	4b26      	ldr	r3, [pc, #152]	; (80008b4 <HAL_UART_MspInit+0x16c>)
 800081c:	2200      	movs	r2, #0
 800081e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000820:	4b24      	ldr	r3, [pc, #144]	; (80008b4 <HAL_UART_MspInit+0x16c>)
 8000822:	2200      	movs	r2, #0
 8000824:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000826:	4b23      	ldr	r3, [pc, #140]	; (80008b4 <HAL_UART_MspInit+0x16c>)
 8000828:	2200      	movs	r2, #0
 800082a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800082c:	4b21      	ldr	r3, [pc, #132]	; (80008b4 <HAL_UART_MspInit+0x16c>)
 800082e:	2200      	movs	r2, #0
 8000830:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000832:	4b20      	ldr	r3, [pc, #128]	; (80008b4 <HAL_UART_MspInit+0x16c>)
 8000834:	0018      	movs	r0, r3
 8000836:	f000 fa2d 	bl	8000c94 <HAL_DMA_Init>
 800083a:	1e03      	subs	r3, r0, #0
 800083c:	d001      	beq.n	8000842 <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 800083e:	f7ff ff59 	bl	80006f4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	2180      	movs	r1, #128	; 0x80
 8000846:	4a1b      	ldr	r2, [pc, #108]	; (80008b4 <HAL_UART_MspInit+0x16c>)
 8000848:	505a      	str	r2, [r3, r1]
 800084a:	4b1a      	ldr	r3, [pc, #104]	; (80008b4 <HAL_UART_MspInit+0x16c>)
 800084c:	687a      	ldr	r2, [r7, #4]
 800084e:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8000850:	4b1a      	ldr	r3, [pc, #104]	; (80008bc <HAL_UART_MspInit+0x174>)
 8000852:	4a1b      	ldr	r2, [pc, #108]	; (80008c0 <HAL_UART_MspInit+0x178>)
 8000854:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8000856:	4b19      	ldr	r3, [pc, #100]	; (80008bc <HAL_UART_MspInit+0x174>)
 8000858:	2233      	movs	r2, #51	; 0x33
 800085a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800085c:	4b17      	ldr	r3, [pc, #92]	; (80008bc <HAL_UART_MspInit+0x174>)
 800085e:	2210      	movs	r2, #16
 8000860:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000862:	4b16      	ldr	r3, [pc, #88]	; (80008bc <HAL_UART_MspInit+0x174>)
 8000864:	2200      	movs	r2, #0
 8000866:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000868:	4b14      	ldr	r3, [pc, #80]	; (80008bc <HAL_UART_MspInit+0x174>)
 800086a:	2280      	movs	r2, #128	; 0x80
 800086c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800086e:	4b13      	ldr	r3, [pc, #76]	; (80008bc <HAL_UART_MspInit+0x174>)
 8000870:	2200      	movs	r2, #0
 8000872:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000874:	4b11      	ldr	r3, [pc, #68]	; (80008bc <HAL_UART_MspInit+0x174>)
 8000876:	2200      	movs	r2, #0
 8000878:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800087a:	4b10      	ldr	r3, [pc, #64]	; (80008bc <HAL_UART_MspInit+0x174>)
 800087c:	2200      	movs	r2, #0
 800087e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000880:	4b0e      	ldr	r3, [pc, #56]	; (80008bc <HAL_UART_MspInit+0x174>)
 8000882:	2200      	movs	r2, #0
 8000884:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000886:	4b0d      	ldr	r3, [pc, #52]	; (80008bc <HAL_UART_MspInit+0x174>)
 8000888:	0018      	movs	r0, r3
 800088a:	f000 fa03 	bl	8000c94 <HAL_DMA_Init>
 800088e:	1e03      	subs	r3, r0, #0
 8000890:	d001      	beq.n	8000896 <HAL_UART_MspInit+0x14e>
    {
      Error_Handler();
 8000892:	f7ff ff2f 	bl	80006f4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	4a08      	ldr	r2, [pc, #32]	; (80008bc <HAL_UART_MspInit+0x174>)
 800089a:	67da      	str	r2, [r3, #124]	; 0x7c
 800089c:	4b07      	ldr	r3, [pc, #28]	; (80008bc <HAL_UART_MspInit+0x174>)
 800089e:	687a      	ldr	r2, [r7, #4]
 80008a0:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80008a2:	46c0      	nop			; (mov r8, r8)
 80008a4:	46bd      	mov	sp, r7
 80008a6:	b011      	add	sp, #68	; 0x44
 80008a8:	bd90      	pop	{r4, r7, pc}
 80008aa:	46c0      	nop			; (mov r8, r8)
 80008ac:	40013800 	.word	0x40013800
 80008b0:	40021000 	.word	0x40021000
 80008b4:	200000bc 	.word	0x200000bc
 80008b8:	40020008 	.word	0x40020008
 80008bc:	20000118 	.word	0x20000118
 80008c0:	4002001c 	.word	0x4002001c

080008c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008c8:	e7fe      	b.n	80008c8 <NMI_Handler+0x4>

080008ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ca:	b580      	push	{r7, lr}
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ce:	e7fe      	b.n	80008ce <HardFault_Handler+0x4>

080008d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008d4:	46c0      	nop			; (mov r8, r8)
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}

080008da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008da:	b580      	push	{r7, lr}
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008de:	46c0      	nop			; (mov r8, r8)
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008e8:	f000 f8b6 	bl	8000a58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ec:	46c0      	nop			; (mov r8, r8)
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
	...

080008f4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80008f8:	4b03      	ldr	r3, [pc, #12]	; (8000908 <DMA1_Channel1_IRQHandler+0x14>)
 80008fa:	0018      	movs	r0, r3
 80008fc:	f000 fada 	bl	8000eb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000900:	46c0      	nop			; (mov r8, r8)
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	46c0      	nop			; (mov r8, r8)
 8000908:	200000bc 	.word	0x200000bc

0800090c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000910:	4b03      	ldr	r3, [pc, #12]	; (8000920 <DMA1_Channel2_3_IRQHandler+0x14>)
 8000912:	0018      	movs	r0, r3
 8000914:	f000 face 	bl	8000eb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000918:	46c0      	nop			; (mov r8, r8)
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	46c0      	nop			; (mov r8, r8)
 8000920:	20000118 	.word	0x20000118

08000924 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000928:	46c0      	nop			; (mov r8, r8)
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
	...

08000930 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000930:	480d      	ldr	r0, [pc, #52]	; (8000968 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000932:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000934:	f7ff fff6 	bl	8000924 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000938:	480c      	ldr	r0, [pc, #48]	; (800096c <LoopForever+0x6>)
  ldr r1, =_edata
 800093a:	490d      	ldr	r1, [pc, #52]	; (8000970 <LoopForever+0xa>)
  ldr r2, =_sidata
 800093c:	4a0d      	ldr	r2, [pc, #52]	; (8000974 <LoopForever+0xe>)
  movs r3, #0
 800093e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000940:	e002      	b.n	8000948 <LoopCopyDataInit>

08000942 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000942:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000944:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000946:	3304      	adds	r3, #4

08000948 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000948:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800094a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800094c:	d3f9      	bcc.n	8000942 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800094e:	4a0a      	ldr	r2, [pc, #40]	; (8000978 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000950:	4c0a      	ldr	r4, [pc, #40]	; (800097c <LoopForever+0x16>)
  movs r3, #0
 8000952:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000954:	e001      	b.n	800095a <LoopFillZerobss>

08000956 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000956:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000958:	3204      	adds	r2, #4

0800095a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800095a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800095c:	d3fb      	bcc.n	8000956 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800095e:	f002 fb55 	bl	800300c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000962:	f7ff fd8f 	bl	8000484 <main>

08000966 <LoopForever>:

LoopForever:
  b LoopForever
 8000966:	e7fe      	b.n	8000966 <LoopForever>
  ldr   r0, =_estack
 8000968:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 800096c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000970:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000974:	080030fc 	.word	0x080030fc
  ldr r2, =_sbss
 8000978:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800097c:	20000980 	.word	0x20000980

08000980 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000980:	e7fe      	b.n	8000980 <ADC1_IRQHandler>
	...

08000984 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800098a:	1dfb      	adds	r3, r7, #7
 800098c:	2200      	movs	r2, #0
 800098e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000990:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <HAL_Init+0x3c>)
 8000992:	681a      	ldr	r2, [r3, #0]
 8000994:	4b0a      	ldr	r3, [pc, #40]	; (80009c0 <HAL_Init+0x3c>)
 8000996:	2180      	movs	r1, #128	; 0x80
 8000998:	0049      	lsls	r1, r1, #1
 800099a:	430a      	orrs	r2, r1
 800099c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800099e:	2003      	movs	r0, #3
 80009a0:	f000 f810 	bl	80009c4 <HAL_InitTick>
 80009a4:	1e03      	subs	r3, r0, #0
 80009a6:	d003      	beq.n	80009b0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80009a8:	1dfb      	adds	r3, r7, #7
 80009aa:	2201      	movs	r2, #1
 80009ac:	701a      	strb	r2, [r3, #0]
 80009ae:	e001      	b.n	80009b4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80009b0:	f7ff fea6 	bl	8000700 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009b4:	1dfb      	adds	r3, r7, #7
 80009b6:	781b      	ldrb	r3, [r3, #0]
}
 80009b8:	0018      	movs	r0, r3
 80009ba:	46bd      	mov	sp, r7
 80009bc:	b002      	add	sp, #8
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	40022000 	.word	0x40022000

080009c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009c4:	b590      	push	{r4, r7, lr}
 80009c6:	b085      	sub	sp, #20
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009cc:	230f      	movs	r3, #15
 80009ce:	18fb      	adds	r3, r7, r3
 80009d0:	2200      	movs	r2, #0
 80009d2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80009d4:	4b1d      	ldr	r3, [pc, #116]	; (8000a4c <HAL_InitTick+0x88>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d02b      	beq.n	8000a34 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80009dc:	4b1c      	ldr	r3, [pc, #112]	; (8000a50 <HAL_InitTick+0x8c>)
 80009de:	681c      	ldr	r4, [r3, #0]
 80009e0:	4b1a      	ldr	r3, [pc, #104]	; (8000a4c <HAL_InitTick+0x88>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	0019      	movs	r1, r3
 80009e6:	23fa      	movs	r3, #250	; 0xfa
 80009e8:	0098      	lsls	r0, r3, #2
 80009ea:	f7ff fb89 	bl	8000100 <__udivsi3>
 80009ee:	0003      	movs	r3, r0
 80009f0:	0019      	movs	r1, r3
 80009f2:	0020      	movs	r0, r4
 80009f4:	f7ff fb84 	bl	8000100 <__udivsi3>
 80009f8:	0003      	movs	r3, r0
 80009fa:	0018      	movs	r0, r3
 80009fc:	f000 f93d 	bl	8000c7a <HAL_SYSTICK_Config>
 8000a00:	1e03      	subs	r3, r0, #0
 8000a02:	d112      	bne.n	8000a2a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	2b03      	cmp	r3, #3
 8000a08:	d80a      	bhi.n	8000a20 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a0a:	6879      	ldr	r1, [r7, #4]
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	425b      	negs	r3, r3
 8000a10:	2200      	movs	r2, #0
 8000a12:	0018      	movs	r0, r3
 8000a14:	f000 f90c 	bl	8000c30 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a18:	4b0e      	ldr	r3, [pc, #56]	; (8000a54 <HAL_InitTick+0x90>)
 8000a1a:	687a      	ldr	r2, [r7, #4]
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	e00d      	b.n	8000a3c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000a20:	230f      	movs	r3, #15
 8000a22:	18fb      	adds	r3, r7, r3
 8000a24:	2201      	movs	r2, #1
 8000a26:	701a      	strb	r2, [r3, #0]
 8000a28:	e008      	b.n	8000a3c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a2a:	230f      	movs	r3, #15
 8000a2c:	18fb      	adds	r3, r7, r3
 8000a2e:	2201      	movs	r2, #1
 8000a30:	701a      	strb	r2, [r3, #0]
 8000a32:	e003      	b.n	8000a3c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a34:	230f      	movs	r3, #15
 8000a36:	18fb      	adds	r3, r7, r3
 8000a38:	2201      	movs	r2, #1
 8000a3a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000a3c:	230f      	movs	r3, #15
 8000a3e:	18fb      	adds	r3, r7, r3
 8000a40:	781b      	ldrb	r3, [r3, #0]
}
 8000a42:	0018      	movs	r0, r3
 8000a44:	46bd      	mov	sp, r7
 8000a46:	b005      	add	sp, #20
 8000a48:	bd90      	pop	{r4, r7, pc}
 8000a4a:	46c0      	nop			; (mov r8, r8)
 8000a4c:	20000008 	.word	0x20000008
 8000a50:	20000000 	.word	0x20000000
 8000a54:	20000004 	.word	0x20000004

08000a58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a5c:	4b05      	ldr	r3, [pc, #20]	; (8000a74 <HAL_IncTick+0x1c>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	001a      	movs	r2, r3
 8000a62:	4b05      	ldr	r3, [pc, #20]	; (8000a78 <HAL_IncTick+0x20>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	18d2      	adds	r2, r2, r3
 8000a68:	4b03      	ldr	r3, [pc, #12]	; (8000a78 <HAL_IncTick+0x20>)
 8000a6a:	601a      	str	r2, [r3, #0]
}
 8000a6c:	46c0      	nop			; (mov r8, r8)
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	46c0      	nop			; (mov r8, r8)
 8000a74:	20000008 	.word	0x20000008
 8000a78:	2000097c 	.word	0x2000097c

08000a7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a80:	4b02      	ldr	r3, [pc, #8]	; (8000a8c <HAL_GetTick+0x10>)
 8000a82:	681b      	ldr	r3, [r3, #0]
}
 8000a84:	0018      	movs	r0, r3
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	46c0      	nop			; (mov r8, r8)
 8000a8c:	2000097c 	.word	0x2000097c

08000a90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a98:	f7ff fff0 	bl	8000a7c <HAL_GetTick>
 8000a9c:	0003      	movs	r3, r0
 8000a9e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	d005      	beq.n	8000ab6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aaa:	4b0a      	ldr	r3, [pc, #40]	; (8000ad4 <HAL_Delay+0x44>)
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	001a      	movs	r2, r3
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	189b      	adds	r3, r3, r2
 8000ab4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ab6:	46c0      	nop			; (mov r8, r8)
 8000ab8:	f7ff ffe0 	bl	8000a7c <HAL_GetTick>
 8000abc:	0002      	movs	r2, r0
 8000abe:	68bb      	ldr	r3, [r7, #8]
 8000ac0:	1ad3      	subs	r3, r2, r3
 8000ac2:	68fa      	ldr	r2, [r7, #12]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	d8f7      	bhi.n	8000ab8 <HAL_Delay+0x28>
  {
  }
}
 8000ac8:	46c0      	nop			; (mov r8, r8)
 8000aca:	46c0      	nop			; (mov r8, r8)
 8000acc:	46bd      	mov	sp, r7
 8000ace:	b004      	add	sp, #16
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	46c0      	nop			; (mov r8, r8)
 8000ad4:	20000008 	.word	0x20000008

08000ad8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	0002      	movs	r2, r0
 8000ae0:	1dfb      	adds	r3, r7, #7
 8000ae2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ae4:	1dfb      	adds	r3, r7, #7
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	2b7f      	cmp	r3, #127	; 0x7f
 8000aea:	d809      	bhi.n	8000b00 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aec:	1dfb      	adds	r3, r7, #7
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	001a      	movs	r2, r3
 8000af2:	231f      	movs	r3, #31
 8000af4:	401a      	ands	r2, r3
 8000af6:	4b04      	ldr	r3, [pc, #16]	; (8000b08 <__NVIC_EnableIRQ+0x30>)
 8000af8:	2101      	movs	r1, #1
 8000afa:	4091      	lsls	r1, r2
 8000afc:	000a      	movs	r2, r1
 8000afe:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000b00:	46c0      	nop			; (mov r8, r8)
 8000b02:	46bd      	mov	sp, r7
 8000b04:	b002      	add	sp, #8
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	e000e100 	.word	0xe000e100

08000b0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b0c:	b590      	push	{r4, r7, lr}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	0002      	movs	r2, r0
 8000b14:	6039      	str	r1, [r7, #0]
 8000b16:	1dfb      	adds	r3, r7, #7
 8000b18:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b1a:	1dfb      	adds	r3, r7, #7
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	2b7f      	cmp	r3, #127	; 0x7f
 8000b20:	d828      	bhi.n	8000b74 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b22:	4a2f      	ldr	r2, [pc, #188]	; (8000be0 <__NVIC_SetPriority+0xd4>)
 8000b24:	1dfb      	adds	r3, r7, #7
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	b25b      	sxtb	r3, r3
 8000b2a:	089b      	lsrs	r3, r3, #2
 8000b2c:	33c0      	adds	r3, #192	; 0xc0
 8000b2e:	009b      	lsls	r3, r3, #2
 8000b30:	589b      	ldr	r3, [r3, r2]
 8000b32:	1dfa      	adds	r2, r7, #7
 8000b34:	7812      	ldrb	r2, [r2, #0]
 8000b36:	0011      	movs	r1, r2
 8000b38:	2203      	movs	r2, #3
 8000b3a:	400a      	ands	r2, r1
 8000b3c:	00d2      	lsls	r2, r2, #3
 8000b3e:	21ff      	movs	r1, #255	; 0xff
 8000b40:	4091      	lsls	r1, r2
 8000b42:	000a      	movs	r2, r1
 8000b44:	43d2      	mvns	r2, r2
 8000b46:	401a      	ands	r2, r3
 8000b48:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	019b      	lsls	r3, r3, #6
 8000b4e:	22ff      	movs	r2, #255	; 0xff
 8000b50:	401a      	ands	r2, r3
 8000b52:	1dfb      	adds	r3, r7, #7
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	0018      	movs	r0, r3
 8000b58:	2303      	movs	r3, #3
 8000b5a:	4003      	ands	r3, r0
 8000b5c:	00db      	lsls	r3, r3, #3
 8000b5e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b60:	481f      	ldr	r0, [pc, #124]	; (8000be0 <__NVIC_SetPriority+0xd4>)
 8000b62:	1dfb      	adds	r3, r7, #7
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	b25b      	sxtb	r3, r3
 8000b68:	089b      	lsrs	r3, r3, #2
 8000b6a:	430a      	orrs	r2, r1
 8000b6c:	33c0      	adds	r3, #192	; 0xc0
 8000b6e:	009b      	lsls	r3, r3, #2
 8000b70:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b72:	e031      	b.n	8000bd8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b74:	4a1b      	ldr	r2, [pc, #108]	; (8000be4 <__NVIC_SetPriority+0xd8>)
 8000b76:	1dfb      	adds	r3, r7, #7
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	0019      	movs	r1, r3
 8000b7c:	230f      	movs	r3, #15
 8000b7e:	400b      	ands	r3, r1
 8000b80:	3b08      	subs	r3, #8
 8000b82:	089b      	lsrs	r3, r3, #2
 8000b84:	3306      	adds	r3, #6
 8000b86:	009b      	lsls	r3, r3, #2
 8000b88:	18d3      	adds	r3, r2, r3
 8000b8a:	3304      	adds	r3, #4
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	1dfa      	adds	r2, r7, #7
 8000b90:	7812      	ldrb	r2, [r2, #0]
 8000b92:	0011      	movs	r1, r2
 8000b94:	2203      	movs	r2, #3
 8000b96:	400a      	ands	r2, r1
 8000b98:	00d2      	lsls	r2, r2, #3
 8000b9a:	21ff      	movs	r1, #255	; 0xff
 8000b9c:	4091      	lsls	r1, r2
 8000b9e:	000a      	movs	r2, r1
 8000ba0:	43d2      	mvns	r2, r2
 8000ba2:	401a      	ands	r2, r3
 8000ba4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	019b      	lsls	r3, r3, #6
 8000baa:	22ff      	movs	r2, #255	; 0xff
 8000bac:	401a      	ands	r2, r3
 8000bae:	1dfb      	adds	r3, r7, #7
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	2303      	movs	r3, #3
 8000bb6:	4003      	ands	r3, r0
 8000bb8:	00db      	lsls	r3, r3, #3
 8000bba:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bbc:	4809      	ldr	r0, [pc, #36]	; (8000be4 <__NVIC_SetPriority+0xd8>)
 8000bbe:	1dfb      	adds	r3, r7, #7
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	001c      	movs	r4, r3
 8000bc4:	230f      	movs	r3, #15
 8000bc6:	4023      	ands	r3, r4
 8000bc8:	3b08      	subs	r3, #8
 8000bca:	089b      	lsrs	r3, r3, #2
 8000bcc:	430a      	orrs	r2, r1
 8000bce:	3306      	adds	r3, #6
 8000bd0:	009b      	lsls	r3, r3, #2
 8000bd2:	18c3      	adds	r3, r0, r3
 8000bd4:	3304      	adds	r3, #4
 8000bd6:	601a      	str	r2, [r3, #0]
}
 8000bd8:	46c0      	nop			; (mov r8, r8)
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	b003      	add	sp, #12
 8000bde:	bd90      	pop	{r4, r7, pc}
 8000be0:	e000e100 	.word	0xe000e100
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	1e5a      	subs	r2, r3, #1
 8000bf4:	2380      	movs	r3, #128	; 0x80
 8000bf6:	045b      	lsls	r3, r3, #17
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	d301      	bcc.n	8000c00 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	e010      	b.n	8000c22 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c00:	4b0a      	ldr	r3, [pc, #40]	; (8000c2c <SysTick_Config+0x44>)
 8000c02:	687a      	ldr	r2, [r7, #4]
 8000c04:	3a01      	subs	r2, #1
 8000c06:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c08:	2301      	movs	r3, #1
 8000c0a:	425b      	negs	r3, r3
 8000c0c:	2103      	movs	r1, #3
 8000c0e:	0018      	movs	r0, r3
 8000c10:	f7ff ff7c 	bl	8000b0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c14:	4b05      	ldr	r3, [pc, #20]	; (8000c2c <SysTick_Config+0x44>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c1a:	4b04      	ldr	r3, [pc, #16]	; (8000c2c <SysTick_Config+0x44>)
 8000c1c:	2207      	movs	r2, #7
 8000c1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c20:	2300      	movs	r3, #0
}
 8000c22:	0018      	movs	r0, r3
 8000c24:	46bd      	mov	sp, r7
 8000c26:	b002      	add	sp, #8
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	46c0      	nop			; (mov r8, r8)
 8000c2c:	e000e010 	.word	0xe000e010

08000c30 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	60b9      	str	r1, [r7, #8]
 8000c38:	607a      	str	r2, [r7, #4]
 8000c3a:	210f      	movs	r1, #15
 8000c3c:	187b      	adds	r3, r7, r1
 8000c3e:	1c02      	adds	r2, r0, #0
 8000c40:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000c42:	68ba      	ldr	r2, [r7, #8]
 8000c44:	187b      	adds	r3, r7, r1
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	b25b      	sxtb	r3, r3
 8000c4a:	0011      	movs	r1, r2
 8000c4c:	0018      	movs	r0, r3
 8000c4e:	f7ff ff5d 	bl	8000b0c <__NVIC_SetPriority>
}
 8000c52:	46c0      	nop			; (mov r8, r8)
 8000c54:	46bd      	mov	sp, r7
 8000c56:	b004      	add	sp, #16
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b082      	sub	sp, #8
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	0002      	movs	r2, r0
 8000c62:	1dfb      	adds	r3, r7, #7
 8000c64:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c66:	1dfb      	adds	r3, r7, #7
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	b25b      	sxtb	r3, r3
 8000c6c:	0018      	movs	r0, r3
 8000c6e:	f7ff ff33 	bl	8000ad8 <__NVIC_EnableIRQ>
}
 8000c72:	46c0      	nop			; (mov r8, r8)
 8000c74:	46bd      	mov	sp, r7
 8000c76:	b002      	add	sp, #8
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	b082      	sub	sp, #8
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	0018      	movs	r0, r3
 8000c86:	f7ff ffaf 	bl	8000be8 <SysTick_Config>
 8000c8a:	0003      	movs	r3, r0
}
 8000c8c:	0018      	movs	r0, r3
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	b002      	add	sp, #8
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d101      	bne.n	8000ca6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	e077      	b.n	8000d96 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4a3d      	ldr	r2, [pc, #244]	; (8000da0 <HAL_DMA_Init+0x10c>)
 8000cac:	4694      	mov	ip, r2
 8000cae:	4463      	add	r3, ip
 8000cb0:	2114      	movs	r1, #20
 8000cb2:	0018      	movs	r0, r3
 8000cb4:	f7ff fa24 	bl	8000100 <__udivsi3>
 8000cb8:	0003      	movs	r3, r0
 8000cba:	009a      	lsls	r2, r3, #2
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2225      	movs	r2, #37	; 0x25
 8000cc4:	2102      	movs	r1, #2
 8000cc6:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4934      	ldr	r1, [pc, #208]	; (8000da4 <HAL_DMA_Init+0x110>)
 8000cd4:	400a      	ands	r2, r1
 8000cd6:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	6819      	ldr	r1, [r3, #0]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	689a      	ldr	r2, [r3, #8]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	68db      	ldr	r3, [r3, #12]
 8000ce6:	431a      	orrs	r2, r3
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	691b      	ldr	r3, [r3, #16]
 8000cec:	431a      	orrs	r2, r3
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	695b      	ldr	r3, [r3, #20]
 8000cf2:	431a      	orrs	r2, r3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	431a      	orrs	r2, r3
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	69db      	ldr	r3, [r3, #28]
 8000cfe:	431a      	orrs	r2, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	6a1b      	ldr	r3, [r3, #32]
 8000d04:	431a      	orrs	r2, r3
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	430a      	orrs	r2, r1
 8000d0c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	0018      	movs	r0, r3
 8000d12:	f000 f9c1 	bl	8001098 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	689a      	ldr	r2, [r3, #8]
 8000d1a:	2380      	movs	r3, #128	; 0x80
 8000d1c:	01db      	lsls	r3, r3, #7
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	d102      	bne.n	8000d28 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2200      	movs	r2, #0
 8000d26:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	685a      	ldr	r2, [r3, #4]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d30:	213f      	movs	r1, #63	; 0x3f
 8000d32:	400a      	ands	r2, r1
 8000d34:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d3a:	687a      	ldr	r2, [r7, #4]
 8000d3c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000d3e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d011      	beq.n	8000d6c <HAL_DMA_Init+0xd8>
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	2b04      	cmp	r3, #4
 8000d4e:	d80d      	bhi.n	8000d6c <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	0018      	movs	r0, r3
 8000d54:	f000 f9cc 	bl	80010f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d64:	687a      	ldr	r2, [r7, #4]
 8000d66:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	e008      	b.n	8000d7e <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2200      	movs	r2, #0
 8000d70:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2200      	movs	r2, #0
 8000d76:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2200      	movs	r2, #0
 8000d82:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2225      	movs	r2, #37	; 0x25
 8000d88:	2101      	movs	r1, #1
 8000d8a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2224      	movs	r2, #36	; 0x24
 8000d90:	2100      	movs	r1, #0
 8000d92:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000d94:	2300      	movs	r3, #0
}
 8000d96:	0018      	movs	r0, r3
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	b002      	add	sp, #8
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	46c0      	nop			; (mov r8, r8)
 8000da0:	bffdfff8 	.word	0xbffdfff8
 8000da4:	ffff800f 	.word	0xffff800f

08000da8 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
 8000db4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000db6:	2317      	movs	r3, #23
 8000db8:	18fb      	adds	r3, r7, r3
 8000dba:	2200      	movs	r2, #0
 8000dbc:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	2224      	movs	r2, #36	; 0x24
 8000dc2:	5c9b      	ldrb	r3, [r3, r2]
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d101      	bne.n	8000dcc <HAL_DMA_Start_IT+0x24>
 8000dc8:	2302      	movs	r3, #2
 8000dca:	e06f      	b.n	8000eac <HAL_DMA_Start_IT+0x104>
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	2224      	movs	r2, #36	; 0x24
 8000dd0:	2101      	movs	r1, #1
 8000dd2:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	2225      	movs	r2, #37	; 0x25
 8000dd8:	5c9b      	ldrb	r3, [r3, r2]
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d157      	bne.n	8000e90 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	2225      	movs	r2, #37	; 0x25
 8000de4:	2102      	movs	r1, #2
 8000de6:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	2200      	movs	r2, #0
 8000dec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2101      	movs	r1, #1
 8000dfa:	438a      	bics	r2, r1
 8000dfc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	687a      	ldr	r2, [r7, #4]
 8000e02:	68b9      	ldr	r1, [r7, #8]
 8000e04:	68f8      	ldr	r0, [r7, #12]
 8000e06:	f000 f907 	bl	8001018 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d008      	beq.n	8000e24 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	210e      	movs	r1, #14
 8000e1e:	430a      	orrs	r2, r1
 8000e20:	601a      	str	r2, [r3, #0]
 8000e22:	e00f      	b.n	8000e44 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	2104      	movs	r1, #4
 8000e30:	438a      	bics	r2, r1
 8000e32:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	210a      	movs	r1, #10
 8000e40:	430a      	orrs	r2, r1
 8000e42:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	2380      	movs	r3, #128	; 0x80
 8000e4c:	025b      	lsls	r3, r3, #9
 8000e4e:	4013      	ands	r3, r2
 8000e50:	d008      	beq.n	8000e64 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5c:	2180      	movs	r1, #128	; 0x80
 8000e5e:	0049      	lsls	r1, r1, #1
 8000e60:	430a      	orrs	r2, r1
 8000e62:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d008      	beq.n	8000e7e <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e76:	2180      	movs	r1, #128	; 0x80
 8000e78:	0049      	lsls	r1, r1, #1
 8000e7a:	430a      	orrs	r2, r1
 8000e7c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	2101      	movs	r1, #1
 8000e8a:	430a      	orrs	r2, r1
 8000e8c:	601a      	str	r2, [r3, #0]
 8000e8e:	e00a      	b.n	8000ea6 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	2280      	movs	r2, #128	; 0x80
 8000e94:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	2224      	movs	r2, #36	; 0x24
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8000e9e:	2317      	movs	r3, #23
 8000ea0:	18fb      	adds	r3, r7, r3
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8000ea6:	2317      	movs	r3, #23
 8000ea8:	18fb      	adds	r3, r7, r3
 8000eaa:	781b      	ldrb	r3, [r3, #0]
}
 8000eac:	0018      	movs	r0, r3
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	b006      	add	sp, #24
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8000ebc:	4b55      	ldr	r3, [pc, #340]	; (8001014 <HAL_DMA_IRQHandler+0x160>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ece:	221c      	movs	r2, #28
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	2204      	movs	r2, #4
 8000ed4:	409a      	lsls	r2, r3
 8000ed6:	0013      	movs	r3, r2
 8000ed8:	68fa      	ldr	r2, [r7, #12]
 8000eda:	4013      	ands	r3, r2
 8000edc:	d027      	beq.n	8000f2e <HAL_DMA_IRQHandler+0x7a>
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	2204      	movs	r2, #4
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	d023      	beq.n	8000f2e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2220      	movs	r2, #32
 8000eee:	4013      	ands	r3, r2
 8000ef0:	d107      	bne.n	8000f02 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2104      	movs	r1, #4
 8000efe:	438a      	bics	r2, r1
 8000f00:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8000f02:	4b44      	ldr	r3, [pc, #272]	; (8001014 <HAL_DMA_IRQHandler+0x160>)
 8000f04:	6859      	ldr	r1, [r3, #4]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0a:	221c      	movs	r2, #28
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	2204      	movs	r2, #4
 8000f10:	409a      	lsls	r2, r3
 8000f12:	4b40      	ldr	r3, [pc, #256]	; (8001014 <HAL_DMA_IRQHandler+0x160>)
 8000f14:	430a      	orrs	r2, r1
 8000f16:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d100      	bne.n	8000f22 <HAL_DMA_IRQHandler+0x6e>
 8000f20:	e073      	b.n	800100a <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	0010      	movs	r0, r2
 8000f2a:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8000f2c:	e06d      	b.n	800100a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f32:	221c      	movs	r2, #28
 8000f34:	4013      	ands	r3, r2
 8000f36:	2202      	movs	r2, #2
 8000f38:	409a      	lsls	r2, r3
 8000f3a:	0013      	movs	r3, r2
 8000f3c:	68fa      	ldr	r2, [r7, #12]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	d02e      	beq.n	8000fa0 <HAL_DMA_IRQHandler+0xec>
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	2202      	movs	r2, #2
 8000f46:	4013      	ands	r3, r2
 8000f48:	d02a      	beq.n	8000fa0 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2220      	movs	r2, #32
 8000f52:	4013      	ands	r3, r2
 8000f54:	d10b      	bne.n	8000f6e <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	210a      	movs	r1, #10
 8000f62:	438a      	bics	r2, r1
 8000f64:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2225      	movs	r2, #37	; 0x25
 8000f6a:	2101      	movs	r1, #1
 8000f6c:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8000f6e:	4b29      	ldr	r3, [pc, #164]	; (8001014 <HAL_DMA_IRQHandler+0x160>)
 8000f70:	6859      	ldr	r1, [r3, #4]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f76:	221c      	movs	r2, #28
 8000f78:	4013      	ands	r3, r2
 8000f7a:	2202      	movs	r2, #2
 8000f7c:	409a      	lsls	r2, r3
 8000f7e:	4b25      	ldr	r3, [pc, #148]	; (8001014 <HAL_DMA_IRQHandler+0x160>)
 8000f80:	430a      	orrs	r2, r1
 8000f82:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2224      	movs	r2, #36	; 0x24
 8000f88:	2100      	movs	r1, #0
 8000f8a:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d03a      	beq.n	800100a <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f98:	687a      	ldr	r2, [r7, #4]
 8000f9a:	0010      	movs	r0, r2
 8000f9c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8000f9e:	e034      	b.n	800100a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa4:	221c      	movs	r2, #28
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	2208      	movs	r2, #8
 8000faa:	409a      	lsls	r2, r3
 8000fac:	0013      	movs	r3, r2
 8000fae:	68fa      	ldr	r2, [r7, #12]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	d02b      	beq.n	800100c <HAL_DMA_IRQHandler+0x158>
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	2208      	movs	r2, #8
 8000fb8:	4013      	ands	r3, r2
 8000fba:	d027      	beq.n	800100c <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	210e      	movs	r1, #14
 8000fc8:	438a      	bics	r2, r1
 8000fca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8000fcc:	4b11      	ldr	r3, [pc, #68]	; (8001014 <HAL_DMA_IRQHandler+0x160>)
 8000fce:	6859      	ldr	r1, [r3, #4]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd4:	221c      	movs	r2, #28
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	2201      	movs	r2, #1
 8000fda:	409a      	lsls	r2, r3
 8000fdc:	4b0d      	ldr	r3, [pc, #52]	; (8001014 <HAL_DMA_IRQHandler+0x160>)
 8000fde:	430a      	orrs	r2, r1
 8000fe0:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2225      	movs	r2, #37	; 0x25
 8000fec:	2101      	movs	r1, #1
 8000fee:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2224      	movs	r2, #36	; 0x24
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d005      	beq.n	800100c <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	0010      	movs	r0, r2
 8001008:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800100a:	46c0      	nop			; (mov r8, r8)
 800100c:	46c0      	nop			; (mov r8, r8)
}
 800100e:	46bd      	mov	sp, r7
 8001010:	b004      	add	sp, #16
 8001012:	bd80      	pop	{r7, pc}
 8001014:	40020000 	.word	0x40020000

08001018 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
 8001024:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800102a:	68fa      	ldr	r2, [r7, #12]
 800102c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800102e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001034:	2b00      	cmp	r3, #0
 8001036:	d004      	beq.n	8001042 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800103c:	68fa      	ldr	r2, [r7, #12]
 800103e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001040:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001042:	4b14      	ldr	r3, [pc, #80]	; (8001094 <DMA_SetConfig+0x7c>)
 8001044:	6859      	ldr	r1, [r3, #4]
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104a:	221c      	movs	r2, #28
 800104c:	4013      	ands	r3, r2
 800104e:	2201      	movs	r2, #1
 8001050:	409a      	lsls	r2, r3
 8001052:	4b10      	ldr	r3, [pc, #64]	; (8001094 <DMA_SetConfig+0x7c>)
 8001054:	430a      	orrs	r2, r1
 8001056:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	683a      	ldr	r2, [r7, #0]
 800105e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	2b10      	cmp	r3, #16
 8001066:	d108      	bne.n	800107a <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	687a      	ldr	r2, [r7, #4]
 800106e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	68ba      	ldr	r2, [r7, #8]
 8001076:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001078:	e007      	b.n	800108a <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	68ba      	ldr	r2, [r7, #8]
 8001080:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	60da      	str	r2, [r3, #12]
}
 800108a:	46c0      	nop			; (mov r8, r8)
 800108c:	46bd      	mov	sp, r7
 800108e:	b004      	add	sp, #16
 8001090:	bd80      	pop	{r7, pc}
 8001092:	46c0      	nop			; (mov r8, r8)
 8001094:	40020000 	.word	0x40020000

08001098 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a4:	089b      	lsrs	r3, r3, #2
 80010a6:	4a10      	ldr	r2, [pc, #64]	; (80010e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80010a8:	4694      	mov	ip, r2
 80010aa:	4463      	add	r3, ip
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	001a      	movs	r2, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	001a      	movs	r2, r3
 80010ba:	23ff      	movs	r3, #255	; 0xff
 80010bc:	4013      	ands	r3, r2
 80010be:	3b08      	subs	r3, #8
 80010c0:	2114      	movs	r1, #20
 80010c2:	0018      	movs	r0, r3
 80010c4:	f7ff f81c 	bl	8000100 <__udivsi3>
 80010c8:	0003      	movs	r3, r0
 80010ca:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	4a07      	ldr	r2, [pc, #28]	; (80010ec <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80010d0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	221f      	movs	r2, #31
 80010d6:	4013      	ands	r3, r2
 80010d8:	2201      	movs	r2, #1
 80010da:	409a      	lsls	r2, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80010e0:	46c0      	nop			; (mov r8, r8)
 80010e2:	46bd      	mov	sp, r7
 80010e4:	b004      	add	sp, #16
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	10008200 	.word	0x10008200
 80010ec:	40020880 	.word	0x40020880

080010f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	223f      	movs	r2, #63	; 0x3f
 80010fe:	4013      	ands	r3, r2
 8001100:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	4a0a      	ldr	r2, [pc, #40]	; (8001130 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001106:	4694      	mov	ip, r2
 8001108:	4463      	add	r3, ip
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	001a      	movs	r2, r3
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a07      	ldr	r2, [pc, #28]	; (8001134 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001116:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	3b01      	subs	r3, #1
 800111c:	2203      	movs	r2, #3
 800111e:	4013      	ands	r3, r2
 8001120:	2201      	movs	r2, #1
 8001122:	409a      	lsls	r2, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001128:	46c0      	nop			; (mov r8, r8)
 800112a:	46bd      	mov	sp, r7
 800112c:	b004      	add	sp, #16
 800112e:	bd80      	pop	{r7, pc}
 8001130:	1000823f 	.word	0x1000823f
 8001134:	40020940 	.word	0x40020940

08001138 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001142:	2300      	movs	r3, #0
 8001144:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001146:	e147      	b.n	80013d8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2101      	movs	r1, #1
 800114e:	697a      	ldr	r2, [r7, #20]
 8001150:	4091      	lsls	r1, r2
 8001152:	000a      	movs	r2, r1
 8001154:	4013      	ands	r3, r2
 8001156:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d100      	bne.n	8001160 <HAL_GPIO_Init+0x28>
 800115e:	e138      	b.n	80013d2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	2203      	movs	r2, #3
 8001166:	4013      	ands	r3, r2
 8001168:	2b01      	cmp	r3, #1
 800116a:	d005      	beq.n	8001178 <HAL_GPIO_Init+0x40>
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	2203      	movs	r2, #3
 8001172:	4013      	ands	r3, r2
 8001174:	2b02      	cmp	r3, #2
 8001176:	d130      	bne.n	80011da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	2203      	movs	r2, #3
 8001184:	409a      	lsls	r2, r3
 8001186:	0013      	movs	r3, r2
 8001188:	43da      	mvns	r2, r3
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	4013      	ands	r3, r2
 800118e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	68da      	ldr	r2, [r3, #12]
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	409a      	lsls	r2, r3
 800119a:	0013      	movs	r3, r2
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	4313      	orrs	r3, r2
 80011a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011ae:	2201      	movs	r2, #1
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	409a      	lsls	r2, r3
 80011b4:	0013      	movs	r3, r2
 80011b6:	43da      	mvns	r2, r3
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	4013      	ands	r3, r2
 80011bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	091b      	lsrs	r3, r3, #4
 80011c4:	2201      	movs	r2, #1
 80011c6:	401a      	ands	r2, r3
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	409a      	lsls	r2, r3
 80011cc:	0013      	movs	r3, r2
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	2203      	movs	r2, #3
 80011e0:	4013      	ands	r3, r2
 80011e2:	2b03      	cmp	r3, #3
 80011e4:	d017      	beq.n	8001216 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	68db      	ldr	r3, [r3, #12]
 80011ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	2203      	movs	r2, #3
 80011f2:	409a      	lsls	r2, r3
 80011f4:	0013      	movs	r3, r2
 80011f6:	43da      	mvns	r2, r3
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	4013      	ands	r3, r2
 80011fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	689a      	ldr	r2, [r3, #8]
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	409a      	lsls	r2, r3
 8001208:	0013      	movs	r3, r2
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	4313      	orrs	r3, r2
 800120e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	2203      	movs	r2, #3
 800121c:	4013      	ands	r3, r2
 800121e:	2b02      	cmp	r3, #2
 8001220:	d123      	bne.n	800126a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	08da      	lsrs	r2, r3, #3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	3208      	adds	r2, #8
 800122a:	0092      	lsls	r2, r2, #2
 800122c:	58d3      	ldr	r3, [r2, r3]
 800122e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	2207      	movs	r2, #7
 8001234:	4013      	ands	r3, r2
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	220f      	movs	r2, #15
 800123a:	409a      	lsls	r2, r3
 800123c:	0013      	movs	r3, r2
 800123e:	43da      	mvns	r2, r3
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	4013      	ands	r3, r2
 8001244:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	691a      	ldr	r2, [r3, #16]
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	2107      	movs	r1, #7
 800124e:	400b      	ands	r3, r1
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	409a      	lsls	r2, r3
 8001254:	0013      	movs	r3, r2
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	4313      	orrs	r3, r2
 800125a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	08da      	lsrs	r2, r3, #3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	3208      	adds	r2, #8
 8001264:	0092      	lsls	r2, r2, #2
 8001266:	6939      	ldr	r1, [r7, #16]
 8001268:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	2203      	movs	r2, #3
 8001276:	409a      	lsls	r2, r3
 8001278:	0013      	movs	r3, r2
 800127a:	43da      	mvns	r2, r3
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	4013      	ands	r3, r2
 8001280:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	2203      	movs	r2, #3
 8001288:	401a      	ands	r2, r3
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	409a      	lsls	r2, r3
 8001290:	0013      	movs	r3, r2
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	4313      	orrs	r3, r2
 8001296:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685a      	ldr	r2, [r3, #4]
 80012a2:	23c0      	movs	r3, #192	; 0xc0
 80012a4:	029b      	lsls	r3, r3, #10
 80012a6:	4013      	ands	r3, r2
 80012a8:	d100      	bne.n	80012ac <HAL_GPIO_Init+0x174>
 80012aa:	e092      	b.n	80013d2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80012ac:	4a50      	ldr	r2, [pc, #320]	; (80013f0 <HAL_GPIO_Init+0x2b8>)
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	089b      	lsrs	r3, r3, #2
 80012b2:	3318      	adds	r3, #24
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	589b      	ldr	r3, [r3, r2]
 80012b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	2203      	movs	r2, #3
 80012be:	4013      	ands	r3, r2
 80012c0:	00db      	lsls	r3, r3, #3
 80012c2:	220f      	movs	r2, #15
 80012c4:	409a      	lsls	r2, r3
 80012c6:	0013      	movs	r3, r2
 80012c8:	43da      	mvns	r2, r3
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	4013      	ands	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	23a0      	movs	r3, #160	; 0xa0
 80012d4:	05db      	lsls	r3, r3, #23
 80012d6:	429a      	cmp	r2, r3
 80012d8:	d013      	beq.n	8001302 <HAL_GPIO_Init+0x1ca>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a45      	ldr	r2, [pc, #276]	; (80013f4 <HAL_GPIO_Init+0x2bc>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d00d      	beq.n	80012fe <HAL_GPIO_Init+0x1c6>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a44      	ldr	r2, [pc, #272]	; (80013f8 <HAL_GPIO_Init+0x2c0>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d007      	beq.n	80012fa <HAL_GPIO_Init+0x1c2>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a43      	ldr	r2, [pc, #268]	; (80013fc <HAL_GPIO_Init+0x2c4>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d101      	bne.n	80012f6 <HAL_GPIO_Init+0x1be>
 80012f2:	2303      	movs	r3, #3
 80012f4:	e006      	b.n	8001304 <HAL_GPIO_Init+0x1cc>
 80012f6:	2305      	movs	r3, #5
 80012f8:	e004      	b.n	8001304 <HAL_GPIO_Init+0x1cc>
 80012fa:	2302      	movs	r3, #2
 80012fc:	e002      	b.n	8001304 <HAL_GPIO_Init+0x1cc>
 80012fe:	2301      	movs	r3, #1
 8001300:	e000      	b.n	8001304 <HAL_GPIO_Init+0x1cc>
 8001302:	2300      	movs	r3, #0
 8001304:	697a      	ldr	r2, [r7, #20]
 8001306:	2103      	movs	r1, #3
 8001308:	400a      	ands	r2, r1
 800130a:	00d2      	lsls	r2, r2, #3
 800130c:	4093      	lsls	r3, r2
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	4313      	orrs	r3, r2
 8001312:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001314:	4936      	ldr	r1, [pc, #216]	; (80013f0 <HAL_GPIO_Init+0x2b8>)
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	089b      	lsrs	r3, r3, #2
 800131a:	3318      	adds	r3, #24
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001322:	4b33      	ldr	r3, [pc, #204]	; (80013f0 <HAL_GPIO_Init+0x2b8>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	43da      	mvns	r2, r3
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	4013      	ands	r3, r2
 8001330:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685a      	ldr	r2, [r3, #4]
 8001336:	2380      	movs	r3, #128	; 0x80
 8001338:	035b      	lsls	r3, r3, #13
 800133a:	4013      	ands	r3, r2
 800133c:	d003      	beq.n	8001346 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	4313      	orrs	r3, r2
 8001344:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001346:	4b2a      	ldr	r3, [pc, #168]	; (80013f0 <HAL_GPIO_Init+0x2b8>)
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800134c:	4b28      	ldr	r3, [pc, #160]	; (80013f0 <HAL_GPIO_Init+0x2b8>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	43da      	mvns	r2, r3
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	4013      	ands	r3, r2
 800135a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685a      	ldr	r2, [r3, #4]
 8001360:	2380      	movs	r3, #128	; 0x80
 8001362:	039b      	lsls	r3, r3, #14
 8001364:	4013      	ands	r3, r2
 8001366:	d003      	beq.n	8001370 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001368:	693a      	ldr	r2, [r7, #16]
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	4313      	orrs	r3, r2
 800136e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001370:	4b1f      	ldr	r3, [pc, #124]	; (80013f0 <HAL_GPIO_Init+0x2b8>)
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001376:	4a1e      	ldr	r2, [pc, #120]	; (80013f0 <HAL_GPIO_Init+0x2b8>)
 8001378:	2384      	movs	r3, #132	; 0x84
 800137a:	58d3      	ldr	r3, [r2, r3]
 800137c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	43da      	mvns	r2, r3
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	4013      	ands	r3, r2
 8001386:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685a      	ldr	r2, [r3, #4]
 800138c:	2380      	movs	r3, #128	; 0x80
 800138e:	029b      	lsls	r3, r3, #10
 8001390:	4013      	ands	r3, r2
 8001392:	d003      	beq.n	800139c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	4313      	orrs	r3, r2
 800139a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800139c:	4914      	ldr	r1, [pc, #80]	; (80013f0 <HAL_GPIO_Init+0x2b8>)
 800139e:	2284      	movs	r2, #132	; 0x84
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80013a4:	4a12      	ldr	r2, [pc, #72]	; (80013f0 <HAL_GPIO_Init+0x2b8>)
 80013a6:	2380      	movs	r3, #128	; 0x80
 80013a8:	58d3      	ldr	r3, [r2, r3]
 80013aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	43da      	mvns	r2, r3
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	4013      	ands	r3, r2
 80013b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685a      	ldr	r2, [r3, #4]
 80013ba:	2380      	movs	r3, #128	; 0x80
 80013bc:	025b      	lsls	r3, r3, #9
 80013be:	4013      	ands	r3, r2
 80013c0:	d003      	beq.n	80013ca <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013ca:	4909      	ldr	r1, [pc, #36]	; (80013f0 <HAL_GPIO_Init+0x2b8>)
 80013cc:	2280      	movs	r2, #128	; 0x80
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	3301      	adds	r3, #1
 80013d6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	40da      	lsrs	r2, r3
 80013e0:	1e13      	subs	r3, r2, #0
 80013e2:	d000      	beq.n	80013e6 <HAL_GPIO_Init+0x2ae>
 80013e4:	e6b0      	b.n	8001148 <HAL_GPIO_Init+0x10>
  }
}
 80013e6:	46c0      	nop			; (mov r8, r8)
 80013e8:	46c0      	nop			; (mov r8, r8)
 80013ea:	46bd      	mov	sp, r7
 80013ec:	b006      	add	sp, #24
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40021800 	.word	0x40021800
 80013f4:	50000400 	.word	0x50000400
 80013f8:	50000800 	.word	0x50000800
 80013fc:	50000c00 	.word	0x50000c00

08001400 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	0008      	movs	r0, r1
 800140a:	0011      	movs	r1, r2
 800140c:	1cbb      	adds	r3, r7, #2
 800140e:	1c02      	adds	r2, r0, #0
 8001410:	801a      	strh	r2, [r3, #0]
 8001412:	1c7b      	adds	r3, r7, #1
 8001414:	1c0a      	adds	r2, r1, #0
 8001416:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001418:	1c7b      	adds	r3, r7, #1
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d004      	beq.n	800142a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001420:	1cbb      	adds	r3, r7, #2
 8001422:	881a      	ldrh	r2, [r3, #0]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001428:	e003      	b.n	8001432 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800142a:	1cbb      	adds	r3, r7, #2
 800142c:	881a      	ldrh	r2, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001432:	46c0      	nop			; (mov r8, r8)
 8001434:	46bd      	mov	sp, r7
 8001436:	b002      	add	sp, #8
 8001438:	bd80      	pop	{r7, pc}
	...

0800143c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001444:	4b19      	ldr	r3, [pc, #100]	; (80014ac <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a19      	ldr	r2, [pc, #100]	; (80014b0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800144a:	4013      	ands	r3, r2
 800144c:	0019      	movs	r1, r3
 800144e:	4b17      	ldr	r3, [pc, #92]	; (80014ac <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001450:	687a      	ldr	r2, [r7, #4]
 8001452:	430a      	orrs	r2, r1
 8001454:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	2380      	movs	r3, #128	; 0x80
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	429a      	cmp	r2, r3
 800145e:	d11f      	bne.n	80014a0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001460:	4b14      	ldr	r3, [pc, #80]	; (80014b4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	0013      	movs	r3, r2
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	189b      	adds	r3, r3, r2
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	4912      	ldr	r1, [pc, #72]	; (80014b8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800146e:	0018      	movs	r0, r3
 8001470:	f7fe fe46 	bl	8000100 <__udivsi3>
 8001474:	0003      	movs	r3, r0
 8001476:	3301      	adds	r3, #1
 8001478:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800147a:	e008      	b.n	800148e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d003      	beq.n	800148a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	3b01      	subs	r3, #1
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	e001      	b.n	800148e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e009      	b.n	80014a2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800148e:	4b07      	ldr	r3, [pc, #28]	; (80014ac <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001490:	695a      	ldr	r2, [r3, #20]
 8001492:	2380      	movs	r3, #128	; 0x80
 8001494:	00db      	lsls	r3, r3, #3
 8001496:	401a      	ands	r2, r3
 8001498:	2380      	movs	r3, #128	; 0x80
 800149a:	00db      	lsls	r3, r3, #3
 800149c:	429a      	cmp	r2, r3
 800149e:	d0ed      	beq.n	800147c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	0018      	movs	r0, r3
 80014a4:	46bd      	mov	sp, r7
 80014a6:	b004      	add	sp, #16
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	46c0      	nop			; (mov r8, r8)
 80014ac:	40007000 	.word	0x40007000
 80014b0:	fffff9ff 	.word	0xfffff9ff
 80014b4:	20000000 	.word	0x20000000
 80014b8:	000f4240 	.word	0x000f4240

080014bc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80014c0:	4b03      	ldr	r3, [pc, #12]	; (80014d0 <LL_RCC_GetAPB1Prescaler+0x14>)
 80014c2:	689a      	ldr	r2, [r3, #8]
 80014c4:	23e0      	movs	r3, #224	; 0xe0
 80014c6:	01db      	lsls	r3, r3, #7
 80014c8:	4013      	ands	r3, r2
}
 80014ca:	0018      	movs	r0, r3
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40021000 	.word	0x40021000

080014d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b088      	sub	sp, #32
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d101      	bne.n	80014e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e2f3      	b.n	8001ace <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2201      	movs	r2, #1
 80014ec:	4013      	ands	r3, r2
 80014ee:	d100      	bne.n	80014f2 <HAL_RCC_OscConfig+0x1e>
 80014f0:	e07c      	b.n	80015ec <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014f2:	4bc3      	ldr	r3, [pc, #780]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	2238      	movs	r2, #56	; 0x38
 80014f8:	4013      	ands	r3, r2
 80014fa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014fc:	4bc0      	ldr	r3, [pc, #768]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	2203      	movs	r2, #3
 8001502:	4013      	ands	r3, r2
 8001504:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001506:	69bb      	ldr	r3, [r7, #24]
 8001508:	2b10      	cmp	r3, #16
 800150a:	d102      	bne.n	8001512 <HAL_RCC_OscConfig+0x3e>
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	2b03      	cmp	r3, #3
 8001510:	d002      	beq.n	8001518 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001512:	69bb      	ldr	r3, [r7, #24]
 8001514:	2b08      	cmp	r3, #8
 8001516:	d10b      	bne.n	8001530 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001518:	4bb9      	ldr	r3, [pc, #740]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	2380      	movs	r3, #128	; 0x80
 800151e:	029b      	lsls	r3, r3, #10
 8001520:	4013      	ands	r3, r2
 8001522:	d062      	beq.n	80015ea <HAL_RCC_OscConfig+0x116>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d15e      	bne.n	80015ea <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e2ce      	b.n	8001ace <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	685a      	ldr	r2, [r3, #4]
 8001534:	2380      	movs	r3, #128	; 0x80
 8001536:	025b      	lsls	r3, r3, #9
 8001538:	429a      	cmp	r2, r3
 800153a:	d107      	bne.n	800154c <HAL_RCC_OscConfig+0x78>
 800153c:	4bb0      	ldr	r3, [pc, #704]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	4baf      	ldr	r3, [pc, #700]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 8001542:	2180      	movs	r1, #128	; 0x80
 8001544:	0249      	lsls	r1, r1, #9
 8001546:	430a      	orrs	r2, r1
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	e020      	b.n	800158e <HAL_RCC_OscConfig+0xba>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	685a      	ldr	r2, [r3, #4]
 8001550:	23a0      	movs	r3, #160	; 0xa0
 8001552:	02db      	lsls	r3, r3, #11
 8001554:	429a      	cmp	r2, r3
 8001556:	d10e      	bne.n	8001576 <HAL_RCC_OscConfig+0xa2>
 8001558:	4ba9      	ldr	r3, [pc, #676]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	4ba8      	ldr	r3, [pc, #672]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 800155e:	2180      	movs	r1, #128	; 0x80
 8001560:	02c9      	lsls	r1, r1, #11
 8001562:	430a      	orrs	r2, r1
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	4ba6      	ldr	r3, [pc, #664]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	4ba5      	ldr	r3, [pc, #660]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 800156c:	2180      	movs	r1, #128	; 0x80
 800156e:	0249      	lsls	r1, r1, #9
 8001570:	430a      	orrs	r2, r1
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	e00b      	b.n	800158e <HAL_RCC_OscConfig+0xba>
 8001576:	4ba2      	ldr	r3, [pc, #648]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	4ba1      	ldr	r3, [pc, #644]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 800157c:	49a1      	ldr	r1, [pc, #644]	; (8001804 <HAL_RCC_OscConfig+0x330>)
 800157e:	400a      	ands	r2, r1
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	4b9f      	ldr	r3, [pc, #636]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	4b9e      	ldr	r3, [pc, #632]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 8001588:	499f      	ldr	r1, [pc, #636]	; (8001808 <HAL_RCC_OscConfig+0x334>)
 800158a:	400a      	ands	r2, r1
 800158c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d014      	beq.n	80015c0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001596:	f7ff fa71 	bl	8000a7c <HAL_GetTick>
 800159a:	0003      	movs	r3, r0
 800159c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800159e:	e008      	b.n	80015b2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015a0:	f7ff fa6c 	bl	8000a7c <HAL_GetTick>
 80015a4:	0002      	movs	r2, r0
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	2b64      	cmp	r3, #100	; 0x64
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e28d      	b.n	8001ace <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015b2:	4b93      	ldr	r3, [pc, #588]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	2380      	movs	r3, #128	; 0x80
 80015b8:	029b      	lsls	r3, r3, #10
 80015ba:	4013      	ands	r3, r2
 80015bc:	d0f0      	beq.n	80015a0 <HAL_RCC_OscConfig+0xcc>
 80015be:	e015      	b.n	80015ec <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c0:	f7ff fa5c 	bl	8000a7c <HAL_GetTick>
 80015c4:	0003      	movs	r3, r0
 80015c6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015c8:	e008      	b.n	80015dc <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015ca:	f7ff fa57 	bl	8000a7c <HAL_GetTick>
 80015ce:	0002      	movs	r2, r0
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	2b64      	cmp	r3, #100	; 0x64
 80015d6:	d901      	bls.n	80015dc <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e278      	b.n	8001ace <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015dc:	4b88      	ldr	r3, [pc, #544]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	2380      	movs	r3, #128	; 0x80
 80015e2:	029b      	lsls	r3, r3, #10
 80015e4:	4013      	ands	r3, r2
 80015e6:	d1f0      	bne.n	80015ca <HAL_RCC_OscConfig+0xf6>
 80015e8:	e000      	b.n	80015ec <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015ea:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2202      	movs	r2, #2
 80015f2:	4013      	ands	r3, r2
 80015f4:	d100      	bne.n	80015f8 <HAL_RCC_OscConfig+0x124>
 80015f6:	e099      	b.n	800172c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015f8:	4b81      	ldr	r3, [pc, #516]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	2238      	movs	r2, #56	; 0x38
 80015fe:	4013      	ands	r3, r2
 8001600:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001602:	4b7f      	ldr	r3, [pc, #508]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 8001604:	68db      	ldr	r3, [r3, #12]
 8001606:	2203      	movs	r2, #3
 8001608:	4013      	ands	r3, r2
 800160a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	2b10      	cmp	r3, #16
 8001610:	d102      	bne.n	8001618 <HAL_RCC_OscConfig+0x144>
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	2b02      	cmp	r3, #2
 8001616:	d002      	beq.n	800161e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d135      	bne.n	800168a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800161e:	4b78      	ldr	r3, [pc, #480]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	2380      	movs	r3, #128	; 0x80
 8001624:	00db      	lsls	r3, r3, #3
 8001626:	4013      	ands	r3, r2
 8001628:	d005      	beq.n	8001636 <HAL_RCC_OscConfig+0x162>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	68db      	ldr	r3, [r3, #12]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d101      	bne.n	8001636 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e24b      	b.n	8001ace <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001636:	4b72      	ldr	r3, [pc, #456]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	4a74      	ldr	r2, [pc, #464]	; (800180c <HAL_RCC_OscConfig+0x338>)
 800163c:	4013      	ands	r3, r2
 800163e:	0019      	movs	r1, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	695b      	ldr	r3, [r3, #20]
 8001644:	021a      	lsls	r2, r3, #8
 8001646:	4b6e      	ldr	r3, [pc, #440]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 8001648:	430a      	orrs	r2, r1
 800164a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d112      	bne.n	8001678 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001652:	4b6b      	ldr	r3, [pc, #428]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a6e      	ldr	r2, [pc, #440]	; (8001810 <HAL_RCC_OscConfig+0x33c>)
 8001658:	4013      	ands	r3, r2
 800165a:	0019      	movs	r1, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	691a      	ldr	r2, [r3, #16]
 8001660:	4b67      	ldr	r3, [pc, #412]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 8001662:	430a      	orrs	r2, r1
 8001664:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001666:	4b66      	ldr	r3, [pc, #408]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	0adb      	lsrs	r3, r3, #11
 800166c:	2207      	movs	r2, #7
 800166e:	4013      	ands	r3, r2
 8001670:	4a68      	ldr	r2, [pc, #416]	; (8001814 <HAL_RCC_OscConfig+0x340>)
 8001672:	40da      	lsrs	r2, r3
 8001674:	4b68      	ldr	r3, [pc, #416]	; (8001818 <HAL_RCC_OscConfig+0x344>)
 8001676:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001678:	4b68      	ldr	r3, [pc, #416]	; (800181c <HAL_RCC_OscConfig+0x348>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	0018      	movs	r0, r3
 800167e:	f7ff f9a1 	bl	80009c4 <HAL_InitTick>
 8001682:	1e03      	subs	r3, r0, #0
 8001684:	d051      	beq.n	800172a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e221      	b.n	8001ace <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	68db      	ldr	r3, [r3, #12]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d030      	beq.n	80016f4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001692:	4b5b      	ldr	r3, [pc, #364]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a5e      	ldr	r2, [pc, #376]	; (8001810 <HAL_RCC_OscConfig+0x33c>)
 8001698:	4013      	ands	r3, r2
 800169a:	0019      	movs	r1, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	691a      	ldr	r2, [r3, #16]
 80016a0:	4b57      	ldr	r3, [pc, #348]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 80016a2:	430a      	orrs	r2, r1
 80016a4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80016a6:	4b56      	ldr	r3, [pc, #344]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	4b55      	ldr	r3, [pc, #340]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 80016ac:	2180      	movs	r1, #128	; 0x80
 80016ae:	0049      	lsls	r1, r1, #1
 80016b0:	430a      	orrs	r2, r1
 80016b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b4:	f7ff f9e2 	bl	8000a7c <HAL_GetTick>
 80016b8:	0003      	movs	r3, r0
 80016ba:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016bc:	e008      	b.n	80016d0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016be:	f7ff f9dd 	bl	8000a7c <HAL_GetTick>
 80016c2:	0002      	movs	r2, r0
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d901      	bls.n	80016d0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80016cc:	2303      	movs	r3, #3
 80016ce:	e1fe      	b.n	8001ace <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016d0:	4b4b      	ldr	r3, [pc, #300]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	2380      	movs	r3, #128	; 0x80
 80016d6:	00db      	lsls	r3, r3, #3
 80016d8:	4013      	ands	r3, r2
 80016da:	d0f0      	beq.n	80016be <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016dc:	4b48      	ldr	r3, [pc, #288]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	4a4a      	ldr	r2, [pc, #296]	; (800180c <HAL_RCC_OscConfig+0x338>)
 80016e2:	4013      	ands	r3, r2
 80016e4:	0019      	movs	r1, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	695b      	ldr	r3, [r3, #20]
 80016ea:	021a      	lsls	r2, r3, #8
 80016ec:	4b44      	ldr	r3, [pc, #272]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 80016ee:	430a      	orrs	r2, r1
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	e01b      	b.n	800172c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80016f4:	4b42      	ldr	r3, [pc, #264]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	4b41      	ldr	r3, [pc, #260]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 80016fa:	4949      	ldr	r1, [pc, #292]	; (8001820 <HAL_RCC_OscConfig+0x34c>)
 80016fc:	400a      	ands	r2, r1
 80016fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001700:	f7ff f9bc 	bl	8000a7c <HAL_GetTick>
 8001704:	0003      	movs	r3, r0
 8001706:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001708:	e008      	b.n	800171c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800170a:	f7ff f9b7 	bl	8000a7c <HAL_GetTick>
 800170e:	0002      	movs	r2, r0
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	2b02      	cmp	r3, #2
 8001716:	d901      	bls.n	800171c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e1d8      	b.n	8001ace <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800171c:	4b38      	ldr	r3, [pc, #224]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	2380      	movs	r3, #128	; 0x80
 8001722:	00db      	lsls	r3, r3, #3
 8001724:	4013      	ands	r3, r2
 8001726:	d1f0      	bne.n	800170a <HAL_RCC_OscConfig+0x236>
 8001728:	e000      	b.n	800172c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800172a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2208      	movs	r2, #8
 8001732:	4013      	ands	r3, r2
 8001734:	d047      	beq.n	80017c6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001736:	4b32      	ldr	r3, [pc, #200]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	2238      	movs	r2, #56	; 0x38
 800173c:	4013      	ands	r3, r2
 800173e:	2b18      	cmp	r3, #24
 8001740:	d10a      	bne.n	8001758 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001742:	4b2f      	ldr	r3, [pc, #188]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 8001744:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001746:	2202      	movs	r2, #2
 8001748:	4013      	ands	r3, r2
 800174a:	d03c      	beq.n	80017c6 <HAL_RCC_OscConfig+0x2f2>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d138      	bne.n	80017c6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e1ba      	b.n	8001ace <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	699b      	ldr	r3, [r3, #24]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d019      	beq.n	8001794 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001760:	4b27      	ldr	r3, [pc, #156]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 8001762:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001764:	4b26      	ldr	r3, [pc, #152]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 8001766:	2101      	movs	r1, #1
 8001768:	430a      	orrs	r2, r1
 800176a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800176c:	f7ff f986 	bl	8000a7c <HAL_GetTick>
 8001770:	0003      	movs	r3, r0
 8001772:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001774:	e008      	b.n	8001788 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001776:	f7ff f981 	bl	8000a7c <HAL_GetTick>
 800177a:	0002      	movs	r2, r0
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	2b02      	cmp	r3, #2
 8001782:	d901      	bls.n	8001788 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001784:	2303      	movs	r3, #3
 8001786:	e1a2      	b.n	8001ace <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001788:	4b1d      	ldr	r3, [pc, #116]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 800178a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800178c:	2202      	movs	r2, #2
 800178e:	4013      	ands	r3, r2
 8001790:	d0f1      	beq.n	8001776 <HAL_RCC_OscConfig+0x2a2>
 8001792:	e018      	b.n	80017c6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001794:	4b1a      	ldr	r3, [pc, #104]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 8001796:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001798:	4b19      	ldr	r3, [pc, #100]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 800179a:	2101      	movs	r1, #1
 800179c:	438a      	bics	r2, r1
 800179e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a0:	f7ff f96c 	bl	8000a7c <HAL_GetTick>
 80017a4:	0003      	movs	r3, r0
 80017a6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017a8:	e008      	b.n	80017bc <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017aa:	f7ff f967 	bl	8000a7c <HAL_GetTick>
 80017ae:	0002      	movs	r2, r0
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d901      	bls.n	80017bc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80017b8:	2303      	movs	r3, #3
 80017ba:	e188      	b.n	8001ace <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017bc:	4b10      	ldr	r3, [pc, #64]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 80017be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017c0:	2202      	movs	r2, #2
 80017c2:	4013      	ands	r3, r2
 80017c4:	d1f1      	bne.n	80017aa <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2204      	movs	r2, #4
 80017cc:	4013      	ands	r3, r2
 80017ce:	d100      	bne.n	80017d2 <HAL_RCC_OscConfig+0x2fe>
 80017d0:	e0c6      	b.n	8001960 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017d2:	231f      	movs	r3, #31
 80017d4:	18fb      	adds	r3, r7, r3
 80017d6:	2200      	movs	r2, #0
 80017d8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80017da:	4b09      	ldr	r3, [pc, #36]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	2238      	movs	r2, #56	; 0x38
 80017e0:	4013      	ands	r3, r2
 80017e2:	2b20      	cmp	r3, #32
 80017e4:	d11e      	bne.n	8001824 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80017e6:	4b06      	ldr	r3, [pc, #24]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 80017e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ea:	2202      	movs	r2, #2
 80017ec:	4013      	ands	r3, r2
 80017ee:	d100      	bne.n	80017f2 <HAL_RCC_OscConfig+0x31e>
 80017f0:	e0b6      	b.n	8001960 <HAL_RCC_OscConfig+0x48c>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d000      	beq.n	80017fc <HAL_RCC_OscConfig+0x328>
 80017fa:	e0b1      	b.n	8001960 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e166      	b.n	8001ace <HAL_RCC_OscConfig+0x5fa>
 8001800:	40021000 	.word	0x40021000
 8001804:	fffeffff 	.word	0xfffeffff
 8001808:	fffbffff 	.word	0xfffbffff
 800180c:	ffff80ff 	.word	0xffff80ff
 8001810:	ffffc7ff 	.word	0xffffc7ff
 8001814:	00f42400 	.word	0x00f42400
 8001818:	20000000 	.word	0x20000000
 800181c:	20000004 	.word	0x20000004
 8001820:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001824:	4bac      	ldr	r3, [pc, #688]	; (8001ad8 <HAL_RCC_OscConfig+0x604>)
 8001826:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001828:	2380      	movs	r3, #128	; 0x80
 800182a:	055b      	lsls	r3, r3, #21
 800182c:	4013      	ands	r3, r2
 800182e:	d101      	bne.n	8001834 <HAL_RCC_OscConfig+0x360>
 8001830:	2301      	movs	r3, #1
 8001832:	e000      	b.n	8001836 <HAL_RCC_OscConfig+0x362>
 8001834:	2300      	movs	r3, #0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d011      	beq.n	800185e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800183a:	4ba7      	ldr	r3, [pc, #668]	; (8001ad8 <HAL_RCC_OscConfig+0x604>)
 800183c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800183e:	4ba6      	ldr	r3, [pc, #664]	; (8001ad8 <HAL_RCC_OscConfig+0x604>)
 8001840:	2180      	movs	r1, #128	; 0x80
 8001842:	0549      	lsls	r1, r1, #21
 8001844:	430a      	orrs	r2, r1
 8001846:	63da      	str	r2, [r3, #60]	; 0x3c
 8001848:	4ba3      	ldr	r3, [pc, #652]	; (8001ad8 <HAL_RCC_OscConfig+0x604>)
 800184a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800184c:	2380      	movs	r3, #128	; 0x80
 800184e:	055b      	lsls	r3, r3, #21
 8001850:	4013      	ands	r3, r2
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001856:	231f      	movs	r3, #31
 8001858:	18fb      	adds	r3, r7, r3
 800185a:	2201      	movs	r2, #1
 800185c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800185e:	4b9f      	ldr	r3, [pc, #636]	; (8001adc <HAL_RCC_OscConfig+0x608>)
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	2380      	movs	r3, #128	; 0x80
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	4013      	ands	r3, r2
 8001868:	d11a      	bne.n	80018a0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800186a:	4b9c      	ldr	r3, [pc, #624]	; (8001adc <HAL_RCC_OscConfig+0x608>)
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	4b9b      	ldr	r3, [pc, #620]	; (8001adc <HAL_RCC_OscConfig+0x608>)
 8001870:	2180      	movs	r1, #128	; 0x80
 8001872:	0049      	lsls	r1, r1, #1
 8001874:	430a      	orrs	r2, r1
 8001876:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001878:	f7ff f900 	bl	8000a7c <HAL_GetTick>
 800187c:	0003      	movs	r3, r0
 800187e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001880:	e008      	b.n	8001894 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001882:	f7ff f8fb 	bl	8000a7c <HAL_GetTick>
 8001886:	0002      	movs	r2, r0
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	2b02      	cmp	r3, #2
 800188e:	d901      	bls.n	8001894 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e11c      	b.n	8001ace <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001894:	4b91      	ldr	r3, [pc, #580]	; (8001adc <HAL_RCC_OscConfig+0x608>)
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	2380      	movs	r3, #128	; 0x80
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	4013      	ands	r3, r2
 800189e:	d0f0      	beq.n	8001882 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d106      	bne.n	80018b6 <HAL_RCC_OscConfig+0x3e2>
 80018a8:	4b8b      	ldr	r3, [pc, #556]	; (8001ad8 <HAL_RCC_OscConfig+0x604>)
 80018aa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80018ac:	4b8a      	ldr	r3, [pc, #552]	; (8001ad8 <HAL_RCC_OscConfig+0x604>)
 80018ae:	2101      	movs	r1, #1
 80018b0:	430a      	orrs	r2, r1
 80018b2:	65da      	str	r2, [r3, #92]	; 0x5c
 80018b4:	e01c      	b.n	80018f0 <HAL_RCC_OscConfig+0x41c>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	2b05      	cmp	r3, #5
 80018bc:	d10c      	bne.n	80018d8 <HAL_RCC_OscConfig+0x404>
 80018be:	4b86      	ldr	r3, [pc, #536]	; (8001ad8 <HAL_RCC_OscConfig+0x604>)
 80018c0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80018c2:	4b85      	ldr	r3, [pc, #532]	; (8001ad8 <HAL_RCC_OscConfig+0x604>)
 80018c4:	2104      	movs	r1, #4
 80018c6:	430a      	orrs	r2, r1
 80018c8:	65da      	str	r2, [r3, #92]	; 0x5c
 80018ca:	4b83      	ldr	r3, [pc, #524]	; (8001ad8 <HAL_RCC_OscConfig+0x604>)
 80018cc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80018ce:	4b82      	ldr	r3, [pc, #520]	; (8001ad8 <HAL_RCC_OscConfig+0x604>)
 80018d0:	2101      	movs	r1, #1
 80018d2:	430a      	orrs	r2, r1
 80018d4:	65da      	str	r2, [r3, #92]	; 0x5c
 80018d6:	e00b      	b.n	80018f0 <HAL_RCC_OscConfig+0x41c>
 80018d8:	4b7f      	ldr	r3, [pc, #508]	; (8001ad8 <HAL_RCC_OscConfig+0x604>)
 80018da:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80018dc:	4b7e      	ldr	r3, [pc, #504]	; (8001ad8 <HAL_RCC_OscConfig+0x604>)
 80018de:	2101      	movs	r1, #1
 80018e0:	438a      	bics	r2, r1
 80018e2:	65da      	str	r2, [r3, #92]	; 0x5c
 80018e4:	4b7c      	ldr	r3, [pc, #496]	; (8001ad8 <HAL_RCC_OscConfig+0x604>)
 80018e6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80018e8:	4b7b      	ldr	r3, [pc, #492]	; (8001ad8 <HAL_RCC_OscConfig+0x604>)
 80018ea:	2104      	movs	r1, #4
 80018ec:	438a      	bics	r2, r1
 80018ee:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d014      	beq.n	8001922 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f8:	f7ff f8c0 	bl	8000a7c <HAL_GetTick>
 80018fc:	0003      	movs	r3, r0
 80018fe:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001900:	e009      	b.n	8001916 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001902:	f7ff f8bb 	bl	8000a7c <HAL_GetTick>
 8001906:	0002      	movs	r2, r0
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	4a74      	ldr	r2, [pc, #464]	; (8001ae0 <HAL_RCC_OscConfig+0x60c>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e0db      	b.n	8001ace <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001916:	4b70      	ldr	r3, [pc, #448]	; (8001ad8 <HAL_RCC_OscConfig+0x604>)
 8001918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800191a:	2202      	movs	r2, #2
 800191c:	4013      	ands	r3, r2
 800191e:	d0f0      	beq.n	8001902 <HAL_RCC_OscConfig+0x42e>
 8001920:	e013      	b.n	800194a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001922:	f7ff f8ab 	bl	8000a7c <HAL_GetTick>
 8001926:	0003      	movs	r3, r0
 8001928:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800192a:	e009      	b.n	8001940 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800192c:	f7ff f8a6 	bl	8000a7c <HAL_GetTick>
 8001930:	0002      	movs	r2, r0
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	4a6a      	ldr	r2, [pc, #424]	; (8001ae0 <HAL_RCC_OscConfig+0x60c>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d901      	bls.n	8001940 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e0c6      	b.n	8001ace <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001940:	4b65      	ldr	r3, [pc, #404]	; (8001ad8 <HAL_RCC_OscConfig+0x604>)
 8001942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001944:	2202      	movs	r2, #2
 8001946:	4013      	ands	r3, r2
 8001948:	d1f0      	bne.n	800192c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800194a:	231f      	movs	r3, #31
 800194c:	18fb      	adds	r3, r7, r3
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	2b01      	cmp	r3, #1
 8001952:	d105      	bne.n	8001960 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001954:	4b60      	ldr	r3, [pc, #384]	; (8001ad8 <HAL_RCC_OscConfig+0x604>)
 8001956:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001958:	4b5f      	ldr	r3, [pc, #380]	; (8001ad8 <HAL_RCC_OscConfig+0x604>)
 800195a:	4962      	ldr	r1, [pc, #392]	; (8001ae4 <HAL_RCC_OscConfig+0x610>)
 800195c:	400a      	ands	r2, r1
 800195e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	69db      	ldr	r3, [r3, #28]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d100      	bne.n	800196a <HAL_RCC_OscConfig+0x496>
 8001968:	e0b0      	b.n	8001acc <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800196a:	4b5b      	ldr	r3, [pc, #364]	; (8001ad8 <HAL_RCC_OscConfig+0x604>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	2238      	movs	r2, #56	; 0x38
 8001970:	4013      	ands	r3, r2
 8001972:	2b10      	cmp	r3, #16
 8001974:	d100      	bne.n	8001978 <HAL_RCC_OscConfig+0x4a4>
 8001976:	e078      	b.n	8001a6a <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	69db      	ldr	r3, [r3, #28]
 800197c:	2b02      	cmp	r3, #2
 800197e:	d153      	bne.n	8001a28 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001980:	4b55      	ldr	r3, [pc, #340]	; (8001ad8 <HAL_RCC_OscConfig+0x604>)
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	4b54      	ldr	r3, [pc, #336]	; (8001ad8 <HAL_RCC_OscConfig+0x604>)
 8001986:	4958      	ldr	r1, [pc, #352]	; (8001ae8 <HAL_RCC_OscConfig+0x614>)
 8001988:	400a      	ands	r2, r1
 800198a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800198c:	f7ff f876 	bl	8000a7c <HAL_GetTick>
 8001990:	0003      	movs	r3, r0
 8001992:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001994:	e008      	b.n	80019a8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001996:	f7ff f871 	bl	8000a7c <HAL_GetTick>
 800199a:	0002      	movs	r2, r0
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d901      	bls.n	80019a8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80019a4:	2303      	movs	r3, #3
 80019a6:	e092      	b.n	8001ace <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019a8:	4b4b      	ldr	r3, [pc, #300]	; (8001ad8 <HAL_RCC_OscConfig+0x604>)
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	2380      	movs	r3, #128	; 0x80
 80019ae:	049b      	lsls	r3, r3, #18
 80019b0:	4013      	ands	r3, r2
 80019b2:	d1f0      	bne.n	8001996 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019b4:	4b48      	ldr	r3, [pc, #288]	; (8001ad8 <HAL_RCC_OscConfig+0x604>)
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	4a4c      	ldr	r2, [pc, #304]	; (8001aec <HAL_RCC_OscConfig+0x618>)
 80019ba:	4013      	ands	r3, r2
 80019bc:	0019      	movs	r1, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6a1a      	ldr	r2, [r3, #32]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c6:	431a      	orrs	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019cc:	021b      	lsls	r3, r3, #8
 80019ce:	431a      	orrs	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d4:	431a      	orrs	r2, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	431a      	orrs	r2, r3
 80019dc:	4b3e      	ldr	r3, [pc, #248]	; (8001ad8 <HAL_RCC_OscConfig+0x604>)
 80019de:	430a      	orrs	r2, r1
 80019e0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019e2:	4b3d      	ldr	r3, [pc, #244]	; (8001ad8 <HAL_RCC_OscConfig+0x604>)
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	4b3c      	ldr	r3, [pc, #240]	; (8001ad8 <HAL_RCC_OscConfig+0x604>)
 80019e8:	2180      	movs	r1, #128	; 0x80
 80019ea:	0449      	lsls	r1, r1, #17
 80019ec:	430a      	orrs	r2, r1
 80019ee:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80019f0:	4b39      	ldr	r3, [pc, #228]	; (8001ad8 <HAL_RCC_OscConfig+0x604>)
 80019f2:	68da      	ldr	r2, [r3, #12]
 80019f4:	4b38      	ldr	r3, [pc, #224]	; (8001ad8 <HAL_RCC_OscConfig+0x604>)
 80019f6:	2180      	movs	r1, #128	; 0x80
 80019f8:	0549      	lsls	r1, r1, #21
 80019fa:	430a      	orrs	r2, r1
 80019fc:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019fe:	f7ff f83d 	bl	8000a7c <HAL_GetTick>
 8001a02:	0003      	movs	r3, r0
 8001a04:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a06:	e008      	b.n	8001a1a <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a08:	f7ff f838 	bl	8000a7c <HAL_GetTick>
 8001a0c:	0002      	movs	r2, r0
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e059      	b.n	8001ace <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a1a:	4b2f      	ldr	r3, [pc, #188]	; (8001ad8 <HAL_RCC_OscConfig+0x604>)
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	2380      	movs	r3, #128	; 0x80
 8001a20:	049b      	lsls	r3, r3, #18
 8001a22:	4013      	ands	r3, r2
 8001a24:	d0f0      	beq.n	8001a08 <HAL_RCC_OscConfig+0x534>
 8001a26:	e051      	b.n	8001acc <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a28:	4b2b      	ldr	r3, [pc, #172]	; (8001ad8 <HAL_RCC_OscConfig+0x604>)
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	4b2a      	ldr	r3, [pc, #168]	; (8001ad8 <HAL_RCC_OscConfig+0x604>)
 8001a2e:	492e      	ldr	r1, [pc, #184]	; (8001ae8 <HAL_RCC_OscConfig+0x614>)
 8001a30:	400a      	ands	r2, r1
 8001a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a34:	f7ff f822 	bl	8000a7c <HAL_GetTick>
 8001a38:	0003      	movs	r3, r0
 8001a3a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a3c:	e008      	b.n	8001a50 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a3e:	f7ff f81d 	bl	8000a7c <HAL_GetTick>
 8001a42:	0002      	movs	r2, r0
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d901      	bls.n	8001a50 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e03e      	b.n	8001ace <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a50:	4b21      	ldr	r3, [pc, #132]	; (8001ad8 <HAL_RCC_OscConfig+0x604>)
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	2380      	movs	r3, #128	; 0x80
 8001a56:	049b      	lsls	r3, r3, #18
 8001a58:	4013      	ands	r3, r2
 8001a5a:	d1f0      	bne.n	8001a3e <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001a5c:	4b1e      	ldr	r3, [pc, #120]	; (8001ad8 <HAL_RCC_OscConfig+0x604>)
 8001a5e:	68da      	ldr	r2, [r3, #12]
 8001a60:	4b1d      	ldr	r3, [pc, #116]	; (8001ad8 <HAL_RCC_OscConfig+0x604>)
 8001a62:	4923      	ldr	r1, [pc, #140]	; (8001af0 <HAL_RCC_OscConfig+0x61c>)
 8001a64:	400a      	ands	r2, r1
 8001a66:	60da      	str	r2, [r3, #12]
 8001a68:	e030      	b.n	8001acc <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	69db      	ldr	r3, [r3, #28]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d101      	bne.n	8001a76 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e02b      	b.n	8001ace <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001a76:	4b18      	ldr	r3, [pc, #96]	; (8001ad8 <HAL_RCC_OscConfig+0x604>)
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	2203      	movs	r2, #3
 8001a80:	401a      	ands	r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a1b      	ldr	r3, [r3, #32]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d11e      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	2270      	movs	r2, #112	; 0x70
 8001a8e:	401a      	ands	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d117      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a98:	697a      	ldr	r2, [r7, #20]
 8001a9a:	23fe      	movs	r3, #254	; 0xfe
 8001a9c:	01db      	lsls	r3, r3, #7
 8001a9e:	401a      	ands	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa4:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d10e      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001aaa:	697a      	ldr	r2, [r7, #20]
 8001aac:	23f8      	movs	r3, #248	; 0xf8
 8001aae:	039b      	lsls	r3, r3, #14
 8001ab0:	401a      	ands	r2, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d106      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	0f5b      	lsrs	r3, r3, #29
 8001abe:	075a      	lsls	r2, r3, #29
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d001      	beq.n	8001acc <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e000      	b.n	8001ace <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	0018      	movs	r0, r3
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	b008      	add	sp, #32
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	46c0      	nop			; (mov r8, r8)
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	40007000 	.word	0x40007000
 8001ae0:	00001388 	.word	0x00001388
 8001ae4:	efffffff 	.word	0xefffffff
 8001ae8:	feffffff 	.word	0xfeffffff
 8001aec:	1fc1808c 	.word	0x1fc1808c
 8001af0:	effefffc 	.word	0xeffefffc

08001af4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d101      	bne.n	8001b08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e0e9      	b.n	8001cdc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b08:	4b76      	ldr	r3, [pc, #472]	; (8001ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2207      	movs	r2, #7
 8001b0e:	4013      	ands	r3, r2
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d91e      	bls.n	8001b54 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b16:	4b73      	ldr	r3, [pc, #460]	; (8001ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2207      	movs	r2, #7
 8001b1c:	4393      	bics	r3, r2
 8001b1e:	0019      	movs	r1, r3
 8001b20:	4b70      	ldr	r3, [pc, #448]	; (8001ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b22:	683a      	ldr	r2, [r7, #0]
 8001b24:	430a      	orrs	r2, r1
 8001b26:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b28:	f7fe ffa8 	bl	8000a7c <HAL_GetTick>
 8001b2c:	0003      	movs	r3, r0
 8001b2e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b30:	e009      	b.n	8001b46 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b32:	f7fe ffa3 	bl	8000a7c <HAL_GetTick>
 8001b36:	0002      	movs	r2, r0
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	4a6a      	ldr	r2, [pc, #424]	; (8001ce8 <HAL_RCC_ClockConfig+0x1f4>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e0ca      	b.n	8001cdc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b46:	4b67      	ldr	r3, [pc, #412]	; (8001ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2207      	movs	r2, #7
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	683a      	ldr	r2, [r7, #0]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d1ee      	bne.n	8001b32 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2202      	movs	r2, #2
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	d015      	beq.n	8001b8a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	2204      	movs	r2, #4
 8001b64:	4013      	ands	r3, r2
 8001b66:	d006      	beq.n	8001b76 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001b68:	4b60      	ldr	r3, [pc, #384]	; (8001cec <HAL_RCC_ClockConfig+0x1f8>)
 8001b6a:	689a      	ldr	r2, [r3, #8]
 8001b6c:	4b5f      	ldr	r3, [pc, #380]	; (8001cec <HAL_RCC_ClockConfig+0x1f8>)
 8001b6e:	21e0      	movs	r1, #224	; 0xe0
 8001b70:	01c9      	lsls	r1, r1, #7
 8001b72:	430a      	orrs	r2, r1
 8001b74:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b76:	4b5d      	ldr	r3, [pc, #372]	; (8001cec <HAL_RCC_ClockConfig+0x1f8>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	4a5d      	ldr	r2, [pc, #372]	; (8001cf0 <HAL_RCC_ClockConfig+0x1fc>)
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	0019      	movs	r1, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	689a      	ldr	r2, [r3, #8]
 8001b84:	4b59      	ldr	r3, [pc, #356]	; (8001cec <HAL_RCC_ClockConfig+0x1f8>)
 8001b86:	430a      	orrs	r2, r1
 8001b88:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	4013      	ands	r3, r2
 8001b92:	d057      	beq.n	8001c44 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d107      	bne.n	8001bac <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b9c:	4b53      	ldr	r3, [pc, #332]	; (8001cec <HAL_RCC_ClockConfig+0x1f8>)
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	2380      	movs	r3, #128	; 0x80
 8001ba2:	029b      	lsls	r3, r3, #10
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	d12b      	bne.n	8001c00 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e097      	b.n	8001cdc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d107      	bne.n	8001bc4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bb4:	4b4d      	ldr	r3, [pc, #308]	; (8001cec <HAL_RCC_ClockConfig+0x1f8>)
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	2380      	movs	r3, #128	; 0x80
 8001bba:	049b      	lsls	r3, r3, #18
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	d11f      	bne.n	8001c00 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e08b      	b.n	8001cdc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d107      	bne.n	8001bdc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bcc:	4b47      	ldr	r3, [pc, #284]	; (8001cec <HAL_RCC_ClockConfig+0x1f8>)
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	2380      	movs	r3, #128	; 0x80
 8001bd2:	00db      	lsls	r3, r3, #3
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	d113      	bne.n	8001c00 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e07f      	b.n	8001cdc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	2b03      	cmp	r3, #3
 8001be2:	d106      	bne.n	8001bf2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001be4:	4b41      	ldr	r3, [pc, #260]	; (8001cec <HAL_RCC_ClockConfig+0x1f8>)
 8001be6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001be8:	2202      	movs	r2, #2
 8001bea:	4013      	ands	r3, r2
 8001bec:	d108      	bne.n	8001c00 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e074      	b.n	8001cdc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bf2:	4b3e      	ldr	r3, [pc, #248]	; (8001cec <HAL_RCC_ClockConfig+0x1f8>)
 8001bf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bf6:	2202      	movs	r2, #2
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	d101      	bne.n	8001c00 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e06d      	b.n	8001cdc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c00:	4b3a      	ldr	r3, [pc, #232]	; (8001cec <HAL_RCC_ClockConfig+0x1f8>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	2207      	movs	r2, #7
 8001c06:	4393      	bics	r3, r2
 8001c08:	0019      	movs	r1, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685a      	ldr	r2, [r3, #4]
 8001c0e:	4b37      	ldr	r3, [pc, #220]	; (8001cec <HAL_RCC_ClockConfig+0x1f8>)
 8001c10:	430a      	orrs	r2, r1
 8001c12:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c14:	f7fe ff32 	bl	8000a7c <HAL_GetTick>
 8001c18:	0003      	movs	r3, r0
 8001c1a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c1c:	e009      	b.n	8001c32 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c1e:	f7fe ff2d 	bl	8000a7c <HAL_GetTick>
 8001c22:	0002      	movs	r2, r0
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	4a2f      	ldr	r2, [pc, #188]	; (8001ce8 <HAL_RCC_ClockConfig+0x1f4>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e054      	b.n	8001cdc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c32:	4b2e      	ldr	r3, [pc, #184]	; (8001cec <HAL_RCC_ClockConfig+0x1f8>)
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	2238      	movs	r2, #56	; 0x38
 8001c38:	401a      	ands	r2, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	00db      	lsls	r3, r3, #3
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d1ec      	bne.n	8001c1e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c44:	4b27      	ldr	r3, [pc, #156]	; (8001ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2207      	movs	r2, #7
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	683a      	ldr	r2, [r7, #0]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d21e      	bcs.n	8001c90 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c52:	4b24      	ldr	r3, [pc, #144]	; (8001ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2207      	movs	r2, #7
 8001c58:	4393      	bics	r3, r2
 8001c5a:	0019      	movs	r1, r3
 8001c5c:	4b21      	ldr	r3, [pc, #132]	; (8001ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8001c5e:	683a      	ldr	r2, [r7, #0]
 8001c60:	430a      	orrs	r2, r1
 8001c62:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c64:	f7fe ff0a 	bl	8000a7c <HAL_GetTick>
 8001c68:	0003      	movs	r3, r0
 8001c6a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c6c:	e009      	b.n	8001c82 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c6e:	f7fe ff05 	bl	8000a7c <HAL_GetTick>
 8001c72:	0002      	movs	r2, r0
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	4a1b      	ldr	r2, [pc, #108]	; (8001ce8 <HAL_RCC_ClockConfig+0x1f4>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e02c      	b.n	8001cdc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c82:	4b18      	ldr	r3, [pc, #96]	; (8001ce4 <HAL_RCC_ClockConfig+0x1f0>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2207      	movs	r2, #7
 8001c88:	4013      	ands	r3, r2
 8001c8a:	683a      	ldr	r2, [r7, #0]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d1ee      	bne.n	8001c6e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2204      	movs	r2, #4
 8001c96:	4013      	ands	r3, r2
 8001c98:	d009      	beq.n	8001cae <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001c9a:	4b14      	ldr	r3, [pc, #80]	; (8001cec <HAL_RCC_ClockConfig+0x1f8>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	4a15      	ldr	r2, [pc, #84]	; (8001cf4 <HAL_RCC_ClockConfig+0x200>)
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	0019      	movs	r1, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	68da      	ldr	r2, [r3, #12]
 8001ca8:	4b10      	ldr	r3, [pc, #64]	; (8001cec <HAL_RCC_ClockConfig+0x1f8>)
 8001caa:	430a      	orrs	r2, r1
 8001cac:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001cae:	f000 f829 	bl	8001d04 <HAL_RCC_GetSysClockFreq>
 8001cb2:	0001      	movs	r1, r0
 8001cb4:	4b0d      	ldr	r3, [pc, #52]	; (8001cec <HAL_RCC_ClockConfig+0x1f8>)
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	0a1b      	lsrs	r3, r3, #8
 8001cba:	220f      	movs	r2, #15
 8001cbc:	401a      	ands	r2, r3
 8001cbe:	4b0e      	ldr	r3, [pc, #56]	; (8001cf8 <HAL_RCC_ClockConfig+0x204>)
 8001cc0:	0092      	lsls	r2, r2, #2
 8001cc2:	58d3      	ldr	r3, [r2, r3]
 8001cc4:	221f      	movs	r2, #31
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	000a      	movs	r2, r1
 8001cca:	40da      	lsrs	r2, r3
 8001ccc:	4b0b      	ldr	r3, [pc, #44]	; (8001cfc <HAL_RCC_ClockConfig+0x208>)
 8001cce:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001cd0:	4b0b      	ldr	r3, [pc, #44]	; (8001d00 <HAL_RCC_ClockConfig+0x20c>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	0018      	movs	r0, r3
 8001cd6:	f7fe fe75 	bl	80009c4 <HAL_InitTick>
 8001cda:	0003      	movs	r3, r0
}
 8001cdc:	0018      	movs	r0, r3
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	b004      	add	sp, #16
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	40022000 	.word	0x40022000
 8001ce8:	00001388 	.word	0x00001388
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	fffff0ff 	.word	0xfffff0ff
 8001cf4:	ffff8fff 	.word	0xffff8fff
 8001cf8:	0800306c 	.word	0x0800306c
 8001cfc:	20000000 	.word	0x20000000
 8001d00:	20000004 	.word	0x20000004

08001d04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b086      	sub	sp, #24
 8001d08:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d0a:	4b3c      	ldr	r3, [pc, #240]	; (8001dfc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	2238      	movs	r2, #56	; 0x38
 8001d10:	4013      	ands	r3, r2
 8001d12:	d10f      	bne.n	8001d34 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001d14:	4b39      	ldr	r3, [pc, #228]	; (8001dfc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	0adb      	lsrs	r3, r3, #11
 8001d1a:	2207      	movs	r2, #7
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	2201      	movs	r2, #1
 8001d20:	409a      	lsls	r2, r3
 8001d22:	0013      	movs	r3, r2
 8001d24:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001d26:	6839      	ldr	r1, [r7, #0]
 8001d28:	4835      	ldr	r0, [pc, #212]	; (8001e00 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001d2a:	f7fe f9e9 	bl	8000100 <__udivsi3>
 8001d2e:	0003      	movs	r3, r0
 8001d30:	613b      	str	r3, [r7, #16]
 8001d32:	e05d      	b.n	8001df0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d34:	4b31      	ldr	r3, [pc, #196]	; (8001dfc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	2238      	movs	r2, #56	; 0x38
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	2b08      	cmp	r3, #8
 8001d3e:	d102      	bne.n	8001d46 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d40:	4b30      	ldr	r3, [pc, #192]	; (8001e04 <HAL_RCC_GetSysClockFreq+0x100>)
 8001d42:	613b      	str	r3, [r7, #16]
 8001d44:	e054      	b.n	8001df0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d46:	4b2d      	ldr	r3, [pc, #180]	; (8001dfc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	2238      	movs	r2, #56	; 0x38
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	2b10      	cmp	r3, #16
 8001d50:	d138      	bne.n	8001dc4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001d52:	4b2a      	ldr	r3, [pc, #168]	; (8001dfc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	2203      	movs	r2, #3
 8001d58:	4013      	ands	r3, r2
 8001d5a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d5c:	4b27      	ldr	r3, [pc, #156]	; (8001dfc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	091b      	lsrs	r3, r3, #4
 8001d62:	2207      	movs	r2, #7
 8001d64:	4013      	ands	r3, r2
 8001d66:	3301      	adds	r3, #1
 8001d68:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2b03      	cmp	r3, #3
 8001d6e:	d10d      	bne.n	8001d8c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d70:	68b9      	ldr	r1, [r7, #8]
 8001d72:	4824      	ldr	r0, [pc, #144]	; (8001e04 <HAL_RCC_GetSysClockFreq+0x100>)
 8001d74:	f7fe f9c4 	bl	8000100 <__udivsi3>
 8001d78:	0003      	movs	r3, r0
 8001d7a:	0019      	movs	r1, r3
 8001d7c:	4b1f      	ldr	r3, [pc, #124]	; (8001dfc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	0a1b      	lsrs	r3, r3, #8
 8001d82:	227f      	movs	r2, #127	; 0x7f
 8001d84:	4013      	ands	r3, r2
 8001d86:	434b      	muls	r3, r1
 8001d88:	617b      	str	r3, [r7, #20]
        break;
 8001d8a:	e00d      	b.n	8001da8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001d8c:	68b9      	ldr	r1, [r7, #8]
 8001d8e:	481c      	ldr	r0, [pc, #112]	; (8001e00 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001d90:	f7fe f9b6 	bl	8000100 <__udivsi3>
 8001d94:	0003      	movs	r3, r0
 8001d96:	0019      	movs	r1, r3
 8001d98:	4b18      	ldr	r3, [pc, #96]	; (8001dfc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	0a1b      	lsrs	r3, r3, #8
 8001d9e:	227f      	movs	r2, #127	; 0x7f
 8001da0:	4013      	ands	r3, r2
 8001da2:	434b      	muls	r3, r1
 8001da4:	617b      	str	r3, [r7, #20]
        break;
 8001da6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001da8:	4b14      	ldr	r3, [pc, #80]	; (8001dfc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	0f5b      	lsrs	r3, r3, #29
 8001dae:	2207      	movs	r2, #7
 8001db0:	4013      	ands	r3, r2
 8001db2:	3301      	adds	r3, #1
 8001db4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001db6:	6879      	ldr	r1, [r7, #4]
 8001db8:	6978      	ldr	r0, [r7, #20]
 8001dba:	f7fe f9a1 	bl	8000100 <__udivsi3>
 8001dbe:	0003      	movs	r3, r0
 8001dc0:	613b      	str	r3, [r7, #16]
 8001dc2:	e015      	b.n	8001df0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001dc4:	4b0d      	ldr	r3, [pc, #52]	; (8001dfc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	2238      	movs	r2, #56	; 0x38
 8001dca:	4013      	ands	r3, r2
 8001dcc:	2b20      	cmp	r3, #32
 8001dce:	d103      	bne.n	8001dd8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001dd0:	2380      	movs	r3, #128	; 0x80
 8001dd2:	021b      	lsls	r3, r3, #8
 8001dd4:	613b      	str	r3, [r7, #16]
 8001dd6:	e00b      	b.n	8001df0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001dd8:	4b08      	ldr	r3, [pc, #32]	; (8001dfc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	2238      	movs	r2, #56	; 0x38
 8001dde:	4013      	ands	r3, r2
 8001de0:	2b18      	cmp	r3, #24
 8001de2:	d103      	bne.n	8001dec <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001de4:	23fa      	movs	r3, #250	; 0xfa
 8001de6:	01db      	lsls	r3, r3, #7
 8001de8:	613b      	str	r3, [r7, #16]
 8001dea:	e001      	b.n	8001df0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001dec:	2300      	movs	r3, #0
 8001dee:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001df0:	693b      	ldr	r3, [r7, #16]
}
 8001df2:	0018      	movs	r0, r3
 8001df4:	46bd      	mov	sp, r7
 8001df6:	b006      	add	sp, #24
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	46c0      	nop			; (mov r8, r8)
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	00f42400 	.word	0x00f42400
 8001e04:	007a1200 	.word	0x007a1200

08001e08 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e0c:	4b02      	ldr	r3, [pc, #8]	; (8001e18 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
}
 8001e10:	0018      	movs	r0, r3
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	46c0      	nop			; (mov r8, r8)
 8001e18:	20000000 	.word	0x20000000

08001e1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e1c:	b5b0      	push	{r4, r5, r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001e20:	f7ff fff2 	bl	8001e08 <HAL_RCC_GetHCLKFreq>
 8001e24:	0004      	movs	r4, r0
 8001e26:	f7ff fb49 	bl	80014bc <LL_RCC_GetAPB1Prescaler>
 8001e2a:	0003      	movs	r3, r0
 8001e2c:	0b1a      	lsrs	r2, r3, #12
 8001e2e:	4b05      	ldr	r3, [pc, #20]	; (8001e44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e30:	0092      	lsls	r2, r2, #2
 8001e32:	58d3      	ldr	r3, [r2, r3]
 8001e34:	221f      	movs	r2, #31
 8001e36:	4013      	ands	r3, r2
 8001e38:	40dc      	lsrs	r4, r3
 8001e3a:	0023      	movs	r3, r4
}
 8001e3c:	0018      	movs	r0, r3
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bdb0      	pop	{r4, r5, r7, pc}
 8001e42:	46c0      	nop			; (mov r8, r8)
 8001e44:	080030ac 	.word	0x080030ac

08001e48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001e50:	2313      	movs	r3, #19
 8001e52:	18fb      	adds	r3, r7, r3
 8001e54:	2200      	movs	r2, #0
 8001e56:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e58:	2312      	movs	r3, #18
 8001e5a:	18fb      	adds	r3, r7, r3
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	2380      	movs	r3, #128	; 0x80
 8001e66:	029b      	lsls	r3, r3, #10
 8001e68:	4013      	ands	r3, r2
 8001e6a:	d100      	bne.n	8001e6e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001e6c:	e0a3      	b.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e6e:	2011      	movs	r0, #17
 8001e70:	183b      	adds	r3, r7, r0
 8001e72:	2200      	movs	r2, #0
 8001e74:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e76:	4b86      	ldr	r3, [pc, #536]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e7a:	2380      	movs	r3, #128	; 0x80
 8001e7c:	055b      	lsls	r3, r3, #21
 8001e7e:	4013      	ands	r3, r2
 8001e80:	d110      	bne.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e82:	4b83      	ldr	r3, [pc, #524]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e86:	4b82      	ldr	r3, [pc, #520]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e88:	2180      	movs	r1, #128	; 0x80
 8001e8a:	0549      	lsls	r1, r1, #21
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001e90:	4b7f      	ldr	r3, [pc, #508]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e94:	2380      	movs	r3, #128	; 0x80
 8001e96:	055b      	lsls	r3, r3, #21
 8001e98:	4013      	ands	r3, r2
 8001e9a:	60bb      	str	r3, [r7, #8]
 8001e9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e9e:	183b      	adds	r3, r7, r0
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ea4:	4b7b      	ldr	r3, [pc, #492]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	4b7a      	ldr	r3, [pc, #488]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001eaa:	2180      	movs	r1, #128	; 0x80
 8001eac:	0049      	lsls	r1, r1, #1
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001eb2:	f7fe fde3 	bl	8000a7c <HAL_GetTick>
 8001eb6:	0003      	movs	r3, r0
 8001eb8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001eba:	e00b      	b.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ebc:	f7fe fdde 	bl	8000a7c <HAL_GetTick>
 8001ec0:	0002      	movs	r2, r0
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d904      	bls.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001eca:	2313      	movs	r3, #19
 8001ecc:	18fb      	adds	r3, r7, r3
 8001ece:	2203      	movs	r2, #3
 8001ed0:	701a      	strb	r2, [r3, #0]
        break;
 8001ed2:	e005      	b.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ed4:	4b6f      	ldr	r3, [pc, #444]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	2380      	movs	r3, #128	; 0x80
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	4013      	ands	r3, r2
 8001ede:	d0ed      	beq.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001ee0:	2313      	movs	r3, #19
 8001ee2:	18fb      	adds	r3, r7, r3
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d154      	bne.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001eea:	4b69      	ldr	r3, [pc, #420]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001eec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001eee:	23c0      	movs	r3, #192	; 0xc0
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d019      	beq.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	697a      	ldr	r2, [r7, #20]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d014      	beq.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f06:	4b62      	ldr	r3, [pc, #392]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f0a:	4a63      	ldr	r2, [pc, #396]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f10:	4b5f      	ldr	r3, [pc, #380]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f12:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001f14:	4b5e      	ldr	r3, [pc, #376]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f16:	2180      	movs	r1, #128	; 0x80
 8001f18:	0249      	lsls	r1, r1, #9
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f1e:	4b5c      	ldr	r3, [pc, #368]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f20:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001f22:	4b5b      	ldr	r3, [pc, #364]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f24:	495d      	ldr	r1, [pc, #372]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001f26:	400a      	ands	r2, r1
 8001f28:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f2a:	4b59      	ldr	r3, [pc, #356]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f2c:	697a      	ldr	r2, [r7, #20]
 8001f2e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	2201      	movs	r2, #1
 8001f34:	4013      	ands	r3, r2
 8001f36:	d016      	beq.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f38:	f7fe fda0 	bl	8000a7c <HAL_GetTick>
 8001f3c:	0003      	movs	r3, r0
 8001f3e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f40:	e00c      	b.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f42:	f7fe fd9b 	bl	8000a7c <HAL_GetTick>
 8001f46:	0002      	movs	r2, r0
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	4a54      	ldr	r2, [pc, #336]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d904      	bls.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001f52:	2313      	movs	r3, #19
 8001f54:	18fb      	adds	r3, r7, r3
 8001f56:	2203      	movs	r2, #3
 8001f58:	701a      	strb	r2, [r3, #0]
            break;
 8001f5a:	e004      	b.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f5c:	4b4c      	ldr	r3, [pc, #304]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f60:	2202      	movs	r2, #2
 8001f62:	4013      	ands	r3, r2
 8001f64:	d0ed      	beq.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001f66:	2313      	movs	r3, #19
 8001f68:	18fb      	adds	r3, r7, r3
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d10a      	bne.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f70:	4b47      	ldr	r3, [pc, #284]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f74:	4a48      	ldr	r2, [pc, #288]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001f76:	4013      	ands	r3, r2
 8001f78:	0019      	movs	r1, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	699a      	ldr	r2, [r3, #24]
 8001f7e:	4b44      	ldr	r3, [pc, #272]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f80:	430a      	orrs	r2, r1
 8001f82:	65da      	str	r2, [r3, #92]	; 0x5c
 8001f84:	e00c      	b.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001f86:	2312      	movs	r3, #18
 8001f88:	18fb      	adds	r3, r7, r3
 8001f8a:	2213      	movs	r2, #19
 8001f8c:	18ba      	adds	r2, r7, r2
 8001f8e:	7812      	ldrb	r2, [r2, #0]
 8001f90:	701a      	strb	r2, [r3, #0]
 8001f92:	e005      	b.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f94:	2312      	movs	r3, #18
 8001f96:	18fb      	adds	r3, r7, r3
 8001f98:	2213      	movs	r2, #19
 8001f9a:	18ba      	adds	r2, r7, r2
 8001f9c:	7812      	ldrb	r2, [r2, #0]
 8001f9e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001fa0:	2311      	movs	r3, #17
 8001fa2:	18fb      	adds	r3, r7, r3
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d105      	bne.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001faa:	4b39      	ldr	r3, [pc, #228]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001fac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001fae:	4b38      	ldr	r3, [pc, #224]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001fb0:	493c      	ldr	r1, [pc, #240]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001fb2:	400a      	ands	r2, r1
 8001fb4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	d009      	beq.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001fc0:	4b33      	ldr	r3, [pc, #204]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001fc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fc4:	2203      	movs	r2, #3
 8001fc6:	4393      	bics	r3, r2
 8001fc8:	0019      	movs	r1, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685a      	ldr	r2, [r3, #4]
 8001fce:	4b30      	ldr	r3, [pc, #192]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001fd0:	430a      	orrs	r2, r1
 8001fd2:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2202      	movs	r2, #2
 8001fda:	4013      	ands	r3, r2
 8001fdc:	d009      	beq.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001fde:	4b2c      	ldr	r3, [pc, #176]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe2:	220c      	movs	r2, #12
 8001fe4:	4393      	bics	r3, r2
 8001fe6:	0019      	movs	r1, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689a      	ldr	r2, [r3, #8]
 8001fec:	4b28      	ldr	r3, [pc, #160]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2220      	movs	r2, #32
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	d009      	beq.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ffc:	4b24      	ldr	r3, [pc, #144]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002000:	4a29      	ldr	r2, [pc, #164]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002002:	4013      	ands	r3, r2
 8002004:	0019      	movs	r1, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	68da      	ldr	r2, [r3, #12]
 800200a:	4b21      	ldr	r3, [pc, #132]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800200c:	430a      	orrs	r2, r1
 800200e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	2380      	movs	r3, #128	; 0x80
 8002016:	01db      	lsls	r3, r3, #7
 8002018:	4013      	ands	r3, r2
 800201a:	d015      	beq.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800201c:	4b1c      	ldr	r3, [pc, #112]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800201e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	0899      	lsrs	r1, r3, #2
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	695a      	ldr	r2, [r3, #20]
 8002028:	4b19      	ldr	r3, [pc, #100]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800202a:	430a      	orrs	r2, r1
 800202c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	695a      	ldr	r2, [r3, #20]
 8002032:	2380      	movs	r3, #128	; 0x80
 8002034:	05db      	lsls	r3, r3, #23
 8002036:	429a      	cmp	r2, r3
 8002038:	d106      	bne.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800203a:	4b15      	ldr	r3, [pc, #84]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800203c:	68da      	ldr	r2, [r3, #12]
 800203e:	4b14      	ldr	r3, [pc, #80]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002040:	2180      	movs	r1, #128	; 0x80
 8002042:	0249      	lsls	r1, r1, #9
 8002044:	430a      	orrs	r2, r1
 8002046:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	2380      	movs	r3, #128	; 0x80
 800204e:	011b      	lsls	r3, r3, #4
 8002050:	4013      	ands	r3, r2
 8002052:	d016      	beq.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002054:	4b0e      	ldr	r3, [pc, #56]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002058:	4a14      	ldr	r2, [pc, #80]	; (80020ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800205a:	4013      	ands	r3, r2
 800205c:	0019      	movs	r1, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	691a      	ldr	r2, [r3, #16]
 8002062:	4b0b      	ldr	r3, [pc, #44]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002064:	430a      	orrs	r2, r1
 8002066:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	691a      	ldr	r2, [r3, #16]
 800206c:	2380      	movs	r3, #128	; 0x80
 800206e:	01db      	lsls	r3, r3, #7
 8002070:	429a      	cmp	r2, r3
 8002072:	d106      	bne.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002074:	4b06      	ldr	r3, [pc, #24]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002076:	68da      	ldr	r2, [r3, #12]
 8002078:	4b05      	ldr	r3, [pc, #20]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800207a:	2180      	movs	r1, #128	; 0x80
 800207c:	0249      	lsls	r1, r1, #9
 800207e:	430a      	orrs	r2, r1
 8002080:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002082:	2312      	movs	r3, #18
 8002084:	18fb      	adds	r3, r7, r3
 8002086:	781b      	ldrb	r3, [r3, #0]
}
 8002088:	0018      	movs	r0, r3
 800208a:	46bd      	mov	sp, r7
 800208c:	b006      	add	sp, #24
 800208e:	bd80      	pop	{r7, pc}
 8002090:	40021000 	.word	0x40021000
 8002094:	40007000 	.word	0x40007000
 8002098:	fffffcff 	.word	0xfffffcff
 800209c:	fffeffff 	.word	0xfffeffff
 80020a0:	00001388 	.word	0x00001388
 80020a4:	efffffff 	.word	0xefffffff
 80020a8:	ffffcfff 	.word	0xffffcfff
 80020ac:	ffff3fff 	.word	0xffff3fff

080020b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d101      	bne.n	80020c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e046      	b.n	8002150 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2288      	movs	r2, #136	; 0x88
 80020c6:	589b      	ldr	r3, [r3, r2]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d107      	bne.n	80020dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2284      	movs	r2, #132	; 0x84
 80020d0:	2100      	movs	r1, #0
 80020d2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	0018      	movs	r0, r3
 80020d8:	f7fe fb36 	bl	8000748 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2288      	movs	r2, #136	; 0x88
 80020e0:	2124      	movs	r1, #36	; 0x24
 80020e2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2101      	movs	r1, #1
 80020f0:	438a      	bics	r2, r1
 80020f2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	0018      	movs	r0, r3
 80020f8:	f000 f848 	bl	800218c <UART_SetConfig>
 80020fc:	0003      	movs	r3, r0
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d101      	bne.n	8002106 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e024      	b.n	8002150 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800210a:	2b00      	cmp	r3, #0
 800210c:	d003      	beq.n	8002116 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	0018      	movs	r0, r3
 8002112:	f000 f9df 	bl	80024d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	685a      	ldr	r2, [r3, #4]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	490d      	ldr	r1, [pc, #52]	; (8002158 <HAL_UART_Init+0xa8>)
 8002122:	400a      	ands	r2, r1
 8002124:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	689a      	ldr	r2, [r3, #8]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	212a      	movs	r1, #42	; 0x2a
 8002132:	438a      	bics	r2, r1
 8002134:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2101      	movs	r1, #1
 8002142:	430a      	orrs	r2, r1
 8002144:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	0018      	movs	r0, r3
 800214a:	f000 fa77 	bl	800263c <UART_CheckIdleState>
 800214e:	0003      	movs	r3, r0
}
 8002150:	0018      	movs	r0, r3
 8002152:	46bd      	mov	sp, r7
 8002154:	b002      	add	sp, #8
 8002156:	bd80      	pop	{r7, pc}
 8002158:	ffffb7ff 	.word	0xffffb7ff

0800215c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8002164:	46c0      	nop			; (mov r8, r8)
 8002166:	46bd      	mov	sp, r7
 8002168:	b002      	add	sp, #8
 800216a:	bd80      	pop	{r7, pc}

0800216c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8002174:	46c0      	nop			; (mov r8, r8)
 8002176:	46bd      	mov	sp, r7
 8002178:	b002      	add	sp, #8
 800217a:	bd80      	pop	{r7, pc}

0800217c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002184:	46c0      	nop			; (mov r8, r8)
 8002186:	46bd      	mov	sp, r7
 8002188:	b002      	add	sp, #8
 800218a:	bd80      	pop	{r7, pc}

0800218c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b088      	sub	sp, #32
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002194:	231a      	movs	r3, #26
 8002196:	18fb      	adds	r3, r7, r3
 8002198:	2200      	movs	r2, #0
 800219a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689a      	ldr	r2, [r3, #8]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	431a      	orrs	r2, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	695b      	ldr	r3, [r3, #20]
 80021aa:	431a      	orrs	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	69db      	ldr	r3, [r3, #28]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4abc      	ldr	r2, [pc, #752]	; (80024ac <UART_SetConfig+0x320>)
 80021bc:	4013      	ands	r3, r2
 80021be:	0019      	movs	r1, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	69fa      	ldr	r2, [r7, #28]
 80021c6:	430a      	orrs	r2, r1
 80021c8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	4ab7      	ldr	r2, [pc, #732]	; (80024b0 <UART_SetConfig+0x324>)
 80021d2:	4013      	ands	r3, r2
 80021d4:	0019      	movs	r1, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	68da      	ldr	r2, [r3, #12]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	430a      	orrs	r2, r1
 80021e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	699b      	ldr	r3, [r3, #24]
 80021e6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a1b      	ldr	r3, [r3, #32]
 80021ec:	69fa      	ldr	r2, [r7, #28]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	4aae      	ldr	r2, [pc, #696]	; (80024b4 <UART_SetConfig+0x328>)
 80021fa:	4013      	ands	r3, r2
 80021fc:	0019      	movs	r1, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	69fa      	ldr	r2, [r7, #28]
 8002204:	430a      	orrs	r2, r1
 8002206:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800220e:	220f      	movs	r2, #15
 8002210:	4393      	bics	r3, r2
 8002212:	0019      	movs	r1, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	430a      	orrs	r2, r1
 800221e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4aa4      	ldr	r2, [pc, #656]	; (80024b8 <UART_SetConfig+0x32c>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d127      	bne.n	800227a <UART_SetConfig+0xee>
 800222a:	4ba4      	ldr	r3, [pc, #656]	; (80024bc <UART_SetConfig+0x330>)
 800222c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800222e:	2203      	movs	r2, #3
 8002230:	4013      	ands	r3, r2
 8002232:	2b03      	cmp	r3, #3
 8002234:	d017      	beq.n	8002266 <UART_SetConfig+0xda>
 8002236:	d81b      	bhi.n	8002270 <UART_SetConfig+0xe4>
 8002238:	2b02      	cmp	r3, #2
 800223a:	d00a      	beq.n	8002252 <UART_SetConfig+0xc6>
 800223c:	d818      	bhi.n	8002270 <UART_SetConfig+0xe4>
 800223e:	2b00      	cmp	r3, #0
 8002240:	d002      	beq.n	8002248 <UART_SetConfig+0xbc>
 8002242:	2b01      	cmp	r3, #1
 8002244:	d00a      	beq.n	800225c <UART_SetConfig+0xd0>
 8002246:	e013      	b.n	8002270 <UART_SetConfig+0xe4>
 8002248:	231b      	movs	r3, #27
 800224a:	18fb      	adds	r3, r7, r3
 800224c:	2200      	movs	r2, #0
 800224e:	701a      	strb	r2, [r3, #0]
 8002250:	e058      	b.n	8002304 <UART_SetConfig+0x178>
 8002252:	231b      	movs	r3, #27
 8002254:	18fb      	adds	r3, r7, r3
 8002256:	2202      	movs	r2, #2
 8002258:	701a      	strb	r2, [r3, #0]
 800225a:	e053      	b.n	8002304 <UART_SetConfig+0x178>
 800225c:	231b      	movs	r3, #27
 800225e:	18fb      	adds	r3, r7, r3
 8002260:	2204      	movs	r2, #4
 8002262:	701a      	strb	r2, [r3, #0]
 8002264:	e04e      	b.n	8002304 <UART_SetConfig+0x178>
 8002266:	231b      	movs	r3, #27
 8002268:	18fb      	adds	r3, r7, r3
 800226a:	2208      	movs	r2, #8
 800226c:	701a      	strb	r2, [r3, #0]
 800226e:	e049      	b.n	8002304 <UART_SetConfig+0x178>
 8002270:	231b      	movs	r3, #27
 8002272:	18fb      	adds	r3, r7, r3
 8002274:	2210      	movs	r2, #16
 8002276:	701a      	strb	r2, [r3, #0]
 8002278:	e044      	b.n	8002304 <UART_SetConfig+0x178>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a90      	ldr	r2, [pc, #576]	; (80024c0 <UART_SetConfig+0x334>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d127      	bne.n	80022d4 <UART_SetConfig+0x148>
 8002284:	4b8d      	ldr	r3, [pc, #564]	; (80024bc <UART_SetConfig+0x330>)
 8002286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002288:	220c      	movs	r2, #12
 800228a:	4013      	ands	r3, r2
 800228c:	2b0c      	cmp	r3, #12
 800228e:	d017      	beq.n	80022c0 <UART_SetConfig+0x134>
 8002290:	d81b      	bhi.n	80022ca <UART_SetConfig+0x13e>
 8002292:	2b08      	cmp	r3, #8
 8002294:	d00a      	beq.n	80022ac <UART_SetConfig+0x120>
 8002296:	d818      	bhi.n	80022ca <UART_SetConfig+0x13e>
 8002298:	2b00      	cmp	r3, #0
 800229a:	d002      	beq.n	80022a2 <UART_SetConfig+0x116>
 800229c:	2b04      	cmp	r3, #4
 800229e:	d00a      	beq.n	80022b6 <UART_SetConfig+0x12a>
 80022a0:	e013      	b.n	80022ca <UART_SetConfig+0x13e>
 80022a2:	231b      	movs	r3, #27
 80022a4:	18fb      	adds	r3, r7, r3
 80022a6:	2200      	movs	r2, #0
 80022a8:	701a      	strb	r2, [r3, #0]
 80022aa:	e02b      	b.n	8002304 <UART_SetConfig+0x178>
 80022ac:	231b      	movs	r3, #27
 80022ae:	18fb      	adds	r3, r7, r3
 80022b0:	2202      	movs	r2, #2
 80022b2:	701a      	strb	r2, [r3, #0]
 80022b4:	e026      	b.n	8002304 <UART_SetConfig+0x178>
 80022b6:	231b      	movs	r3, #27
 80022b8:	18fb      	adds	r3, r7, r3
 80022ba:	2204      	movs	r2, #4
 80022bc:	701a      	strb	r2, [r3, #0]
 80022be:	e021      	b.n	8002304 <UART_SetConfig+0x178>
 80022c0:	231b      	movs	r3, #27
 80022c2:	18fb      	adds	r3, r7, r3
 80022c4:	2208      	movs	r2, #8
 80022c6:	701a      	strb	r2, [r3, #0]
 80022c8:	e01c      	b.n	8002304 <UART_SetConfig+0x178>
 80022ca:	231b      	movs	r3, #27
 80022cc:	18fb      	adds	r3, r7, r3
 80022ce:	2210      	movs	r2, #16
 80022d0:	701a      	strb	r2, [r3, #0]
 80022d2:	e017      	b.n	8002304 <UART_SetConfig+0x178>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a7a      	ldr	r2, [pc, #488]	; (80024c4 <UART_SetConfig+0x338>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d104      	bne.n	80022e8 <UART_SetConfig+0x15c>
 80022de:	231b      	movs	r3, #27
 80022e0:	18fb      	adds	r3, r7, r3
 80022e2:	2200      	movs	r2, #0
 80022e4:	701a      	strb	r2, [r3, #0]
 80022e6:	e00d      	b.n	8002304 <UART_SetConfig+0x178>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a76      	ldr	r2, [pc, #472]	; (80024c8 <UART_SetConfig+0x33c>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d104      	bne.n	80022fc <UART_SetConfig+0x170>
 80022f2:	231b      	movs	r3, #27
 80022f4:	18fb      	adds	r3, r7, r3
 80022f6:	2200      	movs	r2, #0
 80022f8:	701a      	strb	r2, [r3, #0]
 80022fa:	e003      	b.n	8002304 <UART_SetConfig+0x178>
 80022fc:	231b      	movs	r3, #27
 80022fe:	18fb      	adds	r3, r7, r3
 8002300:	2210      	movs	r2, #16
 8002302:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	69da      	ldr	r2, [r3, #28]
 8002308:	2380      	movs	r3, #128	; 0x80
 800230a:	021b      	lsls	r3, r3, #8
 800230c:	429a      	cmp	r2, r3
 800230e:	d000      	beq.n	8002312 <UART_SetConfig+0x186>
 8002310:	e065      	b.n	80023de <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8002312:	231b      	movs	r3, #27
 8002314:	18fb      	adds	r3, r7, r3
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	2b08      	cmp	r3, #8
 800231a:	d015      	beq.n	8002348 <UART_SetConfig+0x1bc>
 800231c:	dc18      	bgt.n	8002350 <UART_SetConfig+0x1c4>
 800231e:	2b04      	cmp	r3, #4
 8002320:	d00d      	beq.n	800233e <UART_SetConfig+0x1b2>
 8002322:	dc15      	bgt.n	8002350 <UART_SetConfig+0x1c4>
 8002324:	2b00      	cmp	r3, #0
 8002326:	d002      	beq.n	800232e <UART_SetConfig+0x1a2>
 8002328:	2b02      	cmp	r3, #2
 800232a:	d005      	beq.n	8002338 <UART_SetConfig+0x1ac>
 800232c:	e010      	b.n	8002350 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800232e:	f7ff fd75 	bl	8001e1c <HAL_RCC_GetPCLK1Freq>
 8002332:	0003      	movs	r3, r0
 8002334:	617b      	str	r3, [r7, #20]
        break;
 8002336:	e012      	b.n	800235e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002338:	4b64      	ldr	r3, [pc, #400]	; (80024cc <UART_SetConfig+0x340>)
 800233a:	617b      	str	r3, [r7, #20]
        break;
 800233c:	e00f      	b.n	800235e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800233e:	f7ff fce1 	bl	8001d04 <HAL_RCC_GetSysClockFreq>
 8002342:	0003      	movs	r3, r0
 8002344:	617b      	str	r3, [r7, #20]
        break;
 8002346:	e00a      	b.n	800235e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002348:	2380      	movs	r3, #128	; 0x80
 800234a:	021b      	lsls	r3, r3, #8
 800234c:	617b      	str	r3, [r7, #20]
        break;
 800234e:	e006      	b.n	800235e <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8002350:	2300      	movs	r3, #0
 8002352:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002354:	231a      	movs	r3, #26
 8002356:	18fb      	adds	r3, r7, r3
 8002358:	2201      	movs	r2, #1
 800235a:	701a      	strb	r2, [r3, #0]
        break;
 800235c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d100      	bne.n	8002366 <UART_SetConfig+0x1da>
 8002364:	e08d      	b.n	8002482 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800236a:	4b59      	ldr	r3, [pc, #356]	; (80024d0 <UART_SetConfig+0x344>)
 800236c:	0052      	lsls	r2, r2, #1
 800236e:	5ad3      	ldrh	r3, [r2, r3]
 8002370:	0019      	movs	r1, r3
 8002372:	6978      	ldr	r0, [r7, #20]
 8002374:	f7fd fec4 	bl	8000100 <__udivsi3>
 8002378:	0003      	movs	r3, r0
 800237a:	005a      	lsls	r2, r3, #1
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	085b      	lsrs	r3, r3, #1
 8002382:	18d2      	adds	r2, r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	0019      	movs	r1, r3
 800238a:	0010      	movs	r0, r2
 800238c:	f7fd feb8 	bl	8000100 <__udivsi3>
 8002390:	0003      	movs	r3, r0
 8002392:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	2b0f      	cmp	r3, #15
 8002398:	d91c      	bls.n	80023d4 <UART_SetConfig+0x248>
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	2380      	movs	r3, #128	; 0x80
 800239e:	025b      	lsls	r3, r3, #9
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d217      	bcs.n	80023d4 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	b29a      	uxth	r2, r3
 80023a8:	200e      	movs	r0, #14
 80023aa:	183b      	adds	r3, r7, r0
 80023ac:	210f      	movs	r1, #15
 80023ae:	438a      	bics	r2, r1
 80023b0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	085b      	lsrs	r3, r3, #1
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	2207      	movs	r2, #7
 80023ba:	4013      	ands	r3, r2
 80023bc:	b299      	uxth	r1, r3
 80023be:	183b      	adds	r3, r7, r0
 80023c0:	183a      	adds	r2, r7, r0
 80023c2:	8812      	ldrh	r2, [r2, #0]
 80023c4:	430a      	orrs	r2, r1
 80023c6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	183a      	adds	r2, r7, r0
 80023ce:	8812      	ldrh	r2, [r2, #0]
 80023d0:	60da      	str	r2, [r3, #12]
 80023d2:	e056      	b.n	8002482 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 80023d4:	231a      	movs	r3, #26
 80023d6:	18fb      	adds	r3, r7, r3
 80023d8:	2201      	movs	r2, #1
 80023da:	701a      	strb	r2, [r3, #0]
 80023dc:	e051      	b.n	8002482 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80023de:	231b      	movs	r3, #27
 80023e0:	18fb      	adds	r3, r7, r3
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	2b08      	cmp	r3, #8
 80023e6:	d015      	beq.n	8002414 <UART_SetConfig+0x288>
 80023e8:	dc18      	bgt.n	800241c <UART_SetConfig+0x290>
 80023ea:	2b04      	cmp	r3, #4
 80023ec:	d00d      	beq.n	800240a <UART_SetConfig+0x27e>
 80023ee:	dc15      	bgt.n	800241c <UART_SetConfig+0x290>
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d002      	beq.n	80023fa <UART_SetConfig+0x26e>
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d005      	beq.n	8002404 <UART_SetConfig+0x278>
 80023f8:	e010      	b.n	800241c <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80023fa:	f7ff fd0f 	bl	8001e1c <HAL_RCC_GetPCLK1Freq>
 80023fe:	0003      	movs	r3, r0
 8002400:	617b      	str	r3, [r7, #20]
        break;
 8002402:	e012      	b.n	800242a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002404:	4b31      	ldr	r3, [pc, #196]	; (80024cc <UART_SetConfig+0x340>)
 8002406:	617b      	str	r3, [r7, #20]
        break;
 8002408:	e00f      	b.n	800242a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800240a:	f7ff fc7b 	bl	8001d04 <HAL_RCC_GetSysClockFreq>
 800240e:	0003      	movs	r3, r0
 8002410:	617b      	str	r3, [r7, #20]
        break;
 8002412:	e00a      	b.n	800242a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002414:	2380      	movs	r3, #128	; 0x80
 8002416:	021b      	lsls	r3, r3, #8
 8002418:	617b      	str	r3, [r7, #20]
        break;
 800241a:	e006      	b.n	800242a <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 800241c:	2300      	movs	r3, #0
 800241e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002420:	231a      	movs	r3, #26
 8002422:	18fb      	adds	r3, r7, r3
 8002424:	2201      	movs	r2, #1
 8002426:	701a      	strb	r2, [r3, #0]
        break;
 8002428:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d028      	beq.n	8002482 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002434:	4b26      	ldr	r3, [pc, #152]	; (80024d0 <UART_SetConfig+0x344>)
 8002436:	0052      	lsls	r2, r2, #1
 8002438:	5ad3      	ldrh	r3, [r2, r3]
 800243a:	0019      	movs	r1, r3
 800243c:	6978      	ldr	r0, [r7, #20]
 800243e:	f7fd fe5f 	bl	8000100 <__udivsi3>
 8002442:	0003      	movs	r3, r0
 8002444:	001a      	movs	r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	085b      	lsrs	r3, r3, #1
 800244c:	18d2      	adds	r2, r2, r3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	0019      	movs	r1, r3
 8002454:	0010      	movs	r0, r2
 8002456:	f7fd fe53 	bl	8000100 <__udivsi3>
 800245a:	0003      	movs	r3, r0
 800245c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	2b0f      	cmp	r3, #15
 8002462:	d90a      	bls.n	800247a <UART_SetConfig+0x2ee>
 8002464:	693a      	ldr	r2, [r7, #16]
 8002466:	2380      	movs	r3, #128	; 0x80
 8002468:	025b      	lsls	r3, r3, #9
 800246a:	429a      	cmp	r2, r3
 800246c:	d205      	bcs.n	800247a <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	b29a      	uxth	r2, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	60da      	str	r2, [r3, #12]
 8002478:	e003      	b.n	8002482 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800247a:	231a      	movs	r3, #26
 800247c:	18fb      	adds	r3, r7, r3
 800247e:	2201      	movs	r2, #1
 8002480:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	226a      	movs	r2, #106	; 0x6a
 8002486:	2101      	movs	r1, #1
 8002488:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2268      	movs	r2, #104	; 0x68
 800248e:	2101      	movs	r1, #1
 8002490:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800249e:	231a      	movs	r3, #26
 80024a0:	18fb      	adds	r3, r7, r3
 80024a2:	781b      	ldrb	r3, [r3, #0]
}
 80024a4:	0018      	movs	r0, r3
 80024a6:	46bd      	mov	sp, r7
 80024a8:	b008      	add	sp, #32
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	cfff69f3 	.word	0xcfff69f3
 80024b0:	ffffcfff 	.word	0xffffcfff
 80024b4:	11fff4ff 	.word	0x11fff4ff
 80024b8:	40013800 	.word	0x40013800
 80024bc:	40021000 	.word	0x40021000
 80024c0:	40004400 	.word	0x40004400
 80024c4:	40004800 	.word	0x40004800
 80024c8:	40004c00 	.word	0x40004c00
 80024cc:	00f42400 	.word	0x00f42400
 80024d0:	080030cc 	.word	0x080030cc

080024d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e0:	2201      	movs	r2, #1
 80024e2:	4013      	ands	r3, r2
 80024e4:	d00b      	beq.n	80024fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	4a4a      	ldr	r2, [pc, #296]	; (8002618 <UART_AdvFeatureConfig+0x144>)
 80024ee:	4013      	ands	r3, r2
 80024f0:	0019      	movs	r1, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	430a      	orrs	r2, r1
 80024fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002502:	2202      	movs	r2, #2
 8002504:	4013      	ands	r3, r2
 8002506:	d00b      	beq.n	8002520 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	4a43      	ldr	r2, [pc, #268]	; (800261c <UART_AdvFeatureConfig+0x148>)
 8002510:	4013      	ands	r3, r2
 8002512:	0019      	movs	r1, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	430a      	orrs	r2, r1
 800251e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002524:	2204      	movs	r2, #4
 8002526:	4013      	ands	r3, r2
 8002528:	d00b      	beq.n	8002542 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	4a3b      	ldr	r2, [pc, #236]	; (8002620 <UART_AdvFeatureConfig+0x14c>)
 8002532:	4013      	ands	r3, r2
 8002534:	0019      	movs	r1, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	430a      	orrs	r2, r1
 8002540:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002546:	2208      	movs	r2, #8
 8002548:	4013      	ands	r3, r2
 800254a:	d00b      	beq.n	8002564 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	4a34      	ldr	r2, [pc, #208]	; (8002624 <UART_AdvFeatureConfig+0x150>)
 8002554:	4013      	ands	r3, r2
 8002556:	0019      	movs	r1, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	430a      	orrs	r2, r1
 8002562:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002568:	2210      	movs	r2, #16
 800256a:	4013      	ands	r3, r2
 800256c:	d00b      	beq.n	8002586 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	4a2c      	ldr	r2, [pc, #176]	; (8002628 <UART_AdvFeatureConfig+0x154>)
 8002576:	4013      	ands	r3, r2
 8002578:	0019      	movs	r1, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	430a      	orrs	r2, r1
 8002584:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800258a:	2220      	movs	r2, #32
 800258c:	4013      	ands	r3, r2
 800258e:	d00b      	beq.n	80025a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	4a25      	ldr	r2, [pc, #148]	; (800262c <UART_AdvFeatureConfig+0x158>)
 8002598:	4013      	ands	r3, r2
 800259a:	0019      	movs	r1, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	430a      	orrs	r2, r1
 80025a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ac:	2240      	movs	r2, #64	; 0x40
 80025ae:	4013      	ands	r3, r2
 80025b0:	d01d      	beq.n	80025ee <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	4a1d      	ldr	r2, [pc, #116]	; (8002630 <UART_AdvFeatureConfig+0x15c>)
 80025ba:	4013      	ands	r3, r2
 80025bc:	0019      	movs	r1, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	430a      	orrs	r2, r1
 80025c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025ce:	2380      	movs	r3, #128	; 0x80
 80025d0:	035b      	lsls	r3, r3, #13
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d10b      	bne.n	80025ee <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	4a15      	ldr	r2, [pc, #84]	; (8002634 <UART_AdvFeatureConfig+0x160>)
 80025de:	4013      	ands	r3, r2
 80025e0:	0019      	movs	r1, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	430a      	orrs	r2, r1
 80025ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f2:	2280      	movs	r2, #128	; 0x80
 80025f4:	4013      	ands	r3, r2
 80025f6:	d00b      	beq.n	8002610 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	4a0e      	ldr	r2, [pc, #56]	; (8002638 <UART_AdvFeatureConfig+0x164>)
 8002600:	4013      	ands	r3, r2
 8002602:	0019      	movs	r1, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	430a      	orrs	r2, r1
 800260e:	605a      	str	r2, [r3, #4]
  }
}
 8002610:	46c0      	nop			; (mov r8, r8)
 8002612:	46bd      	mov	sp, r7
 8002614:	b002      	add	sp, #8
 8002616:	bd80      	pop	{r7, pc}
 8002618:	fffdffff 	.word	0xfffdffff
 800261c:	fffeffff 	.word	0xfffeffff
 8002620:	fffbffff 	.word	0xfffbffff
 8002624:	ffff7fff 	.word	0xffff7fff
 8002628:	ffffefff 	.word	0xffffefff
 800262c:	ffffdfff 	.word	0xffffdfff
 8002630:	ffefffff 	.word	0xffefffff
 8002634:	ff9fffff 	.word	0xff9fffff
 8002638:	fff7ffff 	.word	0xfff7ffff

0800263c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b086      	sub	sp, #24
 8002640:	af02      	add	r7, sp, #8
 8002642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2290      	movs	r2, #144	; 0x90
 8002648:	2100      	movs	r1, #0
 800264a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800264c:	f7fe fa16 	bl	8000a7c <HAL_GetTick>
 8002650:	0003      	movs	r3, r0
 8002652:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2208      	movs	r2, #8
 800265c:	4013      	ands	r3, r2
 800265e:	2b08      	cmp	r3, #8
 8002660:	d10c      	bne.n	800267c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2280      	movs	r2, #128	; 0x80
 8002666:	0391      	lsls	r1, r2, #14
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	4a1a      	ldr	r2, [pc, #104]	; (80026d4 <UART_CheckIdleState+0x98>)
 800266c:	9200      	str	r2, [sp, #0]
 800266e:	2200      	movs	r2, #0
 8002670:	f000 f832 	bl	80026d8 <UART_WaitOnFlagUntilTimeout>
 8002674:	1e03      	subs	r3, r0, #0
 8002676:	d001      	beq.n	800267c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e026      	b.n	80026ca <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2204      	movs	r2, #4
 8002684:	4013      	ands	r3, r2
 8002686:	2b04      	cmp	r3, #4
 8002688:	d10c      	bne.n	80026a4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2280      	movs	r2, #128	; 0x80
 800268e:	03d1      	lsls	r1, r2, #15
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	4a10      	ldr	r2, [pc, #64]	; (80026d4 <UART_CheckIdleState+0x98>)
 8002694:	9200      	str	r2, [sp, #0]
 8002696:	2200      	movs	r2, #0
 8002698:	f000 f81e 	bl	80026d8 <UART_WaitOnFlagUntilTimeout>
 800269c:	1e03      	subs	r3, r0, #0
 800269e:	d001      	beq.n	80026a4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e012      	b.n	80026ca <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2288      	movs	r2, #136	; 0x88
 80026a8:	2120      	movs	r1, #32
 80026aa:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	228c      	movs	r2, #140	; 0x8c
 80026b0:	2120      	movs	r1, #32
 80026b2:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2284      	movs	r2, #132	; 0x84
 80026c4:	2100      	movs	r1, #0
 80026c6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	0018      	movs	r0, r3
 80026cc:	46bd      	mov	sp, r7
 80026ce:	b004      	add	sp, #16
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	46c0      	nop			; (mov r8, r8)
 80026d4:	01ffffff 	.word	0x01ffffff

080026d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b094      	sub	sp, #80	; 0x50
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	603b      	str	r3, [r7, #0]
 80026e4:	1dfb      	adds	r3, r7, #7
 80026e6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026e8:	e0a7      	b.n	800283a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026ec:	3301      	adds	r3, #1
 80026ee:	d100      	bne.n	80026f2 <UART_WaitOnFlagUntilTimeout+0x1a>
 80026f0:	e0a3      	b.n	800283a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026f2:	f7fe f9c3 	bl	8000a7c <HAL_GetTick>
 80026f6:	0002      	movs	r2, r0
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80026fe:	429a      	cmp	r2, r3
 8002700:	d302      	bcc.n	8002708 <UART_WaitOnFlagUntilTimeout+0x30>
 8002702:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002704:	2b00      	cmp	r3, #0
 8002706:	d13f      	bne.n	8002788 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002708:	f3ef 8310 	mrs	r3, PRIMASK
 800270c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800270e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002710:	647b      	str	r3, [r7, #68]	; 0x44
 8002712:	2301      	movs	r3, #1
 8002714:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002718:	f383 8810 	msr	PRIMASK, r3
}
 800271c:	46c0      	nop			; (mov r8, r8)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	494e      	ldr	r1, [pc, #312]	; (8002864 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800272a:	400a      	ands	r2, r1
 800272c:	601a      	str	r2, [r3, #0]
 800272e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002730:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002734:	f383 8810 	msr	PRIMASK, r3
}
 8002738:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800273a:	f3ef 8310 	mrs	r3, PRIMASK
 800273e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002742:	643b      	str	r3, [r7, #64]	; 0x40
 8002744:	2301      	movs	r3, #1
 8002746:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800274a:	f383 8810 	msr	PRIMASK, r3
}
 800274e:	46c0      	nop			; (mov r8, r8)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	689a      	ldr	r2, [r3, #8]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2101      	movs	r1, #1
 800275c:	438a      	bics	r2, r1
 800275e:	609a      	str	r2, [r3, #8]
 8002760:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002762:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002766:	f383 8810 	msr	PRIMASK, r3
}
 800276a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2288      	movs	r2, #136	; 0x88
 8002770:	2120      	movs	r1, #32
 8002772:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	228c      	movs	r2, #140	; 0x8c
 8002778:	2120      	movs	r1, #32
 800277a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2284      	movs	r2, #132	; 0x84
 8002780:	2100      	movs	r1, #0
 8002782:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e069      	b.n	800285c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2204      	movs	r2, #4
 8002790:	4013      	ands	r3, r2
 8002792:	d052      	beq.n	800283a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	69da      	ldr	r2, [r3, #28]
 800279a:	2380      	movs	r3, #128	; 0x80
 800279c:	011b      	lsls	r3, r3, #4
 800279e:	401a      	ands	r2, r3
 80027a0:	2380      	movs	r3, #128	; 0x80
 80027a2:	011b      	lsls	r3, r3, #4
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d148      	bne.n	800283a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2280      	movs	r2, #128	; 0x80
 80027ae:	0112      	lsls	r2, r2, #4
 80027b0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027b2:	f3ef 8310 	mrs	r3, PRIMASK
 80027b6:	613b      	str	r3, [r7, #16]
  return(result);
 80027b8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80027ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027bc:	2301      	movs	r3, #1
 80027be:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	f383 8810 	msr	PRIMASK, r3
}
 80027c6:	46c0      	nop			; (mov r8, r8)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4924      	ldr	r1, [pc, #144]	; (8002864 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80027d4:	400a      	ands	r2, r1
 80027d6:	601a      	str	r2, [r3, #0]
 80027d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027da:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	f383 8810 	msr	PRIMASK, r3
}
 80027e2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027e4:	f3ef 8310 	mrs	r3, PRIMASK
 80027e8:	61fb      	str	r3, [r7, #28]
  return(result);
 80027ea:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80027ee:	2301      	movs	r3, #1
 80027f0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027f2:	6a3b      	ldr	r3, [r7, #32]
 80027f4:	f383 8810 	msr	PRIMASK, r3
}
 80027f8:	46c0      	nop			; (mov r8, r8)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	689a      	ldr	r2, [r3, #8]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2101      	movs	r1, #1
 8002806:	438a      	bics	r2, r1
 8002808:	609a      	str	r2, [r3, #8]
 800280a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800280c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800280e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002810:	f383 8810 	msr	PRIMASK, r3
}
 8002814:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2288      	movs	r2, #136	; 0x88
 800281a:	2120      	movs	r1, #32
 800281c:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	228c      	movs	r2, #140	; 0x8c
 8002822:	2120      	movs	r1, #32
 8002824:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2290      	movs	r2, #144	; 0x90
 800282a:	2120      	movs	r1, #32
 800282c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2284      	movs	r2, #132	; 0x84
 8002832:	2100      	movs	r1, #0
 8002834:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e010      	b.n	800285c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	69db      	ldr	r3, [r3, #28]
 8002840:	68ba      	ldr	r2, [r7, #8]
 8002842:	4013      	ands	r3, r2
 8002844:	68ba      	ldr	r2, [r7, #8]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	425a      	negs	r2, r3
 800284a:	4153      	adcs	r3, r2
 800284c:	b2db      	uxtb	r3, r3
 800284e:	001a      	movs	r2, r3
 8002850:	1dfb      	adds	r3, r7, #7
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	429a      	cmp	r2, r3
 8002856:	d100      	bne.n	800285a <UART_WaitOnFlagUntilTimeout+0x182>
 8002858:	e747      	b.n	80026ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800285a:	2300      	movs	r3, #0
}
 800285c:	0018      	movs	r0, r3
 800285e:	46bd      	mov	sp, r7
 8002860:	b014      	add	sp, #80	; 0x50
 8002862:	bd80      	pop	{r7, pc}
 8002864:	fffffe5f 	.word	0xfffffe5f

08002868 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b090      	sub	sp, #64	; 0x40
 800286c:	af00      	add	r7, sp, #0
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	60b9      	str	r1, [r7, #8]
 8002872:	1dbb      	adds	r3, r7, #6
 8002874:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	68ba      	ldr	r2, [r7, #8]
 800287a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	1dba      	adds	r2, r7, #6
 8002880:	215c      	movs	r1, #92	; 0x5c
 8002882:	8812      	ldrh	r2, [r2, #0]
 8002884:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2290      	movs	r2, #144	; 0x90
 800288a:	2100      	movs	r1, #0
 800288c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	228c      	movs	r2, #140	; 0x8c
 8002892:	2122      	movs	r1, #34	; 0x22
 8002894:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2280      	movs	r2, #128	; 0x80
 800289a:	589b      	ldr	r3, [r3, r2]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d02d      	beq.n	80028fc <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2280      	movs	r2, #128	; 0x80
 80028a4:	589b      	ldr	r3, [r3, r2]
 80028a6:	4a40      	ldr	r2, [pc, #256]	; (80029a8 <UART_Start_Receive_DMA+0x140>)
 80028a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2280      	movs	r2, #128	; 0x80
 80028ae:	589b      	ldr	r3, [r3, r2]
 80028b0:	4a3e      	ldr	r2, [pc, #248]	; (80029ac <UART_Start_Receive_DMA+0x144>)
 80028b2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2280      	movs	r2, #128	; 0x80
 80028b8:	589b      	ldr	r3, [r3, r2]
 80028ba:	4a3d      	ldr	r2, [pc, #244]	; (80029b0 <UART_Start_Receive_DMA+0x148>)
 80028bc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2280      	movs	r2, #128	; 0x80
 80028c2:	589b      	ldr	r3, [r3, r2]
 80028c4:	2200      	movs	r2, #0
 80028c6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2280      	movs	r2, #128	; 0x80
 80028cc:	5898      	ldr	r0, [r3, r2]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	3324      	adds	r3, #36	; 0x24
 80028d4:	0019      	movs	r1, r3
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028da:	001a      	movs	r2, r3
 80028dc:	1dbb      	adds	r3, r7, #6
 80028de:	881b      	ldrh	r3, [r3, #0]
 80028e0:	f7fe fa62 	bl	8000da8 <HAL_DMA_Start_IT>
 80028e4:	1e03      	subs	r3, r0, #0
 80028e6:	d009      	beq.n	80028fc <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2290      	movs	r2, #144	; 0x90
 80028ec:	2110      	movs	r1, #16
 80028ee:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	228c      	movs	r2, #140	; 0x8c
 80028f4:	2120      	movs	r1, #32
 80028f6:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e050      	b.n	800299e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d019      	beq.n	8002938 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002904:	f3ef 8310 	mrs	r3, PRIMASK
 8002908:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800290a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800290c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800290e:	2301      	movs	r3, #1
 8002910:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002914:	f383 8810 	msr	PRIMASK, r3
}
 8002918:	46c0      	nop			; (mov r8, r8)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2180      	movs	r1, #128	; 0x80
 8002926:	0049      	lsls	r1, r1, #1
 8002928:	430a      	orrs	r2, r1
 800292a:	601a      	str	r2, [r3, #0]
 800292c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800292e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002932:	f383 8810 	msr	PRIMASK, r3
}
 8002936:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002938:	f3ef 8310 	mrs	r3, PRIMASK
 800293c:	613b      	str	r3, [r7, #16]
  return(result);
 800293e:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002940:	63bb      	str	r3, [r7, #56]	; 0x38
 8002942:	2301      	movs	r3, #1
 8002944:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	f383 8810 	msr	PRIMASK, r3
}
 800294c:	46c0      	nop			; (mov r8, r8)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	689a      	ldr	r2, [r3, #8]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2101      	movs	r1, #1
 800295a:	430a      	orrs	r2, r1
 800295c:	609a      	str	r2, [r3, #8]
 800295e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002960:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	f383 8810 	msr	PRIMASK, r3
}
 8002968:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800296a:	f3ef 8310 	mrs	r3, PRIMASK
 800296e:	61fb      	str	r3, [r7, #28]
  return(result);
 8002970:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002972:	637b      	str	r3, [r7, #52]	; 0x34
 8002974:	2301      	movs	r3, #1
 8002976:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002978:	6a3b      	ldr	r3, [r7, #32]
 800297a:	f383 8810 	msr	PRIMASK, r3
}
 800297e:	46c0      	nop			; (mov r8, r8)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	689a      	ldr	r2, [r3, #8]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2140      	movs	r1, #64	; 0x40
 800298c:	430a      	orrs	r2, r1
 800298e:	609a      	str	r2, [r3, #8]
 8002990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002992:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002996:	f383 8810 	msr	PRIMASK, r3
}
 800299a:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	0018      	movs	r0, r3
 80029a0:	46bd      	mov	sp, r7
 80029a2:	b010      	add	sp, #64	; 0x40
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	46c0      	nop			; (mov r8, r8)
 80029a8:	08002b01 	.word	0x08002b01
 80029ac:	08002c31 	.word	0x08002c31
 80029b0:	08002c73 	.word	0x08002c73

080029b4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b08a      	sub	sp, #40	; 0x28
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029bc:	f3ef 8310 	mrs	r3, PRIMASK
 80029c0:	60bb      	str	r3, [r7, #8]
  return(result);
 80029c2:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80029c4:	627b      	str	r3, [r7, #36]	; 0x24
 80029c6:	2301      	movs	r3, #1
 80029c8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f383 8810 	msr	PRIMASK, r3
}
 80029d0:	46c0      	nop			; (mov r8, r8)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	21c0      	movs	r1, #192	; 0xc0
 80029de:	438a      	bics	r2, r1
 80029e0:	601a      	str	r2, [r3, #0]
 80029e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	f383 8810 	msr	PRIMASK, r3
}
 80029ec:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029ee:	f3ef 8310 	mrs	r3, PRIMASK
 80029f2:	617b      	str	r3, [r7, #20]
  return(result);
 80029f4:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80029f6:	623b      	str	r3, [r7, #32]
 80029f8:	2301      	movs	r3, #1
 80029fa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	f383 8810 	msr	PRIMASK, r3
}
 8002a02:	46c0      	nop			; (mov r8, r8)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	689a      	ldr	r2, [r3, #8]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4908      	ldr	r1, [pc, #32]	; (8002a30 <UART_EndTxTransfer+0x7c>)
 8002a10:	400a      	ands	r2, r1
 8002a12:	609a      	str	r2, [r3, #8]
 8002a14:	6a3b      	ldr	r3, [r7, #32]
 8002a16:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	f383 8810 	msr	PRIMASK, r3
}
 8002a1e:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2288      	movs	r2, #136	; 0x88
 8002a24:	2120      	movs	r1, #32
 8002a26:	5099      	str	r1, [r3, r2]
}
 8002a28:	46c0      	nop			; (mov r8, r8)
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	b00a      	add	sp, #40	; 0x28
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	ff7fffff 	.word	0xff7fffff

08002a34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b08e      	sub	sp, #56	; 0x38
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a3c:	f3ef 8310 	mrs	r3, PRIMASK
 8002a40:	617b      	str	r3, [r7, #20]
  return(result);
 8002a42:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002a44:	637b      	str	r3, [r7, #52]	; 0x34
 8002a46:	2301      	movs	r3, #1
 8002a48:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	f383 8810 	msr	PRIMASK, r3
}
 8002a50:	46c0      	nop			; (mov r8, r8)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4926      	ldr	r1, [pc, #152]	; (8002af8 <UART_EndRxTransfer+0xc4>)
 8002a5e:	400a      	ands	r2, r1
 8002a60:	601a      	str	r2, [r3, #0]
 8002a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a64:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	f383 8810 	msr	PRIMASK, r3
}
 8002a6c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a6e:	f3ef 8310 	mrs	r3, PRIMASK
 8002a72:	623b      	str	r3, [r7, #32]
  return(result);
 8002a74:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002a76:	633b      	str	r3, [r7, #48]	; 0x30
 8002a78:	2301      	movs	r3, #1
 8002a7a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7e:	f383 8810 	msr	PRIMASK, r3
}
 8002a82:	46c0      	nop			; (mov r8, r8)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	689a      	ldr	r2, [r3, #8]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	491b      	ldr	r1, [pc, #108]	; (8002afc <UART_EndRxTransfer+0xc8>)
 8002a90:	400a      	ands	r2, r1
 8002a92:	609a      	str	r2, [r3, #8]
 8002a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a96:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a9a:	f383 8810 	msr	PRIMASK, r3
}
 8002a9e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d118      	bne.n	8002ada <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002aa8:	f3ef 8310 	mrs	r3, PRIMASK
 8002aac:	60bb      	str	r3, [r7, #8]
  return(result);
 8002aae:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f383 8810 	msr	PRIMASK, r3
}
 8002abc:	46c0      	nop			; (mov r8, r8)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2110      	movs	r1, #16
 8002aca:	438a      	bics	r2, r1
 8002acc:	601a      	str	r2, [r3, #0]
 8002ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ad0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	f383 8810 	msr	PRIMASK, r3
}
 8002ad8:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	228c      	movs	r2, #140	; 0x8c
 8002ade:	2120      	movs	r1, #32
 8002ae0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	675a      	str	r2, [r3, #116]	; 0x74
}
 8002aee:	46c0      	nop			; (mov r8, r8)
 8002af0:	46bd      	mov	sp, r7
 8002af2:	b00e      	add	sp, #56	; 0x38
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	46c0      	nop			; (mov r8, r8)
 8002af8:	fffffedf 	.word	0xfffffedf
 8002afc:	effffffe 	.word	0xeffffffe

08002b00 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b094      	sub	sp, #80	; 0x50
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b0c:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2220      	movs	r2, #32
 8002b16:	4013      	ands	r3, r2
 8002b18:	d16f      	bne.n	8002bfa <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8002b1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b1c:	225e      	movs	r2, #94	; 0x5e
 8002b1e:	2100      	movs	r1, #0
 8002b20:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b22:	f3ef 8310 	mrs	r3, PRIMASK
 8002b26:	61bb      	str	r3, [r7, #24]
  return(result);
 8002b28:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	f383 8810 	msr	PRIMASK, r3
}
 8002b36:	46c0      	nop			; (mov r8, r8)
 8002b38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	493a      	ldr	r1, [pc, #232]	; (8002c2c <UART_DMAReceiveCplt+0x12c>)
 8002b44:	400a      	ands	r2, r1
 8002b46:	601a      	str	r2, [r3, #0]
 8002b48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b4a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b4c:	6a3b      	ldr	r3, [r7, #32]
 8002b4e:	f383 8810 	msr	PRIMASK, r3
}
 8002b52:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b54:	f3ef 8310 	mrs	r3, PRIMASK
 8002b58:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b5c:	647b      	str	r3, [r7, #68]	; 0x44
 8002b5e:	2301      	movs	r3, #1
 8002b60:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b64:	f383 8810 	msr	PRIMASK, r3
}
 8002b68:	46c0      	nop			; (mov r8, r8)
 8002b6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	689a      	ldr	r2, [r3, #8]
 8002b70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2101      	movs	r1, #1
 8002b76:	438a      	bics	r2, r1
 8002b78:	609a      	str	r2, [r3, #8]
 8002b7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b80:	f383 8810 	msr	PRIMASK, r3
}
 8002b84:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b86:	f3ef 8310 	mrs	r3, PRIMASK
 8002b8a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b8e:	643b      	str	r3, [r7, #64]	; 0x40
 8002b90:	2301      	movs	r3, #1
 8002b92:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b96:	f383 8810 	msr	PRIMASK, r3
}
 8002b9a:	46c0      	nop			; (mov r8, r8)
 8002b9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	689a      	ldr	r2, [r3, #8]
 8002ba2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2140      	movs	r1, #64	; 0x40
 8002ba8:	438a      	bics	r2, r1
 8002baa:	609a      	str	r2, [r3, #8]
 8002bac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bae:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bb2:	f383 8810 	msr	PRIMASK, r3
}
 8002bb6:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002bb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bba:	228c      	movs	r2, #140	; 0x8c
 8002bbc:	2120      	movs	r1, #32
 8002bbe:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d118      	bne.n	8002bfa <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bc8:	f3ef 8310 	mrs	r3, PRIMASK
 8002bcc:	60fb      	str	r3, [r7, #12]
  return(result);
 8002bce:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	f383 8810 	msr	PRIMASK, r3
}
 8002bdc:	46c0      	nop			; (mov r8, r8)
 8002bde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2110      	movs	r1, #16
 8002bea:	438a      	bics	r2, r1
 8002bec:	601a      	str	r2, [r3, #0]
 8002bee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bf0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	f383 8810 	msr	PRIMASK, r3
}
 8002bf8:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002bfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d108      	bne.n	8002c1a <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002c08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c0a:	225c      	movs	r2, #92	; 0x5c
 8002c0c:	5a9a      	ldrh	r2, [r3, r2]
 8002c0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c10:	0011      	movs	r1, r2
 8002c12:	0018      	movs	r0, r3
 8002c14:	f7fd fbea 	bl	80003ec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002c18:	e003      	b.n	8002c22 <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 8002c1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c1c:	0018      	movs	r0, r3
 8002c1e:	f7ff fa9d 	bl	800215c <HAL_UART_RxCpltCallback>
}
 8002c22:	46c0      	nop			; (mov r8, r8)
 8002c24:	46bd      	mov	sp, r7
 8002c26:	b014      	add	sp, #80	; 0x50
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	46c0      	nop			; (mov r8, r8)
 8002c2c:	fffffeff 	.word	0xfffffeff

08002c30 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c3c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2201      	movs	r2, #1
 8002c42:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d10a      	bne.n	8002c62 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	225c      	movs	r2, #92	; 0x5c
 8002c50:	5a9b      	ldrh	r3, [r3, r2]
 8002c52:	085b      	lsrs	r3, r3, #1
 8002c54:	b29a      	uxth	r2, r3
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	0011      	movs	r1, r2
 8002c5a:	0018      	movs	r0, r3
 8002c5c:	f7fd fbc6 	bl	80003ec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002c60:	e003      	b.n	8002c6a <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	0018      	movs	r0, r3
 8002c66:	f7ff fa81 	bl	800216c <HAL_UART_RxHalfCpltCallback>
}
 8002c6a:	46c0      	nop			; (mov r8, r8)
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	b004      	add	sp, #16
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002c72:	b580      	push	{r7, lr}
 8002c74:	b086      	sub	sp, #24
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c7e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	2288      	movs	r2, #136	; 0x88
 8002c84:	589b      	ldr	r3, [r3, r2]
 8002c86:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	228c      	movs	r2, #140	; 0x8c
 8002c8c:	589b      	ldr	r3, [r3, r2]
 8002c8e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	2280      	movs	r2, #128	; 0x80
 8002c98:	4013      	ands	r3, r2
 8002c9a:	2b80      	cmp	r3, #128	; 0x80
 8002c9c:	d10a      	bne.n	8002cb4 <UART_DMAError+0x42>
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	2b21      	cmp	r3, #33	; 0x21
 8002ca2:	d107      	bne.n	8002cb4 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	2256      	movs	r2, #86	; 0x56
 8002ca8:	2100      	movs	r1, #0
 8002caa:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	0018      	movs	r0, r3
 8002cb0:	f7ff fe80 	bl	80029b4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	2240      	movs	r2, #64	; 0x40
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	2b40      	cmp	r3, #64	; 0x40
 8002cc0:	d10a      	bne.n	8002cd8 <UART_DMAError+0x66>
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2b22      	cmp	r3, #34	; 0x22
 8002cc6:	d107      	bne.n	8002cd8 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	225e      	movs	r2, #94	; 0x5e
 8002ccc:	2100      	movs	r1, #0
 8002cce:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	0018      	movs	r0, r3
 8002cd4:	f7ff feae 	bl	8002a34 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	2290      	movs	r2, #144	; 0x90
 8002cdc:	589b      	ldr	r3, [r3, r2]
 8002cde:	2210      	movs	r2, #16
 8002ce0:	431a      	orrs	r2, r3
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	2190      	movs	r1, #144	; 0x90
 8002ce6:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	0018      	movs	r0, r3
 8002cec:	f7ff fa46 	bl	800217c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002cf0:	46c0      	nop			; (mov r8, r8)
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	b006      	add	sp, #24
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2284      	movs	r2, #132	; 0x84
 8002d04:	5c9b      	ldrb	r3, [r3, r2]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d101      	bne.n	8002d0e <HAL_UARTEx_DisableFifoMode+0x16>
 8002d0a:	2302      	movs	r3, #2
 8002d0c:	e027      	b.n	8002d5e <HAL_UARTEx_DisableFifoMode+0x66>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2284      	movs	r2, #132	; 0x84
 8002d12:	2101      	movs	r1, #1
 8002d14:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2288      	movs	r2, #136	; 0x88
 8002d1a:	2124      	movs	r1, #36	; 0x24
 8002d1c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2101      	movs	r1, #1
 8002d32:	438a      	bics	r2, r1
 8002d34:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	4a0b      	ldr	r2, [pc, #44]	; (8002d68 <HAL_UARTEx_DisableFifoMode+0x70>)
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	68fa      	ldr	r2, [r7, #12]
 8002d4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2288      	movs	r2, #136	; 0x88
 8002d50:	2120      	movs	r1, #32
 8002d52:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2284      	movs	r2, #132	; 0x84
 8002d58:	2100      	movs	r1, #0
 8002d5a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	0018      	movs	r0, r3
 8002d60:	46bd      	mov	sp, r7
 8002d62:	b004      	add	sp, #16
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	46c0      	nop			; (mov r8, r8)
 8002d68:	dfffffff 	.word	0xdfffffff

08002d6c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2284      	movs	r2, #132	; 0x84
 8002d7a:	5c9b      	ldrb	r3, [r3, r2]
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d101      	bne.n	8002d84 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002d80:	2302      	movs	r3, #2
 8002d82:	e02e      	b.n	8002de2 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2284      	movs	r2, #132	; 0x84
 8002d88:	2101      	movs	r1, #1
 8002d8a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2288      	movs	r2, #136	; 0x88
 8002d90:	2124      	movs	r1, #36	; 0x24
 8002d92:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2101      	movs	r1, #1
 8002da8:	438a      	bics	r2, r1
 8002daa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	00db      	lsls	r3, r3, #3
 8002db4:	08d9      	lsrs	r1, r3, #3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	683a      	ldr	r2, [r7, #0]
 8002dbc:	430a      	orrs	r2, r1
 8002dbe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	0018      	movs	r0, r3
 8002dc4:	f000 f8bc 	bl	8002f40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	68fa      	ldr	r2, [r7, #12]
 8002dce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2288      	movs	r2, #136	; 0x88
 8002dd4:	2120      	movs	r1, #32
 8002dd6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2284      	movs	r2, #132	; 0x84
 8002ddc:	2100      	movs	r1, #0
 8002dde:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	0018      	movs	r0, r3
 8002de4:	46bd      	mov	sp, r7
 8002de6:	b004      	add	sp, #16
 8002de8:	bd80      	pop	{r7, pc}
	...

08002dec <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2284      	movs	r2, #132	; 0x84
 8002dfa:	5c9b      	ldrb	r3, [r3, r2]
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d101      	bne.n	8002e04 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002e00:	2302      	movs	r3, #2
 8002e02:	e02f      	b.n	8002e64 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2284      	movs	r2, #132	; 0x84
 8002e08:	2101      	movs	r1, #1
 8002e0a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2288      	movs	r2, #136	; 0x88
 8002e10:	2124      	movs	r1, #36	; 0x24
 8002e12:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2101      	movs	r1, #1
 8002e28:	438a      	bics	r2, r1
 8002e2a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	4a0e      	ldr	r2, [pc, #56]	; (8002e6c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8002e34:	4013      	ands	r3, r2
 8002e36:	0019      	movs	r1, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	683a      	ldr	r2, [r7, #0]
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	0018      	movs	r0, r3
 8002e46:	f000 f87b 	bl	8002f40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	68fa      	ldr	r2, [r7, #12]
 8002e50:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2288      	movs	r2, #136	; 0x88
 8002e56:	2120      	movs	r1, #32
 8002e58:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2284      	movs	r2, #132	; 0x84
 8002e5e:	2100      	movs	r1, #0
 8002e60:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e62:	2300      	movs	r3, #0
}
 8002e64:	0018      	movs	r0, r3
 8002e66:	46bd      	mov	sp, r7
 8002e68:	b004      	add	sp, #16
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	f1ffffff 	.word	0xf1ffffff

08002e70 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e70:	b5b0      	push	{r4, r5, r7, lr}
 8002e72:	b08a      	sub	sp, #40	; 0x28
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	1dbb      	adds	r3, r7, #6
 8002e7c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	228c      	movs	r2, #140	; 0x8c
 8002e82:	589b      	ldr	r3, [r3, r2]
 8002e84:	2b20      	cmp	r3, #32
 8002e86:	d156      	bne.n	8002f36 <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d003      	beq.n	8002e96 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8002e8e:	1dbb      	adds	r3, r7, #6
 8002e90:	881b      	ldrh	r3, [r3, #0]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d101      	bne.n	8002e9a <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e04e      	b.n	8002f38 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	689a      	ldr	r2, [r3, #8]
 8002e9e:	2380      	movs	r3, #128	; 0x80
 8002ea0:	015b      	lsls	r3, r3, #5
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d109      	bne.n	8002eba <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d105      	bne.n	8002eba <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	d001      	beq.n	8002eba <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e03e      	b.n	8002f38 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8002ec6:	2527      	movs	r5, #39	; 0x27
 8002ec8:	197c      	adds	r4, r7, r5
 8002eca:	1dbb      	adds	r3, r7, #6
 8002ecc:	881a      	ldrh	r2, [r3, #0]
 8002ece:	68b9      	ldr	r1, [r7, #8]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	0018      	movs	r0, r3
 8002ed4:	f7ff fcc8 	bl	8002868 <UART_Start_Receive_DMA>
 8002ed8:	0003      	movs	r3, r0
 8002eda:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8002edc:	197b      	adds	r3, r7, r5
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d124      	bne.n	8002f2e <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d11c      	bne.n	8002f26 <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2210      	movs	r2, #16
 8002ef2:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ef4:	f3ef 8310 	mrs	r3, PRIMASK
 8002ef8:	617b      	str	r3, [r7, #20]
  return(result);
 8002efa:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002efc:	623b      	str	r3, [r7, #32]
 8002efe:	2301      	movs	r3, #1
 8002f00:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	f383 8810 	msr	PRIMASK, r3
}
 8002f08:	46c0      	nop			; (mov r8, r8)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2110      	movs	r1, #16
 8002f16:	430a      	orrs	r2, r1
 8002f18:	601a      	str	r2, [r3, #0]
 8002f1a:	6a3b      	ldr	r3, [r7, #32]
 8002f1c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	f383 8810 	msr	PRIMASK, r3
}
 8002f24:	e003      	b.n	8002f2e <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8002f26:	2327      	movs	r3, #39	; 0x27
 8002f28:	18fb      	adds	r3, r7, r3
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 8002f2e:	2327      	movs	r3, #39	; 0x27
 8002f30:	18fb      	adds	r3, r7, r3
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	e000      	b.n	8002f38 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 8002f36:	2302      	movs	r3, #2
  }
}
 8002f38:	0018      	movs	r0, r3
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	b00a      	add	sp, #40	; 0x28
 8002f3e:	bdb0      	pop	{r4, r5, r7, pc}

08002f40 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002f40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d108      	bne.n	8002f62 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	226a      	movs	r2, #106	; 0x6a
 8002f54:	2101      	movs	r1, #1
 8002f56:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2268      	movs	r2, #104	; 0x68
 8002f5c:	2101      	movs	r1, #1
 8002f5e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002f60:	e043      	b.n	8002fea <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002f62:	260f      	movs	r6, #15
 8002f64:	19bb      	adds	r3, r7, r6
 8002f66:	2208      	movs	r2, #8
 8002f68:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002f6a:	200e      	movs	r0, #14
 8002f6c:	183b      	adds	r3, r7, r0
 8002f6e:	2208      	movs	r2, #8
 8002f70:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	0e5b      	lsrs	r3, r3, #25
 8002f7a:	b2da      	uxtb	r2, r3
 8002f7c:	240d      	movs	r4, #13
 8002f7e:	193b      	adds	r3, r7, r4
 8002f80:	2107      	movs	r1, #7
 8002f82:	400a      	ands	r2, r1
 8002f84:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	0f5b      	lsrs	r3, r3, #29
 8002f8e:	b2da      	uxtb	r2, r3
 8002f90:	250c      	movs	r5, #12
 8002f92:	197b      	adds	r3, r7, r5
 8002f94:	2107      	movs	r1, #7
 8002f96:	400a      	ands	r2, r1
 8002f98:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002f9a:	183b      	adds	r3, r7, r0
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	197a      	adds	r2, r7, r5
 8002fa0:	7812      	ldrb	r2, [r2, #0]
 8002fa2:	4914      	ldr	r1, [pc, #80]	; (8002ff4 <UARTEx_SetNbDataToProcess+0xb4>)
 8002fa4:	5c8a      	ldrb	r2, [r1, r2]
 8002fa6:	435a      	muls	r2, r3
 8002fa8:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8002faa:	197b      	adds	r3, r7, r5
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	4a12      	ldr	r2, [pc, #72]	; (8002ff8 <UARTEx_SetNbDataToProcess+0xb8>)
 8002fb0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002fb2:	0019      	movs	r1, r3
 8002fb4:	f7fd f92e 	bl	8000214 <__divsi3>
 8002fb8:	0003      	movs	r3, r0
 8002fba:	b299      	uxth	r1, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	226a      	movs	r2, #106	; 0x6a
 8002fc0:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002fc2:	19bb      	adds	r3, r7, r6
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	193a      	adds	r2, r7, r4
 8002fc8:	7812      	ldrb	r2, [r2, #0]
 8002fca:	490a      	ldr	r1, [pc, #40]	; (8002ff4 <UARTEx_SetNbDataToProcess+0xb4>)
 8002fcc:	5c8a      	ldrb	r2, [r1, r2]
 8002fce:	435a      	muls	r2, r3
 8002fd0:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8002fd2:	193b      	adds	r3, r7, r4
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	4a08      	ldr	r2, [pc, #32]	; (8002ff8 <UARTEx_SetNbDataToProcess+0xb8>)
 8002fd8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002fda:	0019      	movs	r1, r3
 8002fdc:	f7fd f91a 	bl	8000214 <__divsi3>
 8002fe0:	0003      	movs	r3, r0
 8002fe2:	b299      	uxth	r1, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2268      	movs	r2, #104	; 0x68
 8002fe8:	5299      	strh	r1, [r3, r2]
}
 8002fea:	46c0      	nop			; (mov r8, r8)
 8002fec:	46bd      	mov	sp, r7
 8002fee:	b005      	add	sp, #20
 8002ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ff2:	46c0      	nop			; (mov r8, r8)
 8002ff4:	080030e4 	.word	0x080030e4
 8002ff8:	080030ec 	.word	0x080030ec

08002ffc <memset>:
 8002ffc:	0003      	movs	r3, r0
 8002ffe:	1882      	adds	r2, r0, r2
 8003000:	4293      	cmp	r3, r2
 8003002:	d100      	bne.n	8003006 <memset+0xa>
 8003004:	4770      	bx	lr
 8003006:	7019      	strb	r1, [r3, #0]
 8003008:	3301      	adds	r3, #1
 800300a:	e7f9      	b.n	8003000 <memset+0x4>

0800300c <__libc_init_array>:
 800300c:	b570      	push	{r4, r5, r6, lr}
 800300e:	2600      	movs	r6, #0
 8003010:	4c0c      	ldr	r4, [pc, #48]	; (8003044 <__libc_init_array+0x38>)
 8003012:	4d0d      	ldr	r5, [pc, #52]	; (8003048 <__libc_init_array+0x3c>)
 8003014:	1b64      	subs	r4, r4, r5
 8003016:	10a4      	asrs	r4, r4, #2
 8003018:	42a6      	cmp	r6, r4
 800301a:	d109      	bne.n	8003030 <__libc_init_array+0x24>
 800301c:	2600      	movs	r6, #0
 800301e:	f000 f819 	bl	8003054 <_init>
 8003022:	4c0a      	ldr	r4, [pc, #40]	; (800304c <__libc_init_array+0x40>)
 8003024:	4d0a      	ldr	r5, [pc, #40]	; (8003050 <__libc_init_array+0x44>)
 8003026:	1b64      	subs	r4, r4, r5
 8003028:	10a4      	asrs	r4, r4, #2
 800302a:	42a6      	cmp	r6, r4
 800302c:	d105      	bne.n	800303a <__libc_init_array+0x2e>
 800302e:	bd70      	pop	{r4, r5, r6, pc}
 8003030:	00b3      	lsls	r3, r6, #2
 8003032:	58eb      	ldr	r3, [r5, r3]
 8003034:	4798      	blx	r3
 8003036:	3601      	adds	r6, #1
 8003038:	e7ee      	b.n	8003018 <__libc_init_array+0xc>
 800303a:	00b3      	lsls	r3, r6, #2
 800303c:	58eb      	ldr	r3, [r5, r3]
 800303e:	4798      	blx	r3
 8003040:	3601      	adds	r6, #1
 8003042:	e7f2      	b.n	800302a <__libc_init_array+0x1e>
 8003044:	080030f4 	.word	0x080030f4
 8003048:	080030f4 	.word	0x080030f4
 800304c:	080030f8 	.word	0x080030f8
 8003050:	080030f4 	.word	0x080030f4

08003054 <_init>:
 8003054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003056:	46c0      	nop			; (mov r8, r8)
 8003058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800305a:	bc08      	pop	{r3}
 800305c:	469e      	mov	lr, r3
 800305e:	4770      	bx	lr

08003060 <_fini>:
 8003060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003062:	46c0      	nop			; (mov r8, r8)
 8003064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003066:	bc08      	pop	{r3}
 8003068:	469e      	mov	lr, r3
 800306a:	4770      	bx	lr
