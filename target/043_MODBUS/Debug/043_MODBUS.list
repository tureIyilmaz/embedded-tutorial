
043_MODBUS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003670  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c4  08003728  08003728  00013728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039ec  080039ec  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080039ec  080039ec  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080039ec  080039ec  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039ec  080039ec  000139ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039f0  080039f0  000139f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080039f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000034c  20000010  08003a04  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000035c  08003a04  0002035c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bd44  00000000  00000000  0002007b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002101  00000000  00000000  0002bdbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000910  00000000  00000000  0002dec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006f2  00000000  00000000  0002e7d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015604  00000000  00000000  0002eec2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d32d  00000000  00000000  000444c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00084741  00000000  00000000  000517f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001e78  00000000  00000000  000d5f34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000d7dac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000010 	.word	0x20000010
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08003710 	.word	0x08003710

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000014 	.word	0x20000014
 80000fc:	08003710 	.word	0x08003710

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <HAL_UARTEx_RxEventCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
 80003f4:	000a      	movs	r2, r1
 80003f6:	1cbb      	adds	r3, r7, #2
 80003f8:	801a      	strh	r2, [r3, #0]
    if (huart->Instance == USART1) {
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	4a0c      	ldr	r2, [pc, #48]	; (8000430 <HAL_UARTEx_RxEventCallback+0x44>)
 8000400:	4293      	cmp	r3, r2
 8000402:	d110      	bne.n	8000426 <HAL_UARTEx_RxEventCallback+0x3a>
        received_data_length = BUFFER_SIZE - hdma_usart1_rx.Instance->CNDTR;
 8000404:	4b0b      	ldr	r3, [pc, #44]	; (8000434 <HAL_UARTEx_RxEventCallback+0x48>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	685b      	ldr	r3, [r3, #4]
 800040a:	b29b      	uxth	r3, r3
 800040c:	2280      	movs	r2, #128	; 0x80
 800040e:	0052      	lsls	r2, r2, #1
 8000410:	1ad3      	subs	r3, r2, r3
 8000412:	b29a      	uxth	r2, r3
 8000414:	4b08      	ldr	r3, [pc, #32]	; (8000438 <HAL_UARTEx_RxEventCallback+0x4c>)
 8000416:	801a      	strh	r2, [r3, #0]


        HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t*)rx_buffer, BUFFER_SIZE);
 8000418:	2380      	movs	r3, #128	; 0x80
 800041a:	005a      	lsls	r2, r3, #1
 800041c:	4907      	ldr	r1, [pc, #28]	; (800043c <HAL_UARTEx_RxEventCallback+0x50>)
 800041e:	4b08      	ldr	r3, [pc, #32]	; (8000440 <HAL_UARTEx_RxEventCallback+0x54>)
 8000420:	0018      	movs	r0, r3
 8000422:	f003 f883 	bl	800352c <HAL_UARTEx_ReceiveToIdle_DMA>
    }

}
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	46bd      	mov	sp, r7
 800042a:	b002      	add	sp, #8
 800042c:	bd80      	pop	{r7, pc}
 800042e:	46c0      	nop			; (mov r8, r8)
 8000430:	40013800 	.word	0x40013800
 8000434:	200000e4 	.word	0x200000e4
 8000438:	20000340 	.word	0x20000340
 800043c:	20000140 	.word	0x20000140
 8000440:	20000050 	.word	0x20000050

08000444 <sendData>:



void sendData(uint8_t *data) {
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, data, 8, 1000);
 800044c:	23fa      	movs	r3, #250	; 0xfa
 800044e:	009b      	lsls	r3, r3, #2
 8000450:	6879      	ldr	r1, [r7, #4]
 8000452:	4804      	ldr	r0, [pc, #16]	; (8000464 <sendData+0x20>)
 8000454:	2208      	movs	r2, #8
 8000456:	f002 f943 	bl	80026e0 <HAL_UART_Transmit>
}
 800045a:	46c0      	nop			; (mov r8, r8)
 800045c:	46bd      	mov	sp, r7
 800045e:	b002      	add	sp, #8
 8000460:	bd80      	pop	{r7, pc}
 8000462:	46c0      	nop			; (mov r8, r8)
 8000464:	20000050 	.word	0x20000050

08000468 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800046e:	f000 fc95 	bl	8000d9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000472:	f000 fa17 	bl	80008a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000476:	f000 faf9 	bl	8000a6c <MX_GPIO_Init>
  MX_DMA_Init();
 800047a:	f000 fad9 	bl	8000a30 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800047e:	f000 fa89 	bl	8000994 <MX_USART1_UART_Init>
  MX_CRC_Init();
 8000482:	f000 fa63 	bl	800094c <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
    HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t*) rx_buffer, BUFFER_SIZE);
 8000486:	2380      	movs	r3, #128	; 0x80
 8000488:	005a      	lsls	r2, r3, #1
 800048a:	49cb      	ldr	r1, [pc, #812]	; (80007b8 <main+0x350>)
 800048c:	4bcb      	ldr	r3, [pc, #812]	; (80007bc <main+0x354>)
 800048e:	0018      	movs	r0, r3
 8000490:	f003 f84c 	bl	800352c <HAL_UARTEx_ReceiveToIdle_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1) {
    	switch (SM_state) {
 8000494:	4bca      	ldr	r3, [pc, #808]	; (80007c0 <main+0x358>)
 8000496:	781b      	ldrb	r3, [r3, #0]
 8000498:	2b0e      	cmp	r3, #14
 800049a:	d900      	bls.n	800049e <main+0x36>
 800049c:	e1ee      	b.n	800087c <main+0x414>
 800049e:	009a      	lsls	r2, r3, #2
 80004a0:	4bc8      	ldr	r3, [pc, #800]	; (80007c4 <main+0x35c>)
 80004a2:	18d3      	adds	r3, r2, r3
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	469f      	mov	pc, r3

            case SM_Idle:
            {


                tx_data[0] = SlaveAddress;
 80004a8:	4bc7      	ldr	r3, [pc, #796]	; (80007c8 <main+0x360>)
 80004aa:	2205      	movs	r2, #5
 80004ac:	701a      	strb	r2, [r3, #0]

            	SM_state				= 	SM_FunctionCode;
 80004ae:	4bc4      	ldr	r3, [pc, #784]	; (80007c0 <main+0x358>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	701a      	strb	r2, [r3, #0]
                break;
 80004b4:	e1e9      	b.n	800088a <main+0x422>
            }


            case SM_FunctionCode:
            {
            	if		(FunctionCode == ReadCoils) {
 80004b6:	4bc5      	ldr	r3, [pc, #788]	; (80007cc <main+0x364>)
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	2b01      	cmp	r3, #1
 80004bc:	d106      	bne.n	80004cc <main+0x64>
                    tx_data[1] 			= 	ReadCoils;
 80004be:	4bc2      	ldr	r3, [pc, #776]	; (80007c8 <main+0x360>)
 80004c0:	2201      	movs	r2, #1
 80004c2:	705a      	strb	r2, [r3, #1]
                    SM_state 			= 	SM_ReadBooleanAdressing;
 80004c4:	4bbe      	ldr	r3, [pc, #760]	; (80007c0 <main+0x358>)
 80004c6:	2202      	movs	r2, #2
 80004c8:	701a      	strb	r2, [r3, #0]
                }
                else {
                    exceptionCode 		= 	EC_IllegalFunction;
                    SM_state 			= 	SM_Exception;
                }
                break;
 80004ca:	e1de      	b.n	800088a <main+0x422>
            	else if (FunctionCode == ReadHoldingRegisters) {
 80004cc:	4bbf      	ldr	r3, [pc, #764]	; (80007cc <main+0x364>)
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	2b03      	cmp	r3, #3
 80004d2:	d106      	bne.n	80004e2 <main+0x7a>
                    tx_data[1] 			= 	ReadHoldingRegisters;
 80004d4:	4bbc      	ldr	r3, [pc, #752]	; (80007c8 <main+0x360>)
 80004d6:	2203      	movs	r2, #3
 80004d8:	705a      	strb	r2, [r3, #1]
                    SM_state 			= 	SM_ReadRegisterAdressing;
 80004da:	4bb9      	ldr	r3, [pc, #740]	; (80007c0 <main+0x358>)
 80004dc:	2204      	movs	r2, #4
 80004de:	701a      	strb	r2, [r3, #0]
                break;
 80004e0:	e1d3      	b.n	800088a <main+0x422>
            	else if (FunctionCode == WriteASingleCoil) {
 80004e2:	4bba      	ldr	r3, [pc, #744]	; (80007cc <main+0x364>)
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	2b05      	cmp	r3, #5
 80004e8:	d106      	bne.n	80004f8 <main+0x90>
                    tx_data[1] 			= 	WriteASingleCoil;
 80004ea:	4bb7      	ldr	r3, [pc, #732]	; (80007c8 <main+0x360>)
 80004ec:	2205      	movs	r2, #5
 80004ee:	705a      	strb	r2, [r3, #1]
                    SM_state 			= 	SM_WriteBooleanAdressing;
 80004f0:	4bb3      	ldr	r3, [pc, #716]	; (80007c0 <main+0x358>)
 80004f2:	2206      	movs	r2, #6
 80004f4:	701a      	strb	r2, [r3, #0]
                break;
 80004f6:	e1c8      	b.n	800088a <main+0x422>
                else if (FunctionCode == WriteSingleRegister) {
 80004f8:	4bb4      	ldr	r3, [pc, #720]	; (80007cc <main+0x364>)
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	2b06      	cmp	r3, #6
 80004fe:	d106      	bne.n	800050e <main+0xa6>
                    tx_data[1] 			= 	WriteSingleRegister;
 8000500:	4bb1      	ldr	r3, [pc, #708]	; (80007c8 <main+0x360>)
 8000502:	2206      	movs	r2, #6
 8000504:	705a      	strb	r2, [r3, #1]
                    SM_state 			= 	SM_WriteRegisterAdressing;
 8000506:	4bae      	ldr	r3, [pc, #696]	; (80007c0 <main+0x358>)
 8000508:	2208      	movs	r2, #8
 800050a:	701a      	strb	r2, [r3, #0]
                break;
 800050c:	e1bd      	b.n	800088a <main+0x422>
                else if (FunctionCode == WriteMultipleRegisters) {
 800050e:	4baf      	ldr	r3, [pc, #700]	; (80007cc <main+0x364>)
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	2b10      	cmp	r3, #16
 8000514:	d106      	bne.n	8000524 <main+0xbc>
                    tx_data[1] 			= 	WriteMultipleRegisters;
 8000516:	4bac      	ldr	r3, [pc, #688]	; (80007c8 <main+0x360>)
 8000518:	2210      	movs	r2, #16
 800051a:	705a      	strb	r2, [r3, #1]
                    SM_state 			= 	SM_ReadRegisterAdressing;
 800051c:	4ba8      	ldr	r3, [pc, #672]	; (80007c0 <main+0x358>)
 800051e:	2204      	movs	r2, #4
 8000520:	701a      	strb	r2, [r3, #0]
                break;
 8000522:	e1b2      	b.n	800088a <main+0x422>
                    exceptionCode 		= 	EC_IllegalFunction;
 8000524:	4baa      	ldr	r3, [pc, #680]	; (80007d0 <main+0x368>)
 8000526:	2201      	movs	r2, #1
 8000528:	701a      	strb	r2, [r3, #0]
                    SM_state 			= 	SM_Exception;
 800052a:	4ba5      	ldr	r3, [pc, #660]	; (80007c0 <main+0x358>)
 800052c:	220d      	movs	r2, #13
 800052e:	701a      	strb	r2, [r3, #0]
                break;
 8000530:	e1ab      	b.n	800088a <main+0x422>
            }

            case SM_ReadBooleanAdressing:
            {
        		tx_data[2] 				= 	(AddressOfFirstBoolean >> 8)&0xFF;
 8000532:	4ba8      	ldr	r3, [pc, #672]	; (80007d4 <main+0x36c>)
 8000534:	881b      	ldrh	r3, [r3, #0]
 8000536:	0a1b      	lsrs	r3, r3, #8
 8000538:	b29b      	uxth	r3, r3
 800053a:	b2da      	uxtb	r2, r3
 800053c:	4ba2      	ldr	r3, [pc, #648]	; (80007c8 <main+0x360>)
 800053e:	709a      	strb	r2, [r3, #2]
        		tx_data[3] 				= 	AddressOfFirstBoolean & 0xFF;
 8000540:	4ba4      	ldr	r3, [pc, #656]	; (80007d4 <main+0x36c>)
 8000542:	881b      	ldrh	r3, [r3, #0]
 8000544:	b2da      	uxtb	r2, r3
 8000546:	4ba0      	ldr	r3, [pc, #640]	; (80007c8 <main+0x360>)
 8000548:	70da      	strb	r2, [r3, #3]
        		SM_state 				= 	SM_BooleanLength;
 800054a:	4b9d      	ldr	r3, [pc, #628]	; (80007c0 <main+0x358>)
 800054c:	2203      	movs	r2, #3
 800054e:	701a      	strb	r2, [r3, #0]
        		SM_next_state 			= 	SM_CRC;
 8000550:	4ba1      	ldr	r3, [pc, #644]	; (80007d8 <main+0x370>)
 8000552:	220b      	movs	r2, #11
 8000554:	701a      	strb	r2, [r3, #0]
            }

        	case SM_BooleanLength:
        	{
        		if((AddressOfFirstBoolean + TotalNumberOfBooleans) < 65535)
 8000556:	4b9f      	ldr	r3, [pc, #636]	; (80007d4 <main+0x36c>)
 8000558:	881b      	ldrh	r3, [r3, #0]
 800055a:	001a      	movs	r2, r3
 800055c:	4b9f      	ldr	r3, [pc, #636]	; (80007dc <main+0x374>)
 800055e:	881b      	ldrh	r3, [r3, #0]
 8000560:	18d3      	adds	r3, r2, r3
 8000562:	4a9f      	ldr	r2, [pc, #636]	; (80007e0 <main+0x378>)
 8000564:	4293      	cmp	r3, r2
 8000566:	dc21      	bgt.n	80005ac <main+0x144>
        		{
        			tx_data[4] 			= 	(TotalNumberOfBooleans >> 8)&0xFF;
 8000568:	4b9c      	ldr	r3, [pc, #624]	; (80007dc <main+0x374>)
 800056a:	881b      	ldrh	r3, [r3, #0]
 800056c:	0a1b      	lsrs	r3, r3, #8
 800056e:	b29b      	uxth	r3, r3
 8000570:	b2da      	uxtb	r2, r3
 8000572:	4b95      	ldr	r3, [pc, #596]	; (80007c8 <main+0x360>)
 8000574:	711a      	strb	r2, [r3, #4]
            		tx_data[5] 			= 	TotalNumberOfBooleans & 0xFF;
 8000576:	4b99      	ldr	r3, [pc, #612]	; (80007dc <main+0x374>)
 8000578:	881b      	ldrh	r3, [r3, #0]
 800057a:	b2da      	uxtb	r2, r3
 800057c:	4b92      	ldr	r3, [pc, #584]	; (80007c8 <main+0x360>)
 800057e:	715a      	strb	r2, [r3, #5]
            		SM_state 			= 	SM_next_state;
 8000580:	4b95      	ldr	r3, [pc, #596]	; (80007d8 <main+0x370>)
 8000582:	781a      	ldrb	r2, [r3, #0]
 8000584:	4b8e      	ldr	r3, [pc, #568]	; (80007c0 <main+0x358>)
 8000586:	701a      	strb	r2, [r3, #0]

            		if((TotalNumberOfBooleans < 1) || (TotalNumberOfBooleans > 2000))
 8000588:	4b94      	ldr	r3, [pc, #592]	; (80007dc <main+0x374>)
 800058a:	881b      	ldrh	r3, [r3, #0]
 800058c:	2b00      	cmp	r3, #0
 800058e:	d006      	beq.n	800059e <main+0x136>
 8000590:	4b92      	ldr	r3, [pc, #584]	; (80007dc <main+0x374>)
 8000592:	881a      	ldrh	r2, [r3, #0]
 8000594:	23fa      	movs	r3, #250	; 0xfa
 8000596:	00db      	lsls	r3, r3, #3
 8000598:	429a      	cmp	r2, r3
 800059a:	d800      	bhi.n	800059e <main+0x136>
 800059c:	e172      	b.n	8000884 <main+0x41c>
            		{
            			exceptionCode 	= 	EC_IllegalDataValue;
 800059e:	4b8c      	ldr	r3, [pc, #560]	; (80007d0 <main+0x368>)
 80005a0:	2203      	movs	r2, #3
 80005a2:	701a      	strb	r2, [r3, #0]
            			SM_state 		= 	SM_Exception;
 80005a4:	4b86      	ldr	r3, [pc, #536]	; (80007c0 <main+0x358>)
 80005a6:	220d      	movs	r2, #13
 80005a8:	701a      	strb	r2, [r3, #0]
        		{
                    exceptionCode 		= 	EC_IllegalDataAddress;
                    SM_state 			= 	SM_Exception;
        		}

        		break;
 80005aa:	e16b      	b.n	8000884 <main+0x41c>
                    exceptionCode 		= 	EC_IllegalDataAddress;
 80005ac:	4b88      	ldr	r3, [pc, #544]	; (80007d0 <main+0x368>)
 80005ae:	2202      	movs	r2, #2
 80005b0:	701a      	strb	r2, [r3, #0]
                    SM_state 			= 	SM_Exception;
 80005b2:	4b83      	ldr	r3, [pc, #524]	; (80007c0 <main+0x358>)
 80005b4:	220d      	movs	r2, #13
 80005b6:	701a      	strb	r2, [r3, #0]
        		break;
 80005b8:	e164      	b.n	8000884 <main+0x41c>


        	case SM_ReadRegisterAdressing:
        	{

        		tx_data[2] 				= 	(InitialDataAddress >> 8)&0xFF;
 80005ba:	4b8a      	ldr	r3, [pc, #552]	; (80007e4 <main+0x37c>)
 80005bc:	881b      	ldrh	r3, [r3, #0]
 80005be:	0a1b      	lsrs	r3, r3, #8
 80005c0:	b29b      	uxth	r3, r3
 80005c2:	b2da      	uxtb	r2, r3
 80005c4:	4b80      	ldr	r3, [pc, #512]	; (80007c8 <main+0x360>)
 80005c6:	709a      	strb	r2, [r3, #2]
        		tx_data[3] 				= 	InitialDataAddress & 0xFF;
 80005c8:	4b86      	ldr	r3, [pc, #536]	; (80007e4 <main+0x37c>)
 80005ca:	881b      	ldrh	r3, [r3, #0]
 80005cc:	b2da      	uxtb	r2, r3
 80005ce:	4b7e      	ldr	r3, [pc, #504]	; (80007c8 <main+0x360>)
 80005d0:	70da      	strb	r2, [r3, #3]
        		SM_state 				= 	SM_RegisterLength;
 80005d2:	4b7b      	ldr	r3, [pc, #492]	; (80007c0 <main+0x358>)
 80005d4:	2205      	movs	r2, #5
 80005d6:	701a      	strb	r2, [r3, #0]
        		SM_next_state 			= 	SM_CRC;
 80005d8:	4b7f      	ldr	r3, [pc, #508]	; (80007d8 <main+0x370>)
 80005da:	220b      	movs	r2, #11
 80005dc:	701a      	strb	r2, [r3, #0]
        		break;
 80005de:	e154      	b.n	800088a <main+0x422>
        	}

        	case SM_RegisterLength:
        	{
        		if(FunctionCode == ReadHoldingRegisters)
 80005e0:	4b7a      	ldr	r3, [pc, #488]	; (80007cc <main+0x364>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	2b03      	cmp	r3, #3
 80005e6:	d135      	bne.n	8000654 <main+0x1ec>
        		{
            		NumberOfDataBytes 	= 	NumberOfData * 2;
 80005e8:	4b7f      	ldr	r3, [pc, #508]	; (80007e8 <main+0x380>)
 80005ea:	881b      	ldrh	r3, [r3, #0]
 80005ec:	18db      	adds	r3, r3, r3
 80005ee:	b29a      	uxth	r2, r3
 80005f0:	4b7e      	ldr	r3, [pc, #504]	; (80007ec <main+0x384>)
 80005f2:	801a      	strh	r2, [r3, #0]
            		if((InitialDataAddress + NumberOfDataBytes) < 65535)
 80005f4:	4b7b      	ldr	r3, [pc, #492]	; (80007e4 <main+0x37c>)
 80005f6:	881b      	ldrh	r3, [r3, #0]
 80005f8:	001a      	movs	r2, r3
 80005fa:	4b7c      	ldr	r3, [pc, #496]	; (80007ec <main+0x384>)
 80005fc:	881b      	ldrh	r3, [r3, #0]
 80005fe:	18d3      	adds	r3, r2, r3
 8000600:	4a77      	ldr	r2, [pc, #476]	; (80007e0 <main+0x378>)
 8000602:	4293      	cmp	r3, r2
 8000604:	dc1f      	bgt.n	8000646 <main+0x1de>
            		{
            			tx_data[4] 		= 	(NumberOfData >> 8)&0xFF;
 8000606:	4b78      	ldr	r3, [pc, #480]	; (80007e8 <main+0x380>)
 8000608:	881b      	ldrh	r3, [r3, #0]
 800060a:	0a1b      	lsrs	r3, r3, #8
 800060c:	b29b      	uxth	r3, r3
 800060e:	b2da      	uxtb	r2, r3
 8000610:	4b6d      	ldr	r3, [pc, #436]	; (80007c8 <main+0x360>)
 8000612:	711a      	strb	r2, [r3, #4]
                		tx_data[5] 		= 	NumberOfData & 0xFF;
 8000614:	4b74      	ldr	r3, [pc, #464]	; (80007e8 <main+0x380>)
 8000616:	881b      	ldrh	r3, [r3, #0]
 8000618:	b2da      	uxtb	r2, r3
 800061a:	4b6b      	ldr	r3, [pc, #428]	; (80007c8 <main+0x360>)
 800061c:	715a      	strb	r2, [r3, #5]
                		SM_state 		= 	SM_next_state;
 800061e:	4b6e      	ldr	r3, [pc, #440]	; (80007d8 <main+0x370>)
 8000620:	781a      	ldrb	r2, [r3, #0]
 8000622:	4b67      	ldr	r3, [pc, #412]	; (80007c0 <main+0x358>)
 8000624:	701a      	strb	r2, [r3, #0]

                		if((NumberOfData < 1) || (NumberOfData > 125))
 8000626:	4b70      	ldr	r3, [pc, #448]	; (80007e8 <main+0x380>)
 8000628:	881b      	ldrh	r3, [r3, #0]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d004      	beq.n	8000638 <main+0x1d0>
 800062e:	4b6e      	ldr	r3, [pc, #440]	; (80007e8 <main+0x380>)
 8000630:	881b      	ldrh	r3, [r3, #0]
 8000632:	2b7d      	cmp	r3, #125	; 0x7d
 8000634:	d800      	bhi.n	8000638 <main+0x1d0>
 8000636:	e127      	b.n	8000888 <main+0x420>
                		{
                			exceptionCode	= 	EC_IllegalDataValue;
 8000638:	4b65      	ldr	r3, [pc, #404]	; (80007d0 <main+0x368>)
 800063a:	2203      	movs	r2, #3
 800063c:	701a      	strb	r2, [r3, #0]
                			SM_state 		= 	SM_Exception;
 800063e:	4b60      	ldr	r3, [pc, #384]	; (80007c0 <main+0x358>)
 8000640:	220d      	movs	r2, #13
 8000642:	701a      	strb	r2, [r3, #0]
                        SM_state 		= 	SM_Exception;
            		}
        		}


        		break;
 8000644:	e120      	b.n	8000888 <main+0x420>
                        exceptionCode 	= 	EC_IllegalDataAddress;
 8000646:	4b62      	ldr	r3, [pc, #392]	; (80007d0 <main+0x368>)
 8000648:	2202      	movs	r2, #2
 800064a:	701a      	strb	r2, [r3, #0]
                        SM_state 		= 	SM_Exception;
 800064c:	4b5c      	ldr	r3, [pc, #368]	; (80007c0 <main+0x358>)
 800064e:	220d      	movs	r2, #13
 8000650:	701a      	strb	r2, [r3, #0]
        		break;
 8000652:	e119      	b.n	8000888 <main+0x420>
        		else if(FunctionCode == WriteMultipleRegisters)
 8000654:	4b5d      	ldr	r3, [pc, #372]	; (80007cc <main+0x364>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	2b10      	cmp	r3, #16
 800065a:	d000      	beq.n	800065e <main+0x1f6>
 800065c:	e114      	b.n	8000888 <main+0x420>
            		NumberOfDataBytes 	= 	NumberOfData * 2;
 800065e:	4b62      	ldr	r3, [pc, #392]	; (80007e8 <main+0x380>)
 8000660:	881b      	ldrh	r3, [r3, #0]
 8000662:	18db      	adds	r3, r3, r3
 8000664:	b29a      	uxth	r2, r3
 8000666:	4b61      	ldr	r3, [pc, #388]	; (80007ec <main+0x384>)
 8000668:	801a      	strh	r2, [r3, #0]
            		if((InitialDataAddress + NumberOfDataBytes) < 65535)
 800066a:	4b5e      	ldr	r3, [pc, #376]	; (80007e4 <main+0x37c>)
 800066c:	881b      	ldrh	r3, [r3, #0]
 800066e:	001a      	movs	r2, r3
 8000670:	4b5e      	ldr	r3, [pc, #376]	; (80007ec <main+0x384>)
 8000672:	881b      	ldrh	r3, [r3, #0]
 8000674:	18d3      	adds	r3, r2, r3
 8000676:	4a5a      	ldr	r2, [pc, #360]	; (80007e0 <main+0x378>)
 8000678:	4293      	cmp	r3, r2
 800067a:	dc1e      	bgt.n	80006ba <main+0x252>
            			tx_data[4] 		= 	(NumberOfData >> 8)&0xFF;
 800067c:	4b5a      	ldr	r3, [pc, #360]	; (80007e8 <main+0x380>)
 800067e:	881b      	ldrh	r3, [r3, #0]
 8000680:	0a1b      	lsrs	r3, r3, #8
 8000682:	b29b      	uxth	r3, r3
 8000684:	b2da      	uxtb	r2, r3
 8000686:	4b50      	ldr	r3, [pc, #320]	; (80007c8 <main+0x360>)
 8000688:	711a      	strb	r2, [r3, #4]
                		tx_data[5] 		= 	NumberOfData & 0xFF;
 800068a:	4b57      	ldr	r3, [pc, #348]	; (80007e8 <main+0x380>)
 800068c:	881b      	ldrh	r3, [r3, #0]
 800068e:	b2da      	uxtb	r2, r3
 8000690:	4b4d      	ldr	r3, [pc, #308]	; (80007c8 <main+0x360>)
 8000692:	715a      	strb	r2, [r3, #5]
                		SM_state 		= 	SM_MultipleRegisterValue;
 8000694:	4b4a      	ldr	r3, [pc, #296]	; (80007c0 <main+0x358>)
 8000696:	220a      	movs	r2, #10
 8000698:	701a      	strb	r2, [r3, #0]
                		if((NumberOfData < 1) || (NumberOfData > 123))
 800069a:	4b53      	ldr	r3, [pc, #332]	; (80007e8 <main+0x380>)
 800069c:	881b      	ldrh	r3, [r3, #0]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d004      	beq.n	80006ac <main+0x244>
 80006a2:	4b51      	ldr	r3, [pc, #324]	; (80007e8 <main+0x380>)
 80006a4:	881b      	ldrh	r3, [r3, #0]
 80006a6:	2b7b      	cmp	r3, #123	; 0x7b
 80006a8:	d800      	bhi.n	80006ac <main+0x244>
 80006aa:	e0ed      	b.n	8000888 <main+0x420>
                			exceptionCode 	= 	EC_IllegalDataValue;
 80006ac:	4b48      	ldr	r3, [pc, #288]	; (80007d0 <main+0x368>)
 80006ae:	2203      	movs	r2, #3
 80006b0:	701a      	strb	r2, [r3, #0]
                			SM_state 		= 	SM_Exception;
 80006b2:	4b43      	ldr	r3, [pc, #268]	; (80007c0 <main+0x358>)
 80006b4:	220d      	movs	r2, #13
 80006b6:	701a      	strb	r2, [r3, #0]
        		break;
 80006b8:	e0e6      	b.n	8000888 <main+0x420>
                        exceptionCode 	= 	EC_IllegalDataAddress;
 80006ba:	4b45      	ldr	r3, [pc, #276]	; (80007d0 <main+0x368>)
 80006bc:	2202      	movs	r2, #2
 80006be:	701a      	strb	r2, [r3, #0]
                        SM_state 		= 	SM_Exception;
 80006c0:	4b3f      	ldr	r3, [pc, #252]	; (80007c0 <main+0x358>)
 80006c2:	220d      	movs	r2, #13
 80006c4:	701a      	strb	r2, [r3, #0]
        		break;
 80006c6:	e0df      	b.n	8000888 <main+0x420>
        	}

        	case SM_WriteBooleanAdressing:
        	{
        		tx_data[2] 				= 	DataAddressBoolean & 0xFF;
 80006c8:	4b49      	ldr	r3, [pc, #292]	; (80007f0 <main+0x388>)
 80006ca:	881b      	ldrh	r3, [r3, #0]
 80006cc:	b2da      	uxtb	r2, r3
 80006ce:	4b3e      	ldr	r3, [pc, #248]	; (80007c8 <main+0x360>)
 80006d0:	709a      	strb	r2, [r3, #2]
        		tx_data[3] 				= 	(DataAddressBoolean >> 8)&0xFF;
 80006d2:	4b47      	ldr	r3, [pc, #284]	; (80007f0 <main+0x388>)
 80006d4:	881b      	ldrh	r3, [r3, #0]
 80006d6:	0a1b      	lsrs	r3, r3, #8
 80006d8:	b29b      	uxth	r3, r3
 80006da:	b2da      	uxtb	r2, r3
 80006dc:	4b3a      	ldr	r3, [pc, #232]	; (80007c8 <main+0x360>)
 80006de:	70da      	strb	r2, [r3, #3]
        		SM_state 				= 	SM_BooleanValue;
 80006e0:	4b37      	ldr	r3, [pc, #220]	; (80007c0 <main+0x358>)
 80006e2:	2207      	movs	r2, #7
 80006e4:	701a      	strb	r2, [r3, #0]
        		SM_next_state 			= 	SM_CRC;
 80006e6:	4b3c      	ldr	r3, [pc, #240]	; (80007d8 <main+0x370>)
 80006e8:	220b      	movs	r2, #11
 80006ea:	701a      	strb	r2, [r3, #0]
        		break;
 80006ec:	e0cd      	b.n	800088a <main+0x422>
        	}

        	case  SM_BooleanValue:
        	{
        		if(valuetoWriteBoolean == 0x00FF || valuetoWriteBoolean == 0x0000) {
 80006ee:	4b41      	ldr	r3, [pc, #260]	; (80007f4 <main+0x38c>)
 80006f0:	881b      	ldrh	r3, [r3, #0]
 80006f2:	2bff      	cmp	r3, #255	; 0xff
 80006f4:	d003      	beq.n	80006fe <main+0x296>
 80006f6:	4b3f      	ldr	r3, [pc, #252]	; (80007f4 <main+0x38c>)
 80006f8:	881b      	ldrh	r3, [r3, #0]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d110      	bne.n	8000720 <main+0x2b8>
            		tx_data[4] 			= 	valuetoWriteBoolean & 0xFF;
 80006fe:	4b3d      	ldr	r3, [pc, #244]	; (80007f4 <main+0x38c>)
 8000700:	881b      	ldrh	r3, [r3, #0]
 8000702:	b2da      	uxtb	r2, r3
 8000704:	4b30      	ldr	r3, [pc, #192]	; (80007c8 <main+0x360>)
 8000706:	711a      	strb	r2, [r3, #4]
            		tx_data[5] 			= 	(valuetoWriteBoolean >> 8)&0xFF;
 8000708:	4b3a      	ldr	r3, [pc, #232]	; (80007f4 <main+0x38c>)
 800070a:	881b      	ldrh	r3, [r3, #0]
 800070c:	0a1b      	lsrs	r3, r3, #8
 800070e:	b29b      	uxth	r3, r3
 8000710:	b2da      	uxtb	r2, r3
 8000712:	4b2d      	ldr	r3, [pc, #180]	; (80007c8 <main+0x360>)
 8000714:	715a      	strb	r2, [r3, #5]
            		SM_state 			= 	SM_next_state;
 8000716:	4b30      	ldr	r3, [pc, #192]	; (80007d8 <main+0x370>)
 8000718:	781a      	ldrb	r2, [r3, #0]
 800071a:	4b29      	ldr	r3, [pc, #164]	; (80007c0 <main+0x358>)
 800071c:	701a      	strb	r2, [r3, #0]
        		else {
        			exceptionCode 	= 	EC_IllegalDataValue;
        			SM_state 		= 	SM_Exception;
        		}

        		break;
 800071e:	e0b4      	b.n	800088a <main+0x422>
        			exceptionCode 	= 	EC_IllegalDataValue;
 8000720:	4b2b      	ldr	r3, [pc, #172]	; (80007d0 <main+0x368>)
 8000722:	2203      	movs	r2, #3
 8000724:	701a      	strb	r2, [r3, #0]
        			SM_state 		= 	SM_Exception;
 8000726:	4b26      	ldr	r3, [pc, #152]	; (80007c0 <main+0x358>)
 8000728:	220d      	movs	r2, #13
 800072a:	701a      	strb	r2, [r3, #0]
        		break;
 800072c:	e0ad      	b.n	800088a <main+0x422>
        	}

        	case SM_WriteRegisterAdressing:
        	{

        		tx_data[2] 				= 	DataAddressRegister & 0xFF;
 800072e:	4b32      	ldr	r3, [pc, #200]	; (80007f8 <main+0x390>)
 8000730:	881b      	ldrh	r3, [r3, #0]
 8000732:	b2da      	uxtb	r2, r3
 8000734:	4b24      	ldr	r3, [pc, #144]	; (80007c8 <main+0x360>)
 8000736:	709a      	strb	r2, [r3, #2]
        		tx_data[3] 				= 	(DataAddressRegister >> 8)&0xFF;
 8000738:	4b2f      	ldr	r3, [pc, #188]	; (80007f8 <main+0x390>)
 800073a:	881b      	ldrh	r3, [r3, #0]
 800073c:	0a1b      	lsrs	r3, r3, #8
 800073e:	b29b      	uxth	r3, r3
 8000740:	b2da      	uxtb	r2, r3
 8000742:	4b21      	ldr	r3, [pc, #132]	; (80007c8 <main+0x360>)
 8000744:	70da      	strb	r2, [r3, #3]
        		SM_state 				= 	SM_RegisterValue;
 8000746:	4b1e      	ldr	r3, [pc, #120]	; (80007c0 <main+0x358>)
 8000748:	2209      	movs	r2, #9
 800074a:	701a      	strb	r2, [r3, #0]
        		SM_next_state 			= 	SM_CRC;
 800074c:	4b22      	ldr	r3, [pc, #136]	; (80007d8 <main+0x370>)
 800074e:	220b      	movs	r2, #11
 8000750:	701a      	strb	r2, [r3, #0]
        		break;
 8000752:	e09a      	b.n	800088a <main+0x422>
        	}

        	case SM_RegisterValue:
        	{
        		tx_data[4]				= 	valuetoWrite & 0xFF;
 8000754:	4b29      	ldr	r3, [pc, #164]	; (80007fc <main+0x394>)
 8000756:	881b      	ldrh	r3, [r3, #0]
 8000758:	b2da      	uxtb	r2, r3
 800075a:	4b1b      	ldr	r3, [pc, #108]	; (80007c8 <main+0x360>)
 800075c:	711a      	strb	r2, [r3, #4]
        		tx_data[5] 				= 	(valuetoWrite >> 8)&0xFF;
 800075e:	4b27      	ldr	r3, [pc, #156]	; (80007fc <main+0x394>)
 8000760:	881b      	ldrh	r3, [r3, #0]
 8000762:	0a1b      	lsrs	r3, r3, #8
 8000764:	b29b      	uxth	r3, r3
 8000766:	b2da      	uxtb	r2, r3
 8000768:	4b17      	ldr	r3, [pc, #92]	; (80007c8 <main+0x360>)
 800076a:	715a      	strb	r2, [r3, #5]
        		SM_state 				= 	SM_next_state;
 800076c:	4b1a      	ldr	r3, [pc, #104]	; (80007d8 <main+0x370>)
 800076e:	781a      	ldrb	r2, [r3, #0]
 8000770:	4b13      	ldr	r3, [pc, #76]	; (80007c0 <main+0x358>)
 8000772:	701a      	strb	r2, [r3, #0]
        		break;
 8000774:	e089      	b.n	800088a <main+0x422>
        	}

        	case SM_MultipleRegisterValue:
        	{

        		for(int i = 0; i < NumberOfData; i++)
 8000776:	2300      	movs	r3, #0
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	e012      	b.n	80007a2 <main+0x33a>
        		{
        			tx_data[6 + (i * 2)] = i;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	3303      	adds	r3, #3
 8000780:	005b      	lsls	r3, r3, #1
 8000782:	687a      	ldr	r2, [r7, #4]
 8000784:	b2d1      	uxtb	r1, r2
 8000786:	4a10      	ldr	r2, [pc, #64]	; (80007c8 <main+0x360>)
 8000788:	54d1      	strb	r1, [r2, r3]
        			tx_data[7 + (i * 2)] = i + 1;
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	b2da      	uxtb	r2, r3
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	005b      	lsls	r3, r3, #1
 8000792:	3307      	adds	r3, #7
 8000794:	3201      	adds	r2, #1
 8000796:	b2d1      	uxtb	r1, r2
 8000798:	4a0b      	ldr	r2, [pc, #44]	; (80007c8 <main+0x360>)
 800079a:	54d1      	strb	r1, [r2, r3]
        		for(int i = 0; i < NumberOfData; i++)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	3301      	adds	r3, #1
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	4b11      	ldr	r3, [pc, #68]	; (80007e8 <main+0x380>)
 80007a4:	881b      	ldrh	r3, [r3, #0]
 80007a6:	001a      	movs	r2, r3
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	4293      	cmp	r3, r2
 80007ac:	dbe6      	blt.n	800077c <main+0x314>
        		}
        		SM_state 				=	SM_Ready;
 80007ae:	4b04      	ldr	r3, [pc, #16]	; (80007c0 <main+0x358>)
 80007b0:	220c      	movs	r2, #12
 80007b2:	701a      	strb	r2, [r3, #0]
        		break;
 80007b4:	e069      	b.n	800088a <main+0x422>
 80007b6:	46c0      	nop			; (mov r8, r8)
 80007b8:	20000140 	.word	0x20000140
 80007bc:	20000050 	.word	0x20000050
 80007c0:	20000342 	.word	0x20000342
 80007c4:	08003728 	.word	0x08003728
 80007c8:	20000240 	.word	0x20000240
 80007cc:	20000345 	.word	0x20000345
 80007d0:	20000344 	.word	0x20000344
 80007d4:	20000346 	.word	0x20000346
 80007d8:	20000343 	.word	0x20000343
 80007dc:	20000348 	.word	0x20000348
 80007e0:	0000fffe 	.word	0x0000fffe
 80007e4:	2000034e 	.word	0x2000034e
 80007e8:	20000350 	.word	0x20000350
 80007ec:	20000352 	.word	0x20000352
 80007f0:	2000034a 	.word	0x2000034a
 80007f4:	2000034c 	.word	0x2000034c
 80007f8:	20000354 	.word	0x20000354
 80007fc:	20000356 	.word	0x20000356



            case SM_Ready:
            {
            	HAL_Delay(4);
 8000800:	2004      	movs	r0, #4
 8000802:	f000 fb51 	bl	8000ea8 <HAL_Delay>
                sendData(tx_data);
 8000806:	4b21      	ldr	r3, [pc, #132]	; (800088c <main+0x424>)
 8000808:	0018      	movs	r0, r3
 800080a:	f7ff fe1b 	bl	8000444 <sendData>
                SM_state 				= 	SM_next_state;
 800080e:	4b20      	ldr	r3, [pc, #128]	; (8000890 <main+0x428>)
 8000810:	781a      	ldrb	r2, [r3, #0]
 8000812:	4b20      	ldr	r3, [pc, #128]	; (8000894 <main+0x42c>)
 8000814:	701a      	strb	r2, [r3, #0]
                break;
 8000816:	e038      	b.n	800088a <main+0x422>
            }

            case SM_Exception:
            {
            	HAL_Delay(4);
 8000818:	2004      	movs	r0, #4
 800081a:	f000 fb45 	bl	8000ea8 <HAL_Delay>
            	tx_data[0]				=   SlaveAddress;
 800081e:	4b1b      	ldr	r3, [pc, #108]	; (800088c <main+0x424>)
 8000820:	2205      	movs	r2, #5
 8000822:	701a      	strb	r2, [r3, #0]
            	tx_data[1]				=	FunctionCode;
 8000824:	4b1c      	ldr	r3, [pc, #112]	; (8000898 <main+0x430>)
 8000826:	781a      	ldrb	r2, [r3, #0]
 8000828:	4b18      	ldr	r3, [pc, #96]	; (800088c <main+0x424>)
 800082a:	705a      	strb	r2, [r3, #1]
            	tx_data[2]				=	exceptionCode;
 800082c:	4b1b      	ldr	r3, [pc, #108]	; (800089c <main+0x434>)
 800082e:	781a      	ldrb	r2, [r3, #0]
 8000830:	4b16      	ldr	r3, [pc, #88]	; (800088c <main+0x424>)
 8000832:	709a      	strb	r2, [r3, #2]
            	crc						=	crc16(tx_data, 3);
 8000834:	4b15      	ldr	r3, [pc, #84]	; (800088c <main+0x424>)
 8000836:	2103      	movs	r1, #3
 8000838:	0018      	movs	r0, r3
 800083a:	f000 f93f 	bl	8000abc <crc16>
 800083e:	0003      	movs	r3, r0
 8000840:	001a      	movs	r2, r3
 8000842:	4b17      	ldr	r3, [pc, #92]	; (80008a0 <main+0x438>)
 8000844:	801a      	strh	r2, [r3, #0]
                tx_data[3] 				= 	crc & 0xFF;
 8000846:	4b16      	ldr	r3, [pc, #88]	; (80008a0 <main+0x438>)
 8000848:	881b      	ldrh	r3, [r3, #0]
 800084a:	b2da      	uxtb	r2, r3
 800084c:	4b0f      	ldr	r3, [pc, #60]	; (800088c <main+0x424>)
 800084e:	70da      	strb	r2, [r3, #3]
                tx_data[4] 				= 	(crc >> 8)&0xFF;
 8000850:	4b13      	ldr	r3, [pc, #76]	; (80008a0 <main+0x438>)
 8000852:	881b      	ldrh	r3, [r3, #0]
 8000854:	0a1b      	lsrs	r3, r3, #8
 8000856:	b29b      	uxth	r3, r3
 8000858:	b2da      	uxtb	r2, r3
 800085a:	4b0c      	ldr	r3, [pc, #48]	; (800088c <main+0x424>)
 800085c:	711a      	strb	r2, [r3, #4]
            	sendData(tx_data);
 800085e:	4b0b      	ldr	r3, [pc, #44]	; (800088c <main+0x424>)
 8000860:	0018      	movs	r0, r3
 8000862:	f7ff fdef 	bl	8000444 <sendData>
            	exceptionCode 			= 	EC_NotException;
 8000866:	4b0d      	ldr	r3, [pc, #52]	; (800089c <main+0x434>)
 8000868:	2200      	movs	r2, #0
 800086a:	701a      	strb	r2, [r3, #0]
            	SM_state 				= 	SM_Idle;
 800086c:	4b09      	ldr	r3, [pc, #36]	; (8000894 <main+0x42c>)
 800086e:	2200      	movs	r2, #0
 8000870:	701a      	strb	r2, [r3, #0]
            	break;
 8000872:	e00a      	b.n	800088a <main+0x422>
            }

            case SM_Error:
            {
            	SM_state 				= 	SM_Idle;
 8000874:	4b07      	ldr	r3, [pc, #28]	; (8000894 <main+0x42c>)
 8000876:	2200      	movs	r2, #0
 8000878:	701a      	strb	r2, [r3, #0]
                break;
 800087a:	e006      	b.n	800088a <main+0x422>
            }
            default:
            {
                SM_state 				= 	SM_Error;
 800087c:	4b05      	ldr	r3, [pc, #20]	; (8000894 <main+0x42c>)
 800087e:	220e      	movs	r2, #14
 8000880:	701a      	strb	r2, [r3, #0]
                break;
 8000882:	e002      	b.n	800088a <main+0x422>
        		break;
 8000884:	46c0      	nop			; (mov r8, r8)
 8000886:	e605      	b.n	8000494 <main+0x2c>
        		break;
 8000888:	46c0      	nop			; (mov r8, r8)
    	switch (SM_state) {
 800088a:	e603      	b.n	8000494 <main+0x2c>
 800088c:	20000240 	.word	0x20000240
 8000890:	20000343 	.word	0x20000343
 8000894:	20000342 	.word	0x20000342
 8000898:	20000345 	.word	0x20000345
 800089c:	20000344 	.word	0x20000344
 80008a0:	20000000 	.word	0x20000000

080008a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a4:	b590      	push	{r4, r7, lr}
 80008a6:	b093      	sub	sp, #76	; 0x4c
 80008a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008aa:	2414      	movs	r4, #20
 80008ac:	193b      	adds	r3, r7, r4
 80008ae:	0018      	movs	r0, r3
 80008b0:	2334      	movs	r3, #52	; 0x34
 80008b2:	001a      	movs	r2, r3
 80008b4:	2100      	movs	r1, #0
 80008b6:	f002 feff 	bl	80036b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008ba:	1d3b      	adds	r3, r7, #4
 80008bc:	0018      	movs	r0, r3
 80008be:	2310      	movs	r3, #16
 80008c0:	001a      	movs	r2, r3
 80008c2:	2100      	movs	r1, #0
 80008c4:	f002 fef8 	bl	80036b8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008c8:	2380      	movs	r3, #128	; 0x80
 80008ca:	009b      	lsls	r3, r3, #2
 80008cc:	0018      	movs	r0, r3
 80008ce:	f001 f877 	bl	80019c0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008d2:	193b      	adds	r3, r7, r4
 80008d4:	2201      	movs	r2, #1
 80008d6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008d8:	193b      	adds	r3, r7, r4
 80008da:	2280      	movs	r2, #128	; 0x80
 80008dc:	0252      	lsls	r2, r2, #9
 80008de:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008e0:	0021      	movs	r1, r4
 80008e2:	187b      	adds	r3, r7, r1
 80008e4:	2202      	movs	r2, #2
 80008e6:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008e8:	187b      	adds	r3, r7, r1
 80008ea:	2203      	movs	r2, #3
 80008ec:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80008ee:	187b      	adds	r3, r7, r1
 80008f0:	2200      	movs	r2, #0
 80008f2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 16;
 80008f4:	187b      	adds	r3, r7, r1
 80008f6:	2210      	movs	r2, #16
 80008f8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008fa:	187b      	adds	r3, r7, r1
 80008fc:	2280      	movs	r2, #128	; 0x80
 80008fe:	0292      	lsls	r2, r2, #10
 8000900:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000902:	187b      	adds	r3, r7, r1
 8000904:	2280      	movs	r2, #128	; 0x80
 8000906:	0592      	lsls	r2, r2, #22
 8000908:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800090a:	187b      	adds	r3, r7, r1
 800090c:	0018      	movs	r0, r3
 800090e:	f001 f8a3 	bl	8001a58 <HAL_RCC_OscConfig>
 8000912:	1e03      	subs	r3, r0, #0
 8000914:	d001      	beq.n	800091a <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000916:	f000 f8cb 	bl	8000ab0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	2207      	movs	r2, #7
 800091e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000920:	1d3b      	adds	r3, r7, #4
 8000922:	2202      	movs	r2, #2
 8000924:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000926:	1d3b      	adds	r3, r7, #4
 8000928:	2200      	movs	r2, #0
 800092a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800092c:	1d3b      	adds	r3, r7, #4
 800092e:	2200      	movs	r2, #0
 8000930:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000932:	1d3b      	adds	r3, r7, #4
 8000934:	2102      	movs	r1, #2
 8000936:	0018      	movs	r0, r3
 8000938:	f001 fb9e 	bl	8002078 <HAL_RCC_ClockConfig>
 800093c:	1e03      	subs	r3, r0, #0
 800093e:	d001      	beq.n	8000944 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000940:	f000 f8b6 	bl	8000ab0 <Error_Handler>
  }
}
 8000944:	46c0      	nop			; (mov r8, r8)
 8000946:	46bd      	mov	sp, r7
 8000948:	b013      	add	sp, #76	; 0x4c
 800094a:	bd90      	pop	{r4, r7, pc}

0800094c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000950:	4b0e      	ldr	r3, [pc, #56]	; (800098c <MX_CRC_Init+0x40>)
 8000952:	4a0f      	ldr	r2, [pc, #60]	; (8000990 <MX_CRC_Init+0x44>)
 8000954:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000956:	4b0d      	ldr	r3, [pc, #52]	; (800098c <MX_CRC_Init+0x40>)
 8000958:	2200      	movs	r2, #0
 800095a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800095c:	4b0b      	ldr	r3, [pc, #44]	; (800098c <MX_CRC_Init+0x40>)
 800095e:	2200      	movs	r2, #0
 8000960:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000962:	4b0a      	ldr	r3, [pc, #40]	; (800098c <MX_CRC_Init+0x40>)
 8000964:	2200      	movs	r2, #0
 8000966:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000968:	4b08      	ldr	r3, [pc, #32]	; (800098c <MX_CRC_Init+0x40>)
 800096a:	2200      	movs	r2, #0
 800096c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800096e:	4b07      	ldr	r3, [pc, #28]	; (800098c <MX_CRC_Init+0x40>)
 8000970:	2201      	movs	r2, #1
 8000972:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000974:	4b05      	ldr	r3, [pc, #20]	; (800098c <MX_CRC_Init+0x40>)
 8000976:	0018      	movs	r0, r3
 8000978:	f000 fb98 	bl	80010ac <HAL_CRC_Init>
 800097c:	1e03      	subs	r3, r0, #0
 800097e:	d001      	beq.n	8000984 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000980:	f000 f896 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000984:	46c0      	nop			; (mov r8, r8)
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	46c0      	nop			; (mov r8, r8)
 800098c:	2000002c 	.word	0x2000002c
 8000990:	40023000 	.word	0x40023000

08000994 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000998:	4b23      	ldr	r3, [pc, #140]	; (8000a28 <MX_USART1_UART_Init+0x94>)
 800099a:	4a24      	ldr	r2, [pc, #144]	; (8000a2c <MX_USART1_UART_Init+0x98>)
 800099c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800099e:	4b22      	ldr	r3, [pc, #136]	; (8000a28 <MX_USART1_UART_Init+0x94>)
 80009a0:	2296      	movs	r2, #150	; 0x96
 80009a2:	0192      	lsls	r2, r2, #6
 80009a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009a6:	4b20      	ldr	r3, [pc, #128]	; (8000a28 <MX_USART1_UART_Init+0x94>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009ac:	4b1e      	ldr	r3, [pc, #120]	; (8000a28 <MX_USART1_UART_Init+0x94>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009b2:	4b1d      	ldr	r3, [pc, #116]	; (8000a28 <MX_USART1_UART_Init+0x94>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009b8:	4b1b      	ldr	r3, [pc, #108]	; (8000a28 <MX_USART1_UART_Init+0x94>)
 80009ba:	220c      	movs	r2, #12
 80009bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009be:	4b1a      	ldr	r3, [pc, #104]	; (8000a28 <MX_USART1_UART_Init+0x94>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c4:	4b18      	ldr	r3, [pc, #96]	; (8000a28 <MX_USART1_UART_Init+0x94>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ca:	4b17      	ldr	r3, [pc, #92]	; (8000a28 <MX_USART1_UART_Init+0x94>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009d0:	4b15      	ldr	r3, [pc, #84]	; (8000a28 <MX_USART1_UART_Init+0x94>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009d6:	4b14      	ldr	r3, [pc, #80]	; (8000a28 <MX_USART1_UART_Init+0x94>)
 80009d8:	2200      	movs	r2, #0
 80009da:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009dc:	4b12      	ldr	r3, [pc, #72]	; (8000a28 <MX_USART1_UART_Init+0x94>)
 80009de:	0018      	movs	r0, r3
 80009e0:	f001 fe28 	bl	8002634 <HAL_UART_Init>
 80009e4:	1e03      	subs	r3, r0, #0
 80009e6:	d001      	beq.n	80009ec <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80009e8:	f000 f862 	bl	8000ab0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ec:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <MX_USART1_UART_Init+0x94>)
 80009ee:	2100      	movs	r1, #0
 80009f0:	0018      	movs	r0, r3
 80009f2:	f002 fd19 	bl	8003428 <HAL_UARTEx_SetTxFifoThreshold>
 80009f6:	1e03      	subs	r3, r0, #0
 80009f8:	d001      	beq.n	80009fe <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80009fa:	f000 f859 	bl	8000ab0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009fe:	4b0a      	ldr	r3, [pc, #40]	; (8000a28 <MX_USART1_UART_Init+0x94>)
 8000a00:	2100      	movs	r1, #0
 8000a02:	0018      	movs	r0, r3
 8000a04:	f002 fd50 	bl	80034a8 <HAL_UARTEx_SetRxFifoThreshold>
 8000a08:	1e03      	subs	r3, r0, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000a0c:	f000 f850 	bl	8000ab0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000a10:	4b05      	ldr	r3, [pc, #20]	; (8000a28 <MX_USART1_UART_Init+0x94>)
 8000a12:	0018      	movs	r0, r3
 8000a14:	f002 fcce 	bl	80033b4 <HAL_UARTEx_DisableFifoMode>
 8000a18:	1e03      	subs	r3, r0, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000a1c:	f000 f848 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a20:	46c0      	nop			; (mov r8, r8)
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	46c0      	nop			; (mov r8, r8)
 8000a28:	20000050 	.word	0x20000050
 8000a2c:	40013800 	.word	0x40013800

08000a30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a36:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <MX_DMA_Init+0x38>)
 8000a38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <MX_DMA_Init+0x38>)
 8000a3c:	2101      	movs	r1, #1
 8000a3e:	430a      	orrs	r2, r1
 8000a40:	639a      	str	r2, [r3, #56]	; 0x38
 8000a42:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <MX_DMA_Init+0x38>)
 8000a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a46:	2201      	movs	r2, #1
 8000a48:	4013      	ands	r3, r2
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2100      	movs	r1, #0
 8000a52:	2009      	movs	r0, #9
 8000a54:	f000 faf8 	bl	8001048 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a58:	2009      	movs	r0, #9
 8000a5a:	f000 fb0a 	bl	8001072 <HAL_NVIC_EnableIRQ>

}
 8000a5e:	46c0      	nop			; (mov r8, r8)
 8000a60:	46bd      	mov	sp, r7
 8000a62:	b002      	add	sp, #8
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	46c0      	nop			; (mov r8, r8)
 8000a68:	40021000 	.word	0x40021000

08000a6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a72:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <MX_GPIO_Init+0x40>)
 8000a74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a76:	4b0d      	ldr	r3, [pc, #52]	; (8000aac <MX_GPIO_Init+0x40>)
 8000a78:	2120      	movs	r1, #32
 8000a7a:	430a      	orrs	r2, r1
 8000a7c:	635a      	str	r2, [r3, #52]	; 0x34
 8000a7e:	4b0b      	ldr	r3, [pc, #44]	; (8000aac <MX_GPIO_Init+0x40>)
 8000a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a82:	2220      	movs	r2, #32
 8000a84:	4013      	ands	r3, r2
 8000a86:	607b      	str	r3, [r7, #4]
 8000a88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8a:	4b08      	ldr	r3, [pc, #32]	; (8000aac <MX_GPIO_Init+0x40>)
 8000a8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a8e:	4b07      	ldr	r3, [pc, #28]	; (8000aac <MX_GPIO_Init+0x40>)
 8000a90:	2101      	movs	r1, #1
 8000a92:	430a      	orrs	r2, r1
 8000a94:	635a      	str	r2, [r3, #52]	; 0x34
 8000a96:	4b05      	ldr	r3, [pc, #20]	; (8000aac <MX_GPIO_Init+0x40>)
 8000a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	603b      	str	r3, [r7, #0]
 8000aa0:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aa2:	46c0      	nop			; (mov r8, r8)
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	b002      	add	sp, #8
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	46c0      	nop			; (mov r8, r8)
 8000aac:	40021000 	.word	0x40021000

08000ab0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab4:	b672      	cpsid	i
}
 8000ab6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 8000ab8:	e7fe      	b.n	8000ab8 <Error_Handler+0x8>
	...

08000abc <crc16>:
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
    0x43, 0x83, 0x41, 0x81, 0x80, 0x40
};

uint16_t crc16(uint8_t *buffer, uint16_t buffer_length)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	000a      	movs	r2, r1
 8000ac6:	1cbb      	adds	r3, r7, #2
 8000ac8:	801a      	strh	r2, [r3, #0]
    uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
 8000aca:	230f      	movs	r3, #15
 8000acc:	18fb      	adds	r3, r7, r3
 8000ace:	22ff      	movs	r2, #255	; 0xff
 8000ad0:	701a      	strb	r2, [r3, #0]
    uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
 8000ad2:	230e      	movs	r3, #14
 8000ad4:	18fb      	adds	r3, r7, r3
 8000ad6:	22ff      	movs	r2, #255	; 0xff
 8000ad8:	701a      	strb	r2, [r3, #0]
    unsigned int i; /* will index into CRC lookup */

    /* pass through message buffer */
    while (buffer_length--) {
 8000ada:	e019      	b.n	8000b10 <crc16+0x54>
        i = crc_lo ^ *buffer++; /* calculate the CRC  */
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	1c5a      	adds	r2, r3, #1
 8000ae0:	607a      	str	r2, [r7, #4]
 8000ae2:	781a      	ldrb	r2, [r3, #0]
 8000ae4:	200e      	movs	r0, #14
 8000ae6:	183b      	adds	r3, r7, r0
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	4053      	eors	r3, r2
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	60bb      	str	r3, [r7, #8]
        crc_lo = crc_hi ^ table_crc_hi[i];
 8000af0:	4a13      	ldr	r2, [pc, #76]	; (8000b40 <crc16+0x84>)
 8000af2:	68bb      	ldr	r3, [r7, #8]
 8000af4:	18d3      	adds	r3, r2, r3
 8000af6:	7819      	ldrb	r1, [r3, #0]
 8000af8:	183b      	adds	r3, r7, r0
 8000afa:	200f      	movs	r0, #15
 8000afc:	183a      	adds	r2, r7, r0
 8000afe:	7812      	ldrb	r2, [r2, #0]
 8000b00:	404a      	eors	r2, r1
 8000b02:	701a      	strb	r2, [r3, #0]
        crc_hi = table_crc_lo[i];
 8000b04:	183b      	adds	r3, r7, r0
 8000b06:	490f      	ldr	r1, [pc, #60]	; (8000b44 <crc16+0x88>)
 8000b08:	68ba      	ldr	r2, [r7, #8]
 8000b0a:	188a      	adds	r2, r1, r2
 8000b0c:	7812      	ldrb	r2, [r2, #0]
 8000b0e:	701a      	strb	r2, [r3, #0]
    while (buffer_length--) {
 8000b10:	1cbb      	adds	r3, r7, #2
 8000b12:	881b      	ldrh	r3, [r3, #0]
 8000b14:	1cba      	adds	r2, r7, #2
 8000b16:	1e59      	subs	r1, r3, #1
 8000b18:	8011      	strh	r1, [r2, #0]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d1de      	bne.n	8000adc <crc16+0x20>
    }

    return (crc_hi << 8 | crc_lo);
 8000b1e:	230f      	movs	r3, #15
 8000b20:	18fb      	adds	r3, r7, r3
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	021b      	lsls	r3, r3, #8
 8000b26:	b21a      	sxth	r2, r3
 8000b28:	230e      	movs	r3, #14
 8000b2a:	18fb      	adds	r3, r7, r3
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	b21b      	sxth	r3, r3
 8000b30:	4313      	orrs	r3, r2
 8000b32:	b21b      	sxth	r3, r3
 8000b34:	b29b      	uxth	r3, r3
}
 8000b36:	0018      	movs	r0, r3
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	b004      	add	sp, #16
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	08003764 	.word	0x08003764
 8000b44:	08003864 	.word	0x08003864

08000b48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b4e:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <HAL_MspInit+0x44>)
 8000b50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b52:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <HAL_MspInit+0x44>)
 8000b54:	2101      	movs	r1, #1
 8000b56:	430a      	orrs	r2, r1
 8000b58:	641a      	str	r2, [r3, #64]	; 0x40
 8000b5a:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <HAL_MspInit+0x44>)
 8000b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5e:	2201      	movs	r2, #1
 8000b60:	4013      	ands	r3, r2
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b66:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <HAL_MspInit+0x44>)
 8000b68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b6a:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <HAL_MspInit+0x44>)
 8000b6c:	2180      	movs	r1, #128	; 0x80
 8000b6e:	0549      	lsls	r1, r1, #21
 8000b70:	430a      	orrs	r2, r1
 8000b72:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b74:	4b05      	ldr	r3, [pc, #20]	; (8000b8c <HAL_MspInit+0x44>)
 8000b76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b78:	2380      	movs	r3, #128	; 0x80
 8000b7a:	055b      	lsls	r3, r3, #21
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b82:	46c0      	nop			; (mov r8, r8)
 8000b84:	46bd      	mov	sp, r7
 8000b86:	b002      	add	sp, #8
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	46c0      	nop			; (mov r8, r8)
 8000b8c:	40021000 	.word	0x40021000

08000b90 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a0a      	ldr	r2, [pc, #40]	; (8000bc8 <HAL_CRC_MspInit+0x38>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d10d      	bne.n	8000bbe <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000ba2:	4b0a      	ldr	r3, [pc, #40]	; (8000bcc <HAL_CRC_MspInit+0x3c>)
 8000ba4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000ba6:	4b09      	ldr	r3, [pc, #36]	; (8000bcc <HAL_CRC_MspInit+0x3c>)
 8000ba8:	2180      	movs	r1, #128	; 0x80
 8000baa:	0149      	lsls	r1, r1, #5
 8000bac:	430a      	orrs	r2, r1
 8000bae:	639a      	str	r2, [r3, #56]	; 0x38
 8000bb0:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <HAL_CRC_MspInit+0x3c>)
 8000bb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000bb4:	2380      	movs	r3, #128	; 0x80
 8000bb6:	015b      	lsls	r3, r3, #5
 8000bb8:	4013      	ands	r3, r2
 8000bba:	60fb      	str	r3, [r7, #12]
 8000bbc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000bbe:	46c0      	nop			; (mov r8, r8)
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	b004      	add	sp, #16
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	46c0      	nop			; (mov r8, r8)
 8000bc8:	40023000 	.word	0x40023000
 8000bcc:	40021000 	.word	0x40021000

08000bd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bd0:	b590      	push	{r4, r7, lr}
 8000bd2:	b091      	sub	sp, #68	; 0x44
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd8:	232c      	movs	r3, #44	; 0x2c
 8000bda:	18fb      	adds	r3, r7, r3
 8000bdc:	0018      	movs	r0, r3
 8000bde:	2314      	movs	r3, #20
 8000be0:	001a      	movs	r2, r3
 8000be2:	2100      	movs	r1, #0
 8000be4:	f002 fd68 	bl	80036b8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000be8:	2410      	movs	r4, #16
 8000bea:	193b      	adds	r3, r7, r4
 8000bec:	0018      	movs	r0, r3
 8000bee:	231c      	movs	r3, #28
 8000bf0:	001a      	movs	r2, r3
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	f002 fd60 	bl	80036b8 <memset>
  if(huart->Instance==USART1)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a39      	ldr	r2, [pc, #228]	; (8000ce4 <HAL_UART_MspInit+0x114>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d16b      	bne.n	8000cda <HAL_UART_MspInit+0x10a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000c02:	193b      	adds	r3, r7, r4
 8000c04:	2201      	movs	r2, #1
 8000c06:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000c08:	193b      	adds	r3, r7, r4
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c0e:	193b      	adds	r3, r7, r4
 8000c10:	0018      	movs	r0, r3
 8000c12:	f001 fbdb 	bl	80023cc <HAL_RCCEx_PeriphCLKConfig>
 8000c16:	1e03      	subs	r3, r0, #0
 8000c18:	d001      	beq.n	8000c1e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c1a:	f7ff ff49 	bl	8000ab0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c1e:	4b32      	ldr	r3, [pc, #200]	; (8000ce8 <HAL_UART_MspInit+0x118>)
 8000c20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c22:	4b31      	ldr	r3, [pc, #196]	; (8000ce8 <HAL_UART_MspInit+0x118>)
 8000c24:	2180      	movs	r1, #128	; 0x80
 8000c26:	01c9      	lsls	r1, r1, #7
 8000c28:	430a      	orrs	r2, r1
 8000c2a:	641a      	str	r2, [r3, #64]	; 0x40
 8000c2c:	4b2e      	ldr	r3, [pc, #184]	; (8000ce8 <HAL_UART_MspInit+0x118>)
 8000c2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c30:	2380      	movs	r3, #128	; 0x80
 8000c32:	01db      	lsls	r3, r3, #7
 8000c34:	4013      	ands	r3, r2
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3a:	4b2b      	ldr	r3, [pc, #172]	; (8000ce8 <HAL_UART_MspInit+0x118>)
 8000c3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c3e:	4b2a      	ldr	r3, [pc, #168]	; (8000ce8 <HAL_UART_MspInit+0x118>)
 8000c40:	2101      	movs	r1, #1
 8000c42:	430a      	orrs	r2, r1
 8000c44:	635a      	str	r2, [r3, #52]	; 0x34
 8000c46:	4b28      	ldr	r3, [pc, #160]	; (8000ce8 <HAL_UART_MspInit+0x118>)
 8000c48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	60bb      	str	r3, [r7, #8]
 8000c50:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c52:	212c      	movs	r1, #44	; 0x2c
 8000c54:	187b      	adds	r3, r7, r1
 8000c56:	22c0      	movs	r2, #192	; 0xc0
 8000c58:	00d2      	lsls	r2, r2, #3
 8000c5a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5c:	187b      	adds	r3, r7, r1
 8000c5e:	2202      	movs	r2, #2
 8000c60:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	187b      	adds	r3, r7, r1
 8000c64:	2200      	movs	r2, #0
 8000c66:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c68:	187b      	adds	r3, r7, r1
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000c6e:	187b      	adds	r3, r7, r1
 8000c70:	2201      	movs	r2, #1
 8000c72:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c74:	187a      	adds	r2, r7, r1
 8000c76:	23a0      	movs	r3, #160	; 0xa0
 8000c78:	05db      	lsls	r3, r3, #23
 8000c7a:	0011      	movs	r1, r2
 8000c7c:	0018      	movs	r0, r3
 8000c7e:	f000 fd3b 	bl	80016f8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8000c82:	4b1a      	ldr	r3, [pc, #104]	; (8000cec <HAL_UART_MspInit+0x11c>)
 8000c84:	4a1a      	ldr	r2, [pc, #104]	; (8000cf0 <HAL_UART_MspInit+0x120>)
 8000c86:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8000c88:	4b18      	ldr	r3, [pc, #96]	; (8000cec <HAL_UART_MspInit+0x11c>)
 8000c8a:	2232      	movs	r2, #50	; 0x32
 8000c8c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c8e:	4b17      	ldr	r3, [pc, #92]	; (8000cec <HAL_UART_MspInit+0x11c>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c94:	4b15      	ldr	r3, [pc, #84]	; (8000cec <HAL_UART_MspInit+0x11c>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c9a:	4b14      	ldr	r3, [pc, #80]	; (8000cec <HAL_UART_MspInit+0x11c>)
 8000c9c:	2280      	movs	r2, #128	; 0x80
 8000c9e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ca0:	4b12      	ldr	r3, [pc, #72]	; (8000cec <HAL_UART_MspInit+0x11c>)
 8000ca2:	2280      	movs	r2, #128	; 0x80
 8000ca4:	0052      	lsls	r2, r2, #1
 8000ca6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ca8:	4b10      	ldr	r3, [pc, #64]	; (8000cec <HAL_UART_MspInit+0x11c>)
 8000caa:	2280      	movs	r2, #128	; 0x80
 8000cac:	00d2      	lsls	r2, r2, #3
 8000cae:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000cb0:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <HAL_UART_MspInit+0x11c>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000cb6:	4b0d      	ldr	r3, [pc, #52]	; (8000cec <HAL_UART_MspInit+0x11c>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000cbc:	4b0b      	ldr	r3, [pc, #44]	; (8000cec <HAL_UART_MspInit+0x11c>)
 8000cbe:	0018      	movs	r0, r3
 8000cc0:	f000 fac8 	bl	8001254 <HAL_DMA_Init>
 8000cc4:	1e03      	subs	r3, r0, #0
 8000cc6:	d001      	beq.n	8000ccc <HAL_UART_MspInit+0xfc>
    {
      Error_Handler();
 8000cc8:	f7ff fef2 	bl	8000ab0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2180      	movs	r1, #128	; 0x80
 8000cd0:	4a06      	ldr	r2, [pc, #24]	; (8000cec <HAL_UART_MspInit+0x11c>)
 8000cd2:	505a      	str	r2, [r3, r1]
 8000cd4:	4b05      	ldr	r3, [pc, #20]	; (8000cec <HAL_UART_MspInit+0x11c>)
 8000cd6:	687a      	ldr	r2, [r7, #4]
 8000cd8:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000cda:	46c0      	nop			; (mov r8, r8)
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	b011      	add	sp, #68	; 0x44
 8000ce0:	bd90      	pop	{r4, r7, pc}
 8000ce2:	46c0      	nop			; (mov r8, r8)
 8000ce4:	40013800 	.word	0x40013800
 8000ce8:	40021000 	.word	0x40021000
 8000cec:	200000e4 	.word	0x200000e4
 8000cf0:	40020008 	.word	0x40020008

08000cf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <NMI_Handler+0x4>

08000cfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cfe:	e7fe      	b.n	8000cfe <HardFault_Handler+0x4>

08000d00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d04:	46c0      	nop			; (mov r8, r8)
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d0e:	46c0      	nop			; (mov r8, r8)
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d18:	f000 f8aa 	bl	8000e70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d1c:	46c0      	nop			; (mov r8, r8)
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
	...

08000d24 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000d28:	4b03      	ldr	r3, [pc, #12]	; (8000d38 <DMA1_Channel1_IRQHandler+0x14>)
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	f000 fba2 	bl	8001474 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000d30:	46c0      	nop			; (mov r8, r8)
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	46c0      	nop			; (mov r8, r8)
 8000d38:	200000e4 	.word	0x200000e4

08000d3c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d40:	46c0      	nop			; (mov r8, r8)
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
	...

08000d48 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d48:	480d      	ldr	r0, [pc, #52]	; (8000d80 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d4a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d4c:	f7ff fff6 	bl	8000d3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d50:	480c      	ldr	r0, [pc, #48]	; (8000d84 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d52:	490d      	ldr	r1, [pc, #52]	; (8000d88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d54:	4a0d      	ldr	r2, [pc, #52]	; (8000d8c <LoopForever+0xe>)
  movs r3, #0
 8000d56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d58:	e002      	b.n	8000d60 <LoopCopyDataInit>

08000d5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d5e:	3304      	adds	r3, #4

08000d60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d64:	d3f9      	bcc.n	8000d5a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d66:	4a0a      	ldr	r2, [pc, #40]	; (8000d90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d68:	4c0a      	ldr	r4, [pc, #40]	; (8000d94 <LoopForever+0x16>)
  movs r3, #0
 8000d6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d6c:	e001      	b.n	8000d72 <LoopFillZerobss>

08000d6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d70:	3204      	adds	r2, #4

08000d72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d74:	d3fb      	bcc.n	8000d6e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d76:	f002 fca7 	bl	80036c8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000d7a:	f7ff fb75 	bl	8000468 <main>

08000d7e <LoopForever>:

LoopForever:
  b LoopForever
 8000d7e:	e7fe      	b.n	8000d7e <LoopForever>
  ldr   r0, =_estack
 8000d80:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000d84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d88:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000d8c:	080039f4 	.word	0x080039f4
  ldr r2, =_sbss
 8000d90:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000d94:	2000035c 	.word	0x2000035c

08000d98 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d98:	e7fe      	b.n	8000d98 <ADC1_IRQHandler>
	...

08000d9c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000da2:	1dfb      	adds	r3, r7, #7
 8000da4:	2200      	movs	r2, #0
 8000da6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000da8:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <HAL_Init+0x3c>)
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	4b0a      	ldr	r3, [pc, #40]	; (8000dd8 <HAL_Init+0x3c>)
 8000dae:	2180      	movs	r1, #128	; 0x80
 8000db0:	0049      	lsls	r1, r1, #1
 8000db2:	430a      	orrs	r2, r1
 8000db4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000db6:	2003      	movs	r0, #3
 8000db8:	f000 f810 	bl	8000ddc <HAL_InitTick>
 8000dbc:	1e03      	subs	r3, r0, #0
 8000dbe:	d003      	beq.n	8000dc8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000dc0:	1dfb      	adds	r3, r7, #7
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	701a      	strb	r2, [r3, #0]
 8000dc6:	e001      	b.n	8000dcc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000dc8:	f7ff febe 	bl	8000b48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000dcc:	1dfb      	adds	r3, r7, #7
 8000dce:	781b      	ldrb	r3, [r3, #0]
}
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	b002      	add	sp, #8
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40022000 	.word	0x40022000

08000ddc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ddc:	b590      	push	{r4, r7, lr}
 8000dde:	b085      	sub	sp, #20
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000de4:	230f      	movs	r3, #15
 8000de6:	18fb      	adds	r3, r7, r3
 8000de8:	2200      	movs	r2, #0
 8000dea:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000dec:	4b1d      	ldr	r3, [pc, #116]	; (8000e64 <HAL_InitTick+0x88>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d02b      	beq.n	8000e4c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000df4:	4b1c      	ldr	r3, [pc, #112]	; (8000e68 <HAL_InitTick+0x8c>)
 8000df6:	681c      	ldr	r4, [r3, #0]
 8000df8:	4b1a      	ldr	r3, [pc, #104]	; (8000e64 <HAL_InitTick+0x88>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	0019      	movs	r1, r3
 8000dfe:	23fa      	movs	r3, #250	; 0xfa
 8000e00:	0098      	lsls	r0, r3, #2
 8000e02:	f7ff f97d 	bl	8000100 <__udivsi3>
 8000e06:	0003      	movs	r3, r0
 8000e08:	0019      	movs	r1, r3
 8000e0a:	0020      	movs	r0, r4
 8000e0c:	f7ff f978 	bl	8000100 <__udivsi3>
 8000e10:	0003      	movs	r3, r0
 8000e12:	0018      	movs	r0, r3
 8000e14:	f000 f93d 	bl	8001092 <HAL_SYSTICK_Config>
 8000e18:	1e03      	subs	r3, r0, #0
 8000e1a:	d112      	bne.n	8000e42 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2b03      	cmp	r3, #3
 8000e20:	d80a      	bhi.n	8000e38 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e22:	6879      	ldr	r1, [r7, #4]
 8000e24:	2301      	movs	r3, #1
 8000e26:	425b      	negs	r3, r3
 8000e28:	2200      	movs	r2, #0
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	f000 f90c 	bl	8001048 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e30:	4b0e      	ldr	r3, [pc, #56]	; (8000e6c <HAL_InitTick+0x90>)
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	601a      	str	r2, [r3, #0]
 8000e36:	e00d      	b.n	8000e54 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000e38:	230f      	movs	r3, #15
 8000e3a:	18fb      	adds	r3, r7, r3
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	701a      	strb	r2, [r3, #0]
 8000e40:	e008      	b.n	8000e54 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e42:	230f      	movs	r3, #15
 8000e44:	18fb      	adds	r3, r7, r3
 8000e46:	2201      	movs	r2, #1
 8000e48:	701a      	strb	r2, [r3, #0]
 8000e4a:	e003      	b.n	8000e54 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e4c:	230f      	movs	r3, #15
 8000e4e:	18fb      	adds	r3, r7, r3
 8000e50:	2201      	movs	r2, #1
 8000e52:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000e54:	230f      	movs	r3, #15
 8000e56:	18fb      	adds	r3, r7, r3
 8000e58:	781b      	ldrb	r3, [r3, #0]
}
 8000e5a:	0018      	movs	r0, r3
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	b005      	add	sp, #20
 8000e60:	bd90      	pop	{r4, r7, pc}
 8000e62:	46c0      	nop			; (mov r8, r8)
 8000e64:	2000000c 	.word	0x2000000c
 8000e68:	20000004 	.word	0x20000004
 8000e6c:	20000008 	.word	0x20000008

08000e70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e74:	4b05      	ldr	r3, [pc, #20]	; (8000e8c <HAL_IncTick+0x1c>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	001a      	movs	r2, r3
 8000e7a:	4b05      	ldr	r3, [pc, #20]	; (8000e90 <HAL_IncTick+0x20>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	18d2      	adds	r2, r2, r3
 8000e80:	4b03      	ldr	r3, [pc, #12]	; (8000e90 <HAL_IncTick+0x20>)
 8000e82:	601a      	str	r2, [r3, #0]
}
 8000e84:	46c0      	nop			; (mov r8, r8)
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	46c0      	nop			; (mov r8, r8)
 8000e8c:	2000000c 	.word	0x2000000c
 8000e90:	20000358 	.word	0x20000358

08000e94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  return uwTick;
 8000e98:	4b02      	ldr	r3, [pc, #8]	; (8000ea4 <HAL_GetTick+0x10>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
}
 8000e9c:	0018      	movs	r0, r3
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	46c0      	nop			; (mov r8, r8)
 8000ea4:	20000358 	.word	0x20000358

08000ea8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000eb0:	f7ff fff0 	bl	8000e94 <HAL_GetTick>
 8000eb4:	0003      	movs	r3, r0
 8000eb6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	d005      	beq.n	8000ece <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ec2:	4b0a      	ldr	r3, [pc, #40]	; (8000eec <HAL_Delay+0x44>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	001a      	movs	r2, r3
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	189b      	adds	r3, r3, r2
 8000ecc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ece:	46c0      	nop			; (mov r8, r8)
 8000ed0:	f7ff ffe0 	bl	8000e94 <HAL_GetTick>
 8000ed4:	0002      	movs	r2, r0
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	68fa      	ldr	r2, [r7, #12]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d8f7      	bhi.n	8000ed0 <HAL_Delay+0x28>
  {
  }
}
 8000ee0:	46c0      	nop			; (mov r8, r8)
 8000ee2:	46c0      	nop			; (mov r8, r8)
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	b004      	add	sp, #16
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	46c0      	nop			; (mov r8, r8)
 8000eec:	2000000c 	.word	0x2000000c

08000ef0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	0002      	movs	r2, r0
 8000ef8:	1dfb      	adds	r3, r7, #7
 8000efa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000efc:	1dfb      	adds	r3, r7, #7
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	2b7f      	cmp	r3, #127	; 0x7f
 8000f02:	d809      	bhi.n	8000f18 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f04:	1dfb      	adds	r3, r7, #7
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	001a      	movs	r2, r3
 8000f0a:	231f      	movs	r3, #31
 8000f0c:	401a      	ands	r2, r3
 8000f0e:	4b04      	ldr	r3, [pc, #16]	; (8000f20 <__NVIC_EnableIRQ+0x30>)
 8000f10:	2101      	movs	r1, #1
 8000f12:	4091      	lsls	r1, r2
 8000f14:	000a      	movs	r2, r1
 8000f16:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000f18:	46c0      	nop			; (mov r8, r8)
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	b002      	add	sp, #8
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	e000e100 	.word	0xe000e100

08000f24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f24:	b590      	push	{r4, r7, lr}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	0002      	movs	r2, r0
 8000f2c:	6039      	str	r1, [r7, #0]
 8000f2e:	1dfb      	adds	r3, r7, #7
 8000f30:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f32:	1dfb      	adds	r3, r7, #7
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	2b7f      	cmp	r3, #127	; 0x7f
 8000f38:	d828      	bhi.n	8000f8c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f3a:	4a2f      	ldr	r2, [pc, #188]	; (8000ff8 <__NVIC_SetPriority+0xd4>)
 8000f3c:	1dfb      	adds	r3, r7, #7
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	b25b      	sxtb	r3, r3
 8000f42:	089b      	lsrs	r3, r3, #2
 8000f44:	33c0      	adds	r3, #192	; 0xc0
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	589b      	ldr	r3, [r3, r2]
 8000f4a:	1dfa      	adds	r2, r7, #7
 8000f4c:	7812      	ldrb	r2, [r2, #0]
 8000f4e:	0011      	movs	r1, r2
 8000f50:	2203      	movs	r2, #3
 8000f52:	400a      	ands	r2, r1
 8000f54:	00d2      	lsls	r2, r2, #3
 8000f56:	21ff      	movs	r1, #255	; 0xff
 8000f58:	4091      	lsls	r1, r2
 8000f5a:	000a      	movs	r2, r1
 8000f5c:	43d2      	mvns	r2, r2
 8000f5e:	401a      	ands	r2, r3
 8000f60:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	019b      	lsls	r3, r3, #6
 8000f66:	22ff      	movs	r2, #255	; 0xff
 8000f68:	401a      	ands	r2, r3
 8000f6a:	1dfb      	adds	r3, r7, #7
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	0018      	movs	r0, r3
 8000f70:	2303      	movs	r3, #3
 8000f72:	4003      	ands	r3, r0
 8000f74:	00db      	lsls	r3, r3, #3
 8000f76:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f78:	481f      	ldr	r0, [pc, #124]	; (8000ff8 <__NVIC_SetPriority+0xd4>)
 8000f7a:	1dfb      	adds	r3, r7, #7
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	b25b      	sxtb	r3, r3
 8000f80:	089b      	lsrs	r3, r3, #2
 8000f82:	430a      	orrs	r2, r1
 8000f84:	33c0      	adds	r3, #192	; 0xc0
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f8a:	e031      	b.n	8000ff0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f8c:	4a1b      	ldr	r2, [pc, #108]	; (8000ffc <__NVIC_SetPriority+0xd8>)
 8000f8e:	1dfb      	adds	r3, r7, #7
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	0019      	movs	r1, r3
 8000f94:	230f      	movs	r3, #15
 8000f96:	400b      	ands	r3, r1
 8000f98:	3b08      	subs	r3, #8
 8000f9a:	089b      	lsrs	r3, r3, #2
 8000f9c:	3306      	adds	r3, #6
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	18d3      	adds	r3, r2, r3
 8000fa2:	3304      	adds	r3, #4
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	1dfa      	adds	r2, r7, #7
 8000fa8:	7812      	ldrb	r2, [r2, #0]
 8000faa:	0011      	movs	r1, r2
 8000fac:	2203      	movs	r2, #3
 8000fae:	400a      	ands	r2, r1
 8000fb0:	00d2      	lsls	r2, r2, #3
 8000fb2:	21ff      	movs	r1, #255	; 0xff
 8000fb4:	4091      	lsls	r1, r2
 8000fb6:	000a      	movs	r2, r1
 8000fb8:	43d2      	mvns	r2, r2
 8000fba:	401a      	ands	r2, r3
 8000fbc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	019b      	lsls	r3, r3, #6
 8000fc2:	22ff      	movs	r2, #255	; 0xff
 8000fc4:	401a      	ands	r2, r3
 8000fc6:	1dfb      	adds	r3, r7, #7
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	0018      	movs	r0, r3
 8000fcc:	2303      	movs	r3, #3
 8000fce:	4003      	ands	r3, r0
 8000fd0:	00db      	lsls	r3, r3, #3
 8000fd2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fd4:	4809      	ldr	r0, [pc, #36]	; (8000ffc <__NVIC_SetPriority+0xd8>)
 8000fd6:	1dfb      	adds	r3, r7, #7
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	001c      	movs	r4, r3
 8000fdc:	230f      	movs	r3, #15
 8000fde:	4023      	ands	r3, r4
 8000fe0:	3b08      	subs	r3, #8
 8000fe2:	089b      	lsrs	r3, r3, #2
 8000fe4:	430a      	orrs	r2, r1
 8000fe6:	3306      	adds	r3, #6
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	18c3      	adds	r3, r0, r3
 8000fec:	3304      	adds	r3, #4
 8000fee:	601a      	str	r2, [r3, #0]
}
 8000ff0:	46c0      	nop			; (mov r8, r8)
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	b003      	add	sp, #12
 8000ff6:	bd90      	pop	{r4, r7, pc}
 8000ff8:	e000e100 	.word	0xe000e100
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	1e5a      	subs	r2, r3, #1
 800100c:	2380      	movs	r3, #128	; 0x80
 800100e:	045b      	lsls	r3, r3, #17
 8001010:	429a      	cmp	r2, r3
 8001012:	d301      	bcc.n	8001018 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001014:	2301      	movs	r3, #1
 8001016:	e010      	b.n	800103a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001018:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <SysTick_Config+0x44>)
 800101a:	687a      	ldr	r2, [r7, #4]
 800101c:	3a01      	subs	r2, #1
 800101e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001020:	2301      	movs	r3, #1
 8001022:	425b      	negs	r3, r3
 8001024:	2103      	movs	r1, #3
 8001026:	0018      	movs	r0, r3
 8001028:	f7ff ff7c 	bl	8000f24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800102c:	4b05      	ldr	r3, [pc, #20]	; (8001044 <SysTick_Config+0x44>)
 800102e:	2200      	movs	r2, #0
 8001030:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001032:	4b04      	ldr	r3, [pc, #16]	; (8001044 <SysTick_Config+0x44>)
 8001034:	2207      	movs	r2, #7
 8001036:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001038:	2300      	movs	r3, #0
}
 800103a:	0018      	movs	r0, r3
 800103c:	46bd      	mov	sp, r7
 800103e:	b002      	add	sp, #8
 8001040:	bd80      	pop	{r7, pc}
 8001042:	46c0      	nop			; (mov r8, r8)
 8001044:	e000e010 	.word	0xe000e010

08001048 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	60b9      	str	r1, [r7, #8]
 8001050:	607a      	str	r2, [r7, #4]
 8001052:	210f      	movs	r1, #15
 8001054:	187b      	adds	r3, r7, r1
 8001056:	1c02      	adds	r2, r0, #0
 8001058:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800105a:	68ba      	ldr	r2, [r7, #8]
 800105c:	187b      	adds	r3, r7, r1
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	b25b      	sxtb	r3, r3
 8001062:	0011      	movs	r1, r2
 8001064:	0018      	movs	r0, r3
 8001066:	f7ff ff5d 	bl	8000f24 <__NVIC_SetPriority>
}
 800106a:	46c0      	nop			; (mov r8, r8)
 800106c:	46bd      	mov	sp, r7
 800106e:	b004      	add	sp, #16
 8001070:	bd80      	pop	{r7, pc}

08001072 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	b082      	sub	sp, #8
 8001076:	af00      	add	r7, sp, #0
 8001078:	0002      	movs	r2, r0
 800107a:	1dfb      	adds	r3, r7, #7
 800107c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800107e:	1dfb      	adds	r3, r7, #7
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	b25b      	sxtb	r3, r3
 8001084:	0018      	movs	r0, r3
 8001086:	f7ff ff33 	bl	8000ef0 <__NVIC_EnableIRQ>
}
 800108a:	46c0      	nop			; (mov r8, r8)
 800108c:	46bd      	mov	sp, r7
 800108e:	b002      	add	sp, #8
 8001090:	bd80      	pop	{r7, pc}

08001092 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b082      	sub	sp, #8
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	0018      	movs	r0, r3
 800109e:	f7ff ffaf 	bl	8001000 <SysTick_Config>
 80010a2:	0003      	movs	r3, r0
}
 80010a4:	0018      	movs	r0, r3
 80010a6:	46bd      	mov	sp, r7
 80010a8:	b002      	add	sp, #8
 80010aa:	bd80      	pop	{r7, pc}

080010ac <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d101      	bne.n	80010be <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e056      	b.n	800116c <HAL_CRC_Init+0xc0>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	7f5b      	ldrb	r3, [r3, #29]
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d106      	bne.n	80010d6 <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2200      	movs	r2, #0
 80010cc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	0018      	movs	r0, r3
 80010d2:	f7ff fd5d 	bl	8000b90 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2202      	movs	r2, #2
 80010da:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	791b      	ldrb	r3, [r3, #4]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d10c      	bne.n	80010fe <HAL_CRC_Init+0x52>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a22      	ldr	r2, [pc, #136]	; (8001174 <HAL_CRC_Init+0xc8>)
 80010ea:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	689a      	ldr	r2, [r3, #8]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2118      	movs	r1, #24
 80010f8:	438a      	bics	r2, r1
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	e00b      	b.n	8001116 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6899      	ldr	r1, [r3, #8]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	68da      	ldr	r2, [r3, #12]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	0018      	movs	r0, r3
 800110a:	f000 f835 	bl	8001178 <HAL_CRCEx_Polynomial_Set>
 800110e:	1e03      	subs	r3, r0, #0
 8001110:	d001      	beq.n	8001116 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e02a      	b.n	800116c <HAL_CRC_Init+0xc0>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	795b      	ldrb	r3, [r3, #5]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d105      	bne.n	800112a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	2201      	movs	r2, #1
 8001124:	4252      	negs	r2, r2
 8001126:	611a      	str	r2, [r3, #16]
 8001128:	e004      	b.n	8001134 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	6912      	ldr	r2, [r2, #16]
 8001132:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	2260      	movs	r2, #96	; 0x60
 800113c:	4393      	bics	r3, r2
 800113e:	0019      	movs	r1, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	695a      	ldr	r2, [r3, #20]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	430a      	orrs	r2, r1
 800114a:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	2280      	movs	r2, #128	; 0x80
 8001154:	4393      	bics	r3, r2
 8001156:	0019      	movs	r1, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	699a      	ldr	r2, [r3, #24]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	430a      	orrs	r2, r1
 8001162:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2201      	movs	r2, #1
 8001168:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800116a:	2300      	movs	r3, #0
}
 800116c:	0018      	movs	r0, r3
 800116e:	46bd      	mov	sp, r7
 8001170:	b002      	add	sp, #8
 8001172:	bd80      	pop	{r7, pc}
 8001174:	04c11db7 	.word	0x04c11db7

08001178 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001184:	2317      	movs	r3, #23
 8001186:	18fb      	adds	r3, r7, r3
 8001188:	2200      	movs	r2, #0
 800118a:	701a      	strb	r2, [r3, #0]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800118c:	231f      	movs	r3, #31
 800118e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001190:	46c0      	nop			; (mov r8, r8)
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	1e5a      	subs	r2, r3, #1
 8001196:	613a      	str	r2, [r7, #16]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d008      	beq.n	80011ae <HAL_CRCEx_Polynomial_Set+0x36>
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	221f      	movs	r2, #31
 80011a0:	4013      	ands	r3, r2
 80011a2:	68ba      	ldr	r2, [r7, #8]
 80011a4:	40da      	lsrs	r2, r3
 80011a6:	0013      	movs	r3, r2
 80011a8:	2201      	movs	r2, #1
 80011aa:	4013      	ands	r3, r2
 80011ac:	d0f1      	beq.n	8001192 <HAL_CRCEx_Polynomial_Set+0x1a>
  {
  }

  switch (PolyLength)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2b18      	cmp	r3, #24
 80011b2:	d00f      	beq.n	80011d4 <HAL_CRCEx_Polynomial_Set+0x5c>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2b18      	cmp	r3, #24
 80011b8:	d824      	bhi.n	8001204 <HAL_CRCEx_Polynomial_Set+0x8c>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2b10      	cmp	r3, #16
 80011be:	d011      	beq.n	80011e4 <HAL_CRCEx_Polynomial_Set+0x6c>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2b10      	cmp	r3, #16
 80011c4:	d81e      	bhi.n	8001204 <HAL_CRCEx_Polynomial_Set+0x8c>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d020      	beq.n	800120e <HAL_CRCEx_Polynomial_Set+0x96>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2b08      	cmp	r3, #8
 80011d0:	d010      	beq.n	80011f4 <HAL_CRCEx_Polynomial_Set+0x7c>
 80011d2:	e017      	b.n	8001204 <HAL_CRCEx_Polynomial_Set+0x8c>
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	2b06      	cmp	r3, #6
 80011d8:	d91b      	bls.n	8001212 <HAL_CRCEx_Polynomial_Set+0x9a>
      {
        status =   HAL_ERROR;
 80011da:	2317      	movs	r3, #23
 80011dc:	18fb      	adds	r3, r7, r3
 80011de:	2201      	movs	r2, #1
 80011e0:	701a      	strb	r2, [r3, #0]
      }
      break;
 80011e2:	e016      	b.n	8001212 <HAL_CRCEx_Polynomial_Set+0x9a>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	2b07      	cmp	r3, #7
 80011e8:	d915      	bls.n	8001216 <HAL_CRCEx_Polynomial_Set+0x9e>
      {
        status =   HAL_ERROR;
 80011ea:	2317      	movs	r3, #23
 80011ec:	18fb      	adds	r3, r7, r3
 80011ee:	2201      	movs	r2, #1
 80011f0:	701a      	strb	r2, [r3, #0]
      }
      break;
 80011f2:	e010      	b.n	8001216 <HAL_CRCEx_Polynomial_Set+0x9e>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	2b0f      	cmp	r3, #15
 80011f8:	d90f      	bls.n	800121a <HAL_CRCEx_Polynomial_Set+0xa2>
      {
        status =   HAL_ERROR;
 80011fa:	2317      	movs	r3, #23
 80011fc:	18fb      	adds	r3, r7, r3
 80011fe:	2201      	movs	r2, #1
 8001200:	701a      	strb	r2, [r3, #0]
      }
      break;
 8001202:	e00a      	b.n	800121a <HAL_CRCEx_Polynomial_Set+0xa2>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8001204:	2317      	movs	r3, #23
 8001206:	18fb      	adds	r3, r7, r3
 8001208:	2201      	movs	r2, #1
 800120a:	701a      	strb	r2, [r3, #0]
      break;
 800120c:	e006      	b.n	800121c <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 800120e:	46c0      	nop			; (mov r8, r8)
 8001210:	e004      	b.n	800121c <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8001212:	46c0      	nop			; (mov r8, r8)
 8001214:	e002      	b.n	800121c <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 8001216:	46c0      	nop			; (mov r8, r8)
 8001218:	e000      	b.n	800121c <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 800121a:	46c0      	nop			; (mov r8, r8)
  }
  if (status == HAL_OK)
 800121c:	2317      	movs	r3, #23
 800121e:	18fb      	adds	r3, r7, r3
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d10e      	bne.n	8001244 <HAL_CRCEx_Polynomial_Set+0xcc>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	68ba      	ldr	r2, [r7, #8]
 800122c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	2218      	movs	r2, #24
 8001236:	4393      	bics	r3, r2
 8001238:	0019      	movs	r1, r3
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	430a      	orrs	r2, r1
 8001242:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001244:	2317      	movs	r3, #23
 8001246:	18fb      	adds	r3, r7, r3
 8001248:	781b      	ldrb	r3, [r3, #0]
}
 800124a:	0018      	movs	r0, r3
 800124c:	46bd      	mov	sp, r7
 800124e:	b006      	add	sp, #24
 8001250:	bd80      	pop	{r7, pc}
	...

08001254 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d101      	bne.n	8001266 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e077      	b.n	8001356 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a3d      	ldr	r2, [pc, #244]	; (8001360 <HAL_DMA_Init+0x10c>)
 800126c:	4694      	mov	ip, r2
 800126e:	4463      	add	r3, ip
 8001270:	2114      	movs	r1, #20
 8001272:	0018      	movs	r0, r3
 8001274:	f7fe ff44 	bl	8000100 <__udivsi3>
 8001278:	0003      	movs	r3, r0
 800127a:	009a      	lsls	r2, r3, #2
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2225      	movs	r2, #37	; 0x25
 8001284:	2102      	movs	r1, #2
 8001286:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4934      	ldr	r1, [pc, #208]	; (8001364 <HAL_DMA_Init+0x110>)
 8001294:	400a      	ands	r2, r1
 8001296:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	6819      	ldr	r1, [r3, #0]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	689a      	ldr	r2, [r3, #8]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	68db      	ldr	r3, [r3, #12]
 80012a6:	431a      	orrs	r2, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	691b      	ldr	r3, [r3, #16]
 80012ac:	431a      	orrs	r2, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	695b      	ldr	r3, [r3, #20]
 80012b2:	431a      	orrs	r2, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	431a      	orrs	r2, r3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	69db      	ldr	r3, [r3, #28]
 80012be:	431a      	orrs	r2, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6a1b      	ldr	r3, [r3, #32]
 80012c4:	431a      	orrs	r2, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	430a      	orrs	r2, r1
 80012cc:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	0018      	movs	r0, r3
 80012d2:	f000 f9c1 	bl	8001658 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	689a      	ldr	r2, [r3, #8]
 80012da:	2380      	movs	r3, #128	; 0x80
 80012dc:	01db      	lsls	r3, r3, #7
 80012de:	429a      	cmp	r2, r3
 80012e0:	d102      	bne.n	80012e8 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2200      	movs	r2, #0
 80012e6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	685a      	ldr	r2, [r3, #4]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f0:	213f      	movs	r1, #63	; 0x3f
 80012f2:	400a      	ands	r2, r1
 80012f4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012fa:	687a      	ldr	r2, [r7, #4]
 80012fc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80012fe:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d011      	beq.n	800132c <HAL_DMA_Init+0xd8>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	2b04      	cmp	r3, #4
 800130e:	d80d      	bhi.n	800132c <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	0018      	movs	r0, r3
 8001314:	f000 f9cc 	bl	80016b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	e008      	b.n	800133e <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2200      	movs	r2, #0
 8001330:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2200      	movs	r2, #0
 8001336:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2200      	movs	r2, #0
 800133c:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2200      	movs	r2, #0
 8001342:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2225      	movs	r2, #37	; 0x25
 8001348:	2101      	movs	r1, #1
 800134a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2224      	movs	r2, #36	; 0x24
 8001350:	2100      	movs	r1, #0
 8001352:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001354:	2300      	movs	r3, #0
}
 8001356:	0018      	movs	r0, r3
 8001358:	46bd      	mov	sp, r7
 800135a:	b002      	add	sp, #8
 800135c:	bd80      	pop	{r7, pc}
 800135e:	46c0      	nop			; (mov r8, r8)
 8001360:	bffdfff8 	.word	0xbffdfff8
 8001364:	ffff800f 	.word	0xffff800f

08001368 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	607a      	str	r2, [r7, #4]
 8001374:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001376:	2317      	movs	r3, #23
 8001378:	18fb      	adds	r3, r7, r3
 800137a:	2200      	movs	r2, #0
 800137c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	2224      	movs	r2, #36	; 0x24
 8001382:	5c9b      	ldrb	r3, [r3, r2]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d101      	bne.n	800138c <HAL_DMA_Start_IT+0x24>
 8001388:	2302      	movs	r3, #2
 800138a:	e06f      	b.n	800146c <HAL_DMA_Start_IT+0x104>
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	2224      	movs	r2, #36	; 0x24
 8001390:	2101      	movs	r1, #1
 8001392:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	2225      	movs	r2, #37	; 0x25
 8001398:	5c9b      	ldrb	r3, [r3, r2]
 800139a:	b2db      	uxtb	r3, r3
 800139c:	2b01      	cmp	r3, #1
 800139e:	d157      	bne.n	8001450 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	2225      	movs	r2, #37	; 0x25
 80013a4:	2102      	movs	r1, #2
 80013a6:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	2200      	movs	r2, #0
 80013ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2101      	movs	r1, #1
 80013ba:	438a      	bics	r2, r1
 80013bc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	68b9      	ldr	r1, [r7, #8]
 80013c4:	68f8      	ldr	r0, [r7, #12]
 80013c6:	f000 f907 	bl	80015d8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d008      	beq.n	80013e4 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	210e      	movs	r1, #14
 80013de:	430a      	orrs	r2, r1
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	e00f      	b.n	8001404 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	2104      	movs	r1, #4
 80013f0:	438a      	bics	r2, r1
 80013f2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	210a      	movs	r1, #10
 8001400:	430a      	orrs	r2, r1
 8001402:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	2380      	movs	r3, #128	; 0x80
 800140c:	025b      	lsls	r3, r3, #9
 800140e:	4013      	ands	r3, r2
 8001410:	d008      	beq.n	8001424 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141c:	2180      	movs	r1, #128	; 0x80
 800141e:	0049      	lsls	r1, r1, #1
 8001420:	430a      	orrs	r2, r1
 8001422:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001428:	2b00      	cmp	r3, #0
 800142a:	d008      	beq.n	800143e <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001436:	2180      	movs	r1, #128	; 0x80
 8001438:	0049      	lsls	r1, r1, #1
 800143a:	430a      	orrs	r2, r1
 800143c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2101      	movs	r1, #1
 800144a:	430a      	orrs	r2, r1
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	e00a      	b.n	8001466 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	2280      	movs	r2, #128	; 0x80
 8001454:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	2224      	movs	r2, #36	; 0x24
 800145a:	2100      	movs	r1, #0
 800145c:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 800145e:	2317      	movs	r3, #23
 8001460:	18fb      	adds	r3, r7, r3
 8001462:	2201      	movs	r2, #1
 8001464:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8001466:	2317      	movs	r3, #23
 8001468:	18fb      	adds	r3, r7, r3
 800146a:	781b      	ldrb	r3, [r3, #0]
}
 800146c:	0018      	movs	r0, r3
 800146e:	46bd      	mov	sp, r7
 8001470:	b006      	add	sp, #24
 8001472:	bd80      	pop	{r7, pc}

08001474 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 800147c:	4b55      	ldr	r3, [pc, #340]	; (80015d4 <HAL_DMA_IRQHandler+0x160>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148e:	221c      	movs	r2, #28
 8001490:	4013      	ands	r3, r2
 8001492:	2204      	movs	r2, #4
 8001494:	409a      	lsls	r2, r3
 8001496:	0013      	movs	r3, r2
 8001498:	68fa      	ldr	r2, [r7, #12]
 800149a:	4013      	ands	r3, r2
 800149c:	d027      	beq.n	80014ee <HAL_DMA_IRQHandler+0x7a>
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	2204      	movs	r2, #4
 80014a2:	4013      	ands	r3, r2
 80014a4:	d023      	beq.n	80014ee <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2220      	movs	r2, #32
 80014ae:	4013      	ands	r3, r2
 80014b0:	d107      	bne.n	80014c2 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2104      	movs	r1, #4
 80014be:	438a      	bics	r2, r1
 80014c0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80014c2:	4b44      	ldr	r3, [pc, #272]	; (80015d4 <HAL_DMA_IRQHandler+0x160>)
 80014c4:	6859      	ldr	r1, [r3, #4]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ca:	221c      	movs	r2, #28
 80014cc:	4013      	ands	r3, r2
 80014ce:	2204      	movs	r2, #4
 80014d0:	409a      	lsls	r2, r3
 80014d2:	4b40      	ldr	r3, [pc, #256]	; (80015d4 <HAL_DMA_IRQHandler+0x160>)
 80014d4:	430a      	orrs	r2, r1
 80014d6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d100      	bne.n	80014e2 <HAL_DMA_IRQHandler+0x6e>
 80014e0:	e073      	b.n	80015ca <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	0010      	movs	r0, r2
 80014ea:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80014ec:	e06d      	b.n	80015ca <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f2:	221c      	movs	r2, #28
 80014f4:	4013      	ands	r3, r2
 80014f6:	2202      	movs	r2, #2
 80014f8:	409a      	lsls	r2, r3
 80014fa:	0013      	movs	r3, r2
 80014fc:	68fa      	ldr	r2, [r7, #12]
 80014fe:	4013      	ands	r3, r2
 8001500:	d02e      	beq.n	8001560 <HAL_DMA_IRQHandler+0xec>
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	2202      	movs	r2, #2
 8001506:	4013      	ands	r3, r2
 8001508:	d02a      	beq.n	8001560 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2220      	movs	r2, #32
 8001512:	4013      	ands	r3, r2
 8001514:	d10b      	bne.n	800152e <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	210a      	movs	r1, #10
 8001522:	438a      	bics	r2, r1
 8001524:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2225      	movs	r2, #37	; 0x25
 800152a:	2101      	movs	r1, #1
 800152c:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800152e:	4b29      	ldr	r3, [pc, #164]	; (80015d4 <HAL_DMA_IRQHandler+0x160>)
 8001530:	6859      	ldr	r1, [r3, #4]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	221c      	movs	r2, #28
 8001538:	4013      	ands	r3, r2
 800153a:	2202      	movs	r2, #2
 800153c:	409a      	lsls	r2, r3
 800153e:	4b25      	ldr	r3, [pc, #148]	; (80015d4 <HAL_DMA_IRQHandler+0x160>)
 8001540:	430a      	orrs	r2, r1
 8001542:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2224      	movs	r2, #36	; 0x24
 8001548:	2100      	movs	r1, #0
 800154a:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001550:	2b00      	cmp	r3, #0
 8001552:	d03a      	beq.n	80015ca <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001558:	687a      	ldr	r2, [r7, #4]
 800155a:	0010      	movs	r0, r2
 800155c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800155e:	e034      	b.n	80015ca <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001564:	221c      	movs	r2, #28
 8001566:	4013      	ands	r3, r2
 8001568:	2208      	movs	r2, #8
 800156a:	409a      	lsls	r2, r3
 800156c:	0013      	movs	r3, r2
 800156e:	68fa      	ldr	r2, [r7, #12]
 8001570:	4013      	ands	r3, r2
 8001572:	d02b      	beq.n	80015cc <HAL_DMA_IRQHandler+0x158>
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	2208      	movs	r2, #8
 8001578:	4013      	ands	r3, r2
 800157a:	d027      	beq.n	80015cc <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	210e      	movs	r1, #14
 8001588:	438a      	bics	r2, r1
 800158a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800158c:	4b11      	ldr	r3, [pc, #68]	; (80015d4 <HAL_DMA_IRQHandler+0x160>)
 800158e:	6859      	ldr	r1, [r3, #4]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001594:	221c      	movs	r2, #28
 8001596:	4013      	ands	r3, r2
 8001598:	2201      	movs	r2, #1
 800159a:	409a      	lsls	r2, r3
 800159c:	4b0d      	ldr	r3, [pc, #52]	; (80015d4 <HAL_DMA_IRQHandler+0x160>)
 800159e:	430a      	orrs	r2, r1
 80015a0:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2201      	movs	r2, #1
 80015a6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2225      	movs	r2, #37	; 0x25
 80015ac:	2101      	movs	r1, #1
 80015ae:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2224      	movs	r2, #36	; 0x24
 80015b4:	2100      	movs	r1, #0
 80015b6:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d005      	beq.n	80015cc <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015c4:	687a      	ldr	r2, [r7, #4]
 80015c6:	0010      	movs	r0, r2
 80015c8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80015ca:	46c0      	nop			; (mov r8, r8)
 80015cc:	46c0      	nop			; (mov r8, r8)
}
 80015ce:	46bd      	mov	sp, r7
 80015d0:	b004      	add	sp, #16
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	40020000 	.word	0x40020000

080015d8 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
 80015e4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015ea:	68fa      	ldr	r2, [r7, #12]
 80015ec:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80015ee:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d004      	beq.n	8001602 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015fc:	68fa      	ldr	r2, [r7, #12]
 80015fe:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001600:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001602:	4b14      	ldr	r3, [pc, #80]	; (8001654 <DMA_SetConfig+0x7c>)
 8001604:	6859      	ldr	r1, [r3, #4]
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160a:	221c      	movs	r2, #28
 800160c:	4013      	ands	r3, r2
 800160e:	2201      	movs	r2, #1
 8001610:	409a      	lsls	r2, r3
 8001612:	4b10      	ldr	r3, [pc, #64]	; (8001654 <DMA_SetConfig+0x7c>)
 8001614:	430a      	orrs	r2, r1
 8001616:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	683a      	ldr	r2, [r7, #0]
 800161e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	2b10      	cmp	r3, #16
 8001626:	d108      	bne.n	800163a <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	68ba      	ldr	r2, [r7, #8]
 8001636:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001638:	e007      	b.n	800164a <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	68ba      	ldr	r2, [r7, #8]
 8001640:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	60da      	str	r2, [r3, #12]
}
 800164a:	46c0      	nop			; (mov r8, r8)
 800164c:	46bd      	mov	sp, r7
 800164e:	b004      	add	sp, #16
 8001650:	bd80      	pop	{r7, pc}
 8001652:	46c0      	nop			; (mov r8, r8)
 8001654:	40020000 	.word	0x40020000

08001658 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001664:	089b      	lsrs	r3, r3, #2
 8001666:	4a10      	ldr	r2, [pc, #64]	; (80016a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8001668:	4694      	mov	ip, r2
 800166a:	4463      	add	r3, ip
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	001a      	movs	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	001a      	movs	r2, r3
 800167a:	23ff      	movs	r3, #255	; 0xff
 800167c:	4013      	ands	r3, r2
 800167e:	3b08      	subs	r3, #8
 8001680:	2114      	movs	r1, #20
 8001682:	0018      	movs	r0, r3
 8001684:	f7fe fd3c 	bl	8000100 <__udivsi3>
 8001688:	0003      	movs	r3, r0
 800168a:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4a07      	ldr	r2, [pc, #28]	; (80016ac <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8001690:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	221f      	movs	r2, #31
 8001696:	4013      	ands	r3, r2
 8001698:	2201      	movs	r2, #1
 800169a:	409a      	lsls	r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80016a0:	46c0      	nop			; (mov r8, r8)
 80016a2:	46bd      	mov	sp, r7
 80016a4:	b004      	add	sp, #16
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	10008200 	.word	0x10008200
 80016ac:	40020880 	.word	0x40020880

080016b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	223f      	movs	r2, #63	; 0x3f
 80016be:	4013      	ands	r3, r2
 80016c0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	4a0a      	ldr	r2, [pc, #40]	; (80016f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80016c6:	4694      	mov	ip, r2
 80016c8:	4463      	add	r3, ip
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	001a      	movs	r2, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a07      	ldr	r2, [pc, #28]	; (80016f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80016d6:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	3b01      	subs	r3, #1
 80016dc:	2203      	movs	r2, #3
 80016de:	4013      	ands	r3, r2
 80016e0:	2201      	movs	r2, #1
 80016e2:	409a      	lsls	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	659a      	str	r2, [r3, #88]	; 0x58
}
 80016e8:	46c0      	nop			; (mov r8, r8)
 80016ea:	46bd      	mov	sp, r7
 80016ec:	b004      	add	sp, #16
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	1000823f 	.word	0x1000823f
 80016f4:	40020940 	.word	0x40020940

080016f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b086      	sub	sp, #24
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001702:	2300      	movs	r3, #0
 8001704:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001706:	e147      	b.n	8001998 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2101      	movs	r1, #1
 800170e:	697a      	ldr	r2, [r7, #20]
 8001710:	4091      	lsls	r1, r2
 8001712:	000a      	movs	r2, r1
 8001714:	4013      	ands	r3, r2
 8001716:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d100      	bne.n	8001720 <HAL_GPIO_Init+0x28>
 800171e:	e138      	b.n	8001992 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	2203      	movs	r2, #3
 8001726:	4013      	ands	r3, r2
 8001728:	2b01      	cmp	r3, #1
 800172a:	d005      	beq.n	8001738 <HAL_GPIO_Init+0x40>
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	2203      	movs	r2, #3
 8001732:	4013      	ands	r3, r2
 8001734:	2b02      	cmp	r3, #2
 8001736:	d130      	bne.n	800179a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	2203      	movs	r2, #3
 8001744:	409a      	lsls	r2, r3
 8001746:	0013      	movs	r3, r2
 8001748:	43da      	mvns	r2, r3
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	4013      	ands	r3, r2
 800174e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	68da      	ldr	r2, [r3, #12]
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	409a      	lsls	r2, r3
 800175a:	0013      	movs	r3, r2
 800175c:	693a      	ldr	r2, [r7, #16]
 800175e:	4313      	orrs	r3, r2
 8001760:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	693a      	ldr	r2, [r7, #16]
 8001766:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800176e:	2201      	movs	r2, #1
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	409a      	lsls	r2, r3
 8001774:	0013      	movs	r3, r2
 8001776:	43da      	mvns	r2, r3
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	4013      	ands	r3, r2
 800177c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	091b      	lsrs	r3, r3, #4
 8001784:	2201      	movs	r2, #1
 8001786:	401a      	ands	r2, r3
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	409a      	lsls	r2, r3
 800178c:	0013      	movs	r3, r2
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	4313      	orrs	r3, r2
 8001792:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	693a      	ldr	r2, [r7, #16]
 8001798:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	2203      	movs	r2, #3
 80017a0:	4013      	ands	r3, r2
 80017a2:	2b03      	cmp	r3, #3
 80017a4:	d017      	beq.n	80017d6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	2203      	movs	r2, #3
 80017b2:	409a      	lsls	r2, r3
 80017b4:	0013      	movs	r3, r2
 80017b6:	43da      	mvns	r2, r3
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	4013      	ands	r3, r2
 80017bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	689a      	ldr	r2, [r3, #8]
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	409a      	lsls	r2, r3
 80017c8:	0013      	movs	r3, r2
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	2203      	movs	r2, #3
 80017dc:	4013      	ands	r3, r2
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d123      	bne.n	800182a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	08da      	lsrs	r2, r3, #3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	3208      	adds	r2, #8
 80017ea:	0092      	lsls	r2, r2, #2
 80017ec:	58d3      	ldr	r3, [r2, r3]
 80017ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	2207      	movs	r2, #7
 80017f4:	4013      	ands	r3, r2
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	220f      	movs	r2, #15
 80017fa:	409a      	lsls	r2, r3
 80017fc:	0013      	movs	r3, r2
 80017fe:	43da      	mvns	r2, r3
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	4013      	ands	r3, r2
 8001804:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	691a      	ldr	r2, [r3, #16]
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	2107      	movs	r1, #7
 800180e:	400b      	ands	r3, r1
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	409a      	lsls	r2, r3
 8001814:	0013      	movs	r3, r2
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	4313      	orrs	r3, r2
 800181a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	08da      	lsrs	r2, r3, #3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	3208      	adds	r2, #8
 8001824:	0092      	lsls	r2, r2, #2
 8001826:	6939      	ldr	r1, [r7, #16]
 8001828:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	2203      	movs	r2, #3
 8001836:	409a      	lsls	r2, r3
 8001838:	0013      	movs	r3, r2
 800183a:	43da      	mvns	r2, r3
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	4013      	ands	r3, r2
 8001840:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	2203      	movs	r2, #3
 8001848:	401a      	ands	r2, r3
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	409a      	lsls	r2, r3
 8001850:	0013      	movs	r3, r2
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	4313      	orrs	r3, r2
 8001856:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685a      	ldr	r2, [r3, #4]
 8001862:	23c0      	movs	r3, #192	; 0xc0
 8001864:	029b      	lsls	r3, r3, #10
 8001866:	4013      	ands	r3, r2
 8001868:	d100      	bne.n	800186c <HAL_GPIO_Init+0x174>
 800186a:	e092      	b.n	8001992 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800186c:	4a50      	ldr	r2, [pc, #320]	; (80019b0 <HAL_GPIO_Init+0x2b8>)
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	089b      	lsrs	r3, r3, #2
 8001872:	3318      	adds	r3, #24
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	589b      	ldr	r3, [r3, r2]
 8001878:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	2203      	movs	r2, #3
 800187e:	4013      	ands	r3, r2
 8001880:	00db      	lsls	r3, r3, #3
 8001882:	220f      	movs	r2, #15
 8001884:	409a      	lsls	r2, r3
 8001886:	0013      	movs	r3, r2
 8001888:	43da      	mvns	r2, r3
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	4013      	ands	r3, r2
 800188e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	23a0      	movs	r3, #160	; 0xa0
 8001894:	05db      	lsls	r3, r3, #23
 8001896:	429a      	cmp	r2, r3
 8001898:	d013      	beq.n	80018c2 <HAL_GPIO_Init+0x1ca>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a45      	ldr	r2, [pc, #276]	; (80019b4 <HAL_GPIO_Init+0x2bc>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d00d      	beq.n	80018be <HAL_GPIO_Init+0x1c6>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4a44      	ldr	r2, [pc, #272]	; (80019b8 <HAL_GPIO_Init+0x2c0>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d007      	beq.n	80018ba <HAL_GPIO_Init+0x1c2>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a43      	ldr	r2, [pc, #268]	; (80019bc <HAL_GPIO_Init+0x2c4>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d101      	bne.n	80018b6 <HAL_GPIO_Init+0x1be>
 80018b2:	2303      	movs	r3, #3
 80018b4:	e006      	b.n	80018c4 <HAL_GPIO_Init+0x1cc>
 80018b6:	2305      	movs	r3, #5
 80018b8:	e004      	b.n	80018c4 <HAL_GPIO_Init+0x1cc>
 80018ba:	2302      	movs	r3, #2
 80018bc:	e002      	b.n	80018c4 <HAL_GPIO_Init+0x1cc>
 80018be:	2301      	movs	r3, #1
 80018c0:	e000      	b.n	80018c4 <HAL_GPIO_Init+0x1cc>
 80018c2:	2300      	movs	r3, #0
 80018c4:	697a      	ldr	r2, [r7, #20]
 80018c6:	2103      	movs	r1, #3
 80018c8:	400a      	ands	r2, r1
 80018ca:	00d2      	lsls	r2, r2, #3
 80018cc:	4093      	lsls	r3, r2
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80018d4:	4936      	ldr	r1, [pc, #216]	; (80019b0 <HAL_GPIO_Init+0x2b8>)
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	089b      	lsrs	r3, r3, #2
 80018da:	3318      	adds	r3, #24
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018e2:	4b33      	ldr	r3, [pc, #204]	; (80019b0 <HAL_GPIO_Init+0x2b8>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	43da      	mvns	r2, r3
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	4013      	ands	r3, r2
 80018f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685a      	ldr	r2, [r3, #4]
 80018f6:	2380      	movs	r3, #128	; 0x80
 80018f8:	035b      	lsls	r3, r3, #13
 80018fa:	4013      	ands	r3, r2
 80018fc:	d003      	beq.n	8001906 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	4313      	orrs	r3, r2
 8001904:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001906:	4b2a      	ldr	r3, [pc, #168]	; (80019b0 <HAL_GPIO_Init+0x2b8>)
 8001908:	693a      	ldr	r2, [r7, #16]
 800190a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800190c:	4b28      	ldr	r3, [pc, #160]	; (80019b0 <HAL_GPIO_Init+0x2b8>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	43da      	mvns	r2, r3
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	4013      	ands	r3, r2
 800191a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685a      	ldr	r2, [r3, #4]
 8001920:	2380      	movs	r3, #128	; 0x80
 8001922:	039b      	lsls	r3, r3, #14
 8001924:	4013      	ands	r3, r2
 8001926:	d003      	beq.n	8001930 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001928:	693a      	ldr	r2, [r7, #16]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	4313      	orrs	r3, r2
 800192e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001930:	4b1f      	ldr	r3, [pc, #124]	; (80019b0 <HAL_GPIO_Init+0x2b8>)
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001936:	4a1e      	ldr	r2, [pc, #120]	; (80019b0 <HAL_GPIO_Init+0x2b8>)
 8001938:	2384      	movs	r3, #132	; 0x84
 800193a:	58d3      	ldr	r3, [r2, r3]
 800193c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	43da      	mvns	r2, r3
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	4013      	ands	r3, r2
 8001946:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685a      	ldr	r2, [r3, #4]
 800194c:	2380      	movs	r3, #128	; 0x80
 800194e:	029b      	lsls	r3, r3, #10
 8001950:	4013      	ands	r3, r2
 8001952:	d003      	beq.n	800195c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001954:	693a      	ldr	r2, [r7, #16]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	4313      	orrs	r3, r2
 800195a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800195c:	4914      	ldr	r1, [pc, #80]	; (80019b0 <HAL_GPIO_Init+0x2b8>)
 800195e:	2284      	movs	r2, #132	; 0x84
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001964:	4a12      	ldr	r2, [pc, #72]	; (80019b0 <HAL_GPIO_Init+0x2b8>)
 8001966:	2380      	movs	r3, #128	; 0x80
 8001968:	58d3      	ldr	r3, [r2, r3]
 800196a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	43da      	mvns	r2, r3
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	4013      	ands	r3, r2
 8001974:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685a      	ldr	r2, [r3, #4]
 800197a:	2380      	movs	r3, #128	; 0x80
 800197c:	025b      	lsls	r3, r3, #9
 800197e:	4013      	ands	r3, r2
 8001980:	d003      	beq.n	800198a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	4313      	orrs	r3, r2
 8001988:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800198a:	4909      	ldr	r1, [pc, #36]	; (80019b0 <HAL_GPIO_Init+0x2b8>)
 800198c:	2280      	movs	r2, #128	; 0x80
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	3301      	adds	r3, #1
 8001996:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	40da      	lsrs	r2, r3
 80019a0:	1e13      	subs	r3, r2, #0
 80019a2:	d000      	beq.n	80019a6 <HAL_GPIO_Init+0x2ae>
 80019a4:	e6b0      	b.n	8001708 <HAL_GPIO_Init+0x10>
  }
}
 80019a6:	46c0      	nop			; (mov r8, r8)
 80019a8:	46c0      	nop			; (mov r8, r8)
 80019aa:	46bd      	mov	sp, r7
 80019ac:	b006      	add	sp, #24
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40021800 	.word	0x40021800
 80019b4:	50000400 	.word	0x50000400
 80019b8:	50000800 	.word	0x50000800
 80019bc:	50000c00 	.word	0x50000c00

080019c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80019c8:	4b19      	ldr	r3, [pc, #100]	; (8001a30 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a19      	ldr	r2, [pc, #100]	; (8001a34 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80019ce:	4013      	ands	r3, r2
 80019d0:	0019      	movs	r1, r3
 80019d2:	4b17      	ldr	r3, [pc, #92]	; (8001a30 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	430a      	orrs	r2, r1
 80019d8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	2380      	movs	r3, #128	; 0x80
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d11f      	bne.n	8001a24 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80019e4:	4b14      	ldr	r3, [pc, #80]	; (8001a38 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	0013      	movs	r3, r2
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	189b      	adds	r3, r3, r2
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	4912      	ldr	r1, [pc, #72]	; (8001a3c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80019f2:	0018      	movs	r0, r3
 80019f4:	f7fe fb84 	bl	8000100 <__udivsi3>
 80019f8:	0003      	movs	r3, r0
 80019fa:	3301      	adds	r3, #1
 80019fc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019fe:	e008      	b.n	8001a12 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d003      	beq.n	8001a0e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	3b01      	subs	r3, #1
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	e001      	b.n	8001a12 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e009      	b.n	8001a26 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a12:	4b07      	ldr	r3, [pc, #28]	; (8001a30 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001a14:	695a      	ldr	r2, [r3, #20]
 8001a16:	2380      	movs	r3, #128	; 0x80
 8001a18:	00db      	lsls	r3, r3, #3
 8001a1a:	401a      	ands	r2, r3
 8001a1c:	2380      	movs	r3, #128	; 0x80
 8001a1e:	00db      	lsls	r3, r3, #3
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d0ed      	beq.n	8001a00 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	0018      	movs	r0, r3
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	b004      	add	sp, #16
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	46c0      	nop			; (mov r8, r8)
 8001a30:	40007000 	.word	0x40007000
 8001a34:	fffff9ff 	.word	0xfffff9ff
 8001a38:	20000004 	.word	0x20000004
 8001a3c:	000f4240 	.word	0x000f4240

08001a40 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001a44:	4b03      	ldr	r3, [pc, #12]	; (8001a54 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001a46:	689a      	ldr	r2, [r3, #8]
 8001a48:	23e0      	movs	r3, #224	; 0xe0
 8001a4a:	01db      	lsls	r3, r3, #7
 8001a4c:	4013      	ands	r3, r2
}
 8001a4e:	0018      	movs	r0, r3
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	40021000 	.word	0x40021000

08001a58 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b088      	sub	sp, #32
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d101      	bne.n	8001a6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e2f3      	b.n	8002052 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	4013      	ands	r3, r2
 8001a72:	d100      	bne.n	8001a76 <HAL_RCC_OscConfig+0x1e>
 8001a74:	e07c      	b.n	8001b70 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a76:	4bc3      	ldr	r3, [pc, #780]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	2238      	movs	r2, #56	; 0x38
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a80:	4bc0      	ldr	r3, [pc, #768]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	2203      	movs	r2, #3
 8001a86:	4013      	ands	r3, r2
 8001a88:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	2b10      	cmp	r3, #16
 8001a8e:	d102      	bne.n	8001a96 <HAL_RCC_OscConfig+0x3e>
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	2b03      	cmp	r3, #3
 8001a94:	d002      	beq.n	8001a9c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	2b08      	cmp	r3, #8
 8001a9a:	d10b      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a9c:	4bb9      	ldr	r3, [pc, #740]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	2380      	movs	r3, #128	; 0x80
 8001aa2:	029b      	lsls	r3, r3, #10
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	d062      	beq.n	8001b6e <HAL_RCC_OscConfig+0x116>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d15e      	bne.n	8001b6e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e2ce      	b.n	8002052 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685a      	ldr	r2, [r3, #4]
 8001ab8:	2380      	movs	r3, #128	; 0x80
 8001aba:	025b      	lsls	r3, r3, #9
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d107      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x78>
 8001ac0:	4bb0      	ldr	r3, [pc, #704]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	4baf      	ldr	r3, [pc, #700]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001ac6:	2180      	movs	r1, #128	; 0x80
 8001ac8:	0249      	lsls	r1, r1, #9
 8001aca:	430a      	orrs	r2, r1
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	e020      	b.n	8001b12 <HAL_RCC_OscConfig+0xba>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685a      	ldr	r2, [r3, #4]
 8001ad4:	23a0      	movs	r3, #160	; 0xa0
 8001ad6:	02db      	lsls	r3, r3, #11
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d10e      	bne.n	8001afa <HAL_RCC_OscConfig+0xa2>
 8001adc:	4ba9      	ldr	r3, [pc, #676]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	4ba8      	ldr	r3, [pc, #672]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001ae2:	2180      	movs	r1, #128	; 0x80
 8001ae4:	02c9      	lsls	r1, r1, #11
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	4ba6      	ldr	r3, [pc, #664]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	4ba5      	ldr	r3, [pc, #660]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001af0:	2180      	movs	r1, #128	; 0x80
 8001af2:	0249      	lsls	r1, r1, #9
 8001af4:	430a      	orrs	r2, r1
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	e00b      	b.n	8001b12 <HAL_RCC_OscConfig+0xba>
 8001afa:	4ba2      	ldr	r3, [pc, #648]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	4ba1      	ldr	r3, [pc, #644]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001b00:	49a1      	ldr	r1, [pc, #644]	; (8001d88 <HAL_RCC_OscConfig+0x330>)
 8001b02:	400a      	ands	r2, r1
 8001b04:	601a      	str	r2, [r3, #0]
 8001b06:	4b9f      	ldr	r3, [pc, #636]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	4b9e      	ldr	r3, [pc, #632]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001b0c:	499f      	ldr	r1, [pc, #636]	; (8001d8c <HAL_RCC_OscConfig+0x334>)
 8001b0e:	400a      	ands	r2, r1
 8001b10:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d014      	beq.n	8001b44 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b1a:	f7ff f9bb 	bl	8000e94 <HAL_GetTick>
 8001b1e:	0003      	movs	r3, r0
 8001b20:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b24:	f7ff f9b6 	bl	8000e94 <HAL_GetTick>
 8001b28:	0002      	movs	r2, r0
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b64      	cmp	r3, #100	; 0x64
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e28d      	b.n	8002052 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b36:	4b93      	ldr	r3, [pc, #588]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	2380      	movs	r3, #128	; 0x80
 8001b3c:	029b      	lsls	r3, r3, #10
 8001b3e:	4013      	ands	r3, r2
 8001b40:	d0f0      	beq.n	8001b24 <HAL_RCC_OscConfig+0xcc>
 8001b42:	e015      	b.n	8001b70 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b44:	f7ff f9a6 	bl	8000e94 <HAL_GetTick>
 8001b48:	0003      	movs	r3, r0
 8001b4a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b4c:	e008      	b.n	8001b60 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b4e:	f7ff f9a1 	bl	8000e94 <HAL_GetTick>
 8001b52:	0002      	movs	r2, r0
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	2b64      	cmp	r3, #100	; 0x64
 8001b5a:	d901      	bls.n	8001b60 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e278      	b.n	8002052 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b60:	4b88      	ldr	r3, [pc, #544]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	2380      	movs	r3, #128	; 0x80
 8001b66:	029b      	lsls	r3, r3, #10
 8001b68:	4013      	ands	r3, r2
 8001b6a:	d1f0      	bne.n	8001b4e <HAL_RCC_OscConfig+0xf6>
 8001b6c:	e000      	b.n	8001b70 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b6e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2202      	movs	r2, #2
 8001b76:	4013      	ands	r3, r2
 8001b78:	d100      	bne.n	8001b7c <HAL_RCC_OscConfig+0x124>
 8001b7a:	e099      	b.n	8001cb0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b7c:	4b81      	ldr	r3, [pc, #516]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	2238      	movs	r2, #56	; 0x38
 8001b82:	4013      	ands	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b86:	4b7f      	ldr	r3, [pc, #508]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001b88:	68db      	ldr	r3, [r3, #12]
 8001b8a:	2203      	movs	r2, #3
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	2b10      	cmp	r3, #16
 8001b94:	d102      	bne.n	8001b9c <HAL_RCC_OscConfig+0x144>
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d002      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d135      	bne.n	8001c0e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ba2:	4b78      	ldr	r3, [pc, #480]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	2380      	movs	r3, #128	; 0x80
 8001ba8:	00db      	lsls	r3, r3, #3
 8001baa:	4013      	ands	r3, r2
 8001bac:	d005      	beq.n	8001bba <HAL_RCC_OscConfig+0x162>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d101      	bne.n	8001bba <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e24b      	b.n	8002052 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bba:	4b72      	ldr	r3, [pc, #456]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	4a74      	ldr	r2, [pc, #464]	; (8001d90 <HAL_RCC_OscConfig+0x338>)
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	0019      	movs	r1, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	695b      	ldr	r3, [r3, #20]
 8001bc8:	021a      	lsls	r2, r3, #8
 8001bca:	4b6e      	ldr	r3, [pc, #440]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001bcc:	430a      	orrs	r2, r1
 8001bce:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d112      	bne.n	8001bfc <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001bd6:	4b6b      	ldr	r3, [pc, #428]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a6e      	ldr	r2, [pc, #440]	; (8001d94 <HAL_RCC_OscConfig+0x33c>)
 8001bdc:	4013      	ands	r3, r2
 8001bde:	0019      	movs	r1, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	691a      	ldr	r2, [r3, #16]
 8001be4:	4b67      	ldr	r3, [pc, #412]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001be6:	430a      	orrs	r2, r1
 8001be8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001bea:	4b66      	ldr	r3, [pc, #408]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	0adb      	lsrs	r3, r3, #11
 8001bf0:	2207      	movs	r2, #7
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	4a68      	ldr	r2, [pc, #416]	; (8001d98 <HAL_RCC_OscConfig+0x340>)
 8001bf6:	40da      	lsrs	r2, r3
 8001bf8:	4b68      	ldr	r3, [pc, #416]	; (8001d9c <HAL_RCC_OscConfig+0x344>)
 8001bfa:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001bfc:	4b68      	ldr	r3, [pc, #416]	; (8001da0 <HAL_RCC_OscConfig+0x348>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	0018      	movs	r0, r3
 8001c02:	f7ff f8eb 	bl	8000ddc <HAL_InitTick>
 8001c06:	1e03      	subs	r3, r0, #0
 8001c08:	d051      	beq.n	8001cae <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e221      	b.n	8002052 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d030      	beq.n	8001c78 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001c16:	4b5b      	ldr	r3, [pc, #364]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a5e      	ldr	r2, [pc, #376]	; (8001d94 <HAL_RCC_OscConfig+0x33c>)
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	0019      	movs	r1, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	691a      	ldr	r2, [r3, #16]
 8001c24:	4b57      	ldr	r3, [pc, #348]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001c26:	430a      	orrs	r2, r1
 8001c28:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001c2a:	4b56      	ldr	r3, [pc, #344]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	4b55      	ldr	r3, [pc, #340]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001c30:	2180      	movs	r1, #128	; 0x80
 8001c32:	0049      	lsls	r1, r1, #1
 8001c34:	430a      	orrs	r2, r1
 8001c36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c38:	f7ff f92c 	bl	8000e94 <HAL_GetTick>
 8001c3c:	0003      	movs	r3, r0
 8001c3e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c40:	e008      	b.n	8001c54 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c42:	f7ff f927 	bl	8000e94 <HAL_GetTick>
 8001c46:	0002      	movs	r2, r0
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d901      	bls.n	8001c54 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e1fe      	b.n	8002052 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c54:	4b4b      	ldr	r3, [pc, #300]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	2380      	movs	r3, #128	; 0x80
 8001c5a:	00db      	lsls	r3, r3, #3
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	d0f0      	beq.n	8001c42 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c60:	4b48      	ldr	r3, [pc, #288]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	4a4a      	ldr	r2, [pc, #296]	; (8001d90 <HAL_RCC_OscConfig+0x338>)
 8001c66:	4013      	ands	r3, r2
 8001c68:	0019      	movs	r1, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	695b      	ldr	r3, [r3, #20]
 8001c6e:	021a      	lsls	r2, r3, #8
 8001c70:	4b44      	ldr	r3, [pc, #272]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001c72:	430a      	orrs	r2, r1
 8001c74:	605a      	str	r2, [r3, #4]
 8001c76:	e01b      	b.n	8001cb0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001c78:	4b42      	ldr	r3, [pc, #264]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	4b41      	ldr	r3, [pc, #260]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001c7e:	4949      	ldr	r1, [pc, #292]	; (8001da4 <HAL_RCC_OscConfig+0x34c>)
 8001c80:	400a      	ands	r2, r1
 8001c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c84:	f7ff f906 	bl	8000e94 <HAL_GetTick>
 8001c88:	0003      	movs	r3, r0
 8001c8a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c8c:	e008      	b.n	8001ca0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c8e:	f7ff f901 	bl	8000e94 <HAL_GetTick>
 8001c92:	0002      	movs	r2, r0
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e1d8      	b.n	8002052 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ca0:	4b38      	ldr	r3, [pc, #224]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	2380      	movs	r3, #128	; 0x80
 8001ca6:	00db      	lsls	r3, r3, #3
 8001ca8:	4013      	ands	r3, r2
 8001caa:	d1f0      	bne.n	8001c8e <HAL_RCC_OscConfig+0x236>
 8001cac:	e000      	b.n	8001cb0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cae:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2208      	movs	r2, #8
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	d047      	beq.n	8001d4a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001cba:	4b32      	ldr	r3, [pc, #200]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	2238      	movs	r2, #56	; 0x38
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	2b18      	cmp	r3, #24
 8001cc4:	d10a      	bne.n	8001cdc <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001cc6:	4b2f      	ldr	r3, [pc, #188]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001cc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cca:	2202      	movs	r2, #2
 8001ccc:	4013      	ands	r3, r2
 8001cce:	d03c      	beq.n	8001d4a <HAL_RCC_OscConfig+0x2f2>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d138      	bne.n	8001d4a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e1ba      	b.n	8002052 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d019      	beq.n	8001d18 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001ce4:	4b27      	ldr	r3, [pc, #156]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001ce6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ce8:	4b26      	ldr	r3, [pc, #152]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001cea:	2101      	movs	r1, #1
 8001cec:	430a      	orrs	r2, r1
 8001cee:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf0:	f7ff f8d0 	bl	8000e94 <HAL_GetTick>
 8001cf4:	0003      	movs	r3, r0
 8001cf6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cf8:	e008      	b.n	8001d0c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cfa:	f7ff f8cb 	bl	8000e94 <HAL_GetTick>
 8001cfe:	0002      	movs	r2, r0
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d901      	bls.n	8001d0c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e1a2      	b.n	8002052 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d0c:	4b1d      	ldr	r3, [pc, #116]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001d0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d10:	2202      	movs	r2, #2
 8001d12:	4013      	ands	r3, r2
 8001d14:	d0f1      	beq.n	8001cfa <HAL_RCC_OscConfig+0x2a2>
 8001d16:	e018      	b.n	8001d4a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001d18:	4b1a      	ldr	r3, [pc, #104]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001d1a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d1c:	4b19      	ldr	r3, [pc, #100]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001d1e:	2101      	movs	r1, #1
 8001d20:	438a      	bics	r2, r1
 8001d22:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d24:	f7ff f8b6 	bl	8000e94 <HAL_GetTick>
 8001d28:	0003      	movs	r3, r0
 8001d2a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d2c:	e008      	b.n	8001d40 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d2e:	f7ff f8b1 	bl	8000e94 <HAL_GetTick>
 8001d32:	0002      	movs	r2, r0
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d901      	bls.n	8001d40 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e188      	b.n	8002052 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d40:	4b10      	ldr	r3, [pc, #64]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001d42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d44:	2202      	movs	r2, #2
 8001d46:	4013      	ands	r3, r2
 8001d48:	d1f1      	bne.n	8001d2e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2204      	movs	r2, #4
 8001d50:	4013      	ands	r3, r2
 8001d52:	d100      	bne.n	8001d56 <HAL_RCC_OscConfig+0x2fe>
 8001d54:	e0c6      	b.n	8001ee4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d56:	231f      	movs	r3, #31
 8001d58:	18fb      	adds	r3, r7, r3
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001d5e:	4b09      	ldr	r3, [pc, #36]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	2238      	movs	r2, #56	; 0x38
 8001d64:	4013      	ands	r3, r2
 8001d66:	2b20      	cmp	r3, #32
 8001d68:	d11e      	bne.n	8001da8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001d6a:	4b06      	ldr	r3, [pc, #24]	; (8001d84 <HAL_RCC_OscConfig+0x32c>)
 8001d6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d6e:	2202      	movs	r2, #2
 8001d70:	4013      	ands	r3, r2
 8001d72:	d100      	bne.n	8001d76 <HAL_RCC_OscConfig+0x31e>
 8001d74:	e0b6      	b.n	8001ee4 <HAL_RCC_OscConfig+0x48c>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d000      	beq.n	8001d80 <HAL_RCC_OscConfig+0x328>
 8001d7e:	e0b1      	b.n	8001ee4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e166      	b.n	8002052 <HAL_RCC_OscConfig+0x5fa>
 8001d84:	40021000 	.word	0x40021000
 8001d88:	fffeffff 	.word	0xfffeffff
 8001d8c:	fffbffff 	.word	0xfffbffff
 8001d90:	ffff80ff 	.word	0xffff80ff
 8001d94:	ffffc7ff 	.word	0xffffc7ff
 8001d98:	00f42400 	.word	0x00f42400
 8001d9c:	20000004 	.word	0x20000004
 8001da0:	20000008 	.word	0x20000008
 8001da4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001da8:	4bac      	ldr	r3, [pc, #688]	; (800205c <HAL_RCC_OscConfig+0x604>)
 8001daa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001dac:	2380      	movs	r3, #128	; 0x80
 8001dae:	055b      	lsls	r3, r3, #21
 8001db0:	4013      	ands	r3, r2
 8001db2:	d101      	bne.n	8001db8 <HAL_RCC_OscConfig+0x360>
 8001db4:	2301      	movs	r3, #1
 8001db6:	e000      	b.n	8001dba <HAL_RCC_OscConfig+0x362>
 8001db8:	2300      	movs	r3, #0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d011      	beq.n	8001de2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001dbe:	4ba7      	ldr	r3, [pc, #668]	; (800205c <HAL_RCC_OscConfig+0x604>)
 8001dc0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001dc2:	4ba6      	ldr	r3, [pc, #664]	; (800205c <HAL_RCC_OscConfig+0x604>)
 8001dc4:	2180      	movs	r1, #128	; 0x80
 8001dc6:	0549      	lsls	r1, r1, #21
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	63da      	str	r2, [r3, #60]	; 0x3c
 8001dcc:	4ba3      	ldr	r3, [pc, #652]	; (800205c <HAL_RCC_OscConfig+0x604>)
 8001dce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001dd0:	2380      	movs	r3, #128	; 0x80
 8001dd2:	055b      	lsls	r3, r3, #21
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	60fb      	str	r3, [r7, #12]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001dda:	231f      	movs	r3, #31
 8001ddc:	18fb      	adds	r3, r7, r3
 8001dde:	2201      	movs	r2, #1
 8001de0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001de2:	4b9f      	ldr	r3, [pc, #636]	; (8002060 <HAL_RCC_OscConfig+0x608>)
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	2380      	movs	r3, #128	; 0x80
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	4013      	ands	r3, r2
 8001dec:	d11a      	bne.n	8001e24 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001dee:	4b9c      	ldr	r3, [pc, #624]	; (8002060 <HAL_RCC_OscConfig+0x608>)
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	4b9b      	ldr	r3, [pc, #620]	; (8002060 <HAL_RCC_OscConfig+0x608>)
 8001df4:	2180      	movs	r1, #128	; 0x80
 8001df6:	0049      	lsls	r1, r1, #1
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001dfc:	f7ff f84a 	bl	8000e94 <HAL_GetTick>
 8001e00:	0003      	movs	r3, r0
 8001e02:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e04:	e008      	b.n	8001e18 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e06:	f7ff f845 	bl	8000e94 <HAL_GetTick>
 8001e0a:	0002      	movs	r2, r0
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d901      	bls.n	8001e18 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e11c      	b.n	8002052 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e18:	4b91      	ldr	r3, [pc, #580]	; (8002060 <HAL_RCC_OscConfig+0x608>)
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	2380      	movs	r3, #128	; 0x80
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	4013      	ands	r3, r2
 8001e22:	d0f0      	beq.n	8001e06 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d106      	bne.n	8001e3a <HAL_RCC_OscConfig+0x3e2>
 8001e2c:	4b8b      	ldr	r3, [pc, #556]	; (800205c <HAL_RCC_OscConfig+0x604>)
 8001e2e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e30:	4b8a      	ldr	r3, [pc, #552]	; (800205c <HAL_RCC_OscConfig+0x604>)
 8001e32:	2101      	movs	r1, #1
 8001e34:	430a      	orrs	r2, r1
 8001e36:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e38:	e01c      	b.n	8001e74 <HAL_RCC_OscConfig+0x41c>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	2b05      	cmp	r3, #5
 8001e40:	d10c      	bne.n	8001e5c <HAL_RCC_OscConfig+0x404>
 8001e42:	4b86      	ldr	r3, [pc, #536]	; (800205c <HAL_RCC_OscConfig+0x604>)
 8001e44:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e46:	4b85      	ldr	r3, [pc, #532]	; (800205c <HAL_RCC_OscConfig+0x604>)
 8001e48:	2104      	movs	r1, #4
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e4e:	4b83      	ldr	r3, [pc, #524]	; (800205c <HAL_RCC_OscConfig+0x604>)
 8001e50:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e52:	4b82      	ldr	r3, [pc, #520]	; (800205c <HAL_RCC_OscConfig+0x604>)
 8001e54:	2101      	movs	r1, #1
 8001e56:	430a      	orrs	r2, r1
 8001e58:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e5a:	e00b      	b.n	8001e74 <HAL_RCC_OscConfig+0x41c>
 8001e5c:	4b7f      	ldr	r3, [pc, #508]	; (800205c <HAL_RCC_OscConfig+0x604>)
 8001e5e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e60:	4b7e      	ldr	r3, [pc, #504]	; (800205c <HAL_RCC_OscConfig+0x604>)
 8001e62:	2101      	movs	r1, #1
 8001e64:	438a      	bics	r2, r1
 8001e66:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e68:	4b7c      	ldr	r3, [pc, #496]	; (800205c <HAL_RCC_OscConfig+0x604>)
 8001e6a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e6c:	4b7b      	ldr	r3, [pc, #492]	; (800205c <HAL_RCC_OscConfig+0x604>)
 8001e6e:	2104      	movs	r1, #4
 8001e70:	438a      	bics	r2, r1
 8001e72:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d014      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e7c:	f7ff f80a 	bl	8000e94 <HAL_GetTick>
 8001e80:	0003      	movs	r3, r0
 8001e82:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e84:	e009      	b.n	8001e9a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e86:	f7ff f805 	bl	8000e94 <HAL_GetTick>
 8001e8a:	0002      	movs	r2, r0
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	4a74      	ldr	r2, [pc, #464]	; (8002064 <HAL_RCC_OscConfig+0x60c>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e0db      	b.n	8002052 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e9a:	4b70      	ldr	r3, [pc, #448]	; (800205c <HAL_RCC_OscConfig+0x604>)
 8001e9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e9e:	2202      	movs	r2, #2
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	d0f0      	beq.n	8001e86 <HAL_RCC_OscConfig+0x42e>
 8001ea4:	e013      	b.n	8001ece <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea6:	f7fe fff5 	bl	8000e94 <HAL_GetTick>
 8001eaa:	0003      	movs	r3, r0
 8001eac:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001eae:	e009      	b.n	8001ec4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eb0:	f7fe fff0 	bl	8000e94 <HAL_GetTick>
 8001eb4:	0002      	movs	r2, r0
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	4a6a      	ldr	r2, [pc, #424]	; (8002064 <HAL_RCC_OscConfig+0x60c>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d901      	bls.n	8001ec4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e0c6      	b.n	8002052 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ec4:	4b65      	ldr	r3, [pc, #404]	; (800205c <HAL_RCC_OscConfig+0x604>)
 8001ec6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ec8:	2202      	movs	r2, #2
 8001eca:	4013      	ands	r3, r2
 8001ecc:	d1f0      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001ece:	231f      	movs	r3, #31
 8001ed0:	18fb      	adds	r3, r7, r3
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d105      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001ed8:	4b60      	ldr	r3, [pc, #384]	; (800205c <HAL_RCC_OscConfig+0x604>)
 8001eda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001edc:	4b5f      	ldr	r3, [pc, #380]	; (800205c <HAL_RCC_OscConfig+0x604>)
 8001ede:	4962      	ldr	r1, [pc, #392]	; (8002068 <HAL_RCC_OscConfig+0x610>)
 8001ee0:	400a      	ands	r2, r1
 8001ee2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	69db      	ldr	r3, [r3, #28]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d100      	bne.n	8001eee <HAL_RCC_OscConfig+0x496>
 8001eec:	e0b0      	b.n	8002050 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001eee:	4b5b      	ldr	r3, [pc, #364]	; (800205c <HAL_RCC_OscConfig+0x604>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	2238      	movs	r2, #56	; 0x38
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	2b10      	cmp	r3, #16
 8001ef8:	d100      	bne.n	8001efc <HAL_RCC_OscConfig+0x4a4>
 8001efa:	e078      	b.n	8001fee <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	69db      	ldr	r3, [r3, #28]
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d153      	bne.n	8001fac <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f04:	4b55      	ldr	r3, [pc, #340]	; (800205c <HAL_RCC_OscConfig+0x604>)
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	4b54      	ldr	r3, [pc, #336]	; (800205c <HAL_RCC_OscConfig+0x604>)
 8001f0a:	4958      	ldr	r1, [pc, #352]	; (800206c <HAL_RCC_OscConfig+0x614>)
 8001f0c:	400a      	ands	r2, r1
 8001f0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f10:	f7fe ffc0 	bl	8000e94 <HAL_GetTick>
 8001f14:	0003      	movs	r3, r0
 8001f16:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f18:	e008      	b.n	8001f2c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f1a:	f7fe ffbb 	bl	8000e94 <HAL_GetTick>
 8001f1e:	0002      	movs	r2, r0
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d901      	bls.n	8001f2c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e092      	b.n	8002052 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f2c:	4b4b      	ldr	r3, [pc, #300]	; (800205c <HAL_RCC_OscConfig+0x604>)
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	2380      	movs	r3, #128	; 0x80
 8001f32:	049b      	lsls	r3, r3, #18
 8001f34:	4013      	ands	r3, r2
 8001f36:	d1f0      	bne.n	8001f1a <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f38:	4b48      	ldr	r3, [pc, #288]	; (800205c <HAL_RCC_OscConfig+0x604>)
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	4a4c      	ldr	r2, [pc, #304]	; (8002070 <HAL_RCC_OscConfig+0x618>)
 8001f3e:	4013      	ands	r3, r2
 8001f40:	0019      	movs	r1, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a1a      	ldr	r2, [r3, #32]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4a:	431a      	orrs	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f50:	021b      	lsls	r3, r3, #8
 8001f52:	431a      	orrs	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f58:	431a      	orrs	r2, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5e:	431a      	orrs	r2, r3
 8001f60:	4b3e      	ldr	r3, [pc, #248]	; (800205c <HAL_RCC_OscConfig+0x604>)
 8001f62:	430a      	orrs	r2, r1
 8001f64:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f66:	4b3d      	ldr	r3, [pc, #244]	; (800205c <HAL_RCC_OscConfig+0x604>)
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	4b3c      	ldr	r3, [pc, #240]	; (800205c <HAL_RCC_OscConfig+0x604>)
 8001f6c:	2180      	movs	r1, #128	; 0x80
 8001f6e:	0449      	lsls	r1, r1, #17
 8001f70:	430a      	orrs	r2, r1
 8001f72:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001f74:	4b39      	ldr	r3, [pc, #228]	; (800205c <HAL_RCC_OscConfig+0x604>)
 8001f76:	68da      	ldr	r2, [r3, #12]
 8001f78:	4b38      	ldr	r3, [pc, #224]	; (800205c <HAL_RCC_OscConfig+0x604>)
 8001f7a:	2180      	movs	r1, #128	; 0x80
 8001f7c:	0549      	lsls	r1, r1, #21
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f82:	f7fe ff87 	bl	8000e94 <HAL_GetTick>
 8001f86:	0003      	movs	r3, r0
 8001f88:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f8c:	f7fe ff82 	bl	8000e94 <HAL_GetTick>
 8001f90:	0002      	movs	r2, r0
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e059      	b.n	8002052 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f9e:	4b2f      	ldr	r3, [pc, #188]	; (800205c <HAL_RCC_OscConfig+0x604>)
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	2380      	movs	r3, #128	; 0x80
 8001fa4:	049b      	lsls	r3, r3, #18
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	d0f0      	beq.n	8001f8c <HAL_RCC_OscConfig+0x534>
 8001faa:	e051      	b.n	8002050 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fac:	4b2b      	ldr	r3, [pc, #172]	; (800205c <HAL_RCC_OscConfig+0x604>)
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	4b2a      	ldr	r3, [pc, #168]	; (800205c <HAL_RCC_OscConfig+0x604>)
 8001fb2:	492e      	ldr	r1, [pc, #184]	; (800206c <HAL_RCC_OscConfig+0x614>)
 8001fb4:	400a      	ands	r2, r1
 8001fb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb8:	f7fe ff6c 	bl	8000e94 <HAL_GetTick>
 8001fbc:	0003      	movs	r3, r0
 8001fbe:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fc0:	e008      	b.n	8001fd4 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fc2:	f7fe ff67 	bl	8000e94 <HAL_GetTick>
 8001fc6:	0002      	movs	r2, r0
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d901      	bls.n	8001fd4 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e03e      	b.n	8002052 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fd4:	4b21      	ldr	r3, [pc, #132]	; (800205c <HAL_RCC_OscConfig+0x604>)
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	2380      	movs	r3, #128	; 0x80
 8001fda:	049b      	lsls	r3, r3, #18
 8001fdc:	4013      	ands	r3, r2
 8001fde:	d1f0      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001fe0:	4b1e      	ldr	r3, [pc, #120]	; (800205c <HAL_RCC_OscConfig+0x604>)
 8001fe2:	68da      	ldr	r2, [r3, #12]
 8001fe4:	4b1d      	ldr	r3, [pc, #116]	; (800205c <HAL_RCC_OscConfig+0x604>)
 8001fe6:	4923      	ldr	r1, [pc, #140]	; (8002074 <HAL_RCC_OscConfig+0x61c>)
 8001fe8:	400a      	ands	r2, r1
 8001fea:	60da      	str	r2, [r3, #12]
 8001fec:	e030      	b.n	8002050 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	69db      	ldr	r3, [r3, #28]
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d101      	bne.n	8001ffa <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e02b      	b.n	8002052 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001ffa:	4b18      	ldr	r3, [pc, #96]	; (800205c <HAL_RCC_OscConfig+0x604>)
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	2203      	movs	r2, #3
 8002004:	401a      	ands	r2, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6a1b      	ldr	r3, [r3, #32]
 800200a:	429a      	cmp	r2, r3
 800200c:	d11e      	bne.n	800204c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	2270      	movs	r2, #112	; 0x70
 8002012:	401a      	ands	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002018:	429a      	cmp	r2, r3
 800201a:	d117      	bne.n	800204c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800201c:	697a      	ldr	r2, [r7, #20]
 800201e:	23fe      	movs	r3, #254	; 0xfe
 8002020:	01db      	lsls	r3, r3, #7
 8002022:	401a      	ands	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002028:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800202a:	429a      	cmp	r2, r3
 800202c:	d10e      	bne.n	800204c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800202e:	697a      	ldr	r2, [r7, #20]
 8002030:	23f8      	movs	r3, #248	; 0xf8
 8002032:	039b      	lsls	r3, r3, #14
 8002034:	401a      	ands	r2, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800203a:	429a      	cmp	r2, r3
 800203c:	d106      	bne.n	800204c <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	0f5b      	lsrs	r3, r3, #29
 8002042:	075a      	lsls	r2, r3, #29
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002048:	429a      	cmp	r2, r3
 800204a:	d001      	beq.n	8002050 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e000      	b.n	8002052 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8002050:	2300      	movs	r3, #0
}
 8002052:	0018      	movs	r0, r3
 8002054:	46bd      	mov	sp, r7
 8002056:	b008      	add	sp, #32
 8002058:	bd80      	pop	{r7, pc}
 800205a:	46c0      	nop			; (mov r8, r8)
 800205c:	40021000 	.word	0x40021000
 8002060:	40007000 	.word	0x40007000
 8002064:	00001388 	.word	0x00001388
 8002068:	efffffff 	.word	0xefffffff
 800206c:	feffffff 	.word	0xfeffffff
 8002070:	1fc1808c 	.word	0x1fc1808c
 8002074:	effefffc 	.word	0xeffefffc

08002078 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d101      	bne.n	800208c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e0e9      	b.n	8002260 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800208c:	4b76      	ldr	r3, [pc, #472]	; (8002268 <HAL_RCC_ClockConfig+0x1f0>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2207      	movs	r2, #7
 8002092:	4013      	ands	r3, r2
 8002094:	683a      	ldr	r2, [r7, #0]
 8002096:	429a      	cmp	r2, r3
 8002098:	d91e      	bls.n	80020d8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800209a:	4b73      	ldr	r3, [pc, #460]	; (8002268 <HAL_RCC_ClockConfig+0x1f0>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2207      	movs	r2, #7
 80020a0:	4393      	bics	r3, r2
 80020a2:	0019      	movs	r1, r3
 80020a4:	4b70      	ldr	r3, [pc, #448]	; (8002268 <HAL_RCC_ClockConfig+0x1f0>)
 80020a6:	683a      	ldr	r2, [r7, #0]
 80020a8:	430a      	orrs	r2, r1
 80020aa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80020ac:	f7fe fef2 	bl	8000e94 <HAL_GetTick>
 80020b0:	0003      	movs	r3, r0
 80020b2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80020b4:	e009      	b.n	80020ca <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020b6:	f7fe feed 	bl	8000e94 <HAL_GetTick>
 80020ba:	0002      	movs	r2, r0
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	4a6a      	ldr	r2, [pc, #424]	; (800226c <HAL_RCC_ClockConfig+0x1f4>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e0ca      	b.n	8002260 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80020ca:	4b67      	ldr	r3, [pc, #412]	; (8002268 <HAL_RCC_ClockConfig+0x1f0>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2207      	movs	r2, #7
 80020d0:	4013      	ands	r3, r2
 80020d2:	683a      	ldr	r2, [r7, #0]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d1ee      	bne.n	80020b6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2202      	movs	r2, #2
 80020de:	4013      	ands	r3, r2
 80020e0:	d015      	beq.n	800210e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2204      	movs	r2, #4
 80020e8:	4013      	ands	r3, r2
 80020ea:	d006      	beq.n	80020fa <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80020ec:	4b60      	ldr	r3, [pc, #384]	; (8002270 <HAL_RCC_ClockConfig+0x1f8>)
 80020ee:	689a      	ldr	r2, [r3, #8]
 80020f0:	4b5f      	ldr	r3, [pc, #380]	; (8002270 <HAL_RCC_ClockConfig+0x1f8>)
 80020f2:	21e0      	movs	r1, #224	; 0xe0
 80020f4:	01c9      	lsls	r1, r1, #7
 80020f6:	430a      	orrs	r2, r1
 80020f8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020fa:	4b5d      	ldr	r3, [pc, #372]	; (8002270 <HAL_RCC_ClockConfig+0x1f8>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	4a5d      	ldr	r2, [pc, #372]	; (8002274 <HAL_RCC_ClockConfig+0x1fc>)
 8002100:	4013      	ands	r3, r2
 8002102:	0019      	movs	r1, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689a      	ldr	r2, [r3, #8]
 8002108:	4b59      	ldr	r3, [pc, #356]	; (8002270 <HAL_RCC_ClockConfig+0x1f8>)
 800210a:	430a      	orrs	r2, r1
 800210c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2201      	movs	r2, #1
 8002114:	4013      	ands	r3, r2
 8002116:	d057      	beq.n	80021c8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	2b01      	cmp	r3, #1
 800211e:	d107      	bne.n	8002130 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002120:	4b53      	ldr	r3, [pc, #332]	; (8002270 <HAL_RCC_ClockConfig+0x1f8>)
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	2380      	movs	r3, #128	; 0x80
 8002126:	029b      	lsls	r3, r3, #10
 8002128:	4013      	ands	r3, r2
 800212a:	d12b      	bne.n	8002184 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e097      	b.n	8002260 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	2b02      	cmp	r3, #2
 8002136:	d107      	bne.n	8002148 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002138:	4b4d      	ldr	r3, [pc, #308]	; (8002270 <HAL_RCC_ClockConfig+0x1f8>)
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	2380      	movs	r3, #128	; 0x80
 800213e:	049b      	lsls	r3, r3, #18
 8002140:	4013      	ands	r3, r2
 8002142:	d11f      	bne.n	8002184 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e08b      	b.n	8002260 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d107      	bne.n	8002160 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002150:	4b47      	ldr	r3, [pc, #284]	; (8002270 <HAL_RCC_ClockConfig+0x1f8>)
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	2380      	movs	r3, #128	; 0x80
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	4013      	ands	r3, r2
 800215a:	d113      	bne.n	8002184 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e07f      	b.n	8002260 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	2b03      	cmp	r3, #3
 8002166:	d106      	bne.n	8002176 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002168:	4b41      	ldr	r3, [pc, #260]	; (8002270 <HAL_RCC_ClockConfig+0x1f8>)
 800216a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800216c:	2202      	movs	r2, #2
 800216e:	4013      	ands	r3, r2
 8002170:	d108      	bne.n	8002184 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e074      	b.n	8002260 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002176:	4b3e      	ldr	r3, [pc, #248]	; (8002270 <HAL_RCC_ClockConfig+0x1f8>)
 8002178:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800217a:	2202      	movs	r2, #2
 800217c:	4013      	ands	r3, r2
 800217e:	d101      	bne.n	8002184 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e06d      	b.n	8002260 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002184:	4b3a      	ldr	r3, [pc, #232]	; (8002270 <HAL_RCC_ClockConfig+0x1f8>)
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	2207      	movs	r2, #7
 800218a:	4393      	bics	r3, r2
 800218c:	0019      	movs	r1, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685a      	ldr	r2, [r3, #4]
 8002192:	4b37      	ldr	r3, [pc, #220]	; (8002270 <HAL_RCC_ClockConfig+0x1f8>)
 8002194:	430a      	orrs	r2, r1
 8002196:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002198:	f7fe fe7c 	bl	8000e94 <HAL_GetTick>
 800219c:	0003      	movs	r3, r0
 800219e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021a0:	e009      	b.n	80021b6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021a2:	f7fe fe77 	bl	8000e94 <HAL_GetTick>
 80021a6:	0002      	movs	r2, r0
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	4a2f      	ldr	r2, [pc, #188]	; (800226c <HAL_RCC_ClockConfig+0x1f4>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e054      	b.n	8002260 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021b6:	4b2e      	ldr	r3, [pc, #184]	; (8002270 <HAL_RCC_ClockConfig+0x1f8>)
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	2238      	movs	r2, #56	; 0x38
 80021bc:	401a      	ands	r2, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d1ec      	bne.n	80021a2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021c8:	4b27      	ldr	r3, [pc, #156]	; (8002268 <HAL_RCC_ClockConfig+0x1f0>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2207      	movs	r2, #7
 80021ce:	4013      	ands	r3, r2
 80021d0:	683a      	ldr	r2, [r7, #0]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d21e      	bcs.n	8002214 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021d6:	4b24      	ldr	r3, [pc, #144]	; (8002268 <HAL_RCC_ClockConfig+0x1f0>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	2207      	movs	r2, #7
 80021dc:	4393      	bics	r3, r2
 80021de:	0019      	movs	r1, r3
 80021e0:	4b21      	ldr	r3, [pc, #132]	; (8002268 <HAL_RCC_ClockConfig+0x1f0>)
 80021e2:	683a      	ldr	r2, [r7, #0]
 80021e4:	430a      	orrs	r2, r1
 80021e6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80021e8:	f7fe fe54 	bl	8000e94 <HAL_GetTick>
 80021ec:	0003      	movs	r3, r0
 80021ee:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80021f0:	e009      	b.n	8002206 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021f2:	f7fe fe4f 	bl	8000e94 <HAL_GetTick>
 80021f6:	0002      	movs	r2, r0
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	4a1b      	ldr	r2, [pc, #108]	; (800226c <HAL_RCC_ClockConfig+0x1f4>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d901      	bls.n	8002206 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e02c      	b.n	8002260 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002206:	4b18      	ldr	r3, [pc, #96]	; (8002268 <HAL_RCC_ClockConfig+0x1f0>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2207      	movs	r2, #7
 800220c:	4013      	ands	r3, r2
 800220e:	683a      	ldr	r2, [r7, #0]
 8002210:	429a      	cmp	r2, r3
 8002212:	d1ee      	bne.n	80021f2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2204      	movs	r2, #4
 800221a:	4013      	ands	r3, r2
 800221c:	d009      	beq.n	8002232 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800221e:	4b14      	ldr	r3, [pc, #80]	; (8002270 <HAL_RCC_ClockConfig+0x1f8>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	4a15      	ldr	r2, [pc, #84]	; (8002278 <HAL_RCC_ClockConfig+0x200>)
 8002224:	4013      	ands	r3, r2
 8002226:	0019      	movs	r1, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	68da      	ldr	r2, [r3, #12]
 800222c:	4b10      	ldr	r3, [pc, #64]	; (8002270 <HAL_RCC_ClockConfig+0x1f8>)
 800222e:	430a      	orrs	r2, r1
 8002230:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002232:	f000 f829 	bl	8002288 <HAL_RCC_GetSysClockFreq>
 8002236:	0001      	movs	r1, r0
 8002238:	4b0d      	ldr	r3, [pc, #52]	; (8002270 <HAL_RCC_ClockConfig+0x1f8>)
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	0a1b      	lsrs	r3, r3, #8
 800223e:	220f      	movs	r2, #15
 8002240:	401a      	ands	r2, r3
 8002242:	4b0e      	ldr	r3, [pc, #56]	; (800227c <HAL_RCC_ClockConfig+0x204>)
 8002244:	0092      	lsls	r2, r2, #2
 8002246:	58d3      	ldr	r3, [r2, r3]
 8002248:	221f      	movs	r2, #31
 800224a:	4013      	ands	r3, r2
 800224c:	000a      	movs	r2, r1
 800224e:	40da      	lsrs	r2, r3
 8002250:	4b0b      	ldr	r3, [pc, #44]	; (8002280 <HAL_RCC_ClockConfig+0x208>)
 8002252:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002254:	4b0b      	ldr	r3, [pc, #44]	; (8002284 <HAL_RCC_ClockConfig+0x20c>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	0018      	movs	r0, r3
 800225a:	f7fe fdbf 	bl	8000ddc <HAL_InitTick>
 800225e:	0003      	movs	r3, r0
}
 8002260:	0018      	movs	r0, r3
 8002262:	46bd      	mov	sp, r7
 8002264:	b004      	add	sp, #16
 8002266:	bd80      	pop	{r7, pc}
 8002268:	40022000 	.word	0x40022000
 800226c:	00001388 	.word	0x00001388
 8002270:	40021000 	.word	0x40021000
 8002274:	fffff0ff 	.word	0xfffff0ff
 8002278:	ffff8fff 	.word	0xffff8fff
 800227c:	08003964 	.word	0x08003964
 8002280:	20000004 	.word	0x20000004
 8002284:	20000008 	.word	0x20000008

08002288 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800228e:	4b3c      	ldr	r3, [pc, #240]	; (8002380 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	2238      	movs	r2, #56	; 0x38
 8002294:	4013      	ands	r3, r2
 8002296:	d10f      	bne.n	80022b8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002298:	4b39      	ldr	r3, [pc, #228]	; (8002380 <HAL_RCC_GetSysClockFreq+0xf8>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	0adb      	lsrs	r3, r3, #11
 800229e:	2207      	movs	r2, #7
 80022a0:	4013      	ands	r3, r2
 80022a2:	2201      	movs	r2, #1
 80022a4:	409a      	lsls	r2, r3
 80022a6:	0013      	movs	r3, r2
 80022a8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80022aa:	6839      	ldr	r1, [r7, #0]
 80022ac:	4835      	ldr	r0, [pc, #212]	; (8002384 <HAL_RCC_GetSysClockFreq+0xfc>)
 80022ae:	f7fd ff27 	bl	8000100 <__udivsi3>
 80022b2:	0003      	movs	r3, r0
 80022b4:	613b      	str	r3, [r7, #16]
 80022b6:	e05d      	b.n	8002374 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022b8:	4b31      	ldr	r3, [pc, #196]	; (8002380 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	2238      	movs	r2, #56	; 0x38
 80022be:	4013      	ands	r3, r2
 80022c0:	2b08      	cmp	r3, #8
 80022c2:	d102      	bne.n	80022ca <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80022c4:	4b30      	ldr	r3, [pc, #192]	; (8002388 <HAL_RCC_GetSysClockFreq+0x100>)
 80022c6:	613b      	str	r3, [r7, #16]
 80022c8:	e054      	b.n	8002374 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022ca:	4b2d      	ldr	r3, [pc, #180]	; (8002380 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	2238      	movs	r2, #56	; 0x38
 80022d0:	4013      	ands	r3, r2
 80022d2:	2b10      	cmp	r3, #16
 80022d4:	d138      	bne.n	8002348 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80022d6:	4b2a      	ldr	r3, [pc, #168]	; (8002380 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	2203      	movs	r2, #3
 80022dc:	4013      	ands	r3, r2
 80022de:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80022e0:	4b27      	ldr	r3, [pc, #156]	; (8002380 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	091b      	lsrs	r3, r3, #4
 80022e6:	2207      	movs	r2, #7
 80022e8:	4013      	ands	r3, r2
 80022ea:	3301      	adds	r3, #1
 80022ec:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2b03      	cmp	r3, #3
 80022f2:	d10d      	bne.n	8002310 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80022f4:	68b9      	ldr	r1, [r7, #8]
 80022f6:	4824      	ldr	r0, [pc, #144]	; (8002388 <HAL_RCC_GetSysClockFreq+0x100>)
 80022f8:	f7fd ff02 	bl	8000100 <__udivsi3>
 80022fc:	0003      	movs	r3, r0
 80022fe:	0019      	movs	r1, r3
 8002300:	4b1f      	ldr	r3, [pc, #124]	; (8002380 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	0a1b      	lsrs	r3, r3, #8
 8002306:	227f      	movs	r2, #127	; 0x7f
 8002308:	4013      	ands	r3, r2
 800230a:	434b      	muls	r3, r1
 800230c:	617b      	str	r3, [r7, #20]
        break;
 800230e:	e00d      	b.n	800232c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002310:	68b9      	ldr	r1, [r7, #8]
 8002312:	481c      	ldr	r0, [pc, #112]	; (8002384 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002314:	f7fd fef4 	bl	8000100 <__udivsi3>
 8002318:	0003      	movs	r3, r0
 800231a:	0019      	movs	r1, r3
 800231c:	4b18      	ldr	r3, [pc, #96]	; (8002380 <HAL_RCC_GetSysClockFreq+0xf8>)
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	0a1b      	lsrs	r3, r3, #8
 8002322:	227f      	movs	r2, #127	; 0x7f
 8002324:	4013      	ands	r3, r2
 8002326:	434b      	muls	r3, r1
 8002328:	617b      	str	r3, [r7, #20]
        break;
 800232a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800232c:	4b14      	ldr	r3, [pc, #80]	; (8002380 <HAL_RCC_GetSysClockFreq+0xf8>)
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	0f5b      	lsrs	r3, r3, #29
 8002332:	2207      	movs	r2, #7
 8002334:	4013      	ands	r3, r2
 8002336:	3301      	adds	r3, #1
 8002338:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800233a:	6879      	ldr	r1, [r7, #4]
 800233c:	6978      	ldr	r0, [r7, #20]
 800233e:	f7fd fedf 	bl	8000100 <__udivsi3>
 8002342:	0003      	movs	r3, r0
 8002344:	613b      	str	r3, [r7, #16]
 8002346:	e015      	b.n	8002374 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002348:	4b0d      	ldr	r3, [pc, #52]	; (8002380 <HAL_RCC_GetSysClockFreq+0xf8>)
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	2238      	movs	r2, #56	; 0x38
 800234e:	4013      	ands	r3, r2
 8002350:	2b20      	cmp	r3, #32
 8002352:	d103      	bne.n	800235c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002354:	2380      	movs	r3, #128	; 0x80
 8002356:	021b      	lsls	r3, r3, #8
 8002358:	613b      	str	r3, [r7, #16]
 800235a:	e00b      	b.n	8002374 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800235c:	4b08      	ldr	r3, [pc, #32]	; (8002380 <HAL_RCC_GetSysClockFreq+0xf8>)
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	2238      	movs	r2, #56	; 0x38
 8002362:	4013      	ands	r3, r2
 8002364:	2b18      	cmp	r3, #24
 8002366:	d103      	bne.n	8002370 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002368:	23fa      	movs	r3, #250	; 0xfa
 800236a:	01db      	lsls	r3, r3, #7
 800236c:	613b      	str	r3, [r7, #16]
 800236e:	e001      	b.n	8002374 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002370:	2300      	movs	r3, #0
 8002372:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002374:	693b      	ldr	r3, [r7, #16]
}
 8002376:	0018      	movs	r0, r3
 8002378:	46bd      	mov	sp, r7
 800237a:	b006      	add	sp, #24
 800237c:	bd80      	pop	{r7, pc}
 800237e:	46c0      	nop			; (mov r8, r8)
 8002380:	40021000 	.word	0x40021000
 8002384:	00f42400 	.word	0x00f42400
 8002388:	007a1200 	.word	0x007a1200

0800238c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002390:	4b02      	ldr	r3, [pc, #8]	; (800239c <HAL_RCC_GetHCLKFreq+0x10>)
 8002392:	681b      	ldr	r3, [r3, #0]
}
 8002394:	0018      	movs	r0, r3
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	46c0      	nop			; (mov r8, r8)
 800239c:	20000004 	.word	0x20000004

080023a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023a0:	b5b0      	push	{r4, r5, r7, lr}
 80023a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80023a4:	f7ff fff2 	bl	800238c <HAL_RCC_GetHCLKFreq>
 80023a8:	0004      	movs	r4, r0
 80023aa:	f7ff fb49 	bl	8001a40 <LL_RCC_GetAPB1Prescaler>
 80023ae:	0003      	movs	r3, r0
 80023b0:	0b1a      	lsrs	r2, r3, #12
 80023b2:	4b05      	ldr	r3, [pc, #20]	; (80023c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80023b4:	0092      	lsls	r2, r2, #2
 80023b6:	58d3      	ldr	r3, [r2, r3]
 80023b8:	221f      	movs	r2, #31
 80023ba:	4013      	ands	r3, r2
 80023bc:	40dc      	lsrs	r4, r3
 80023be:	0023      	movs	r3, r4
}
 80023c0:	0018      	movs	r0, r3
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bdb0      	pop	{r4, r5, r7, pc}
 80023c6:	46c0      	nop			; (mov r8, r8)
 80023c8:	080039a4 	.word	0x080039a4

080023cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b086      	sub	sp, #24
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80023d4:	2313      	movs	r3, #19
 80023d6:	18fb      	adds	r3, r7, r3
 80023d8:	2200      	movs	r2, #0
 80023da:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023dc:	2312      	movs	r3, #18
 80023de:	18fb      	adds	r3, r7, r3
 80023e0:	2200      	movs	r2, #0
 80023e2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	2380      	movs	r3, #128	; 0x80
 80023ea:	029b      	lsls	r3, r3, #10
 80023ec:	4013      	ands	r3, r2
 80023ee:	d100      	bne.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80023f0:	e0a3      	b.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023f2:	2011      	movs	r0, #17
 80023f4:	183b      	adds	r3, r7, r0
 80023f6:	2200      	movs	r2, #0
 80023f8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023fa:	4b86      	ldr	r3, [pc, #536]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80023fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023fe:	2380      	movs	r3, #128	; 0x80
 8002400:	055b      	lsls	r3, r3, #21
 8002402:	4013      	ands	r3, r2
 8002404:	d110      	bne.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002406:	4b83      	ldr	r3, [pc, #524]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002408:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800240a:	4b82      	ldr	r3, [pc, #520]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800240c:	2180      	movs	r1, #128	; 0x80
 800240e:	0549      	lsls	r1, r1, #21
 8002410:	430a      	orrs	r2, r1
 8002412:	63da      	str	r2, [r3, #60]	; 0x3c
 8002414:	4b7f      	ldr	r3, [pc, #508]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002416:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002418:	2380      	movs	r3, #128	; 0x80
 800241a:	055b      	lsls	r3, r3, #21
 800241c:	4013      	ands	r3, r2
 800241e:	60bb      	str	r3, [r7, #8]
 8002420:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002422:	183b      	adds	r3, r7, r0
 8002424:	2201      	movs	r2, #1
 8002426:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002428:	4b7b      	ldr	r3, [pc, #492]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	4b7a      	ldr	r3, [pc, #488]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800242e:	2180      	movs	r1, #128	; 0x80
 8002430:	0049      	lsls	r1, r1, #1
 8002432:	430a      	orrs	r2, r1
 8002434:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002436:	f7fe fd2d 	bl	8000e94 <HAL_GetTick>
 800243a:	0003      	movs	r3, r0
 800243c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800243e:	e00b      	b.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002440:	f7fe fd28 	bl	8000e94 <HAL_GetTick>
 8002444:	0002      	movs	r2, r0
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b02      	cmp	r3, #2
 800244c:	d904      	bls.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800244e:	2313      	movs	r3, #19
 8002450:	18fb      	adds	r3, r7, r3
 8002452:	2203      	movs	r2, #3
 8002454:	701a      	strb	r2, [r3, #0]
        break;
 8002456:	e005      	b.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002458:	4b6f      	ldr	r3, [pc, #444]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	2380      	movs	r3, #128	; 0x80
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	4013      	ands	r3, r2
 8002462:	d0ed      	beq.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002464:	2313      	movs	r3, #19
 8002466:	18fb      	adds	r3, r7, r3
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d154      	bne.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800246e:	4b69      	ldr	r3, [pc, #420]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002470:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002472:	23c0      	movs	r3, #192	; 0xc0
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	4013      	ands	r3, r2
 8002478:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d019      	beq.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	697a      	ldr	r2, [r7, #20]
 8002486:	429a      	cmp	r2, r3
 8002488:	d014      	beq.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800248a:	4b62      	ldr	r3, [pc, #392]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800248c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800248e:	4a63      	ldr	r2, [pc, #396]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002490:	4013      	ands	r3, r2
 8002492:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002494:	4b5f      	ldr	r3, [pc, #380]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002496:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002498:	4b5e      	ldr	r3, [pc, #376]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800249a:	2180      	movs	r1, #128	; 0x80
 800249c:	0249      	lsls	r1, r1, #9
 800249e:	430a      	orrs	r2, r1
 80024a0:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80024a2:	4b5c      	ldr	r3, [pc, #368]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80024a4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80024a6:	4b5b      	ldr	r3, [pc, #364]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80024a8:	495d      	ldr	r1, [pc, #372]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80024aa:	400a      	ands	r2, r1
 80024ac:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80024ae:	4b59      	ldr	r3, [pc, #356]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80024b0:	697a      	ldr	r2, [r7, #20]
 80024b2:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	2201      	movs	r2, #1
 80024b8:	4013      	ands	r3, r2
 80024ba:	d016      	beq.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024bc:	f7fe fcea 	bl	8000e94 <HAL_GetTick>
 80024c0:	0003      	movs	r3, r0
 80024c2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024c4:	e00c      	b.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024c6:	f7fe fce5 	bl	8000e94 <HAL_GetTick>
 80024ca:	0002      	movs	r2, r0
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	4a54      	ldr	r2, [pc, #336]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d904      	bls.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80024d6:	2313      	movs	r3, #19
 80024d8:	18fb      	adds	r3, r7, r3
 80024da:	2203      	movs	r2, #3
 80024dc:	701a      	strb	r2, [r3, #0]
            break;
 80024de:	e004      	b.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024e0:	4b4c      	ldr	r3, [pc, #304]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80024e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e4:	2202      	movs	r2, #2
 80024e6:	4013      	ands	r3, r2
 80024e8:	d0ed      	beq.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80024ea:	2313      	movs	r3, #19
 80024ec:	18fb      	adds	r3, r7, r3
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d10a      	bne.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024f4:	4b47      	ldr	r3, [pc, #284]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80024f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f8:	4a48      	ldr	r2, [pc, #288]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80024fa:	4013      	ands	r3, r2
 80024fc:	0019      	movs	r1, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	699a      	ldr	r2, [r3, #24]
 8002502:	4b44      	ldr	r3, [pc, #272]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002504:	430a      	orrs	r2, r1
 8002506:	65da      	str	r2, [r3, #92]	; 0x5c
 8002508:	e00c      	b.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800250a:	2312      	movs	r3, #18
 800250c:	18fb      	adds	r3, r7, r3
 800250e:	2213      	movs	r2, #19
 8002510:	18ba      	adds	r2, r7, r2
 8002512:	7812      	ldrb	r2, [r2, #0]
 8002514:	701a      	strb	r2, [r3, #0]
 8002516:	e005      	b.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002518:	2312      	movs	r3, #18
 800251a:	18fb      	adds	r3, r7, r3
 800251c:	2213      	movs	r2, #19
 800251e:	18ba      	adds	r2, r7, r2
 8002520:	7812      	ldrb	r2, [r2, #0]
 8002522:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002524:	2311      	movs	r3, #17
 8002526:	18fb      	adds	r3, r7, r3
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d105      	bne.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800252e:	4b39      	ldr	r3, [pc, #228]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002530:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002532:	4b38      	ldr	r3, [pc, #224]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002534:	493c      	ldr	r1, [pc, #240]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002536:	400a      	ands	r2, r1
 8002538:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2201      	movs	r2, #1
 8002540:	4013      	ands	r3, r2
 8002542:	d009      	beq.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002544:	4b33      	ldr	r3, [pc, #204]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002548:	2203      	movs	r2, #3
 800254a:	4393      	bics	r3, r2
 800254c:	0019      	movs	r1, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685a      	ldr	r2, [r3, #4]
 8002552:	4b30      	ldr	r3, [pc, #192]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002554:	430a      	orrs	r2, r1
 8002556:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2202      	movs	r2, #2
 800255e:	4013      	ands	r3, r2
 8002560:	d009      	beq.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002562:	4b2c      	ldr	r3, [pc, #176]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002566:	220c      	movs	r2, #12
 8002568:	4393      	bics	r3, r2
 800256a:	0019      	movs	r1, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	689a      	ldr	r2, [r3, #8]
 8002570:	4b28      	ldr	r3, [pc, #160]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002572:	430a      	orrs	r2, r1
 8002574:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	2220      	movs	r2, #32
 800257c:	4013      	ands	r3, r2
 800257e:	d009      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002580:	4b24      	ldr	r3, [pc, #144]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002584:	4a29      	ldr	r2, [pc, #164]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002586:	4013      	ands	r3, r2
 8002588:	0019      	movs	r1, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	68da      	ldr	r2, [r3, #12]
 800258e:	4b21      	ldr	r3, [pc, #132]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002590:	430a      	orrs	r2, r1
 8002592:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	2380      	movs	r3, #128	; 0x80
 800259a:	01db      	lsls	r3, r3, #7
 800259c:	4013      	ands	r3, r2
 800259e:	d015      	beq.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80025a0:	4b1c      	ldr	r3, [pc, #112]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80025a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	0899      	lsrs	r1, r3, #2
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	695a      	ldr	r2, [r3, #20]
 80025ac:	4b19      	ldr	r3, [pc, #100]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80025ae:	430a      	orrs	r2, r1
 80025b0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	695a      	ldr	r2, [r3, #20]
 80025b6:	2380      	movs	r3, #128	; 0x80
 80025b8:	05db      	lsls	r3, r3, #23
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d106      	bne.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80025be:	4b15      	ldr	r3, [pc, #84]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80025c0:	68da      	ldr	r2, [r3, #12]
 80025c2:	4b14      	ldr	r3, [pc, #80]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80025c4:	2180      	movs	r1, #128	; 0x80
 80025c6:	0249      	lsls	r1, r1, #9
 80025c8:	430a      	orrs	r2, r1
 80025ca:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	2380      	movs	r3, #128	; 0x80
 80025d2:	011b      	lsls	r3, r3, #4
 80025d4:	4013      	ands	r3, r2
 80025d6:	d016      	beq.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80025d8:	4b0e      	ldr	r3, [pc, #56]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80025da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025dc:	4a14      	ldr	r2, [pc, #80]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80025de:	4013      	ands	r3, r2
 80025e0:	0019      	movs	r1, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	691a      	ldr	r2, [r3, #16]
 80025e6:	4b0b      	ldr	r3, [pc, #44]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80025e8:	430a      	orrs	r2, r1
 80025ea:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	691a      	ldr	r2, [r3, #16]
 80025f0:	2380      	movs	r3, #128	; 0x80
 80025f2:	01db      	lsls	r3, r3, #7
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d106      	bne.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80025f8:	4b06      	ldr	r3, [pc, #24]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80025fa:	68da      	ldr	r2, [r3, #12]
 80025fc:	4b05      	ldr	r3, [pc, #20]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80025fe:	2180      	movs	r1, #128	; 0x80
 8002600:	0249      	lsls	r1, r1, #9
 8002602:	430a      	orrs	r2, r1
 8002604:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002606:	2312      	movs	r3, #18
 8002608:	18fb      	adds	r3, r7, r3
 800260a:	781b      	ldrb	r3, [r3, #0]
}
 800260c:	0018      	movs	r0, r3
 800260e:	46bd      	mov	sp, r7
 8002610:	b006      	add	sp, #24
 8002612:	bd80      	pop	{r7, pc}
 8002614:	40021000 	.word	0x40021000
 8002618:	40007000 	.word	0x40007000
 800261c:	fffffcff 	.word	0xfffffcff
 8002620:	fffeffff 	.word	0xfffeffff
 8002624:	00001388 	.word	0x00001388
 8002628:	efffffff 	.word	0xefffffff
 800262c:	ffffcfff 	.word	0xffffcfff
 8002630:	ffff3fff 	.word	0xffff3fff

08002634 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d101      	bne.n	8002646 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e046      	b.n	80026d4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2288      	movs	r2, #136	; 0x88
 800264a:	589b      	ldr	r3, [r3, r2]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d107      	bne.n	8002660 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2284      	movs	r2, #132	; 0x84
 8002654:	2100      	movs	r1, #0
 8002656:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	0018      	movs	r0, r3
 800265c:	f7fe fab8 	bl	8000bd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2288      	movs	r2, #136	; 0x88
 8002664:	2124      	movs	r1, #36	; 0x24
 8002666:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2101      	movs	r1, #1
 8002674:	438a      	bics	r2, r1
 8002676:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	0018      	movs	r0, r3
 800267c:	f000 f8e4 	bl	8002848 <UART_SetConfig>
 8002680:	0003      	movs	r3, r0
 8002682:	2b01      	cmp	r3, #1
 8002684:	d101      	bne.n	800268a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e024      	b.n	80026d4 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800268e:	2b00      	cmp	r3, #0
 8002690:	d003      	beq.n	800269a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	0018      	movs	r0, r3
 8002696:	f000 fa7b 	bl	8002b90 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	685a      	ldr	r2, [r3, #4]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	490d      	ldr	r1, [pc, #52]	; (80026dc <HAL_UART_Init+0xa8>)
 80026a6:	400a      	ands	r2, r1
 80026a8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	689a      	ldr	r2, [r3, #8]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	212a      	movs	r1, #42	; 0x2a
 80026b6:	438a      	bics	r2, r1
 80026b8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2101      	movs	r1, #1
 80026c6:	430a      	orrs	r2, r1
 80026c8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	0018      	movs	r0, r3
 80026ce:	f000 fb13 	bl	8002cf8 <UART_CheckIdleState>
 80026d2:	0003      	movs	r3, r0
}
 80026d4:	0018      	movs	r0, r3
 80026d6:	46bd      	mov	sp, r7
 80026d8:	b002      	add	sp, #8
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	ffffb7ff 	.word	0xffffb7ff

080026e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b08a      	sub	sp, #40	; 0x28
 80026e4:	af02      	add	r7, sp, #8
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	603b      	str	r3, [r7, #0]
 80026ec:	1dbb      	adds	r3, r7, #6
 80026ee:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2288      	movs	r2, #136	; 0x88
 80026f4:	589b      	ldr	r3, [r3, r2]
 80026f6:	2b20      	cmp	r3, #32
 80026f8:	d000      	beq.n	80026fc <HAL_UART_Transmit+0x1c>
 80026fa:	e088      	b.n	800280e <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d003      	beq.n	800270a <HAL_UART_Transmit+0x2a>
 8002702:	1dbb      	adds	r3, r7, #6
 8002704:	881b      	ldrh	r3, [r3, #0]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d101      	bne.n	800270e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e080      	b.n	8002810 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	689a      	ldr	r2, [r3, #8]
 8002712:	2380      	movs	r3, #128	; 0x80
 8002714:	015b      	lsls	r3, r3, #5
 8002716:	429a      	cmp	r2, r3
 8002718:	d109      	bne.n	800272e <HAL_UART_Transmit+0x4e>
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	691b      	ldr	r3, [r3, #16]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d105      	bne.n	800272e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	2201      	movs	r2, #1
 8002726:	4013      	ands	r3, r2
 8002728:	d001      	beq.n	800272e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e070      	b.n	8002810 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2290      	movs	r2, #144	; 0x90
 8002732:	2100      	movs	r1, #0
 8002734:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2288      	movs	r2, #136	; 0x88
 800273a:	2121      	movs	r1, #33	; 0x21
 800273c:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800273e:	f7fe fba9 	bl	8000e94 <HAL_GetTick>
 8002742:	0003      	movs	r3, r0
 8002744:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	1dba      	adds	r2, r7, #6
 800274a:	2154      	movs	r1, #84	; 0x54
 800274c:	8812      	ldrh	r2, [r2, #0]
 800274e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	1dba      	adds	r2, r7, #6
 8002754:	2156      	movs	r1, #86	; 0x56
 8002756:	8812      	ldrh	r2, [r2, #0]
 8002758:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	689a      	ldr	r2, [r3, #8]
 800275e:	2380      	movs	r3, #128	; 0x80
 8002760:	015b      	lsls	r3, r3, #5
 8002762:	429a      	cmp	r2, r3
 8002764:	d108      	bne.n	8002778 <HAL_UART_Transmit+0x98>
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d104      	bne.n	8002778 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800276e:	2300      	movs	r3, #0
 8002770:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	61bb      	str	r3, [r7, #24]
 8002776:	e003      	b.n	8002780 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800277c:	2300      	movs	r3, #0
 800277e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002780:	e02c      	b.n	80027dc <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002782:	697a      	ldr	r2, [r7, #20]
 8002784:	68f8      	ldr	r0, [r7, #12]
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	9300      	str	r3, [sp, #0]
 800278a:	0013      	movs	r3, r2
 800278c:	2200      	movs	r2, #0
 800278e:	2180      	movs	r1, #128	; 0x80
 8002790:	f000 fb00 	bl	8002d94 <UART_WaitOnFlagUntilTimeout>
 8002794:	1e03      	subs	r3, r0, #0
 8002796:	d001      	beq.n	800279c <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e039      	b.n	8002810 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d10b      	bne.n	80027ba <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	881b      	ldrh	r3, [r3, #0]
 80027a6:	001a      	movs	r2, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	05d2      	lsls	r2, r2, #23
 80027ae:	0dd2      	lsrs	r2, r2, #23
 80027b0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	3302      	adds	r3, #2
 80027b6:	61bb      	str	r3, [r7, #24]
 80027b8:	e007      	b.n	80027ca <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	781a      	ldrb	r2, [r3, #0]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	3301      	adds	r3, #1
 80027c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2256      	movs	r2, #86	; 0x56
 80027ce:	5a9b      	ldrh	r3, [r3, r2]
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	3b01      	subs	r3, #1
 80027d4:	b299      	uxth	r1, r3
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2256      	movs	r2, #86	; 0x56
 80027da:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2256      	movs	r2, #86	; 0x56
 80027e0:	5a9b      	ldrh	r3, [r3, r2]
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d1cc      	bne.n	8002782 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80027e8:	697a      	ldr	r2, [r7, #20]
 80027ea:	68f8      	ldr	r0, [r7, #12]
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	9300      	str	r3, [sp, #0]
 80027f0:	0013      	movs	r3, r2
 80027f2:	2200      	movs	r2, #0
 80027f4:	2140      	movs	r1, #64	; 0x40
 80027f6:	f000 facd 	bl	8002d94 <UART_WaitOnFlagUntilTimeout>
 80027fa:	1e03      	subs	r3, r0, #0
 80027fc:	d001      	beq.n	8002802 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e006      	b.n	8002810 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2288      	movs	r2, #136	; 0x88
 8002806:	2120      	movs	r1, #32
 8002808:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800280a:	2300      	movs	r3, #0
 800280c:	e000      	b.n	8002810 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 800280e:	2302      	movs	r3, #2
  }
}
 8002810:	0018      	movs	r0, r3
 8002812:	46bd      	mov	sp, r7
 8002814:	b008      	add	sp, #32
 8002816:	bd80      	pop	{r7, pc}

08002818 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8002820:	46c0      	nop			; (mov r8, r8)
 8002822:	46bd      	mov	sp, r7
 8002824:	b002      	add	sp, #8
 8002826:	bd80      	pop	{r7, pc}

08002828 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8002830:	46c0      	nop			; (mov r8, r8)
 8002832:	46bd      	mov	sp, r7
 8002834:	b002      	add	sp, #8
 8002836:	bd80      	pop	{r7, pc}

08002838 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002840:	46c0      	nop			; (mov r8, r8)
 8002842:	46bd      	mov	sp, r7
 8002844:	b002      	add	sp, #8
 8002846:	bd80      	pop	{r7, pc}

08002848 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b088      	sub	sp, #32
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002850:	231a      	movs	r3, #26
 8002852:	18fb      	adds	r3, r7, r3
 8002854:	2200      	movs	r2, #0
 8002856:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	689a      	ldr	r2, [r3, #8]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	431a      	orrs	r2, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	695b      	ldr	r3, [r3, #20]
 8002866:	431a      	orrs	r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	69db      	ldr	r3, [r3, #28]
 800286c:	4313      	orrs	r3, r2
 800286e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4abc      	ldr	r2, [pc, #752]	; (8002b68 <UART_SetConfig+0x320>)
 8002878:	4013      	ands	r3, r2
 800287a:	0019      	movs	r1, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	69fa      	ldr	r2, [r7, #28]
 8002882:	430a      	orrs	r2, r1
 8002884:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	4ab7      	ldr	r2, [pc, #732]	; (8002b6c <UART_SetConfig+0x324>)
 800288e:	4013      	ands	r3, r2
 8002890:	0019      	movs	r1, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	68da      	ldr	r2, [r3, #12]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	430a      	orrs	r2, r1
 800289c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	699b      	ldr	r3, [r3, #24]
 80028a2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a1b      	ldr	r3, [r3, #32]
 80028a8:	69fa      	ldr	r2, [r7, #28]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	4aae      	ldr	r2, [pc, #696]	; (8002b70 <UART_SetConfig+0x328>)
 80028b6:	4013      	ands	r3, r2
 80028b8:	0019      	movs	r1, r3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	69fa      	ldr	r2, [r7, #28]
 80028c0:	430a      	orrs	r2, r1
 80028c2:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ca:	220f      	movs	r2, #15
 80028cc:	4393      	bics	r3, r2
 80028ce:	0019      	movs	r1, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	430a      	orrs	r2, r1
 80028da:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4aa4      	ldr	r2, [pc, #656]	; (8002b74 <UART_SetConfig+0x32c>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d127      	bne.n	8002936 <UART_SetConfig+0xee>
 80028e6:	4ba4      	ldr	r3, [pc, #656]	; (8002b78 <UART_SetConfig+0x330>)
 80028e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ea:	2203      	movs	r2, #3
 80028ec:	4013      	ands	r3, r2
 80028ee:	2b03      	cmp	r3, #3
 80028f0:	d017      	beq.n	8002922 <UART_SetConfig+0xda>
 80028f2:	d81b      	bhi.n	800292c <UART_SetConfig+0xe4>
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d00a      	beq.n	800290e <UART_SetConfig+0xc6>
 80028f8:	d818      	bhi.n	800292c <UART_SetConfig+0xe4>
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d002      	beq.n	8002904 <UART_SetConfig+0xbc>
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d00a      	beq.n	8002918 <UART_SetConfig+0xd0>
 8002902:	e013      	b.n	800292c <UART_SetConfig+0xe4>
 8002904:	231b      	movs	r3, #27
 8002906:	18fb      	adds	r3, r7, r3
 8002908:	2200      	movs	r2, #0
 800290a:	701a      	strb	r2, [r3, #0]
 800290c:	e058      	b.n	80029c0 <UART_SetConfig+0x178>
 800290e:	231b      	movs	r3, #27
 8002910:	18fb      	adds	r3, r7, r3
 8002912:	2202      	movs	r2, #2
 8002914:	701a      	strb	r2, [r3, #0]
 8002916:	e053      	b.n	80029c0 <UART_SetConfig+0x178>
 8002918:	231b      	movs	r3, #27
 800291a:	18fb      	adds	r3, r7, r3
 800291c:	2204      	movs	r2, #4
 800291e:	701a      	strb	r2, [r3, #0]
 8002920:	e04e      	b.n	80029c0 <UART_SetConfig+0x178>
 8002922:	231b      	movs	r3, #27
 8002924:	18fb      	adds	r3, r7, r3
 8002926:	2208      	movs	r2, #8
 8002928:	701a      	strb	r2, [r3, #0]
 800292a:	e049      	b.n	80029c0 <UART_SetConfig+0x178>
 800292c:	231b      	movs	r3, #27
 800292e:	18fb      	adds	r3, r7, r3
 8002930:	2210      	movs	r2, #16
 8002932:	701a      	strb	r2, [r3, #0]
 8002934:	e044      	b.n	80029c0 <UART_SetConfig+0x178>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a90      	ldr	r2, [pc, #576]	; (8002b7c <UART_SetConfig+0x334>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d127      	bne.n	8002990 <UART_SetConfig+0x148>
 8002940:	4b8d      	ldr	r3, [pc, #564]	; (8002b78 <UART_SetConfig+0x330>)
 8002942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002944:	220c      	movs	r2, #12
 8002946:	4013      	ands	r3, r2
 8002948:	2b0c      	cmp	r3, #12
 800294a:	d017      	beq.n	800297c <UART_SetConfig+0x134>
 800294c:	d81b      	bhi.n	8002986 <UART_SetConfig+0x13e>
 800294e:	2b08      	cmp	r3, #8
 8002950:	d00a      	beq.n	8002968 <UART_SetConfig+0x120>
 8002952:	d818      	bhi.n	8002986 <UART_SetConfig+0x13e>
 8002954:	2b00      	cmp	r3, #0
 8002956:	d002      	beq.n	800295e <UART_SetConfig+0x116>
 8002958:	2b04      	cmp	r3, #4
 800295a:	d00a      	beq.n	8002972 <UART_SetConfig+0x12a>
 800295c:	e013      	b.n	8002986 <UART_SetConfig+0x13e>
 800295e:	231b      	movs	r3, #27
 8002960:	18fb      	adds	r3, r7, r3
 8002962:	2200      	movs	r2, #0
 8002964:	701a      	strb	r2, [r3, #0]
 8002966:	e02b      	b.n	80029c0 <UART_SetConfig+0x178>
 8002968:	231b      	movs	r3, #27
 800296a:	18fb      	adds	r3, r7, r3
 800296c:	2202      	movs	r2, #2
 800296e:	701a      	strb	r2, [r3, #0]
 8002970:	e026      	b.n	80029c0 <UART_SetConfig+0x178>
 8002972:	231b      	movs	r3, #27
 8002974:	18fb      	adds	r3, r7, r3
 8002976:	2204      	movs	r2, #4
 8002978:	701a      	strb	r2, [r3, #0]
 800297a:	e021      	b.n	80029c0 <UART_SetConfig+0x178>
 800297c:	231b      	movs	r3, #27
 800297e:	18fb      	adds	r3, r7, r3
 8002980:	2208      	movs	r2, #8
 8002982:	701a      	strb	r2, [r3, #0]
 8002984:	e01c      	b.n	80029c0 <UART_SetConfig+0x178>
 8002986:	231b      	movs	r3, #27
 8002988:	18fb      	adds	r3, r7, r3
 800298a:	2210      	movs	r2, #16
 800298c:	701a      	strb	r2, [r3, #0]
 800298e:	e017      	b.n	80029c0 <UART_SetConfig+0x178>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a7a      	ldr	r2, [pc, #488]	; (8002b80 <UART_SetConfig+0x338>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d104      	bne.n	80029a4 <UART_SetConfig+0x15c>
 800299a:	231b      	movs	r3, #27
 800299c:	18fb      	adds	r3, r7, r3
 800299e:	2200      	movs	r2, #0
 80029a0:	701a      	strb	r2, [r3, #0]
 80029a2:	e00d      	b.n	80029c0 <UART_SetConfig+0x178>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a76      	ldr	r2, [pc, #472]	; (8002b84 <UART_SetConfig+0x33c>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d104      	bne.n	80029b8 <UART_SetConfig+0x170>
 80029ae:	231b      	movs	r3, #27
 80029b0:	18fb      	adds	r3, r7, r3
 80029b2:	2200      	movs	r2, #0
 80029b4:	701a      	strb	r2, [r3, #0]
 80029b6:	e003      	b.n	80029c0 <UART_SetConfig+0x178>
 80029b8:	231b      	movs	r3, #27
 80029ba:	18fb      	adds	r3, r7, r3
 80029bc:	2210      	movs	r2, #16
 80029be:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	69da      	ldr	r2, [r3, #28]
 80029c4:	2380      	movs	r3, #128	; 0x80
 80029c6:	021b      	lsls	r3, r3, #8
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d000      	beq.n	80029ce <UART_SetConfig+0x186>
 80029cc:	e065      	b.n	8002a9a <UART_SetConfig+0x252>
  {
    switch (clocksource)
 80029ce:	231b      	movs	r3, #27
 80029d0:	18fb      	adds	r3, r7, r3
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	2b08      	cmp	r3, #8
 80029d6:	d015      	beq.n	8002a04 <UART_SetConfig+0x1bc>
 80029d8:	dc18      	bgt.n	8002a0c <UART_SetConfig+0x1c4>
 80029da:	2b04      	cmp	r3, #4
 80029dc:	d00d      	beq.n	80029fa <UART_SetConfig+0x1b2>
 80029de:	dc15      	bgt.n	8002a0c <UART_SetConfig+0x1c4>
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d002      	beq.n	80029ea <UART_SetConfig+0x1a2>
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d005      	beq.n	80029f4 <UART_SetConfig+0x1ac>
 80029e8:	e010      	b.n	8002a0c <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80029ea:	f7ff fcd9 	bl	80023a0 <HAL_RCC_GetPCLK1Freq>
 80029ee:	0003      	movs	r3, r0
 80029f0:	617b      	str	r3, [r7, #20]
        break;
 80029f2:	e012      	b.n	8002a1a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80029f4:	4b64      	ldr	r3, [pc, #400]	; (8002b88 <UART_SetConfig+0x340>)
 80029f6:	617b      	str	r3, [r7, #20]
        break;
 80029f8:	e00f      	b.n	8002a1a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80029fa:	f7ff fc45 	bl	8002288 <HAL_RCC_GetSysClockFreq>
 80029fe:	0003      	movs	r3, r0
 8002a00:	617b      	str	r3, [r7, #20]
        break;
 8002a02:	e00a      	b.n	8002a1a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a04:	2380      	movs	r3, #128	; 0x80
 8002a06:	021b      	lsls	r3, r3, #8
 8002a08:	617b      	str	r3, [r7, #20]
        break;
 8002a0a:	e006      	b.n	8002a1a <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002a10:	231a      	movs	r3, #26
 8002a12:	18fb      	adds	r3, r7, r3
 8002a14:	2201      	movs	r2, #1
 8002a16:	701a      	strb	r2, [r3, #0]
        break;
 8002a18:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d100      	bne.n	8002a22 <UART_SetConfig+0x1da>
 8002a20:	e08d      	b.n	8002b3e <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a26:	4b59      	ldr	r3, [pc, #356]	; (8002b8c <UART_SetConfig+0x344>)
 8002a28:	0052      	lsls	r2, r2, #1
 8002a2a:	5ad3      	ldrh	r3, [r2, r3]
 8002a2c:	0019      	movs	r1, r3
 8002a2e:	6978      	ldr	r0, [r7, #20]
 8002a30:	f7fd fb66 	bl	8000100 <__udivsi3>
 8002a34:	0003      	movs	r3, r0
 8002a36:	005a      	lsls	r2, r3, #1
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	085b      	lsrs	r3, r3, #1
 8002a3e:	18d2      	adds	r2, r2, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	0019      	movs	r1, r3
 8002a46:	0010      	movs	r0, r2
 8002a48:	f7fd fb5a 	bl	8000100 <__udivsi3>
 8002a4c:	0003      	movs	r3, r0
 8002a4e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	2b0f      	cmp	r3, #15
 8002a54:	d91c      	bls.n	8002a90 <UART_SetConfig+0x248>
 8002a56:	693a      	ldr	r2, [r7, #16]
 8002a58:	2380      	movs	r3, #128	; 0x80
 8002a5a:	025b      	lsls	r3, r3, #9
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d217      	bcs.n	8002a90 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	b29a      	uxth	r2, r3
 8002a64:	200e      	movs	r0, #14
 8002a66:	183b      	adds	r3, r7, r0
 8002a68:	210f      	movs	r1, #15
 8002a6a:	438a      	bics	r2, r1
 8002a6c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	085b      	lsrs	r3, r3, #1
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	2207      	movs	r2, #7
 8002a76:	4013      	ands	r3, r2
 8002a78:	b299      	uxth	r1, r3
 8002a7a:	183b      	adds	r3, r7, r0
 8002a7c:	183a      	adds	r2, r7, r0
 8002a7e:	8812      	ldrh	r2, [r2, #0]
 8002a80:	430a      	orrs	r2, r1
 8002a82:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	183a      	adds	r2, r7, r0
 8002a8a:	8812      	ldrh	r2, [r2, #0]
 8002a8c:	60da      	str	r2, [r3, #12]
 8002a8e:	e056      	b.n	8002b3e <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8002a90:	231a      	movs	r3, #26
 8002a92:	18fb      	adds	r3, r7, r3
 8002a94:	2201      	movs	r2, #1
 8002a96:	701a      	strb	r2, [r3, #0]
 8002a98:	e051      	b.n	8002b3e <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002a9a:	231b      	movs	r3, #27
 8002a9c:	18fb      	adds	r3, r7, r3
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	2b08      	cmp	r3, #8
 8002aa2:	d015      	beq.n	8002ad0 <UART_SetConfig+0x288>
 8002aa4:	dc18      	bgt.n	8002ad8 <UART_SetConfig+0x290>
 8002aa6:	2b04      	cmp	r3, #4
 8002aa8:	d00d      	beq.n	8002ac6 <UART_SetConfig+0x27e>
 8002aaa:	dc15      	bgt.n	8002ad8 <UART_SetConfig+0x290>
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d002      	beq.n	8002ab6 <UART_SetConfig+0x26e>
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d005      	beq.n	8002ac0 <UART_SetConfig+0x278>
 8002ab4:	e010      	b.n	8002ad8 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ab6:	f7ff fc73 	bl	80023a0 <HAL_RCC_GetPCLK1Freq>
 8002aba:	0003      	movs	r3, r0
 8002abc:	617b      	str	r3, [r7, #20]
        break;
 8002abe:	e012      	b.n	8002ae6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ac0:	4b31      	ldr	r3, [pc, #196]	; (8002b88 <UART_SetConfig+0x340>)
 8002ac2:	617b      	str	r3, [r7, #20]
        break;
 8002ac4:	e00f      	b.n	8002ae6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ac6:	f7ff fbdf 	bl	8002288 <HAL_RCC_GetSysClockFreq>
 8002aca:	0003      	movs	r3, r0
 8002acc:	617b      	str	r3, [r7, #20]
        break;
 8002ace:	e00a      	b.n	8002ae6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ad0:	2380      	movs	r3, #128	; 0x80
 8002ad2:	021b      	lsls	r3, r3, #8
 8002ad4:	617b      	str	r3, [r7, #20]
        break;
 8002ad6:	e006      	b.n	8002ae6 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002adc:	231a      	movs	r3, #26
 8002ade:	18fb      	adds	r3, r7, r3
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	701a      	strb	r2, [r3, #0]
        break;
 8002ae4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d028      	beq.n	8002b3e <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002af0:	4b26      	ldr	r3, [pc, #152]	; (8002b8c <UART_SetConfig+0x344>)
 8002af2:	0052      	lsls	r2, r2, #1
 8002af4:	5ad3      	ldrh	r3, [r2, r3]
 8002af6:	0019      	movs	r1, r3
 8002af8:	6978      	ldr	r0, [r7, #20]
 8002afa:	f7fd fb01 	bl	8000100 <__udivsi3>
 8002afe:	0003      	movs	r3, r0
 8002b00:	001a      	movs	r2, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	085b      	lsrs	r3, r3, #1
 8002b08:	18d2      	adds	r2, r2, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	0019      	movs	r1, r3
 8002b10:	0010      	movs	r0, r2
 8002b12:	f7fd faf5 	bl	8000100 <__udivsi3>
 8002b16:	0003      	movs	r3, r0
 8002b18:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	2b0f      	cmp	r3, #15
 8002b1e:	d90a      	bls.n	8002b36 <UART_SetConfig+0x2ee>
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	2380      	movs	r3, #128	; 0x80
 8002b24:	025b      	lsls	r3, r3, #9
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d205      	bcs.n	8002b36 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	b29a      	uxth	r2, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	60da      	str	r2, [r3, #12]
 8002b34:	e003      	b.n	8002b3e <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8002b36:	231a      	movs	r3, #26
 8002b38:	18fb      	adds	r3, r7, r3
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	226a      	movs	r2, #106	; 0x6a
 8002b42:	2101      	movs	r1, #1
 8002b44:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2268      	movs	r2, #104	; 0x68
 8002b4a:	2101      	movs	r1, #1
 8002b4c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8002b5a:	231a      	movs	r3, #26
 8002b5c:	18fb      	adds	r3, r7, r3
 8002b5e:	781b      	ldrb	r3, [r3, #0]
}
 8002b60:	0018      	movs	r0, r3
 8002b62:	46bd      	mov	sp, r7
 8002b64:	b008      	add	sp, #32
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	cfff69f3 	.word	0xcfff69f3
 8002b6c:	ffffcfff 	.word	0xffffcfff
 8002b70:	11fff4ff 	.word	0x11fff4ff
 8002b74:	40013800 	.word	0x40013800
 8002b78:	40021000 	.word	0x40021000
 8002b7c:	40004400 	.word	0x40004400
 8002b80:	40004800 	.word	0x40004800
 8002b84:	40004c00 	.word	0x40004c00
 8002b88:	00f42400 	.word	0x00f42400
 8002b8c:	080039c4 	.word	0x080039c4

08002b90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	d00b      	beq.n	8002bba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	4a4a      	ldr	r2, [pc, #296]	; (8002cd4 <UART_AdvFeatureConfig+0x144>)
 8002baa:	4013      	ands	r3, r2
 8002bac:	0019      	movs	r1, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bbe:	2202      	movs	r2, #2
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	d00b      	beq.n	8002bdc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	4a43      	ldr	r2, [pc, #268]	; (8002cd8 <UART_AdvFeatureConfig+0x148>)
 8002bcc:	4013      	ands	r3, r2
 8002bce:	0019      	movs	r1, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be0:	2204      	movs	r2, #4
 8002be2:	4013      	ands	r3, r2
 8002be4:	d00b      	beq.n	8002bfe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	4a3b      	ldr	r2, [pc, #236]	; (8002cdc <UART_AdvFeatureConfig+0x14c>)
 8002bee:	4013      	ands	r3, r2
 8002bf0:	0019      	movs	r1, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c02:	2208      	movs	r2, #8
 8002c04:	4013      	ands	r3, r2
 8002c06:	d00b      	beq.n	8002c20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	4a34      	ldr	r2, [pc, #208]	; (8002ce0 <UART_AdvFeatureConfig+0x150>)
 8002c10:	4013      	ands	r3, r2
 8002c12:	0019      	movs	r1, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	430a      	orrs	r2, r1
 8002c1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c24:	2210      	movs	r2, #16
 8002c26:	4013      	ands	r3, r2
 8002c28:	d00b      	beq.n	8002c42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	4a2c      	ldr	r2, [pc, #176]	; (8002ce4 <UART_AdvFeatureConfig+0x154>)
 8002c32:	4013      	ands	r3, r2
 8002c34:	0019      	movs	r1, r3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c46:	2220      	movs	r2, #32
 8002c48:	4013      	ands	r3, r2
 8002c4a:	d00b      	beq.n	8002c64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	4a25      	ldr	r2, [pc, #148]	; (8002ce8 <UART_AdvFeatureConfig+0x158>)
 8002c54:	4013      	ands	r3, r2
 8002c56:	0019      	movs	r1, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	430a      	orrs	r2, r1
 8002c62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c68:	2240      	movs	r2, #64	; 0x40
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	d01d      	beq.n	8002caa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	4a1d      	ldr	r2, [pc, #116]	; (8002cec <UART_AdvFeatureConfig+0x15c>)
 8002c76:	4013      	ands	r3, r2
 8002c78:	0019      	movs	r1, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	430a      	orrs	r2, r1
 8002c84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c8a:	2380      	movs	r3, #128	; 0x80
 8002c8c:	035b      	lsls	r3, r3, #13
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d10b      	bne.n	8002caa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	4a15      	ldr	r2, [pc, #84]	; (8002cf0 <UART_AdvFeatureConfig+0x160>)
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	0019      	movs	r1, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cae:	2280      	movs	r2, #128	; 0x80
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	d00b      	beq.n	8002ccc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	4a0e      	ldr	r2, [pc, #56]	; (8002cf4 <UART_AdvFeatureConfig+0x164>)
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	0019      	movs	r1, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	605a      	str	r2, [r3, #4]
  }
}
 8002ccc:	46c0      	nop			; (mov r8, r8)
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	b002      	add	sp, #8
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	fffdffff 	.word	0xfffdffff
 8002cd8:	fffeffff 	.word	0xfffeffff
 8002cdc:	fffbffff 	.word	0xfffbffff
 8002ce0:	ffff7fff 	.word	0xffff7fff
 8002ce4:	ffffefff 	.word	0xffffefff
 8002ce8:	ffffdfff 	.word	0xffffdfff
 8002cec:	ffefffff 	.word	0xffefffff
 8002cf0:	ff9fffff 	.word	0xff9fffff
 8002cf4:	fff7ffff 	.word	0xfff7ffff

08002cf8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b086      	sub	sp, #24
 8002cfc:	af02      	add	r7, sp, #8
 8002cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2290      	movs	r2, #144	; 0x90
 8002d04:	2100      	movs	r1, #0
 8002d06:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002d08:	f7fe f8c4 	bl	8000e94 <HAL_GetTick>
 8002d0c:	0003      	movs	r3, r0
 8002d0e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2208      	movs	r2, #8
 8002d18:	4013      	ands	r3, r2
 8002d1a:	2b08      	cmp	r3, #8
 8002d1c:	d10c      	bne.n	8002d38 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2280      	movs	r2, #128	; 0x80
 8002d22:	0391      	lsls	r1, r2, #14
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	4a1a      	ldr	r2, [pc, #104]	; (8002d90 <UART_CheckIdleState+0x98>)
 8002d28:	9200      	str	r2, [sp, #0]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f000 f832 	bl	8002d94 <UART_WaitOnFlagUntilTimeout>
 8002d30:	1e03      	subs	r3, r0, #0
 8002d32:	d001      	beq.n	8002d38 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e026      	b.n	8002d86 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	2204      	movs	r2, #4
 8002d40:	4013      	ands	r3, r2
 8002d42:	2b04      	cmp	r3, #4
 8002d44:	d10c      	bne.n	8002d60 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2280      	movs	r2, #128	; 0x80
 8002d4a:	03d1      	lsls	r1, r2, #15
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	4a10      	ldr	r2, [pc, #64]	; (8002d90 <UART_CheckIdleState+0x98>)
 8002d50:	9200      	str	r2, [sp, #0]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f000 f81e 	bl	8002d94 <UART_WaitOnFlagUntilTimeout>
 8002d58:	1e03      	subs	r3, r0, #0
 8002d5a:	d001      	beq.n	8002d60 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e012      	b.n	8002d86 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2288      	movs	r2, #136	; 0x88
 8002d64:	2120      	movs	r1, #32
 8002d66:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	228c      	movs	r2, #140	; 0x8c
 8002d6c:	2120      	movs	r1, #32
 8002d6e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2284      	movs	r2, #132	; 0x84
 8002d80:	2100      	movs	r1, #0
 8002d82:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	0018      	movs	r0, r3
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	b004      	add	sp, #16
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	46c0      	nop			; (mov r8, r8)
 8002d90:	01ffffff 	.word	0x01ffffff

08002d94 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b094      	sub	sp, #80	; 0x50
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	603b      	str	r3, [r7, #0]
 8002da0:	1dfb      	adds	r3, r7, #7
 8002da2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002da4:	e0a7      	b.n	8002ef6 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002da6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002da8:	3301      	adds	r3, #1
 8002daa:	d100      	bne.n	8002dae <UART_WaitOnFlagUntilTimeout+0x1a>
 8002dac:	e0a3      	b.n	8002ef6 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dae:	f7fe f871 	bl	8000e94 <HAL_GetTick>
 8002db2:	0002      	movs	r2, r0
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d302      	bcc.n	8002dc4 <UART_WaitOnFlagUntilTimeout+0x30>
 8002dbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d13f      	bne.n	8002e44 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dc4:	f3ef 8310 	mrs	r3, PRIMASK
 8002dc8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002dcc:	647b      	str	r3, [r7, #68]	; 0x44
 8002dce:	2301      	movs	r3, #1
 8002dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dd4:	f383 8810 	msr	PRIMASK, r3
}
 8002dd8:	46c0      	nop			; (mov r8, r8)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	494e      	ldr	r1, [pc, #312]	; (8002f20 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8002de6:	400a      	ands	r2, r1
 8002de8:	601a      	str	r2, [r3, #0]
 8002dea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dec:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df0:	f383 8810 	msr	PRIMASK, r3
}
 8002df4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002df6:	f3ef 8310 	mrs	r3, PRIMASK
 8002dfa:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dfe:	643b      	str	r3, [r7, #64]	; 0x40
 8002e00:	2301      	movs	r3, #1
 8002e02:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e06:	f383 8810 	msr	PRIMASK, r3
}
 8002e0a:	46c0      	nop			; (mov r8, r8)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	689a      	ldr	r2, [r3, #8]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2101      	movs	r1, #1
 8002e18:	438a      	bics	r2, r1
 8002e1a:	609a      	str	r2, [r3, #8]
 8002e1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e22:	f383 8810 	msr	PRIMASK, r3
}
 8002e26:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2288      	movs	r2, #136	; 0x88
 8002e2c:	2120      	movs	r1, #32
 8002e2e:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	228c      	movs	r2, #140	; 0x8c
 8002e34:	2120      	movs	r1, #32
 8002e36:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2284      	movs	r2, #132	; 0x84
 8002e3c:	2100      	movs	r1, #0
 8002e3e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e069      	b.n	8002f18 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2204      	movs	r2, #4
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	d052      	beq.n	8002ef6 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	69da      	ldr	r2, [r3, #28]
 8002e56:	2380      	movs	r3, #128	; 0x80
 8002e58:	011b      	lsls	r3, r3, #4
 8002e5a:	401a      	ands	r2, r3
 8002e5c:	2380      	movs	r3, #128	; 0x80
 8002e5e:	011b      	lsls	r3, r3, #4
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d148      	bne.n	8002ef6 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2280      	movs	r2, #128	; 0x80
 8002e6a:	0112      	lsls	r2, r2, #4
 8002e6c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e6e:	f3ef 8310 	mrs	r3, PRIMASK
 8002e72:	613b      	str	r3, [r7, #16]
  return(result);
 8002e74:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002e76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e78:	2301      	movs	r3, #1
 8002e7a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	f383 8810 	msr	PRIMASK, r3
}
 8002e82:	46c0      	nop			; (mov r8, r8)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4924      	ldr	r1, [pc, #144]	; (8002f20 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8002e90:	400a      	ands	r2, r1
 8002e92:	601a      	str	r2, [r3, #0]
 8002e94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e96:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	f383 8810 	msr	PRIMASK, r3
}
 8002e9e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ea0:	f3ef 8310 	mrs	r3, PRIMASK
 8002ea4:	61fb      	str	r3, [r7, #28]
  return(result);
 8002ea6:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ea8:	64bb      	str	r3, [r7, #72]	; 0x48
 8002eaa:	2301      	movs	r3, #1
 8002eac:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eae:	6a3b      	ldr	r3, [r7, #32]
 8002eb0:	f383 8810 	msr	PRIMASK, r3
}
 8002eb4:	46c0      	nop			; (mov r8, r8)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	689a      	ldr	r2, [r3, #8]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2101      	movs	r1, #1
 8002ec2:	438a      	bics	r2, r1
 8002ec4:	609a      	str	r2, [r3, #8]
 8002ec6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ec8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ecc:	f383 8810 	msr	PRIMASK, r3
}
 8002ed0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2288      	movs	r2, #136	; 0x88
 8002ed6:	2120      	movs	r1, #32
 8002ed8:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	228c      	movs	r2, #140	; 0x8c
 8002ede:	2120      	movs	r1, #32
 8002ee0:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2290      	movs	r2, #144	; 0x90
 8002ee6:	2120      	movs	r1, #32
 8002ee8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2284      	movs	r2, #132	; 0x84
 8002eee:	2100      	movs	r1, #0
 8002ef0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e010      	b.n	8002f18 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	69db      	ldr	r3, [r3, #28]
 8002efc:	68ba      	ldr	r2, [r7, #8]
 8002efe:	4013      	ands	r3, r2
 8002f00:	68ba      	ldr	r2, [r7, #8]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	425a      	negs	r2, r3
 8002f06:	4153      	adcs	r3, r2
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	001a      	movs	r2, r3
 8002f0c:	1dfb      	adds	r3, r7, #7
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d100      	bne.n	8002f16 <UART_WaitOnFlagUntilTimeout+0x182>
 8002f14:	e747      	b.n	8002da6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	0018      	movs	r0, r3
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	b014      	add	sp, #80	; 0x50
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	fffffe5f 	.word	0xfffffe5f

08002f24 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b090      	sub	sp, #64	; 0x40
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	1dbb      	adds	r3, r7, #6
 8002f30:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	68ba      	ldr	r2, [r7, #8]
 8002f36:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	1dba      	adds	r2, r7, #6
 8002f3c:	215c      	movs	r1, #92	; 0x5c
 8002f3e:	8812      	ldrh	r2, [r2, #0]
 8002f40:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2290      	movs	r2, #144	; 0x90
 8002f46:	2100      	movs	r1, #0
 8002f48:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	228c      	movs	r2, #140	; 0x8c
 8002f4e:	2122      	movs	r1, #34	; 0x22
 8002f50:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2280      	movs	r2, #128	; 0x80
 8002f56:	589b      	ldr	r3, [r3, r2]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d02d      	beq.n	8002fb8 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2280      	movs	r2, #128	; 0x80
 8002f60:	589b      	ldr	r3, [r3, r2]
 8002f62:	4a40      	ldr	r2, [pc, #256]	; (8003064 <UART_Start_Receive_DMA+0x140>)
 8002f64:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2280      	movs	r2, #128	; 0x80
 8002f6a:	589b      	ldr	r3, [r3, r2]
 8002f6c:	4a3e      	ldr	r2, [pc, #248]	; (8003068 <UART_Start_Receive_DMA+0x144>)
 8002f6e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2280      	movs	r2, #128	; 0x80
 8002f74:	589b      	ldr	r3, [r3, r2]
 8002f76:	4a3d      	ldr	r2, [pc, #244]	; (800306c <UART_Start_Receive_DMA+0x148>)
 8002f78:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2280      	movs	r2, #128	; 0x80
 8002f7e:	589b      	ldr	r3, [r3, r2]
 8002f80:	2200      	movs	r2, #0
 8002f82:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2280      	movs	r2, #128	; 0x80
 8002f88:	5898      	ldr	r0, [r3, r2]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	3324      	adds	r3, #36	; 0x24
 8002f90:	0019      	movs	r1, r3
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f96:	001a      	movs	r2, r3
 8002f98:	1dbb      	adds	r3, r7, #6
 8002f9a:	881b      	ldrh	r3, [r3, #0]
 8002f9c:	f7fe f9e4 	bl	8001368 <HAL_DMA_Start_IT>
 8002fa0:	1e03      	subs	r3, r0, #0
 8002fa2:	d009      	beq.n	8002fb8 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2290      	movs	r2, #144	; 0x90
 8002fa8:	2110      	movs	r1, #16
 8002faa:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	228c      	movs	r2, #140	; 0x8c
 8002fb0:	2120      	movs	r1, #32
 8002fb2:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e050      	b.n	800305a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	691b      	ldr	r3, [r3, #16]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d019      	beq.n	8002ff4 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fc0:	f3ef 8310 	mrs	r3, PRIMASK
 8002fc4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fca:	2301      	movs	r3, #1
 8002fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd0:	f383 8810 	msr	PRIMASK, r3
}
 8002fd4:	46c0      	nop			; (mov r8, r8)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2180      	movs	r1, #128	; 0x80
 8002fe2:	0049      	lsls	r1, r1, #1
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	601a      	str	r2, [r3, #0]
 8002fe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fea:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fee:	f383 8810 	msr	PRIMASK, r3
}
 8002ff2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ff4:	f3ef 8310 	mrs	r3, PRIMASK
 8002ff8:	613b      	str	r3, [r7, #16]
  return(result);
 8002ffa:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ffc:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ffe:	2301      	movs	r3, #1
 8003000:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	f383 8810 	msr	PRIMASK, r3
}
 8003008:	46c0      	nop			; (mov r8, r8)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	689a      	ldr	r2, [r3, #8]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2101      	movs	r1, #1
 8003016:	430a      	orrs	r2, r1
 8003018:	609a      	str	r2, [r3, #8]
 800301a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800301c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	f383 8810 	msr	PRIMASK, r3
}
 8003024:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003026:	f3ef 8310 	mrs	r3, PRIMASK
 800302a:	61fb      	str	r3, [r7, #28]
  return(result);
 800302c:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800302e:	637b      	str	r3, [r7, #52]	; 0x34
 8003030:	2301      	movs	r3, #1
 8003032:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003034:	6a3b      	ldr	r3, [r7, #32]
 8003036:	f383 8810 	msr	PRIMASK, r3
}
 800303a:	46c0      	nop			; (mov r8, r8)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	689a      	ldr	r2, [r3, #8]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2140      	movs	r1, #64	; 0x40
 8003048:	430a      	orrs	r2, r1
 800304a:	609a      	str	r2, [r3, #8]
 800304c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800304e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003052:	f383 8810 	msr	PRIMASK, r3
}
 8003056:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	0018      	movs	r0, r3
 800305c:	46bd      	mov	sp, r7
 800305e:	b010      	add	sp, #64	; 0x40
 8003060:	bd80      	pop	{r7, pc}
 8003062:	46c0      	nop			; (mov r8, r8)
 8003064:	080031bd 	.word	0x080031bd
 8003068:	080032ed 	.word	0x080032ed
 800306c:	0800332f 	.word	0x0800332f

08003070 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b08a      	sub	sp, #40	; 0x28
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003078:	f3ef 8310 	mrs	r3, PRIMASK
 800307c:	60bb      	str	r3, [r7, #8]
  return(result);
 800307e:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8003080:	627b      	str	r3, [r7, #36]	; 0x24
 8003082:	2301      	movs	r3, #1
 8003084:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f383 8810 	msr	PRIMASK, r3
}
 800308c:	46c0      	nop			; (mov r8, r8)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	21c0      	movs	r1, #192	; 0xc0
 800309a:	438a      	bics	r2, r1
 800309c:	601a      	str	r2, [r3, #0]
 800309e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	f383 8810 	msr	PRIMASK, r3
}
 80030a8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030aa:	f3ef 8310 	mrs	r3, PRIMASK
 80030ae:	617b      	str	r3, [r7, #20]
  return(result);
 80030b0:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80030b2:	623b      	str	r3, [r7, #32]
 80030b4:	2301      	movs	r3, #1
 80030b6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	f383 8810 	msr	PRIMASK, r3
}
 80030be:	46c0      	nop			; (mov r8, r8)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	689a      	ldr	r2, [r3, #8]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4908      	ldr	r1, [pc, #32]	; (80030ec <UART_EndTxTransfer+0x7c>)
 80030cc:	400a      	ands	r2, r1
 80030ce:	609a      	str	r2, [r3, #8]
 80030d0:	6a3b      	ldr	r3, [r7, #32]
 80030d2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	f383 8810 	msr	PRIMASK, r3
}
 80030da:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2288      	movs	r2, #136	; 0x88
 80030e0:	2120      	movs	r1, #32
 80030e2:	5099      	str	r1, [r3, r2]
}
 80030e4:	46c0      	nop			; (mov r8, r8)
 80030e6:	46bd      	mov	sp, r7
 80030e8:	b00a      	add	sp, #40	; 0x28
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	ff7fffff 	.word	0xff7fffff

080030f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b08e      	sub	sp, #56	; 0x38
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030f8:	f3ef 8310 	mrs	r3, PRIMASK
 80030fc:	617b      	str	r3, [r7, #20]
  return(result);
 80030fe:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003100:	637b      	str	r3, [r7, #52]	; 0x34
 8003102:	2301      	movs	r3, #1
 8003104:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	f383 8810 	msr	PRIMASK, r3
}
 800310c:	46c0      	nop			; (mov r8, r8)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4926      	ldr	r1, [pc, #152]	; (80031b4 <UART_EndRxTransfer+0xc4>)
 800311a:	400a      	ands	r2, r1
 800311c:	601a      	str	r2, [r3, #0]
 800311e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003120:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	f383 8810 	msr	PRIMASK, r3
}
 8003128:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800312a:	f3ef 8310 	mrs	r3, PRIMASK
 800312e:	623b      	str	r3, [r7, #32]
  return(result);
 8003130:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003132:	633b      	str	r3, [r7, #48]	; 0x30
 8003134:	2301      	movs	r3, #1
 8003136:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313a:	f383 8810 	msr	PRIMASK, r3
}
 800313e:	46c0      	nop			; (mov r8, r8)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	689a      	ldr	r2, [r3, #8]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	491b      	ldr	r1, [pc, #108]	; (80031b8 <UART_EndRxTransfer+0xc8>)
 800314c:	400a      	ands	r2, r1
 800314e:	609a      	str	r2, [r3, #8]
 8003150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003152:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003156:	f383 8810 	msr	PRIMASK, r3
}
 800315a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003160:	2b01      	cmp	r3, #1
 8003162:	d118      	bne.n	8003196 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003164:	f3ef 8310 	mrs	r3, PRIMASK
 8003168:	60bb      	str	r3, [r7, #8]
  return(result);
 800316a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800316c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800316e:	2301      	movs	r3, #1
 8003170:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	f383 8810 	msr	PRIMASK, r3
}
 8003178:	46c0      	nop			; (mov r8, r8)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2110      	movs	r1, #16
 8003186:	438a      	bics	r2, r1
 8003188:	601a      	str	r2, [r3, #0]
 800318a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800318c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	f383 8810 	msr	PRIMASK, r3
}
 8003194:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	228c      	movs	r2, #140	; 0x8c
 800319a:	2120      	movs	r1, #32
 800319c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	675a      	str	r2, [r3, #116]	; 0x74
}
 80031aa:	46c0      	nop			; (mov r8, r8)
 80031ac:	46bd      	mov	sp, r7
 80031ae:	b00e      	add	sp, #56	; 0x38
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	46c0      	nop			; (mov r8, r8)
 80031b4:	fffffedf 	.word	0xfffffedf
 80031b8:	effffffe 	.word	0xeffffffe

080031bc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b094      	sub	sp, #80	; 0x50
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c8:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2220      	movs	r2, #32
 80031d2:	4013      	ands	r3, r2
 80031d4:	d16f      	bne.n	80032b6 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 80031d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031d8:	225e      	movs	r2, #94	; 0x5e
 80031da:	2100      	movs	r1, #0
 80031dc:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031de:	f3ef 8310 	mrs	r3, PRIMASK
 80031e2:	61bb      	str	r3, [r7, #24]
  return(result);
 80031e4:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80031e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80031e8:	2301      	movs	r3, #1
 80031ea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	f383 8810 	msr	PRIMASK, r3
}
 80031f2:	46c0      	nop			; (mov r8, r8)
 80031f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	493a      	ldr	r1, [pc, #232]	; (80032e8 <UART_DMAReceiveCplt+0x12c>)
 8003200:	400a      	ands	r2, r1
 8003202:	601a      	str	r2, [r3, #0]
 8003204:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003206:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003208:	6a3b      	ldr	r3, [r7, #32]
 800320a:	f383 8810 	msr	PRIMASK, r3
}
 800320e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003210:	f3ef 8310 	mrs	r3, PRIMASK
 8003214:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003218:	647b      	str	r3, [r7, #68]	; 0x44
 800321a:	2301      	movs	r3, #1
 800321c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800321e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003220:	f383 8810 	msr	PRIMASK, r3
}
 8003224:	46c0      	nop			; (mov r8, r8)
 8003226:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	689a      	ldr	r2, [r3, #8]
 800322c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2101      	movs	r1, #1
 8003232:	438a      	bics	r2, r1
 8003234:	609a      	str	r2, [r3, #8]
 8003236:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003238:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800323a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800323c:	f383 8810 	msr	PRIMASK, r3
}
 8003240:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003242:	f3ef 8310 	mrs	r3, PRIMASK
 8003246:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003248:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800324a:	643b      	str	r3, [r7, #64]	; 0x40
 800324c:	2301      	movs	r3, #1
 800324e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003252:	f383 8810 	msr	PRIMASK, r3
}
 8003256:	46c0      	nop			; (mov r8, r8)
 8003258:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	689a      	ldr	r2, [r3, #8]
 800325e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2140      	movs	r1, #64	; 0x40
 8003264:	438a      	bics	r2, r1
 8003266:	609a      	str	r2, [r3, #8]
 8003268:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800326a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800326c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800326e:	f383 8810 	msr	PRIMASK, r3
}
 8003272:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003274:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003276:	228c      	movs	r2, #140	; 0x8c
 8003278:	2120      	movs	r1, #32
 800327a:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800327c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800327e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003280:	2b01      	cmp	r3, #1
 8003282:	d118      	bne.n	80032b6 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003284:	f3ef 8310 	mrs	r3, PRIMASK
 8003288:	60fb      	str	r3, [r7, #12]
  return(result);
 800328a:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800328c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800328e:	2301      	movs	r3, #1
 8003290:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	f383 8810 	msr	PRIMASK, r3
}
 8003298:	46c0      	nop			; (mov r8, r8)
 800329a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2110      	movs	r1, #16
 80032a6:	438a      	bics	r2, r1
 80032a8:	601a      	str	r2, [r3, #0]
 80032aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032ac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	f383 8810 	msr	PRIMASK, r3
}
 80032b4:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032b8:	2200      	movs	r2, #0
 80032ba:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d108      	bne.n	80032d6 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80032c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032c6:	225c      	movs	r2, #92	; 0x5c
 80032c8:	5a9a      	ldrh	r2, [r3, r2]
 80032ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032cc:	0011      	movs	r1, r2
 80032ce:	0018      	movs	r0, r3
 80032d0:	f7fd f88c 	bl	80003ec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80032d4:	e003      	b.n	80032de <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 80032d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032d8:	0018      	movs	r0, r3
 80032da:	f7ff fa9d 	bl	8002818 <HAL_UART_RxCpltCallback>
}
 80032de:	46c0      	nop			; (mov r8, r8)
 80032e0:	46bd      	mov	sp, r7
 80032e2:	b014      	add	sp, #80	; 0x50
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	46c0      	nop			; (mov r8, r8)
 80032e8:	fffffeff 	.word	0xfffffeff

080032ec <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2201      	movs	r2, #1
 80032fe:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003304:	2b01      	cmp	r3, #1
 8003306:	d10a      	bne.n	800331e <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	225c      	movs	r2, #92	; 0x5c
 800330c:	5a9b      	ldrh	r3, [r3, r2]
 800330e:	085b      	lsrs	r3, r3, #1
 8003310:	b29a      	uxth	r2, r3
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	0011      	movs	r1, r2
 8003316:	0018      	movs	r0, r3
 8003318:	f7fd f868 	bl	80003ec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800331c:	e003      	b.n	8003326 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	0018      	movs	r0, r3
 8003322:	f7ff fa81 	bl	8002828 <HAL_UART_RxHalfCpltCallback>
}
 8003326:	46c0      	nop			; (mov r8, r8)
 8003328:	46bd      	mov	sp, r7
 800332a:	b004      	add	sp, #16
 800332c:	bd80      	pop	{r7, pc}

0800332e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800332e:	b580      	push	{r7, lr}
 8003330:	b086      	sub	sp, #24
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800333a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	2288      	movs	r2, #136	; 0x88
 8003340:	589b      	ldr	r3, [r3, r2]
 8003342:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	228c      	movs	r2, #140	; 0x8c
 8003348:	589b      	ldr	r3, [r3, r2]
 800334a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	2280      	movs	r2, #128	; 0x80
 8003354:	4013      	ands	r3, r2
 8003356:	2b80      	cmp	r3, #128	; 0x80
 8003358:	d10a      	bne.n	8003370 <UART_DMAError+0x42>
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	2b21      	cmp	r3, #33	; 0x21
 800335e:	d107      	bne.n	8003370 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	2256      	movs	r2, #86	; 0x56
 8003364:	2100      	movs	r1, #0
 8003366:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	0018      	movs	r0, r3
 800336c:	f7ff fe80 	bl	8003070 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	2240      	movs	r2, #64	; 0x40
 8003378:	4013      	ands	r3, r2
 800337a:	2b40      	cmp	r3, #64	; 0x40
 800337c:	d10a      	bne.n	8003394 <UART_DMAError+0x66>
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2b22      	cmp	r3, #34	; 0x22
 8003382:	d107      	bne.n	8003394 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	225e      	movs	r2, #94	; 0x5e
 8003388:	2100      	movs	r1, #0
 800338a:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	0018      	movs	r0, r3
 8003390:	f7ff feae 	bl	80030f0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	2290      	movs	r2, #144	; 0x90
 8003398:	589b      	ldr	r3, [r3, r2]
 800339a:	2210      	movs	r2, #16
 800339c:	431a      	orrs	r2, r3
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	2190      	movs	r1, #144	; 0x90
 80033a2:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	0018      	movs	r0, r3
 80033a8:	f7ff fa46 	bl	8002838 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80033ac:	46c0      	nop			; (mov r8, r8)
 80033ae:	46bd      	mov	sp, r7
 80033b0:	b006      	add	sp, #24
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2284      	movs	r2, #132	; 0x84
 80033c0:	5c9b      	ldrb	r3, [r3, r2]
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d101      	bne.n	80033ca <HAL_UARTEx_DisableFifoMode+0x16>
 80033c6:	2302      	movs	r3, #2
 80033c8:	e027      	b.n	800341a <HAL_UARTEx_DisableFifoMode+0x66>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2284      	movs	r2, #132	; 0x84
 80033ce:	2101      	movs	r1, #1
 80033d0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2288      	movs	r2, #136	; 0x88
 80033d6:	2124      	movs	r1, #36	; 0x24
 80033d8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2101      	movs	r1, #1
 80033ee:	438a      	bics	r2, r1
 80033f0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	4a0b      	ldr	r2, [pc, #44]	; (8003424 <HAL_UARTEx_DisableFifoMode+0x70>)
 80033f6:	4013      	ands	r3, r2
 80033f8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68fa      	ldr	r2, [r7, #12]
 8003406:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2288      	movs	r2, #136	; 0x88
 800340c:	2120      	movs	r1, #32
 800340e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2284      	movs	r2, #132	; 0x84
 8003414:	2100      	movs	r1, #0
 8003416:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003418:	2300      	movs	r3, #0
}
 800341a:	0018      	movs	r0, r3
 800341c:	46bd      	mov	sp, r7
 800341e:	b004      	add	sp, #16
 8003420:	bd80      	pop	{r7, pc}
 8003422:	46c0      	nop			; (mov r8, r8)
 8003424:	dfffffff 	.word	0xdfffffff

08003428 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2284      	movs	r2, #132	; 0x84
 8003436:	5c9b      	ldrb	r3, [r3, r2]
 8003438:	2b01      	cmp	r3, #1
 800343a:	d101      	bne.n	8003440 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800343c:	2302      	movs	r3, #2
 800343e:	e02e      	b.n	800349e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2284      	movs	r2, #132	; 0x84
 8003444:	2101      	movs	r1, #1
 8003446:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2288      	movs	r2, #136	; 0x88
 800344c:	2124      	movs	r1, #36	; 0x24
 800344e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2101      	movs	r1, #1
 8003464:	438a      	bics	r2, r1
 8003466:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	00db      	lsls	r3, r3, #3
 8003470:	08d9      	lsrs	r1, r3, #3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	683a      	ldr	r2, [r7, #0]
 8003478:	430a      	orrs	r2, r1
 800347a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	0018      	movs	r0, r3
 8003480:	f000 f8bc 	bl	80035fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68fa      	ldr	r2, [r7, #12]
 800348a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2288      	movs	r2, #136	; 0x88
 8003490:	2120      	movs	r1, #32
 8003492:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2284      	movs	r2, #132	; 0x84
 8003498:	2100      	movs	r1, #0
 800349a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	0018      	movs	r0, r3
 80034a0:	46bd      	mov	sp, r7
 80034a2:	b004      	add	sp, #16
 80034a4:	bd80      	pop	{r7, pc}
	...

080034a8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2284      	movs	r2, #132	; 0x84
 80034b6:	5c9b      	ldrb	r3, [r3, r2]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d101      	bne.n	80034c0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80034bc:	2302      	movs	r3, #2
 80034be:	e02f      	b.n	8003520 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2284      	movs	r2, #132	; 0x84
 80034c4:	2101      	movs	r1, #1
 80034c6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2288      	movs	r2, #136	; 0x88
 80034cc:	2124      	movs	r1, #36	; 0x24
 80034ce:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2101      	movs	r1, #1
 80034e4:	438a      	bics	r2, r1
 80034e6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	4a0e      	ldr	r2, [pc, #56]	; (8003528 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80034f0:	4013      	ands	r3, r2
 80034f2:	0019      	movs	r1, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	683a      	ldr	r2, [r7, #0]
 80034fa:	430a      	orrs	r2, r1
 80034fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	0018      	movs	r0, r3
 8003502:	f000 f87b 	bl	80035fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68fa      	ldr	r2, [r7, #12]
 800350c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2288      	movs	r2, #136	; 0x88
 8003512:	2120      	movs	r1, #32
 8003514:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2284      	movs	r2, #132	; 0x84
 800351a:	2100      	movs	r1, #0
 800351c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800351e:	2300      	movs	r3, #0
}
 8003520:	0018      	movs	r0, r3
 8003522:	46bd      	mov	sp, r7
 8003524:	b004      	add	sp, #16
 8003526:	bd80      	pop	{r7, pc}
 8003528:	f1ffffff 	.word	0xf1ffffff

0800352c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800352c:	b5b0      	push	{r4, r5, r7, lr}
 800352e:	b08a      	sub	sp, #40	; 0x28
 8003530:	af00      	add	r7, sp, #0
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	1dbb      	adds	r3, r7, #6
 8003538:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	228c      	movs	r2, #140	; 0x8c
 800353e:	589b      	ldr	r3, [r3, r2]
 8003540:	2b20      	cmp	r3, #32
 8003542:	d156      	bne.n	80035f2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d003      	beq.n	8003552 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800354a:	1dbb      	adds	r3, r7, #6
 800354c:	881b      	ldrh	r3, [r3, #0]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d101      	bne.n	8003556 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e04e      	b.n	80035f4 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	689a      	ldr	r2, [r3, #8]
 800355a:	2380      	movs	r3, #128	; 0x80
 800355c:	015b      	lsls	r3, r3, #5
 800355e:	429a      	cmp	r2, r3
 8003560:	d109      	bne.n	8003576 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d105      	bne.n	8003576 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	2201      	movs	r2, #1
 800356e:	4013      	ands	r3, r2
 8003570:	d001      	beq.n	8003576 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e03e      	b.n	80035f4 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2201      	movs	r2, #1
 800357a:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8003582:	2527      	movs	r5, #39	; 0x27
 8003584:	197c      	adds	r4, r7, r5
 8003586:	1dbb      	adds	r3, r7, #6
 8003588:	881a      	ldrh	r2, [r3, #0]
 800358a:	68b9      	ldr	r1, [r7, #8]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	0018      	movs	r0, r3
 8003590:	f7ff fcc8 	bl	8002f24 <UART_Start_Receive_DMA>
 8003594:	0003      	movs	r3, r0
 8003596:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8003598:	197b      	adds	r3, r7, r5
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d124      	bne.n	80035ea <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d11c      	bne.n	80035e2 <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2210      	movs	r2, #16
 80035ae:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035b0:	f3ef 8310 	mrs	r3, PRIMASK
 80035b4:	617b      	str	r3, [r7, #20]
  return(result);
 80035b6:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035b8:	623b      	str	r3, [r7, #32]
 80035ba:	2301      	movs	r3, #1
 80035bc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	f383 8810 	msr	PRIMASK, r3
}
 80035c4:	46c0      	nop			; (mov r8, r8)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2110      	movs	r1, #16
 80035d2:	430a      	orrs	r2, r1
 80035d4:	601a      	str	r2, [r3, #0]
 80035d6:	6a3b      	ldr	r3, [r7, #32]
 80035d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	f383 8810 	msr	PRIMASK, r3
}
 80035e0:	e003      	b.n	80035ea <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80035e2:	2327      	movs	r3, #39	; 0x27
 80035e4:	18fb      	adds	r3, r7, r3
 80035e6:	2201      	movs	r2, #1
 80035e8:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 80035ea:	2327      	movs	r3, #39	; 0x27
 80035ec:	18fb      	adds	r3, r7, r3
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	e000      	b.n	80035f4 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 80035f2:	2302      	movs	r3, #2
  }
}
 80035f4:	0018      	movs	r0, r3
 80035f6:	46bd      	mov	sp, r7
 80035f8:	b00a      	add	sp, #40	; 0x28
 80035fa:	bdb0      	pop	{r4, r5, r7, pc}

080035fc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80035fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035fe:	b085      	sub	sp, #20
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003608:	2b00      	cmp	r3, #0
 800360a:	d108      	bne.n	800361e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	226a      	movs	r2, #106	; 0x6a
 8003610:	2101      	movs	r1, #1
 8003612:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2268      	movs	r2, #104	; 0x68
 8003618:	2101      	movs	r1, #1
 800361a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800361c:	e043      	b.n	80036a6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800361e:	260f      	movs	r6, #15
 8003620:	19bb      	adds	r3, r7, r6
 8003622:	2208      	movs	r2, #8
 8003624:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003626:	200e      	movs	r0, #14
 8003628:	183b      	adds	r3, r7, r0
 800362a:	2208      	movs	r2, #8
 800362c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	0e5b      	lsrs	r3, r3, #25
 8003636:	b2da      	uxtb	r2, r3
 8003638:	240d      	movs	r4, #13
 800363a:	193b      	adds	r3, r7, r4
 800363c:	2107      	movs	r1, #7
 800363e:	400a      	ands	r2, r1
 8003640:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	0f5b      	lsrs	r3, r3, #29
 800364a:	b2da      	uxtb	r2, r3
 800364c:	250c      	movs	r5, #12
 800364e:	197b      	adds	r3, r7, r5
 8003650:	2107      	movs	r1, #7
 8003652:	400a      	ands	r2, r1
 8003654:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003656:	183b      	adds	r3, r7, r0
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	197a      	adds	r2, r7, r5
 800365c:	7812      	ldrb	r2, [r2, #0]
 800365e:	4914      	ldr	r1, [pc, #80]	; (80036b0 <UARTEx_SetNbDataToProcess+0xb4>)
 8003660:	5c8a      	ldrb	r2, [r1, r2]
 8003662:	435a      	muls	r2, r3
 8003664:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003666:	197b      	adds	r3, r7, r5
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	4a12      	ldr	r2, [pc, #72]	; (80036b4 <UARTEx_SetNbDataToProcess+0xb8>)
 800366c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800366e:	0019      	movs	r1, r3
 8003670:	f7fc fdd0 	bl	8000214 <__divsi3>
 8003674:	0003      	movs	r3, r0
 8003676:	b299      	uxth	r1, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	226a      	movs	r2, #106	; 0x6a
 800367c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800367e:	19bb      	adds	r3, r7, r6
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	193a      	adds	r2, r7, r4
 8003684:	7812      	ldrb	r2, [r2, #0]
 8003686:	490a      	ldr	r1, [pc, #40]	; (80036b0 <UARTEx_SetNbDataToProcess+0xb4>)
 8003688:	5c8a      	ldrb	r2, [r1, r2]
 800368a:	435a      	muls	r2, r3
 800368c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800368e:	193b      	adds	r3, r7, r4
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	4a08      	ldr	r2, [pc, #32]	; (80036b4 <UARTEx_SetNbDataToProcess+0xb8>)
 8003694:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003696:	0019      	movs	r1, r3
 8003698:	f7fc fdbc 	bl	8000214 <__divsi3>
 800369c:	0003      	movs	r3, r0
 800369e:	b299      	uxth	r1, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2268      	movs	r2, #104	; 0x68
 80036a4:	5299      	strh	r1, [r3, r2]
}
 80036a6:	46c0      	nop			; (mov r8, r8)
 80036a8:	46bd      	mov	sp, r7
 80036aa:	b005      	add	sp, #20
 80036ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036ae:	46c0      	nop			; (mov r8, r8)
 80036b0:	080039dc 	.word	0x080039dc
 80036b4:	080039e4 	.word	0x080039e4

080036b8 <memset>:
 80036b8:	0003      	movs	r3, r0
 80036ba:	1882      	adds	r2, r0, r2
 80036bc:	4293      	cmp	r3, r2
 80036be:	d100      	bne.n	80036c2 <memset+0xa>
 80036c0:	4770      	bx	lr
 80036c2:	7019      	strb	r1, [r3, #0]
 80036c4:	3301      	adds	r3, #1
 80036c6:	e7f9      	b.n	80036bc <memset+0x4>

080036c8 <__libc_init_array>:
 80036c8:	b570      	push	{r4, r5, r6, lr}
 80036ca:	2600      	movs	r6, #0
 80036cc:	4c0c      	ldr	r4, [pc, #48]	; (8003700 <__libc_init_array+0x38>)
 80036ce:	4d0d      	ldr	r5, [pc, #52]	; (8003704 <__libc_init_array+0x3c>)
 80036d0:	1b64      	subs	r4, r4, r5
 80036d2:	10a4      	asrs	r4, r4, #2
 80036d4:	42a6      	cmp	r6, r4
 80036d6:	d109      	bne.n	80036ec <__libc_init_array+0x24>
 80036d8:	2600      	movs	r6, #0
 80036da:	f000 f819 	bl	8003710 <_init>
 80036de:	4c0a      	ldr	r4, [pc, #40]	; (8003708 <__libc_init_array+0x40>)
 80036e0:	4d0a      	ldr	r5, [pc, #40]	; (800370c <__libc_init_array+0x44>)
 80036e2:	1b64      	subs	r4, r4, r5
 80036e4:	10a4      	asrs	r4, r4, #2
 80036e6:	42a6      	cmp	r6, r4
 80036e8:	d105      	bne.n	80036f6 <__libc_init_array+0x2e>
 80036ea:	bd70      	pop	{r4, r5, r6, pc}
 80036ec:	00b3      	lsls	r3, r6, #2
 80036ee:	58eb      	ldr	r3, [r5, r3]
 80036f0:	4798      	blx	r3
 80036f2:	3601      	adds	r6, #1
 80036f4:	e7ee      	b.n	80036d4 <__libc_init_array+0xc>
 80036f6:	00b3      	lsls	r3, r6, #2
 80036f8:	58eb      	ldr	r3, [r5, r3]
 80036fa:	4798      	blx	r3
 80036fc:	3601      	adds	r6, #1
 80036fe:	e7f2      	b.n	80036e6 <__libc_init_array+0x1e>
 8003700:	080039ec 	.word	0x080039ec
 8003704:	080039ec 	.word	0x080039ec
 8003708:	080039f0 	.word	0x080039f0
 800370c:	080039ec 	.word	0x080039ec

08003710 <_init>:
 8003710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003712:	46c0      	nop			; (mov r8, r8)
 8003714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003716:	bc08      	pop	{r3}
 8003718:	469e      	mov	lr, r3
 800371a:	4770      	bx	lr

0800371c <_fini>:
 800371c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800371e:	46c0      	nop			; (mov r8, r8)
 8003720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003722:	bc08      	pop	{r3}
 8003724:	469e      	mov	lr, r3
 8003726:	4770      	bx	lr
